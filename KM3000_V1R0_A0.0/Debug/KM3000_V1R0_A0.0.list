
KM3000_V1R0_A0.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d5b8  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  0800d764  0800d764  0000e764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d7b4  0800d7b4  0000f3a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d7b4  0800d7b4  0000e7b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d7bc  0800d7bc  0000f3a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000020  0800d7bc  0800d7bc  0000e7bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d7dc  0800d7dc  0000e7dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003a4  20000000  0800d7e0  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000dcc  200003a4  0800db84  0000f3a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001170  0800db84  00010170  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f3a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005231a  00000000  00000000  0000f3d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007d6b  00000000  00000000  000616ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d70  00000000  00000000  00069460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016c6  00000000  00000000  0006b1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00033bd0  00000000  00000000  0006c896  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d837  00000000  00000000  000a0466  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001245a3  00000000  00000000  000cdc9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001f2240  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b20  00000000  00000000  001f2284  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  001f9da4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	200003a4 	.word	0x200003a4
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800d74c 	.word	0x0800d74c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	200003a8 	.word	0x200003a8
 80001e8:	0800d74c 	.word	0x0800d74c

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <_ZN15displayPhysical6enableEb>:

////////////
// ENABLE //
////////////

void displayPhysical::enable( bool onOff ){
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
 80004e4:	460b      	mov	r3, r1
 80004e6:	70fb      	strb	r3, [r7, #3]
	if ( !onOff ){					//	Si esta apagado
 80004e8:	78fb      	ldrb	r3, [r7, #3]
 80004ea:	f083 0301 	eor.w	r3, r3, #1
 80004ee:	b2db      	uxtb	r3, r3
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d003      	beq.n	80004fc <_ZN15displayPhysical6enableEb+0x20>
		this->flagEnable	= 0;	//	Deshabilita
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	2200      	movs	r2, #0
 80004f8:	701a      	strb	r2, [r3, #0]
	}
	else{							//	Si esta prendido
		this->flagEnable	= 1;	//	Habilita
	}
}
 80004fa:	e002      	b.n	8000502 <_ZN15displayPhysical6enableEb+0x26>
		this->flagEnable	= 1;	//	Habilita
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	2201      	movs	r2, #1
 8000500:	701a      	strb	r2, [r3, #0]
}
 8000502:	bf00      	nop
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr

0800050e <_Z12bytestowritett>:
/*****************************************************************************************************************************************/
uint8_t bytes_temp[4];

// function to determine the remaining bytes
uint16_t bytestowrite (uint16_t size, uint16_t offset)
{
 800050e:	b480      	push	{r7}
 8000510:	b083      	sub	sp, #12
 8000512:	af00      	add	r7, sp, #0
 8000514:	4603      	mov	r3, r0
 8000516:	460a      	mov	r2, r1
 8000518:	80fb      	strh	r3, [r7, #6]
 800051a:	4613      	mov	r3, r2
 800051c:	80bb      	strh	r3, [r7, #4]
	if ((size+offset)<PAGE_SIZE) return size;
 800051e:	88fa      	ldrh	r2, [r7, #6]
 8000520:	88bb      	ldrh	r3, [r7, #4]
 8000522:	4413      	add	r3, r2
 8000524:	2b3f      	cmp	r3, #63	@ 0x3f
 8000526:	dc01      	bgt.n	800052c <_Z12bytestowritett+0x1e>
 8000528:	88fb      	ldrh	r3, [r7, #6]
 800052a:	e003      	b.n	8000534 <_Z12bytestowritett+0x26>
	else return PAGE_SIZE-offset;
 800052c:	88bb      	ldrh	r3, [r7, #4]
 800052e:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8000532:	b29b      	uxth	r3, r3
}
 8000534:	4618      	mov	r0, r3
 8000536:	370c      	adds	r7, #12
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr

08000540 <_Z11EEPROM_ReadttPht>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Read (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b08e      	sub	sp, #56	@ 0x38
 8000544:	af04      	add	r7, sp, #16
 8000546:	60ba      	str	r2, [r7, #8]
 8000548:	461a      	mov	r2, r3
 800054a:	4603      	mov	r3, r0
 800054c:	81fb      	strh	r3, [r7, #14]
 800054e:	460b      	mov	r3, r1
 8000550:	81bb      	strh	r3, [r7, #12]
 8000552:	4613      	mov	r3, r2
 8000554:	80fb      	strh	r3, [r7, #6]
	int paddrposition = log(PAGE_SIZE)/log(2);
 8000556:	2306      	movs	r3, #6
 8000558:	61fb      	str	r3, [r7, #28]

	uint16_t startPage = page;
 800055a:	89fb      	ldrh	r3, [r7, #14]
 800055c:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 800055e:	88fa      	ldrh	r2, [r7, #6]
 8000560:	89bb      	ldrh	r3, [r7, #12]
 8000562:	4413      	add	r3, r2
 8000564:	2b00      	cmp	r3, #0
 8000566:	da00      	bge.n	800056a <_Z11EEPROM_ReadttPht+0x2a>
 8000568:	333f      	adds	r3, #63	@ 0x3f
 800056a:	119b      	asrs	r3, r3, #6
 800056c:	b29a      	uxth	r2, r3
 800056e:	89fb      	ldrh	r3, [r7, #14]
 8000570:	4413      	add	r3, r2
 8000572:	837b      	strh	r3, [r7, #26]

	uint16_t numofpages = (endPage-startPage) + 1;
 8000574:	8b7a      	ldrh	r2, [r7, #26]
 8000576:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000578:	1ad3      	subs	r3, r2, r3
 800057a:	b29b      	uxth	r3, r3
 800057c:	3301      	adds	r3, #1
 800057e:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 8000580:	2300      	movs	r3, #0
 8000582:	84bb      	strh	r3, [r7, #36]	@ 0x24

	for (int i=0; i<numofpages; i++)
 8000584:	2300      	movs	r3, #0
 8000586:	623b      	str	r3, [r7, #32]
 8000588:	e031      	b.n	80005ee <_Z11EEPROM_ReadttPht+0xae>
	{
		uint16_t MemAddress = startPage<<paddrposition | offset;
 800058a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800058c:	69fb      	ldr	r3, [r7, #28]
 800058e:	fa02 f303 	lsl.w	r3, r2, r3
 8000592:	b21a      	sxth	r2, r3
 8000594:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000598:	4313      	orrs	r3, r2
 800059a:	b21b      	sxth	r3, r3
 800059c:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);
 800059e:	89ba      	ldrh	r2, [r7, #12]
 80005a0:	88fb      	ldrh	r3, [r7, #6]
 80005a2:	4611      	mov	r1, r2
 80005a4:	4618      	mov	r0, r3
 80005a6:	f7ff ffb2 	bl	800050e <_Z12bytestowritett>
 80005aa:	4603      	mov	r3, r0
 80005ac:	82bb      	strh	r3, [r7, #20]
		HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);
 80005ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80005b0:	68ba      	ldr	r2, [r7, #8]
 80005b2:	4413      	add	r3, r2
 80005b4:	8af9      	ldrh	r1, [r7, #22]
 80005b6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80005ba:	9202      	str	r2, [sp, #8]
 80005bc:	8aba      	ldrh	r2, [r7, #20]
 80005be:	9201      	str	r2, [sp, #4]
 80005c0:	9300      	str	r3, [sp, #0]
 80005c2:	2302      	movs	r3, #2
 80005c4:	460a      	mov	r2, r1
 80005c6:	21a0      	movs	r1, #160	@ 0xa0
 80005c8:	480d      	ldr	r0, [pc, #52]	@ (8000600 <_Z11EEPROM_ReadttPht+0xc0>)
 80005ca:	f007 fd8d 	bl	80080e8 <HAL_I2C_Mem_Read>
		startPage += 1;
 80005ce:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80005d0:	3301      	adds	r3, #1
 80005d2:	84fb      	strh	r3, [r7, #38]	@ 0x26
		offset=0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;
 80005d8:	88fa      	ldrh	r2, [r7, #6]
 80005da:	8abb      	ldrh	r3, [r7, #20]
 80005dc:	1ad3      	subs	r3, r2, r3
 80005de:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;
 80005e0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80005e2:	8abb      	ldrh	r3, [r7, #20]
 80005e4:	4413      	add	r3, r2
 80005e6:	84bb      	strh	r3, [r7, #36]	@ 0x24
	for (int i=0; i<numofpages; i++)
 80005e8:	6a3b      	ldr	r3, [r7, #32]
 80005ea:	3301      	adds	r3, #1
 80005ec:	623b      	str	r3, [r7, #32]
 80005ee:	8b3b      	ldrh	r3, [r7, #24]
 80005f0:	6a3a      	ldr	r2, [r7, #32]
 80005f2:	429a      	cmp	r2, r3
 80005f4:	dbc9      	blt.n	800058a <_Z11EEPROM_ReadttPht+0x4a>
	}
}
 80005f6:	bf00      	nop
 80005f8:	bf00      	nop
 80005fa:	3728      	adds	r7, #40	@ 0x28
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	200006c4 	.word	0x200006c4

08000604 <_Z3appv>:

/////////
// APP //
/////////

void app(){
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
	appContent();
 8000608:	f000 f804 	bl	8000614 <_Z10appContentv>
	appLora();
 800060c:	f000 fb4c 	bl	8000ca8 <_Z7appLorav>
}
 8000610:	bf00      	nop
 8000612:	bd80      	pop	{r7, pc}

08000614 <_Z10appContentv>:
 * 			- Calcular valores a enviar
 * 			- Agregar comandos a Fifo
 * 			- Esperar relojes de TCP
 */

void appContent(){
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0

	switch ( stateContent ){
 8000618:	4b73      	ldr	r3, [pc, #460]	@ (80007e8 <_Z10appContentv+0x1d4>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2b06      	cmp	r3, #6
 800061e:	f200 831f 	bhi.w	8000c60 <_Z10appContentv+0x64c>
 8000622:	a201      	add	r2, pc, #4	@ (adr r2, 8000628 <_Z10appContentv+0x14>)
 8000624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000628:	08000645 	.word	0x08000645
 800062c:	08000661 	.word	0x08000661
 8000630:	080006e5 	.word	0x080006e5
 8000634:	08000831 	.word	0x08000831
 8000638:	08000a39 	.word	0x08000a39
 800063c:	08000bcf 	.word	0x08000bcf
 8000640:	08000c2f 	.word	0x08000c2f
	//////////////////////////
	// S0 - WAIT FOR ENABLE //
	//////////////////////////

	case 0:
		if ( loraDecision.enable() ){	// Si el chip esta habilitado
 8000644:	4869      	ldr	r0, [pc, #420]	@ (80007ec <_Z10appContentv+0x1d8>)
 8000646:	f003 fb01 	bl	8003c4c <_ZN12loraDecision6enableEv>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d003      	beq.n	8000658 <_Z10appContentv+0x44>
			stateContent	= 1;		// Pasa a S1
 8000650:	4b65      	ldr	r3, [pc, #404]	@ (80007e8 <_Z10appContentv+0x1d4>)
 8000652:	2201      	movs	r2, #1
 8000654:	701a      	strb	r2, [r3, #0]
		}
		else{							// Si no
			stateContent	= 0;		// Espera en S0
		}
		break;
 8000656:	e307      	b.n	8000c68 <_Z10appContentv+0x654>
			stateContent	= 0;		// Espera en S0
 8000658:	4b63      	ldr	r3, [pc, #396]	@ (80007e8 <_Z10appContentv+0x1d4>)
 800065a:	2200      	movs	r2, #0
 800065c:	701a      	strb	r2, [r3, #0]
		break;
 800065e:	e303      	b.n	8000c68 <_Z10appContentv+0x654>
	////////////////////////
	// S1 - WAIT FOR FLAG //
	////////////////////////

	case 1:
		bussyRN2903	= 0;
 8000660:	4b63      	ldr	r3, [pc, #396]	@ (80007f0 <_Z10appContentv+0x1dc>)
 8000662:	2200      	movs	r2, #0
 8000664:	701a      	strb	r2, [r3, #0]

		if ( !loraDecision.enable() ){			// Si no está habilitado
 8000666:	4861      	ldr	r0, [pc, #388]	@ (80007ec <_Z10appContentv+0x1d8>)
 8000668:	f003 faf0 	bl	8003c4c <_ZN12loraDecision6enableEv>
 800066c:	4603      	mov	r3, r0
 800066e:	f083 0301 	eor.w	r3, r3, #1
 8000672:	b2db      	uxtb	r3, r3
 8000674:	2b00      	cmp	r3, #0
 8000676:	d003      	beq.n	8000680 <_Z10appContentv+0x6c>
			stateContent	= 0;				// Vuelve a S0
 8000678:	4b5b      	ldr	r3, [pc, #364]	@ (80007e8 <_Z10appContentv+0x1d4>)
 800067a:	2200      	movs	r2, #0
 800067c:	701a      	strb	r2, [r3, #0]
			stateContent	= 4;				// Pasa a S4
		}
		else{									// Si no pasa nada
			stateContent	= 1;				// Espera en S1
		}
		break;
 800067e:	e2f3      	b.n	8000c68 <_Z10appContentv+0x654>
		else if ( fifoContent.available() ){	// Si hay
 8000680:	485c      	ldr	r0, [pc, #368]	@ (80007f4 <_Z10appContentv+0x1e0>)
 8000682:	f000 fdfb 	bl	800127c <_ZN12fifoCommands9availableEv>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d003      	beq.n	8000694 <_Z10appContentv+0x80>
			stateContent	= 5;				//
 800068c:	4b56      	ldr	r3, [pc, #344]	@ (80007e8 <_Z10appContentv+0x1d4>)
 800068e:	2205      	movs	r2, #5
 8000690:	701a      	strb	r2, [r3, #0]
		break;
 8000692:	e2e9      	b.n	8000c68 <_Z10appContentv+0x654>
		else if ( flagSetData ){				// Si se guardó datos de GPS
 8000694:	4b58      	ldr	r3, [pc, #352]	@ (80007f8 <_Z10appContentv+0x1e4>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d009      	beq.n	80006b0 <_Z10appContentv+0x9c>
			count_1_data++;
 800069c:	4b57      	ldr	r3, [pc, #348]	@ (80007fc <_Z10appContentv+0x1e8>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	3301      	adds	r3, #1
 80006a2:	b2da      	uxtb	r2, r3
 80006a4:	4b55      	ldr	r3, [pc, #340]	@ (80007fc <_Z10appContentv+0x1e8>)
 80006a6:	701a      	strb	r2, [r3, #0]
			stateContent	= 2;				// Pasa a S3
 80006a8:	4b4f      	ldr	r3, [pc, #316]	@ (80007e8 <_Z10appContentv+0x1d4>)
 80006aa:	2202      	movs	r2, #2
 80006ac:	701a      	strb	r2, [r3, #0]
		break;
 80006ae:	e2db      	b.n	8000c68 <_Z10appContentv+0x654>
		else if ( flagGpsSaved ){				// Si pide guardar datos
 80006b0:	4b53      	ldr	r3, [pc, #332]	@ (8000800 <_Z10appContentv+0x1ec>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d009      	beq.n	80006cc <_Z10appContentv+0xb8>
			count_0_gps++;
 80006b8:	4b52      	ldr	r3, [pc, #328]	@ (8000804 <_Z10appContentv+0x1f0>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	3301      	adds	r3, #1
 80006be:	b2da      	uxtb	r2, r3
 80006c0:	4b50      	ldr	r3, [pc, #320]	@ (8000804 <_Z10appContentv+0x1f0>)
 80006c2:	701a      	strb	r2, [r3, #0]
			stateContent	= 3;				// Pasa a S2
 80006c4:	4b48      	ldr	r3, [pc, #288]	@ (80007e8 <_Z10appContentv+0x1d4>)
 80006c6:	2203      	movs	r2, #3
 80006c8:	701a      	strb	r2, [r3, #0]
		break;
 80006ca:	e2cd      	b.n	8000c68 <_Z10appContentv+0x654>
		else if ( flagSetSys ){					// Si se guardan datos de sistema
 80006cc:	4b4e      	ldr	r3, [pc, #312]	@ (8000808 <_Z10appContentv+0x1f4>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d003      	beq.n	80006dc <_Z10appContentv+0xc8>
			stateContent	= 4;				// Pasa a S4
 80006d4:	4b44      	ldr	r3, [pc, #272]	@ (80007e8 <_Z10appContentv+0x1d4>)
 80006d6:	2204      	movs	r2, #4
 80006d8:	701a      	strb	r2, [r3, #0]
		break;
 80006da:	e2c5      	b.n	8000c68 <_Z10appContentv+0x654>
			stateContent	= 1;				// Espera en S1
 80006dc:	4b42      	ldr	r3, [pc, #264]	@ (80007e8 <_Z10appContentv+0x1d4>)
 80006de:	2201      	movs	r2, #1
 80006e0:	701a      	strb	r2, [r3, #0]
		break;
 80006e2:	e2c1      	b.n	8000c68 <_Z10appContentv+0x654>
	////////////////////////////
	// S2 - SAVE SENSORS DATA //
	////////////////////////////

	case 2:
		flagSetData	= 0;					// Reinicia indicador de enviar datos
 80006e4:	4b44      	ldr	r3, [pc, #272]	@ (80007f8 <_Z10appContentv+0x1e4>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	701a      	strb	r2, [r3, #0]

		tempApp		= tempApp/10;			// Reduce resolucion de temperatura
 80006ea:	4b48      	ldr	r3, [pc, #288]	@ (800080c <_Z10appContentv+0x1f8>)
 80006ec:	881b      	ldrh	r3, [r3, #0]
 80006ee:	4a48      	ldr	r2, [pc, #288]	@ (8000810 <_Z10appContentv+0x1fc>)
 80006f0:	fba2 2303 	umull	r2, r3, r2, r3
 80006f4:	08db      	lsrs	r3, r3, #3
 80006f6:	b29a      	uxth	r2, r3
 80006f8:	4b44      	ldr	r3, [pc, #272]	@ (800080c <_Z10appContentv+0x1f8>)
 80006fa:	801a      	strh	r2, [r3, #0]
		humApp		= humApp/10;			// Reduce resolucion de humedad
 80006fc:	4b45      	ldr	r3, [pc, #276]	@ (8000814 <_Z10appContentv+0x200>)
 80006fe:	881b      	ldrh	r3, [r3, #0]
 8000700:	4a43      	ldr	r2, [pc, #268]	@ (8000810 <_Z10appContentv+0x1fc>)
 8000702:	fba2 2303 	umull	r2, r3, r2, r3
 8000706:	08db      	lsrs	r3, r3, #3
 8000708:	b29a      	uxth	r2, r3
 800070a:	4b42      	ldr	r3, [pc, #264]	@ (8000814 <_Z10appContentv+0x200>)
 800070c:	801a      	strh	r2, [r3, #0]

		content[0]	= '1';					// Indica que los datos van sobre puerto 1
 800070e:	4b42      	ldr	r3, [pc, #264]	@ (8000818 <_Z10appContentv+0x204>)
 8000710:	2231      	movs	r2, #49	@ 0x31
 8000712:	701a      	strb	r2, [r3, #0]

		a1_HCL	= alphaA/16;
 8000714:	4b41      	ldr	r3, [pc, #260]	@ (800081c <_Z10appContentv+0x208>)
 8000716:	881b      	ldrh	r3, [r3, #0]
 8000718:	091b      	lsrs	r3, r3, #4
 800071a:	b29b      	uxth	r3, r3
 800071c:	b2da      	uxtb	r2, r3
 800071e:	4b40      	ldr	r3, [pc, #256]	@ (8000820 <_Z10appContentv+0x20c>)
 8000720:	701a      	strb	r2, [r3, #0]
		b1_HCL	= alphaB/16;
 8000722:	4b40      	ldr	r3, [pc, #256]	@ (8000824 <_Z10appContentv+0x210>)
 8000724:	881b      	ldrh	r3, [r3, #0]
 8000726:	091b      	lsrs	r3, r3, #4
 8000728:	b29b      	uxth	r3, r3
 800072a:	b2da      	uxtb	r2, r3
 800072c:	4b3e      	ldr	r3, [pc, #248]	@ (8000828 <_Z10appContentv+0x214>)
 800072e:	701a      	strb	r2, [r3, #0]

		content[1]	= uint2hex_A(b1_HCL);	// Guarda primeros 4 bits de B1 HCL
 8000730:	4b3d      	ldr	r3, [pc, #244]	@ (8000828 <_Z10appContentv+0x214>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	4618      	mov	r0, r3
 8000736:	f000 fcab 	bl	8001090 <_Z10uint2hex_Ah>
 800073a:	4603      	mov	r3, r0
 800073c:	461a      	mov	r2, r3
 800073e:	4b36      	ldr	r3, [pc, #216]	@ (8000818 <_Z10appContentv+0x204>)
 8000740:	705a      	strb	r2, [r3, #1]
		content[2]	= uint2hex_B(b1_HCL);	// Guarda segundos 4 bits de B1 HCL
 8000742:	4b39      	ldr	r3, [pc, #228]	@ (8000828 <_Z10appContentv+0x214>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	4618      	mov	r0, r3
 8000748:	f000 fd08 	bl	800115c <_Z10uint2hex_Bh>
 800074c:	4603      	mov	r3, r0
 800074e:	461a      	mov	r2, r3
 8000750:	4b31      	ldr	r3, [pc, #196]	@ (8000818 <_Z10appContentv+0x204>)
 8000752:	709a      	strb	r2, [r3, #2]

		content[3]	= uint2hex_A(a1_HCL);	// Guarda primeros 4 bits de A1 HCL
 8000754:	4b32      	ldr	r3, [pc, #200]	@ (8000820 <_Z10appContentv+0x20c>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	4618      	mov	r0, r3
 800075a:	f000 fc99 	bl	8001090 <_Z10uint2hex_Ah>
 800075e:	4603      	mov	r3, r0
 8000760:	461a      	mov	r2, r3
 8000762:	4b2d      	ldr	r3, [pc, #180]	@ (8000818 <_Z10appContentv+0x204>)
 8000764:	70da      	strb	r2, [r3, #3]
		content[4] 	= uint2hex_B(a1_HCL);	// Guarda segundos 4 bits de A1 HCL
 8000766:	4b2e      	ldr	r3, [pc, #184]	@ (8000820 <_Z10appContentv+0x20c>)
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	4618      	mov	r0, r3
 800076c:	f000 fcf6 	bl	800115c <_Z10uint2hex_Bh>
 8000770:	4603      	mov	r3, r0
 8000772:	461a      	mov	r2, r3
 8000774:	4b28      	ldr	r3, [pc, #160]	@ (8000818 <_Z10appContentv+0x204>)
 8000776:	711a      	strb	r2, [r3, #4]

		content[5]	= uint2hex_A(tempApp);	// Guarda primeros 4 bits de Temperatura
 8000778:	4b24      	ldr	r3, [pc, #144]	@ (800080c <_Z10appContentv+0x1f8>)
 800077a:	881b      	ldrh	r3, [r3, #0]
 800077c:	b2db      	uxtb	r3, r3
 800077e:	4618      	mov	r0, r3
 8000780:	f000 fc86 	bl	8001090 <_Z10uint2hex_Ah>
 8000784:	4603      	mov	r3, r0
 8000786:	461a      	mov	r2, r3
 8000788:	4b23      	ldr	r3, [pc, #140]	@ (8000818 <_Z10appContentv+0x204>)
 800078a:	715a      	strb	r2, [r3, #5]
		content[6]  = uint2hex_B(tempApp);	// Guarda segundos 4 bits de Temperatura
 800078c:	4b1f      	ldr	r3, [pc, #124]	@ (800080c <_Z10appContentv+0x1f8>)
 800078e:	881b      	ldrh	r3, [r3, #0]
 8000790:	b2db      	uxtb	r3, r3
 8000792:	4618      	mov	r0, r3
 8000794:	f000 fce2 	bl	800115c <_Z10uint2hex_Bh>
 8000798:	4603      	mov	r3, r0
 800079a:	461a      	mov	r2, r3
 800079c:	4b1e      	ldr	r3, [pc, #120]	@ (8000818 <_Z10appContentv+0x204>)
 800079e:	719a      	strb	r2, [r3, #6]

		content[7] 	= uint2hex_A(humApp);	// Guarda primeros 4 bits de Humedad
 80007a0:	4b1c      	ldr	r3, [pc, #112]	@ (8000814 <_Z10appContentv+0x200>)
 80007a2:	881b      	ldrh	r3, [r3, #0]
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	4618      	mov	r0, r3
 80007a8:	f000 fc72 	bl	8001090 <_Z10uint2hex_Ah>
 80007ac:	4603      	mov	r3, r0
 80007ae:	461a      	mov	r2, r3
 80007b0:	4b19      	ldr	r3, [pc, #100]	@ (8000818 <_Z10appContentv+0x204>)
 80007b2:	71da      	strb	r2, [r3, #7]
		content[8]	= uint2hex_B(humApp);	// Guarda segundos 4 bits de Humedad
 80007b4:	4b17      	ldr	r3, [pc, #92]	@ (8000814 <_Z10appContentv+0x200>)
 80007b6:	881b      	ldrh	r3, [r3, #0]
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	4618      	mov	r0, r3
 80007bc:	f000 fcce 	bl	800115c <_Z10uint2hex_Bh>
 80007c0:	4603      	mov	r3, r0
 80007c2:	461a      	mov	r2, r3
 80007c4:	4b14      	ldr	r3, [pc, #80]	@ (8000818 <_Z10appContentv+0x204>)
 80007c6:	721a      	strb	r2, [r3, #8]

		qttyMsgData++;
 80007c8:	4b18      	ldr	r3, [pc, #96]	@ (800082c <_Z10appContentv+0x218>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	3301      	adds	r3, #1
 80007ce:	b2da      	uxtb	r2, r3
 80007d0:	4b16      	ldr	r3, [pc, #88]	@ (800082c <_Z10appContentv+0x218>)
 80007d2:	701a      	strb	r2, [r3, #0]

		fifoContent.add(content, sizeof(content));	// Envia paquete a la FIFO
 80007d4:	2209      	movs	r2, #9
 80007d6:	4910      	ldr	r1, [pc, #64]	@ (8000818 <_Z10appContentv+0x204>)
 80007d8:	4806      	ldr	r0, [pc, #24]	@ (80007f4 <_Z10appContentv+0x1e0>)
 80007da:	f000 fd5c 	bl	8001296 <_ZN12fifoCommands3addEPhh>
		stateContent 	= 5;						// Pasa a S5
 80007de:	4b02      	ldr	r3, [pc, #8]	@ (80007e8 <_Z10appContentv+0x1d4>)
 80007e0:	2205      	movs	r2, #5
 80007e2:	701a      	strb	r2, [r3, #0]
		break;
 80007e4:	e240      	b.n	8000c68 <_Z10appContentv+0x654>
 80007e6:	bf00      	nop
 80007e8:	200003c0 	.word	0x200003c0
 80007ec:	20000b78 	.word	0x20000b78
 80007f0:	200003c4 	.word	0x200003c4
 80007f4:	20001094 	.word	0x20001094
 80007f8:	20001150 	.word	0x20001150
 80007fc:	200003c2 	.word	0x200003c2
 8000800:	2000113a 	.word	0x2000113a
 8000804:	200003c1 	.word	0x200003c1
 8000808:	2000115c 	.word	0x2000115c
 800080c:	20000512 	.word	0x20000512
 8000810:	cccccccd 	.word	0xcccccccd
 8000814:	20000514 	.word	0x20000514
 8000818:	200003c8 	.word	0x200003c8
 800081c:	2000043e 	.word	0x2000043e
 8000820:	200003de 	.word	0x200003de
 8000824:	20000440 	.word	0x20000440
 8000828:	200003dd 	.word	0x200003dd
 800082c:	200003ea 	.word	0x200003ea
	////////////////////////
	// S3 - SAVE LAT/LONG //
	////////////////////////

	case 3:
		flagGpsSaved	= 0;						// Reinicia indicado de enviar GPS
 8000830:	4b76      	ldr	r3, [pc, #472]	@ (8000a0c <_Z10appContentv+0x3f8>)
 8000832:	2200      	movs	r2, #0
 8000834:	701a      	strb	r2, [r3, #0]

		latitudSend		= latitud;					// Copia valor de latitud
 8000836:	4b76      	ldr	r3, [pc, #472]	@ (8000a10 <_Z10appContentv+0x3fc>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4a76      	ldr	r2, [pc, #472]	@ (8000a14 <_Z10appContentv+0x400>)
 800083c:	6013      	str	r3, [r2, #0]
		longitudSend	= longitud;					// Copia valor de longitud
 800083e:	4b76      	ldr	r3, [pc, #472]	@ (8000a18 <_Z10appContentv+0x404>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4a76      	ldr	r2, [pc, #472]	@ (8000a1c <_Z10appContentv+0x408>)
 8000844:	6013      	str	r3, [r2, #0]

		content[0]	= '2';							// Indica que latitud va en puerto 2
 8000846:	4b76      	ldr	r3, [pc, #472]	@ (8000a20 <_Z10appContentv+0x40c>)
 8000848:	2232      	movs	r2, #50	@ 0x32
 800084a:	701a      	strb	r2, [r3, #0]

		content[1]	= uint2hex_A(ptrFloat_Lat[0]);	// Guarda primeros 4 bits de latitud - 1byte
 800084c:	4b75      	ldr	r3, [pc, #468]	@ (8000a24 <_Z10appContentv+0x410>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	4618      	mov	r0, r3
 8000854:	f000 fc1c 	bl	8001090 <_Z10uint2hex_Ah>
 8000858:	4603      	mov	r3, r0
 800085a:	461a      	mov	r2, r3
 800085c:	4b70      	ldr	r3, [pc, #448]	@ (8000a20 <_Z10appContentv+0x40c>)
 800085e:	705a      	strb	r2, [r3, #1]
		content[2]	= uint2hex_B(ptrFloat_Lat[0]);	// Guarda segundos 4 bits de latitud - 1byte
 8000860:	4b70      	ldr	r3, [pc, #448]	@ (8000a24 <_Z10appContentv+0x410>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	4618      	mov	r0, r3
 8000868:	f000 fc78 	bl	800115c <_Z10uint2hex_Bh>
 800086c:	4603      	mov	r3, r0
 800086e:	461a      	mov	r2, r3
 8000870:	4b6b      	ldr	r3, [pc, #428]	@ (8000a20 <_Z10appContentv+0x40c>)
 8000872:	709a      	strb	r2, [r3, #2]

		content[3]	= uint2hex_A(ptrFloat_Lat[1]);	// Guarda terceros 4 bits de latitud - 2byte
 8000874:	4b6b      	ldr	r3, [pc, #428]	@ (8000a24 <_Z10appContentv+0x410>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	3301      	adds	r3, #1
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	4618      	mov	r0, r3
 800087e:	f000 fc07 	bl	8001090 <_Z10uint2hex_Ah>
 8000882:	4603      	mov	r3, r0
 8000884:	461a      	mov	r2, r3
 8000886:	4b66      	ldr	r3, [pc, #408]	@ (8000a20 <_Z10appContentv+0x40c>)
 8000888:	70da      	strb	r2, [r3, #3]
		content[4] 	= uint2hex_B(ptrFloat_Lat[1]);	// Guarda cuartos 4 bits de latitud  - 2byte
 800088a:	4b66      	ldr	r3, [pc, #408]	@ (8000a24 <_Z10appContentv+0x410>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	3301      	adds	r3, #1
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	4618      	mov	r0, r3
 8000894:	f000 fc62 	bl	800115c <_Z10uint2hex_Bh>
 8000898:	4603      	mov	r3, r0
 800089a:	461a      	mov	r2, r3
 800089c:	4b60      	ldr	r3, [pc, #384]	@ (8000a20 <_Z10appContentv+0x40c>)
 800089e:	711a      	strb	r2, [r3, #4]

		content[5]	= uint2hex_A(ptrFloat_Lat[2]);	// Guarda quintos 4 bits de latitud  - 3byte
 80008a0:	4b60      	ldr	r3, [pc, #384]	@ (8000a24 <_Z10appContentv+0x410>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	3302      	adds	r3, #2
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	4618      	mov	r0, r3
 80008aa:	f000 fbf1 	bl	8001090 <_Z10uint2hex_Ah>
 80008ae:	4603      	mov	r3, r0
 80008b0:	461a      	mov	r2, r3
 80008b2:	4b5b      	ldr	r3, [pc, #364]	@ (8000a20 <_Z10appContentv+0x40c>)
 80008b4:	715a      	strb	r2, [r3, #5]
		content[6]  = uint2hex_B(ptrFloat_Lat[2]);	// Guarda sextos 4 bits de latitud   - 3byte
 80008b6:	4b5b      	ldr	r3, [pc, #364]	@ (8000a24 <_Z10appContentv+0x410>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	3302      	adds	r3, #2
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	4618      	mov	r0, r3
 80008c0:	f000 fc4c 	bl	800115c <_Z10uint2hex_Bh>
 80008c4:	4603      	mov	r3, r0
 80008c6:	461a      	mov	r2, r3
 80008c8:	4b55      	ldr	r3, [pc, #340]	@ (8000a20 <_Z10appContentv+0x40c>)
 80008ca:	719a      	strb	r2, [r3, #6]

		content[7] 	= uint2hex_A(ptrFloat_Lat[3]);	// Guarda septimos 4 bits de latitud - 4byte
 80008cc:	4b55      	ldr	r3, [pc, #340]	@ (8000a24 <_Z10appContentv+0x410>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	3303      	adds	r3, #3
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	4618      	mov	r0, r3
 80008d6:	f000 fbdb 	bl	8001090 <_Z10uint2hex_Ah>
 80008da:	4603      	mov	r3, r0
 80008dc:	461a      	mov	r2, r3
 80008de:	4b50      	ldr	r3, [pc, #320]	@ (8000a20 <_Z10appContentv+0x40c>)
 80008e0:	71da      	strb	r2, [r3, #7]
		content[8]	= uint2hex_B(ptrFloat_Lat[3]);	// Guarda octavos 4 bits de latitud  - 4byte
 80008e2:	4b50      	ldr	r3, [pc, #320]	@ (8000a24 <_Z10appContentv+0x410>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	3303      	adds	r3, #3
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	4618      	mov	r0, r3
 80008ec:	f000 fc36 	bl	800115c <_Z10uint2hex_Bh>
 80008f0:	4603      	mov	r3, r0
 80008f2:	461a      	mov	r2, r3
 80008f4:	4b4a      	ldr	r3, [pc, #296]	@ (8000a20 <_Z10appContentv+0x40c>)
 80008f6:	721a      	strb	r2, [r3, #8]

		fifoContent.add(content, sizeof(content));	// Añade contenido de latitud a FIFO
 80008f8:	2209      	movs	r2, #9
 80008fa:	4949      	ldr	r1, [pc, #292]	@ (8000a20 <_Z10appContentv+0x40c>)
 80008fc:	484a      	ldr	r0, [pc, #296]	@ (8000a28 <_Z10appContentv+0x414>)
 80008fe:	f000 fcca 	bl	8001296 <_ZN12fifoCommands3addEPhh>
		fifoContent.add(content, sizeof(content));	// Repite contenido para enviar 2 veces
 8000902:	2209      	movs	r2, #9
 8000904:	4946      	ldr	r1, [pc, #280]	@ (8000a20 <_Z10appContentv+0x40c>)
 8000906:	4848      	ldr	r0, [pc, #288]	@ (8000a28 <_Z10appContentv+0x414>)
 8000908:	f000 fcc5 	bl	8001296 <_ZN12fifoCommands3addEPhh>

		content[0]	= '3';							// Indica que longitud va en puerto 3
 800090c:	4b44      	ldr	r3, [pc, #272]	@ (8000a20 <_Z10appContentv+0x40c>)
 800090e:	2233      	movs	r2, #51	@ 0x33
 8000910:	701a      	strb	r2, [r3, #0]

		content[1]	= uint2hex_A(ptrFloat_Lon[3]);	// Guarda primeros 4 bits de longitud - 1byte
 8000912:	4b46      	ldr	r3, [pc, #280]	@ (8000a2c <_Z10appContentv+0x418>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	3303      	adds	r3, #3
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	4618      	mov	r0, r3
 800091c:	f000 fbb8 	bl	8001090 <_Z10uint2hex_Ah>
 8000920:	4603      	mov	r3, r0
 8000922:	461a      	mov	r2, r3
 8000924:	4b3e      	ldr	r3, [pc, #248]	@ (8000a20 <_Z10appContentv+0x40c>)
 8000926:	705a      	strb	r2, [r3, #1]
		content[2]	= uint2hex_B(ptrFloat_Lon[3]);	// Guarda segundos 4 bits de longitud - 1byte
 8000928:	4b40      	ldr	r3, [pc, #256]	@ (8000a2c <_Z10appContentv+0x418>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	3303      	adds	r3, #3
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	4618      	mov	r0, r3
 8000932:	f000 fc13 	bl	800115c <_Z10uint2hex_Bh>
 8000936:	4603      	mov	r3, r0
 8000938:	461a      	mov	r2, r3
 800093a:	4b39      	ldr	r3, [pc, #228]	@ (8000a20 <_Z10appContentv+0x40c>)
 800093c:	709a      	strb	r2, [r3, #2]

		content[3]	= uint2hex_A(ptrFloat_Lon[2]);	// Guarda terceros 4 bits de longitud - 2byte
 800093e:	4b3b      	ldr	r3, [pc, #236]	@ (8000a2c <_Z10appContentv+0x418>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	3302      	adds	r3, #2
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	4618      	mov	r0, r3
 8000948:	f000 fba2 	bl	8001090 <_Z10uint2hex_Ah>
 800094c:	4603      	mov	r3, r0
 800094e:	461a      	mov	r2, r3
 8000950:	4b33      	ldr	r3, [pc, #204]	@ (8000a20 <_Z10appContentv+0x40c>)
 8000952:	70da      	strb	r2, [r3, #3]
		content[4] 	= uint2hex_B(ptrFloat_Lon[2]);	// Guarda cuartos 4 bits de longitud  - 2byte
 8000954:	4b35      	ldr	r3, [pc, #212]	@ (8000a2c <_Z10appContentv+0x418>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	3302      	adds	r3, #2
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	4618      	mov	r0, r3
 800095e:	f000 fbfd 	bl	800115c <_Z10uint2hex_Bh>
 8000962:	4603      	mov	r3, r0
 8000964:	461a      	mov	r2, r3
 8000966:	4b2e      	ldr	r3, [pc, #184]	@ (8000a20 <_Z10appContentv+0x40c>)
 8000968:	711a      	strb	r2, [r3, #4]

		content[5]	= uint2hex_A(ptrFloat_Lon[1]);	// Guarda quintos 4 bits de longitud  - 3byte
 800096a:	4b30      	ldr	r3, [pc, #192]	@ (8000a2c <_Z10appContentv+0x418>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	3301      	adds	r3, #1
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	4618      	mov	r0, r3
 8000974:	f000 fb8c 	bl	8001090 <_Z10uint2hex_Ah>
 8000978:	4603      	mov	r3, r0
 800097a:	461a      	mov	r2, r3
 800097c:	4b28      	ldr	r3, [pc, #160]	@ (8000a20 <_Z10appContentv+0x40c>)
 800097e:	715a      	strb	r2, [r3, #5]
		content[6]  = uint2hex_B(ptrFloat_Lon[1]);	// Guarda sextos 4 bits de longitud   - 3byte
 8000980:	4b2a      	ldr	r3, [pc, #168]	@ (8000a2c <_Z10appContentv+0x418>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	3301      	adds	r3, #1
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	4618      	mov	r0, r3
 800098a:	f000 fbe7 	bl	800115c <_Z10uint2hex_Bh>
 800098e:	4603      	mov	r3, r0
 8000990:	461a      	mov	r2, r3
 8000992:	4b23      	ldr	r3, [pc, #140]	@ (8000a20 <_Z10appContentv+0x40c>)
 8000994:	719a      	strb	r2, [r3, #6]

		content[7] 	= uint2hex_A(ptrFloat_Lon[0]);	// Guarda septimos 4 bits de longitud - 4byte
 8000996:	4b25      	ldr	r3, [pc, #148]	@ (8000a2c <_Z10appContentv+0x418>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	4618      	mov	r0, r3
 800099e:	f000 fb77 	bl	8001090 <_Z10uint2hex_Ah>
 80009a2:	4603      	mov	r3, r0
 80009a4:	461a      	mov	r2, r3
 80009a6:	4b1e      	ldr	r3, [pc, #120]	@ (8000a20 <_Z10appContentv+0x40c>)
 80009a8:	71da      	strb	r2, [r3, #7]
		content[8]	= uint2hex_B(ptrFloat_Lon[0]);	// Guarda octavos 4 bits de longitud  - 4byte
 80009aa:	4b20      	ldr	r3, [pc, #128]	@ (8000a2c <_Z10appContentv+0x418>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	4618      	mov	r0, r3
 80009b2:	f000 fbd3 	bl	800115c <_Z10uint2hex_Bh>
 80009b6:	4603      	mov	r3, r0
 80009b8:	461a      	mov	r2, r3
 80009ba:	4b19      	ldr	r3, [pc, #100]	@ (8000a20 <_Z10appContentv+0x40c>)
 80009bc:	721a      	strb	r2, [r3, #8]

		fifoContent.add(content, sizeof(content));	// Añade contenido de longitud de la FIFO
 80009be:	2209      	movs	r2, #9
 80009c0:	4917      	ldr	r1, [pc, #92]	@ (8000a20 <_Z10appContentv+0x40c>)
 80009c2:	4819      	ldr	r0, [pc, #100]	@ (8000a28 <_Z10appContentv+0x414>)
 80009c4:	f000 fc67 	bl	8001296 <_ZN12fifoCommands3addEPhh>
		fifoContent.add(content, sizeof(content));	// Repite contenido para enviar 2 veces
 80009c8:	2209      	movs	r2, #9
 80009ca:	4915      	ldr	r1, [pc, #84]	@ (8000a20 <_Z10appContentv+0x40c>)
 80009cc:	4816      	ldr	r0, [pc, #88]	@ (8000a28 <_Z10appContentv+0x414>)
 80009ce:	f000 fc62 	bl	8001296 <_ZN12fifoCommands3addEPhh>

		qttyMsgGps++;
 80009d2:	4b17      	ldr	r3, [pc, #92]	@ (8000a30 <_Z10appContentv+0x41c>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	3301      	adds	r3, #1
 80009d8:	b2da      	uxtb	r2, r3
 80009da:	4b15      	ldr	r3, [pc, #84]	@ (8000a30 <_Z10appContentv+0x41c>)
 80009dc:	701a      	strb	r2, [r3, #0]
		qttyMsgGps++;
 80009de:	4b14      	ldr	r3, [pc, #80]	@ (8000a30 <_Z10appContentv+0x41c>)
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	3301      	adds	r3, #1
 80009e4:	b2da      	uxtb	r2, r3
 80009e6:	4b12      	ldr	r3, [pc, #72]	@ (8000a30 <_Z10appContentv+0x41c>)
 80009e8:	701a      	strb	r2, [r3, #0]
		qttyMsgGps++;
 80009ea:	4b11      	ldr	r3, [pc, #68]	@ (8000a30 <_Z10appContentv+0x41c>)
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	3301      	adds	r3, #1
 80009f0:	b2da      	uxtb	r2, r3
 80009f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000a30 <_Z10appContentv+0x41c>)
 80009f4:	701a      	strb	r2, [r3, #0]
		qttyMsgGps++;
 80009f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a30 <_Z10appContentv+0x41c>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	3301      	adds	r3, #1
 80009fc:	b2da      	uxtb	r2, r3
 80009fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000a30 <_Z10appContentv+0x41c>)
 8000a00:	701a      	strb	r2, [r3, #0]

		stateContent	= 5;						// Pasa a S5
 8000a02:	4b0c      	ldr	r3, [pc, #48]	@ (8000a34 <_Z10appContentv+0x420>)
 8000a04:	2205      	movs	r2, #5
 8000a06:	701a      	strb	r2, [r3, #0]
		break;
 8000a08:	e12e      	b.n	8000c68 <_Z10appContentv+0x654>
 8000a0a:	bf00      	nop
 8000a0c:	2000113a 	.word	0x2000113a
 8000a10:	20000ad4 	.word	0x20000ad4
 8000a14:	200003e0 	.word	0x200003e0
 8000a18:	20000ad8 	.word	0x20000ad8
 8000a1c:	200003e4 	.word	0x200003e4
 8000a20:	200003c8 	.word	0x200003c8
 8000a24:	20000000 	.word	0x20000000
 8000a28:	20001094 	.word	0x20001094
 8000a2c:	20000004 	.word	0x20000004
 8000a30:	200003eb 	.word	0x200003eb
 8000a34:	200003c0 	.word	0x200003c0
	////////////////////////
	// S4 - SAVE SYS DATA //
	////////////////////////

	case 4:
		warnings	= warningHardware[0]	+ warningHardware[1]*2;			// Multiplexa warning 0 y 1
 8000a38:	4b8c      	ldr	r3, [pc, #560]	@ (8000c6c <_Z10appContentv+0x658>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	4b8b      	ldr	r3, [pc, #556]	@ (8000c6c <_Z10appContentv+0x658>)
 8000a40:	785b      	ldrb	r3, [r3, #1]
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	4413      	add	r3, r2
 8000a48:	b2da      	uxtb	r2, r3
 8000a4a:	4b89      	ldr	r3, [pc, #548]	@ (8000c70 <_Z10appContentv+0x65c>)
 8000a4c:	701a      	strb	r2, [r3, #0]
		warnings	+= warningHardware[2]*4	+ warningHardware[3]*8;			// Multiplexa warning 2 y 3
 8000a4e:	4b87      	ldr	r3, [pc, #540]	@ (8000c6c <_Z10appContentv+0x658>)
 8000a50:	789b      	ldrb	r3, [r3, #2]
 8000a52:	461a      	mov	r2, r3
 8000a54:	4b85      	ldr	r3, [pc, #532]	@ (8000c6c <_Z10appContentv+0x658>)
 8000a56:	78db      	ldrb	r3, [r3, #3]
 8000a58:	005b      	lsls	r3, r3, #1
 8000a5a:	4413      	add	r3, r2
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	009b      	lsls	r3, r3, #2
 8000a60:	b2da      	uxtb	r2, r3
 8000a62:	4b83      	ldr	r3, [pc, #524]	@ (8000c70 <_Z10appContentv+0x65c>)
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	4413      	add	r3, r2
 8000a68:	b2da      	uxtb	r2, r3
 8000a6a:	4b81      	ldr	r3, [pc, #516]	@ (8000c70 <_Z10appContentv+0x65c>)
 8000a6c:	701a      	strb	r2, [r3, #0]
		warnings	+= warningHardware[4]*16	+ warningHardware[5]*32;	// Multiplexa warning 4 y 5
 8000a6e:	4b7f      	ldr	r3, [pc, #508]	@ (8000c6c <_Z10appContentv+0x658>)
 8000a70:	791b      	ldrb	r3, [r3, #4]
 8000a72:	461a      	mov	r2, r3
 8000a74:	4b7d      	ldr	r3, [pc, #500]	@ (8000c6c <_Z10appContentv+0x658>)
 8000a76:	795b      	ldrb	r3, [r3, #5]
 8000a78:	005b      	lsls	r3, r3, #1
 8000a7a:	4413      	add	r3, r2
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	011b      	lsls	r3, r3, #4
 8000a80:	b2da      	uxtb	r2, r3
 8000a82:	4b7b      	ldr	r3, [pc, #492]	@ (8000c70 <_Z10appContentv+0x65c>)
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	4413      	add	r3, r2
 8000a88:	b2da      	uxtb	r2, r3
 8000a8a:	4b79      	ldr	r3, [pc, #484]	@ (8000c70 <_Z10appContentv+0x65c>)
 8000a8c:	701a      	strb	r2, [r3, #0]
		warnings	+= warningHardware[6]*64	+ warningHardware[7]*128;	// Multiplexa warning 6 y 7
 8000a8e:	4b77      	ldr	r3, [pc, #476]	@ (8000c6c <_Z10appContentv+0x658>)
 8000a90:	799b      	ldrb	r3, [r3, #6]
 8000a92:	461a      	mov	r2, r3
 8000a94:	4b75      	ldr	r3, [pc, #468]	@ (8000c6c <_Z10appContentv+0x658>)
 8000a96:	79db      	ldrb	r3, [r3, #7]
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	4413      	add	r3, r2
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	019b      	lsls	r3, r3, #6
 8000aa0:	b2da      	uxtb	r2, r3
 8000aa2:	4b73      	ldr	r3, [pc, #460]	@ (8000c70 <_Z10appContentv+0x65c>)
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	4413      	add	r3, r2
 8000aa8:	b2da      	uxtb	r2, r3
 8000aaa:	4b71      	ldr	r3, [pc, #452]	@ (8000c70 <_Z10appContentv+0x65c>)
 8000aac:	701a      	strb	r2, [r3, #0]

		errorHw	= errorHardware[0] 		+ errorHardware[1]*2;				// Multiplexa error 0 y 1
 8000aae:	4b71      	ldr	r3, [pc, #452]	@ (8000c74 <_Z10appContentv+0x660>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	4b6f      	ldr	r3, [pc, #444]	@ (8000c74 <_Z10appContentv+0x660>)
 8000ab6:	785b      	ldrb	r3, [r3, #1]
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	4413      	add	r3, r2
 8000abe:	b2da      	uxtb	r2, r3
 8000ac0:	4b6d      	ldr	r3, [pc, #436]	@ (8000c78 <_Z10appContentv+0x664>)
 8000ac2:	701a      	strb	r2, [r3, #0]
		errorHw	+= errorHardware[2]*4 	+ errorHardware[3]*8;				// Multiplexa error 2 y 3
 8000ac4:	4b6b      	ldr	r3, [pc, #428]	@ (8000c74 <_Z10appContentv+0x660>)
 8000ac6:	789b      	ldrb	r3, [r3, #2]
 8000ac8:	461a      	mov	r2, r3
 8000aca:	4b6a      	ldr	r3, [pc, #424]	@ (8000c74 <_Z10appContentv+0x660>)
 8000acc:	78db      	ldrb	r3, [r3, #3]
 8000ace:	005b      	lsls	r3, r3, #1
 8000ad0:	4413      	add	r3, r2
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	009b      	lsls	r3, r3, #2
 8000ad6:	b2da      	uxtb	r2, r3
 8000ad8:	4b67      	ldr	r3, [pc, #412]	@ (8000c78 <_Z10appContentv+0x664>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	4413      	add	r3, r2
 8000ade:	b2da      	uxtb	r2, r3
 8000ae0:	4b65      	ldr	r3, [pc, #404]	@ (8000c78 <_Z10appContentv+0x664>)
 8000ae2:	701a      	strb	r2, [r3, #0]
		errorHw	+= errorHardware[4]*16 	+ errorHardware[5]*32;				// Multiplexa error 4 y 5
 8000ae4:	4b63      	ldr	r3, [pc, #396]	@ (8000c74 <_Z10appContentv+0x660>)
 8000ae6:	791b      	ldrb	r3, [r3, #4]
 8000ae8:	461a      	mov	r2, r3
 8000aea:	4b62      	ldr	r3, [pc, #392]	@ (8000c74 <_Z10appContentv+0x660>)
 8000aec:	795b      	ldrb	r3, [r3, #5]
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	4413      	add	r3, r2
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	011b      	lsls	r3, r3, #4
 8000af6:	b2da      	uxtb	r2, r3
 8000af8:	4b5f      	ldr	r3, [pc, #380]	@ (8000c78 <_Z10appContentv+0x664>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	4413      	add	r3, r2
 8000afe:	b2da      	uxtb	r2, r3
 8000b00:	4b5d      	ldr	r3, [pc, #372]	@ (8000c78 <_Z10appContentv+0x664>)
 8000b02:	701a      	strb	r2, [r3, #0]
		errorHw	+= errorHardware[6]*64;										// Multiplexa error 6
 8000b04:	4b5b      	ldr	r3, [pc, #364]	@ (8000c74 <_Z10appContentv+0x660>)
 8000b06:	799b      	ldrb	r3, [r3, #6]
 8000b08:	019b      	lsls	r3, r3, #6
 8000b0a:	b2da      	uxtb	r2, r3
 8000b0c:	4b5a      	ldr	r3, [pc, #360]	@ (8000c78 <_Z10appContentv+0x664>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	4413      	add	r3, r2
 8000b12:	b2da      	uxtb	r2, r3
 8000b14:	4b58      	ldr	r3, [pc, #352]	@ (8000c78 <_Z10appContentv+0x664>)
 8000b16:	701a      	strb	r2, [r3, #0]

		content[0]	= '4';						// Indica que longitud va en puerto 3
 8000b18:	4b58      	ldr	r3, [pc, #352]	@ (8000c7c <_Z10appContentv+0x668>)
 8000b1a:	2234      	movs	r2, #52	@ 0x34
 8000b1c:	701a      	strb	r2, [r3, #0]

		content[1]	= uint2hex_A(warnings);		// Guarda primeros 4 bits de warnings
 8000b1e:	4b54      	ldr	r3, [pc, #336]	@ (8000c70 <_Z10appContentv+0x65c>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	4618      	mov	r0, r3
 8000b24:	f000 fab4 	bl	8001090 <_Z10uint2hex_Ah>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	4b53      	ldr	r3, [pc, #332]	@ (8000c7c <_Z10appContentv+0x668>)
 8000b2e:	705a      	strb	r2, [r3, #1]
		content[2]	= uint2hex_A(warnings);		// Guarda segundos 4 bits de warnings
 8000b30:	4b4f      	ldr	r3, [pc, #316]	@ (8000c70 <_Z10appContentv+0x65c>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	4618      	mov	r0, r3
 8000b36:	f000 faab 	bl	8001090 <_Z10uint2hex_Ah>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	4b4f      	ldr	r3, [pc, #316]	@ (8000c7c <_Z10appContentv+0x668>)
 8000b40:	709a      	strb	r2, [r3, #2]

		content[3]	= uint2hex_A(errorHw);		// Guarda primeros 4 bits de errores
 8000b42:	4b4d      	ldr	r3, [pc, #308]	@ (8000c78 <_Z10appContentv+0x664>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	4618      	mov	r0, r3
 8000b48:	f000 faa2 	bl	8001090 <_Z10uint2hex_Ah>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	461a      	mov	r2, r3
 8000b50:	4b4a      	ldr	r3, [pc, #296]	@ (8000c7c <_Z10appContentv+0x668>)
 8000b52:	70da      	strb	r2, [r3, #3]
		content[4]	= uint2hex_B(errorHw);		// Guarda segundos 4 bits de errores
 8000b54:	4b48      	ldr	r3, [pc, #288]	@ (8000c78 <_Z10appContentv+0x664>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f000 faff 	bl	800115c <_Z10uint2hex_Bh>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	461a      	mov	r2, r3
 8000b62:	4b46      	ldr	r3, [pc, #280]	@ (8000c7c <_Z10appContentv+0x668>)
 8000b64:	711a      	strb	r2, [r3, #4]

		content[5]	= uint2hex_A(batScaled);	// Guarda primeros 4 bits de bateria escalada
 8000b66:	4b46      	ldr	r3, [pc, #280]	@ (8000c80 <_Z10appContentv+0x66c>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f000 fa8f 	bl	8001090 <_Z10uint2hex_Ah>
 8000b72:	4603      	mov	r3, r0
 8000b74:	461a      	mov	r2, r3
 8000b76:	4b41      	ldr	r3, [pc, #260]	@ (8000c7c <_Z10appContentv+0x668>)
 8000b78:	715a      	strb	r2, [r3, #5]
		content[6]	= uint2hex_A(batScaled);	// Guarda segundos 4 bits de bateria escalada
 8000b7a:	4b41      	ldr	r3, [pc, #260]	@ (8000c80 <_Z10appContentv+0x66c>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	4618      	mov	r0, r3
 8000b82:	f000 fa85 	bl	8001090 <_Z10uint2hex_Ah>
 8000b86:	4603      	mov	r3, r0
 8000b88:	461a      	mov	r2, r3
 8000b8a:	4b3c      	ldr	r3, [pc, #240]	@ (8000c7c <_Z10appContentv+0x668>)
 8000b8c:	719a      	strb	r2, [r3, #6]

		content[7]	= uint2hex_A(0);			// Futuro uso
 8000b8e:	2000      	movs	r0, #0
 8000b90:	f000 fa7e 	bl	8001090 <_Z10uint2hex_Ah>
 8000b94:	4603      	mov	r3, r0
 8000b96:	461a      	mov	r2, r3
 8000b98:	4b38      	ldr	r3, [pc, #224]	@ (8000c7c <_Z10appContentv+0x668>)
 8000b9a:	71da      	strb	r2, [r3, #7]
		content[8]	= uint2hex_A(0);			// Futuro iso
 8000b9c:	2000      	movs	r0, #0
 8000b9e:	f000 fa77 	bl	8001090 <_Z10uint2hex_Ah>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	4b35      	ldr	r3, [pc, #212]	@ (8000c7c <_Z10appContentv+0x668>)
 8000ba8:	721a      	strb	r2, [r3, #8]

		fifoContent.add(content, sizeof(content));	// Agrega contenido a la fifo
 8000baa:	2209      	movs	r2, #9
 8000bac:	4933      	ldr	r1, [pc, #204]	@ (8000c7c <_Z10appContentv+0x668>)
 8000bae:	4835      	ldr	r0, [pc, #212]	@ (8000c84 <_Z10appContentv+0x670>)
 8000bb0:	f000 fb71 	bl	8001296 <_ZN12fifoCommands3addEPhh>

		qttyMsgSys++;
 8000bb4:	4b34      	ldr	r3, [pc, #208]	@ (8000c88 <_Z10appContentv+0x674>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	b2da      	uxtb	r2, r3
 8000bbc:	4b32      	ldr	r3, [pc, #200]	@ (8000c88 <_Z10appContentv+0x674>)
 8000bbe:	701a      	strb	r2, [r3, #0]

		flagSetSys		= 0;						// Reinicia indicador de datos de sistema
 8000bc0:	4b32      	ldr	r3, [pc, #200]	@ (8000c8c <_Z10appContentv+0x678>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	701a      	strb	r2, [r3, #0]
		stateContent	= 5;						// Pasa a  S5
 8000bc6:	4b32      	ldr	r3, [pc, #200]	@ (8000c90 <_Z10appContentv+0x67c>)
 8000bc8:	2205      	movs	r2, #5
 8000bca:	701a      	strb	r2, [r3, #0]
		break;
 8000bcc:	e04c      	b.n	8000c68 <_Z10appContentv+0x654>
	///////////////////
	// S5 - SET DATA //
	///////////////////

	case 5:
		fifoContent.read(content2, sizeof(content2));	// Lee contenido disponible en FIFO
 8000bce:	2209      	movs	r2, #9
 8000bd0:	4930      	ldr	r1, [pc, #192]	@ (8000c94 <_Z10appContentv+0x680>)
 8000bd2:	482c      	ldr	r0, [pc, #176]	@ (8000c84 <_Z10appContentv+0x670>)
 8000bd4:	f000 fba2 	bl	800131c <_ZN12fifoCommands4readEPhh>

		macTxData_RN2903[13] = content2[0];			// Copia PUERTO
 8000bd8:	4b2e      	ldr	r3, [pc, #184]	@ (8000c94 <_Z10appContentv+0x680>)
 8000bda:	781a      	ldrb	r2, [r3, #0]
 8000bdc:	4b2e      	ldr	r3, [pc, #184]	@ (8000c98 <_Z10appContentv+0x684>)
 8000bde:	735a      	strb	r2, [r3, #13]
		macTxData_RN2903[15] = content2[1];			// 0 Byte
 8000be0:	4b2c      	ldr	r3, [pc, #176]	@ (8000c94 <_Z10appContentv+0x680>)
 8000be2:	785a      	ldrb	r2, [r3, #1]
 8000be4:	4b2c      	ldr	r3, [pc, #176]	@ (8000c98 <_Z10appContentv+0x684>)
 8000be6:	73da      	strb	r2, [r3, #15]
		macTxData_RN2903[16] = content2[2];			// 0 Byte
 8000be8:	4b2a      	ldr	r3, [pc, #168]	@ (8000c94 <_Z10appContentv+0x680>)
 8000bea:	789a      	ldrb	r2, [r3, #2]
 8000bec:	4b2a      	ldr	r3, [pc, #168]	@ (8000c98 <_Z10appContentv+0x684>)
 8000bee:	741a      	strb	r2, [r3, #16]
		macTxData_RN2903[17] = content2[3];			// 1 Byte
 8000bf0:	4b28      	ldr	r3, [pc, #160]	@ (8000c94 <_Z10appContentv+0x680>)
 8000bf2:	78da      	ldrb	r2, [r3, #3]
 8000bf4:	4b28      	ldr	r3, [pc, #160]	@ (8000c98 <_Z10appContentv+0x684>)
 8000bf6:	745a      	strb	r2, [r3, #17]
		macTxData_RN2903[18] = content2[4];			// 1 Byte
 8000bf8:	4b26      	ldr	r3, [pc, #152]	@ (8000c94 <_Z10appContentv+0x680>)
 8000bfa:	791a      	ldrb	r2, [r3, #4]
 8000bfc:	4b26      	ldr	r3, [pc, #152]	@ (8000c98 <_Z10appContentv+0x684>)
 8000bfe:	749a      	strb	r2, [r3, #18]
		macTxData_RN2903[19] = content2[5];			// 2 Byte
 8000c00:	4b24      	ldr	r3, [pc, #144]	@ (8000c94 <_Z10appContentv+0x680>)
 8000c02:	795a      	ldrb	r2, [r3, #5]
 8000c04:	4b24      	ldr	r3, [pc, #144]	@ (8000c98 <_Z10appContentv+0x684>)
 8000c06:	74da      	strb	r2, [r3, #19]
		macTxData_RN2903[20] = content2[6];			// 2 Byte
 8000c08:	4b22      	ldr	r3, [pc, #136]	@ (8000c94 <_Z10appContentv+0x680>)
 8000c0a:	799a      	ldrb	r2, [r3, #6]
 8000c0c:	4b22      	ldr	r3, [pc, #136]	@ (8000c98 <_Z10appContentv+0x684>)
 8000c0e:	751a      	strb	r2, [r3, #20]
		macTxData_RN2903[21] = content2[7];			// 3 Byte
 8000c10:	4b20      	ldr	r3, [pc, #128]	@ (8000c94 <_Z10appContentv+0x680>)
 8000c12:	79da      	ldrb	r2, [r3, #7]
 8000c14:	4b20      	ldr	r3, [pc, #128]	@ (8000c98 <_Z10appContentv+0x684>)
 8000c16:	755a      	strb	r2, [r3, #21]
		macTxData_RN2903[22] = content2[8];			// 3 Byte
 8000c18:	4b1e      	ldr	r3, [pc, #120]	@ (8000c94 <_Z10appContentv+0x680>)
 8000c1a:	7a1a      	ldrb	r2, [r3, #8]
 8000c1c:	4b1e      	ldr	r3, [pc, #120]	@ (8000c98 <_Z10appContentv+0x684>)
 8000c1e:	759a      	strb	r2, [r3, #22]

		savedData		= 1;						// Indica que se guardaron los datos		stateContent	= 6;						// Pasa a S
 8000c20:	4b1e      	ldr	r3, [pc, #120]	@ (8000c9c <_Z10appContentv+0x688>)
 8000c22:	2201      	movs	r2, #1
 8000c24:	701a      	strb	r2, [r3, #0]
		stateContent	= 6;						// Pasa a S6
 8000c26:	4b1a      	ldr	r3, [pc, #104]	@ (8000c90 <_Z10appContentv+0x67c>)
 8000c28:	2206      	movs	r2, #6
 8000c2a:	701a      	strb	r2, [r3, #0]
		break;
 8000c2c:	e01c      	b.n	8000c68 <_Z10appContentv+0x654>
	//////////////////////////
	// S6 - WAIT FOR ENABLE //
	//////////////////////////

	case 6:
		if ( !loraDecision.enable() ){	// Si no está habilitado
 8000c2e:	481c      	ldr	r0, [pc, #112]	@ (8000ca0 <_Z10appContentv+0x68c>)
 8000c30:	f003 f80c 	bl	8003c4c <_ZN12loraDecision6enableEv>
 8000c34:	4603      	mov	r3, r0
 8000c36:	f083 0301 	eor.w	r3, r3, #1
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d003      	beq.n	8000c48 <_Z10appContentv+0x634>
			stateContent	= 0;		// Vuelve a S0
 8000c40:	4b13      	ldr	r3, [pc, #76]	@ (8000c90 <_Z10appContentv+0x67c>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	701a      	strb	r2, [r3, #0]
			stateContent	= 1;		// Vuelve a S1
		}
		else{							// Si no
			stateContent	= 6;		// Espera en S6
		}
		break;
 8000c46:	e00f      	b.n	8000c68 <_Z10appContentv+0x654>
		else if (bussyRN2903){			// Si se habilita
 8000c48:	4b16      	ldr	r3, [pc, #88]	@ (8000ca4 <_Z10appContentv+0x690>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d003      	beq.n	8000c58 <_Z10appContentv+0x644>
			stateContent	= 1;		// Vuelve a S1
 8000c50:	4b0f      	ldr	r3, [pc, #60]	@ (8000c90 <_Z10appContentv+0x67c>)
 8000c52:	2201      	movs	r2, #1
 8000c54:	701a      	strb	r2, [r3, #0]
		break;
 8000c56:	e007      	b.n	8000c68 <_Z10appContentv+0x654>
			stateContent	= 6;		// Espera en S6
 8000c58:	4b0d      	ldr	r3, [pc, #52]	@ (8000c90 <_Z10appContentv+0x67c>)
 8000c5a:	2206      	movs	r2, #6
 8000c5c:	701a      	strb	r2, [r3, #0]
		break;
 8000c5e:	e003      	b.n	8000c68 <_Z10appContentv+0x654>

	default:
		stateContent	= 0;
 8000c60:	4b0b      	ldr	r3, [pc, #44]	@ (8000c90 <_Z10appContentv+0x67c>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	701a      	strb	r2, [r3, #0]
		break;
 8000c66:	bf00      	nop
	}
}
 8000c68:	bf00      	nop
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	200004cc 	.word	0x200004cc
 8000c70:	200003e9 	.word	0x200003e9
 8000c74:	200004d4 	.word	0x200004d4
 8000c78:	200003e8 	.word	0x200003e8
 8000c7c:	200003c8 	.word	0x200003c8
 8000c80:	20000524 	.word	0x20000524
 8000c84:	20001094 	.word	0x20001094
 8000c88:	200003ec 	.word	0x200003ec
 8000c8c:	2000115c 	.word	0x2000115c
 8000c90:	200003c0 	.word	0x200003c0
 8000c94:	200003d4 	.word	0x200003d4
 8000c98:	200002f0 	.word	0x200002f0
 8000c9c:	200003c3 	.word	0x200003c3
 8000ca0:	20000b78 	.word	0x20000b78
 8000ca4:	200003c4 	.word	0x200003c4

08000ca8 <_Z7appLorav>:
 * 	chSetRN2903:	Fija configuracion de canales del chip
 * 	loopRN2903:		Fija comandos de transmision en el chip
 *
 */

void appLora(){
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0

	switch ( stateLoraApp ){
 8000cac:	4ba7      	ldr	r3, [pc, #668]	@ (8000f4c <_Z7appLorav+0x2a4>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	2b0a      	cmp	r3, #10
 8000cb2:	f200 81d8 	bhi.w	8001066 <_Z7appLorav+0x3be>
 8000cb6:	a201      	add	r2, pc, #4	@ (adr r2, 8000cbc <_Z7appLorav+0x14>)
 8000cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cbc:	08000ce9 	.word	0x08000ce9
 8000cc0:	08000d0f 	.word	0x08000d0f
 8000cc4:	08000d41 	.word	0x08000d41
 8000cc8:	08000da1 	.word	0x08000da1
 8000ccc:	08000df5 	.word	0x08000df5
 8000cd0:	08000e51 	.word	0x08000e51
 8000cd4:	08000ea3 	.word	0x08000ea3
 8000cd8:	08000ebd 	.word	0x08000ebd
 8000cdc:	08000eef 	.word	0x08000eef
 8000ce0:	08000f91 	.word	0x08000f91
 8000ce4:	08000fed 	.word	0x08000fed
	//////////////////////////
	// S0 - WAIT FOR ENABLE //
	//////////////////////////

	case 0:
		if ( loraDecision.enable() ){						// Si el chip esta habilitado por SW
 8000ce8:	4899      	ldr	r0, [pc, #612]	@ (8000f50 <_Z7appLorav+0x2a8>)
 8000cea:	f002 ffaf 	bl	8003c4c <_ZN12loraDecision6enableEv>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d008      	beq.n	8000d06 <_Z7appLorav+0x5e>
			loraCheck.setResponsePointer( rxCommand, 14);	//
 8000cf4:	220e      	movs	r2, #14
 8000cf6:	4997      	ldr	r1, [pc, #604]	@ (8000f54 <_Z7appLorav+0x2ac>)
 8000cf8:	4897      	ldr	r0, [pc, #604]	@ (8000f58 <_Z7appLorav+0x2b0>)
 8000cfa:	f002 fd7f 	bl	80037fc <_ZN9loraCheck18setResponsePointerEPPhh>
			stateLoraApp	= 7;							// Pasa a S1
 8000cfe:	4b93      	ldr	r3, [pc, #588]	@ (8000f4c <_Z7appLorav+0x2a4>)
 8000d00:	2207      	movs	r2, #7
 8000d02:	701a      	strb	r2, [r3, #0]
		}
		else{												// Si no
			stateLoraApp	= 0;							// Espera en S0
		}
		break;
 8000d04:	e1b3      	b.n	800106e <_Z7appLorav+0x3c6>
			stateLoraApp	= 0;							// Espera en S0
 8000d06:	4b91      	ldr	r3, [pc, #580]	@ (8000f4c <_Z7appLorav+0x2a4>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	701a      	strb	r2, [r3, #0]
		break;
 8000d0c:	e1af      	b.n	800106e <_Z7appLorav+0x3c6>
	////////////////////////////
	// S1 - SET SETUP COMMAND //
	////////////////////////////

	case 1:
		loraDecision.reset();
 8000d0e:	4890      	ldr	r0, [pc, #576]	@ (8000f50 <_Z7appLorav+0x2a8>)
 8000d10:	f002 ff79 	bl	8003c06 <_ZN12loraDecision5resetEv>
		txCommandPointer	= setupRN2903.command();		// Solicita comando
 8000d14:	4891      	ldr	r0, [pc, #580]	@ (8000f5c <_Z7appLorav+0x2b4>)
 8000d16:	f002 fcc4 	bl	80036a2 <_ZN10loraRutine7commandEv>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	4a90      	ldr	r2, [pc, #576]	@ (8000f60 <_Z7appLorav+0x2b8>)
 8000d1e:	6013      	str	r3, [r2, #0]
		loraSelect.setCommand( txCommandPointer->command,	// Inserta puntero al comando
 8000d20:	4b8f      	ldr	r3, [pc, #572]	@ (8000f60 <_Z7appLorav+0x2b8>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	6859      	ldr	r1, [r3, #4]
 8000d26:	4b8e      	ldr	r3, [pc, #568]	@ (8000f60 <_Z7appLorav+0x2b8>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	781a      	ldrb	r2, [r3, #0]
 8000d2c:	4b8c      	ldr	r3, [pc, #560]	@ (8000f60 <_Z7appLorav+0x2b8>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	7a1b      	ldrb	r3, [r3, #8]
 8000d32:	488c      	ldr	r0, [pc, #560]	@ (8000f64 <_Z7appLorav+0x2bc>)
 8000d34:	f002 fe8c 	bl	8003a50 <_ZN10loraSelect10setCommandEPhhh>
			txCommandPointer->size,							// Inserta tamañp del comando
			txCommandPointer->responseSize);				// Inserta tamaño de respuesta
		stateLoraApp	= 2;								// Pasa a S2
 8000d38:	4b84      	ldr	r3, [pc, #528]	@ (8000f4c <_Z7appLorav+0x2a4>)
 8000d3a:	2202      	movs	r2, #2
 8000d3c:	701a      	strb	r2, [r3, #0]
		break;
 8000d3e:	e196      	b.n	800106e <_Z7appLorav+0x3c6>
	// S2 - WAIT FOR NEXT //
	////////////////////////

	case 2:

		if ( !loraDecision.enable() ){									// Si el chip esta habilitado
 8000d40:	4883      	ldr	r0, [pc, #524]	@ (8000f50 <_Z7appLorav+0x2a8>)
 8000d42:	f002 ff83 	bl	8003c4c <_ZN12loraDecision6enableEv>
 8000d46:	4603      	mov	r3, r0
 8000d48:	f083 0301 	eor.w	r3, r3, #1
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d003      	beq.n	8000d5a <_Z7appLorav+0xb2>
			stateLoraApp	= 6;										// Pasa a S6
 8000d52:	4b7e      	ldr	r3, [pc, #504]	@ (8000f4c <_Z7appLorav+0x2a4>)
 8000d54:	2206      	movs	r2, #6
 8000d56:	701a      	strb	r2, [r3, #0]
			stateLoraApp	= 1;										// Vuelve a S1
		}
		else{															// Si no
			stateLoraApp	= 2;										// Se queda en S2
		}
		break;
 8000d58:	e189      	b.n	800106e <_Z7appLorav+0x3c6>
		else if ( loraDecision.correct() && setupRN2903.finish() ){		// Si llegó la respuesta correcta y es la ultima
 8000d5a:	487d      	ldr	r0, [pc, #500]	@ (8000f50 <_Z7appLorav+0x2a8>)
 8000d5c:	f002 ff82 	bl	8003c64 <_ZN12loraDecision7correctEv>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d007      	beq.n	8000d76 <_Z7appLorav+0xce>
 8000d66:	487d      	ldr	r0, [pc, #500]	@ (8000f5c <_Z7appLorav+0x2b4>)
 8000d68:	f002 fcd7 	bl	800371a <_ZN10loraRutine6finishEv>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <_Z7appLorav+0xce>
 8000d72:	2301      	movs	r3, #1
 8000d74:	e000      	b.n	8000d78 <_Z7appLorav+0xd0>
 8000d76:	2300      	movs	r3, #0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d003      	beq.n	8000d84 <_Z7appLorav+0xdc>
			stateLoraApp	= 3;										// Pasa a  S3
 8000d7c:	4b73      	ldr	r3, [pc, #460]	@ (8000f4c <_Z7appLorav+0x2a4>)
 8000d7e:	2203      	movs	r2, #3
 8000d80:	701a      	strb	r2, [r3, #0]
		break;
 8000d82:	e174      	b.n	800106e <_Z7appLorav+0x3c6>
		else if ( loraDecision.correct() ){								// Si solo es correctao
 8000d84:	4872      	ldr	r0, [pc, #456]	@ (8000f50 <_Z7appLorav+0x2a8>)
 8000d86:	f002 ff6d 	bl	8003c64 <_ZN12loraDecision7correctEv>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d003      	beq.n	8000d98 <_Z7appLorav+0xf0>
			stateLoraApp	= 1;										// Vuelve a S1
 8000d90:	4b6e      	ldr	r3, [pc, #440]	@ (8000f4c <_Z7appLorav+0x2a4>)
 8000d92:	2201      	movs	r2, #1
 8000d94:	701a      	strb	r2, [r3, #0]
		break;
 8000d96:	e16a      	b.n	800106e <_Z7appLorav+0x3c6>
			stateLoraApp	= 2;										// Se queda en S2
 8000d98:	4b6c      	ldr	r3, [pc, #432]	@ (8000f4c <_Z7appLorav+0x2a4>)
 8000d9a:	2202      	movs	r2, #2
 8000d9c:	701a      	strb	r2, [r3, #0]
		break;
 8000d9e:	e166      	b.n	800106e <_Z7appLorav+0x3c6>
	// S3 - GET TX COMMAND //
	/////////////////////////

	case 3:

		if ( savedData ){										//
 8000da0:	4b71      	ldr	r3, [pc, #452]	@ (8000f68 <_Z7appLorav+0x2c0>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d021      	beq.n	8000dec <_Z7appLorav+0x144>
			qttyMessagesInputs2++;
 8000da8:	4b70      	ldr	r3, [pc, #448]	@ (8000f6c <_Z7appLorav+0x2c4>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	3301      	adds	r3, #1
 8000dae:	b2da      	uxtb	r2, r3
 8000db0:	4b6e      	ldr	r3, [pc, #440]	@ (8000f6c <_Z7appLorav+0x2c4>)
 8000db2:	701a      	strb	r2, [r3, #0]
			loraDecision.reset();								//
 8000db4:	4866      	ldr	r0, [pc, #408]	@ (8000f50 <_Z7appLorav+0x2a8>)
 8000db6:	f002 ff26 	bl	8003c06 <_ZN12loraDecision5resetEv>
			loopRN2903.reset();									//
 8000dba:	486d      	ldr	r0, [pc, #436]	@ (8000f70 <_Z7appLorav+0x2c8>)
 8000dbc:	f002 fc9b 	bl	80036f6 <_ZN10loraRutine5resetEv>
			txCommandPointer	= loopRN2903.command();			// Solicita comando
 8000dc0:	486b      	ldr	r0, [pc, #428]	@ (8000f70 <_Z7appLorav+0x2c8>)
 8000dc2:	f002 fc6e 	bl	80036a2 <_ZN10loraRutine7commandEv>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	4a65      	ldr	r2, [pc, #404]	@ (8000f60 <_Z7appLorav+0x2b8>)
 8000dca:	6013      	str	r3, [r2, #0]

			loraSelect.setCommand( txCommandPointer->command,	// Inserta puntero al comando
 8000dcc:	4b64      	ldr	r3, [pc, #400]	@ (8000f60 <_Z7appLorav+0x2b8>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	6859      	ldr	r1, [r3, #4]
 8000dd2:	4b63      	ldr	r3, [pc, #396]	@ (8000f60 <_Z7appLorav+0x2b8>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	781a      	ldrb	r2, [r3, #0]
 8000dd8:	4b61      	ldr	r3, [pc, #388]	@ (8000f60 <_Z7appLorav+0x2b8>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	7a1b      	ldrb	r3, [r3, #8]
 8000dde:	4861      	ldr	r0, [pc, #388]	@ (8000f64 <_Z7appLorav+0x2bc>)
 8000de0:	f002 fe36 	bl	8003a50 <_ZN10loraSelect10setCommandEPhhh>
				txCommandPointer->size,							// Inserta tamañp del comando
				txCommandPointer->responseSize);				// Inserta tamaño de respuesta
			stateLoraApp	= 4;								// Pasa a S4
 8000de4:	4b59      	ldr	r3, [pc, #356]	@ (8000f4c <_Z7appLorav+0x2a4>)
 8000de6:	2204      	movs	r2, #4
 8000de8:	701a      	strb	r2, [r3, #0]
		}
		else{													// Si no
			stateLoraApp	= 3;								// Espera en S3
		}
		break;
 8000dea:	e140      	b.n	800106e <_Z7appLorav+0x3c6>
			stateLoraApp	= 3;								// Espera en S3
 8000dec:	4b57      	ldr	r3, [pc, #348]	@ (8000f4c <_Z7appLorav+0x2a4>)
 8000dee:	2203      	movs	r2, #3
 8000df0:	701a      	strb	r2, [r3, #0]
		break;
 8000df2:	e13c      	b.n	800106e <_Z7appLorav+0x3c6>
	////////////////////////////
	// S4 - WAIT FOR RESPONSE //
	////////////////////////////

	case 4:
		if ( !loraDecision.enable() ){			// Si el chip esta habilitado
 8000df4:	4856      	ldr	r0, [pc, #344]	@ (8000f50 <_Z7appLorav+0x2a8>)
 8000df6:	f002 ff29 	bl	8003c4c <_ZN12loraDecision6enableEv>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	f083 0301 	eor.w	r3, r3, #1
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d003      	beq.n	8000e0e <_Z7appLorav+0x166>
			stateLoraApp	= 6;				// Pasa a S6
 8000e06:	4b51      	ldr	r3, [pc, #324]	@ (8000f4c <_Z7appLorav+0x2a4>)
 8000e08:	2206      	movs	r2, #6
 8000e0a:	701a      	strb	r2, [r3, #0]
			stateLoraApp	= 1;
		}
		else{									// Si no
			stateLoraApp	= 4;				// Se queda en S4
		}
		break;
 8000e0c:	e12f      	b.n	800106e <_Z7appLorav+0x3c6>
		else if ( loraDecision.correct() ){		// Si es correcto
 8000e0e:	4850      	ldr	r0, [pc, #320]	@ (8000f50 <_Z7appLorav+0x2a8>)
 8000e10:	f002 ff28 	bl	8003c64 <_ZN12loraDecision7correctEv>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d003      	beq.n	8000e22 <_Z7appLorav+0x17a>
			stateLoraApp	= 5;				// Vuelve a S5
 8000e1a:	4b4c      	ldr	r3, [pc, #304]	@ (8000f4c <_Z7appLorav+0x2a4>)
 8000e1c:	2205      	movs	r2, #5
 8000e1e:	701a      	strb	r2, [r3, #0]
		break;
 8000e20:	e125      	b.n	800106e <_Z7appLorav+0x3c6>
		else if ( loraDecision.burn()){
 8000e22:	484b      	ldr	r0, [pc, #300]	@ (8000f50 <_Z7appLorav+0x2a8>)
 8000e24:	f002 ff2a 	bl	8003c7c <_ZN12loraDecision4burnEv>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d00c      	beq.n	8000e48 <_Z7appLorav+0x1a0>
			setupRN2903.reset();	// Reinicia rutina
 8000e2e:	484b      	ldr	r0, [pc, #300]	@ (8000f5c <_Z7appLorav+0x2b4>)
 8000e30:	f002 fc61 	bl	80036f6 <_ZN10loraRutine5resetEv>
			chSetRN2903.reset();	// Reinicia rutina
 8000e34:	484f      	ldr	r0, [pc, #316]	@ (8000f74 <_Z7appLorav+0x2cc>)
 8000e36:	f002 fc5e 	bl	80036f6 <_ZN10loraRutine5resetEv>
			loopRN2903.reset();		// Reinicia rutina
 8000e3a:	484d      	ldr	r0, [pc, #308]	@ (8000f70 <_Z7appLorav+0x2c8>)
 8000e3c:	f002 fc5b 	bl	80036f6 <_ZN10loraRutine5resetEv>
			stateLoraApp	= 1;
 8000e40:	4b42      	ldr	r3, [pc, #264]	@ (8000f4c <_Z7appLorav+0x2a4>)
 8000e42:	2201      	movs	r2, #1
 8000e44:	701a      	strb	r2, [r3, #0]
		break;
 8000e46:	e112      	b.n	800106e <_Z7appLorav+0x3c6>
			stateLoraApp	= 4;				// Se queda en S4
 8000e48:	4b40      	ldr	r3, [pc, #256]	@ (8000f4c <_Z7appLorav+0x2a4>)
 8000e4a:	2204      	movs	r2, #4
 8000e4c:	701a      	strb	r2, [r3, #0]
		break;
 8000e4e:	e10e      	b.n	800106e <_Z7appLorav+0x3c6>
	////////////////////////////////
	// S5 - WAIT FOR NEXT MESSAGE //
	////////////////////////////////

	case 5:
		savedData = 0;								// Indica que se envia
 8000e50:	4b45      	ldr	r3, [pc, #276]	@ (8000f68 <_Z7appLorav+0x2c0>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	701a      	strb	r2, [r3, #0]
		countLoraApp++;								// Suma 1 al contador
 8000e56:	4b48      	ldr	r3, [pc, #288]	@ (8000f78 <_Z7appLorav+0x2d0>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	4a46      	ldr	r2, [pc, #280]	@ (8000f78 <_Z7appLorav+0x2d0>)
 8000e5e:	6013      	str	r3, [r2, #0]

		if ( !loraDecision.enable() ){				// Si el chip esta habilitado
 8000e60:	483b      	ldr	r0, [pc, #236]	@ (8000f50 <_Z7appLorav+0x2a8>)
 8000e62:	f002 fef3 	bl	8003c4c <_ZN12loraDecision6enableEv>
 8000e66:	4603      	mov	r3, r0
 8000e68:	f083 0301 	eor.w	r3, r3, #1
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d003      	beq.n	8000e7a <_Z7appLorav+0x1d2>
			stateLoraApp	= 6;					// Pasa a S6
 8000e72:	4b36      	ldr	r3, [pc, #216]	@ (8000f4c <_Z7appLorav+0x2a4>)
 8000e74:	2206      	movs	r2, #6
 8000e76:	701a      	strb	r2, [r3, #0]
		}
		else{										// Si no
			stateLoraApp	= 5;					// Espera
		}

		break;
 8000e78:	e0f9      	b.n	800106e <_Z7appLorav+0x3c6>
		else if ( countLoraApp >= limitLoraApp ){	// Si pasa el limite
 8000e7a:	4b3f      	ldr	r3, [pc, #252]	@ (8000f78 <_Z7appLorav+0x2d0>)
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	4b3f      	ldr	r3, [pc, #252]	@ (8000f7c <_Z7appLorav+0x2d4>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	429a      	cmp	r2, r3
 8000e84:	db09      	blt.n	8000e9a <_Z7appLorav+0x1f2>
			bussyRN2903		= 1;					// Habilita
 8000e86:	4b3e      	ldr	r3, [pc, #248]	@ (8000f80 <_Z7appLorav+0x2d8>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	701a      	strb	r2, [r3, #0]
			countLoraApp	= 0;					// Reinicia contador
 8000e8c:	4b3a      	ldr	r3, [pc, #232]	@ (8000f78 <_Z7appLorav+0x2d0>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
			stateLoraApp	= 3;					// Pasa a S3
 8000e92:	4b2e      	ldr	r3, [pc, #184]	@ (8000f4c <_Z7appLorav+0x2a4>)
 8000e94:	2203      	movs	r2, #3
 8000e96:	701a      	strb	r2, [r3, #0]
		break;
 8000e98:	e0e9      	b.n	800106e <_Z7appLorav+0x3c6>
			stateLoraApp	= 5;					// Espera
 8000e9a:	4b2c      	ldr	r3, [pc, #176]	@ (8000f4c <_Z7appLorav+0x2a4>)
 8000e9c:	2205      	movs	r2, #5
 8000e9e:	701a      	strb	r2, [r3, #0]
		break;
 8000ea0:	e0e5      	b.n	800106e <_Z7appLorav+0x3c6>
	////////////////////////
	// S6 - RESET RUTINES //
	////////////////////////

	case 6:
		setupRN2903.reset();	// Reinicia rutina
 8000ea2:	482e      	ldr	r0, [pc, #184]	@ (8000f5c <_Z7appLorav+0x2b4>)
 8000ea4:	f002 fc27 	bl	80036f6 <_ZN10loraRutine5resetEv>
		chSetRN2903.reset();	// Reinicia rutina
 8000ea8:	4832      	ldr	r0, [pc, #200]	@ (8000f74 <_Z7appLorav+0x2cc>)
 8000eaa:	f002 fc24 	bl	80036f6 <_ZN10loraRutine5resetEv>
		loopRN2903.reset();		// Reinicia rutina
 8000eae:	4830      	ldr	r0, [pc, #192]	@ (8000f70 <_Z7appLorav+0x2c8>)
 8000eb0:	f002 fc21 	bl	80036f6 <_ZN10loraRutine5resetEv>

		stateLoraApp	= 0;	// Vuelve a S0
 8000eb4:	4b25      	ldr	r3, [pc, #148]	@ (8000f4c <_Z7appLorav+0x2a4>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	701a      	strb	r2, [r3, #0]
		break;
 8000eba:	e0d8      	b.n	800106e <_Z7appLorav+0x3c6>
	/////////////////////////
	// S7 - SET CH COMMAND //
	/////////////////////////

	case 7:
		loraDecision.reset();								// Reinicia decisiones
 8000ebc:	4824      	ldr	r0, [pc, #144]	@ (8000f50 <_Z7appLorav+0x2a8>)
 8000ebe:	f002 fea2 	bl	8003c06 <_ZN12loraDecision5resetEv>
		txCommandPointer	= chSetRN2903.command();		// Solicita comando
 8000ec2:	482c      	ldr	r0, [pc, #176]	@ (8000f74 <_Z7appLorav+0x2cc>)
 8000ec4:	f002 fbed 	bl	80036a2 <_ZN10loraRutine7commandEv>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	4a25      	ldr	r2, [pc, #148]	@ (8000f60 <_Z7appLorav+0x2b8>)
 8000ecc:	6013      	str	r3, [r2, #0]
		loraSelect.setCommand( txCommandPointer->command,	// Inserta puntero al comando
 8000ece:	4b24      	ldr	r3, [pc, #144]	@ (8000f60 <_Z7appLorav+0x2b8>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	6859      	ldr	r1, [r3, #4]
 8000ed4:	4b22      	ldr	r3, [pc, #136]	@ (8000f60 <_Z7appLorav+0x2b8>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	781a      	ldrb	r2, [r3, #0]
 8000eda:	4b21      	ldr	r3, [pc, #132]	@ (8000f60 <_Z7appLorav+0x2b8>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	7a1b      	ldrb	r3, [r3, #8]
 8000ee0:	4820      	ldr	r0, [pc, #128]	@ (8000f64 <_Z7appLorav+0x2bc>)
 8000ee2:	f002 fdb5 	bl	8003a50 <_ZN10loraSelect10setCommandEPhhh>
				txCommandPointer->size,						// Inserta tamañp del comando
				txCommandPointer->responseSize );			// Inserta tamaño de respuesta
		stateLoraApp	= 8;								// Pasa a S2
 8000ee6:	4b19      	ldr	r3, [pc, #100]	@ (8000f4c <_Z7appLorav+0x2a4>)
 8000ee8:	2208      	movs	r2, #8
 8000eea:	701a      	strb	r2, [r3, #0]
		break;
 8000eec:	e0bf      	b.n	800106e <_Z7appLorav+0x3c6>
	/////////////////////////
	// S8 - CHECK RESPONSE //
	/////////////////////////

	case 8:
		if ( !loraDecision.enable() ){									// Si el chip esta habilitado
 8000eee:	4818      	ldr	r0, [pc, #96]	@ (8000f50 <_Z7appLorav+0x2a8>)
 8000ef0:	f002 feac 	bl	8003c4c <_ZN12loraDecision6enableEv>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	f083 0301 	eor.w	r3, r3, #1
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d003      	beq.n	8000f08 <_Z7appLorav+0x260>
			stateLoraApp	= 6;										// Pasa a S6
 8000f00:	4b12      	ldr	r3, [pc, #72]	@ (8000f4c <_Z7appLorav+0x2a4>)
 8000f02:	2206      	movs	r2, #6
 8000f04:	701a      	strb	r2, [r3, #0]
			stateLoraApp	= 7;										// Vuelve a S7
		}
		else{															// Si no
			stateLoraApp	= 8;										// Se queda en S8
		}
		break;
 8000f06:	e0b2      	b.n	800106e <_Z7appLorav+0x3c6>
		else if ( loraDecision.correct() && chSetRN2903.finish() ){		// Si llegó la respuesta correcta y es la ultima
 8000f08:	4811      	ldr	r0, [pc, #68]	@ (8000f50 <_Z7appLorav+0x2a8>)
 8000f0a:	f002 feab 	bl	8003c64 <_ZN12loraDecision7correctEv>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d007      	beq.n	8000f24 <_Z7appLorav+0x27c>
 8000f14:	4817      	ldr	r0, [pc, #92]	@ (8000f74 <_Z7appLorav+0x2cc>)
 8000f16:	f002 fc00 	bl	800371a <_ZN10loraRutine6finishEv>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <_Z7appLorav+0x27c>
 8000f20:	2301      	movs	r3, #1
 8000f22:	e000      	b.n	8000f26 <_Z7appLorav+0x27e>
 8000f24:	2300      	movs	r3, #0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d006      	beq.n	8000f38 <_Z7appLorav+0x290>
			countChSet		= 10;										// Inicia contador en 10
 8000f2a:	4b16      	ldr	r3, [pc, #88]	@ (8000f84 <_Z7appLorav+0x2dc>)
 8000f2c:	220a      	movs	r2, #10
 8000f2e:	701a      	strb	r2, [r3, #0]
			stateLoraApp	= 9;										// Pasa a  S9
 8000f30:	4b06      	ldr	r3, [pc, #24]	@ (8000f4c <_Z7appLorav+0x2a4>)
 8000f32:	2209      	movs	r2, #9
 8000f34:	701a      	strb	r2, [r3, #0]
		break;
 8000f36:	e09a      	b.n	800106e <_Z7appLorav+0x3c6>
		else if ( loraDecision.correct() ){								// Si solo es correctao
 8000f38:	4805      	ldr	r0, [pc, #20]	@ (8000f50 <_Z7appLorav+0x2a8>)
 8000f3a:	f002 fe93 	bl	8003c64 <_ZN12loraDecision7correctEv>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d021      	beq.n	8000f88 <_Z7appLorav+0x2e0>
			stateLoraApp	= 7;										// Vuelve a S7
 8000f44:	4b01      	ldr	r3, [pc, #4]	@ (8000f4c <_Z7appLorav+0x2a4>)
 8000f46:	2207      	movs	r2, #7
 8000f48:	701a      	strb	r2, [r3, #0]
		break;
 8000f4a:	e090      	b.n	800106e <_Z7appLorav+0x3c6>
 8000f4c:	20000008 	.word	0x20000008
 8000f50:	20000b78 	.word	0x20000b78
 8000f54:	20000170 	.word	0x20000170
 8000f58:	20000b64 	.word	0x20000b64
 8000f5c:	20000b88 	.word	0x20000b88
 8000f60:	200003f0 	.word	0x200003f0
 8000f64:	20000b80 	.word	0x20000b80
 8000f68:	200003c3 	.word	0x200003c3
 8000f6c:	20000506 	.word	0x20000506
 8000f70:	20000eb0 	.word	0x20000eb0
 8000f74:	20000d1c 	.word	0x20000d1c
 8000f78:	200003f4 	.word	0x200003f4
 8000f7c:	200003f8 	.word	0x200003f8
 8000f80:	200003c4 	.word	0x200003c4
 8000f84:	200003fc 	.word	0x200003fc
			stateLoraApp	= 8;										// Se queda en S8
 8000f88:	4b3a      	ldr	r3, [pc, #232]	@ (8001074 <_Z7appLorav+0x3cc>)
 8000f8a:	2208      	movs	r2, #8
 8000f8c:	701a      	strb	r2, [r3, #0]
		break;
 8000f8e:	e06e      	b.n	800106e <_Z7appLorav+0x3c6>
	///////////////////////////
	// S9 - GET LAST COMMAND //
	///////////////////////////

	case 9:
		loraDecision.reset();										// Reinicia decisiones
 8000f90:	4839      	ldr	r0, [pc, #228]	@ (8001078 <_Z7appLorav+0x3d0>)
 8000f92:	f002 fe38 	bl	8003c06 <_ZN12loraDecision5resetEv>
		macSetCh10_RN2903[18]	= uint8_t(countChSet/10) + '0';		// Inserta decena del contador
 8000f96:	4b39      	ldr	r3, [pc, #228]	@ (800107c <_Z7appLorav+0x3d4>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	4a39      	ldr	r2, [pc, #228]	@ (8001080 <_Z7appLorav+0x3d8>)
 8000f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8000fa0:	08db      	lsrs	r3, r3, #3
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	3330      	adds	r3, #48	@ 0x30
 8000fa6:	b2da      	uxtb	r2, r3
 8000fa8:	4b36      	ldr	r3, [pc, #216]	@ (8001084 <_Z7appLorav+0x3dc>)
 8000faa:	749a      	strb	r2, [r3, #18]
		macSetCh10_RN2903[19]	= countChSet%10 + '0';				// Inserta unidad de contador
 8000fac:	4b33      	ldr	r3, [pc, #204]	@ (800107c <_Z7appLorav+0x3d4>)
 8000fae:	781a      	ldrb	r2, [r3, #0]
 8000fb0:	4b33      	ldr	r3, [pc, #204]	@ (8001080 <_Z7appLorav+0x3d8>)
 8000fb2:	fba3 1302 	umull	r1, r3, r3, r2
 8000fb6:	08d9      	lsrs	r1, r3, #3
 8000fb8:	460b      	mov	r3, r1
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	440b      	add	r3, r1
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	3330      	adds	r3, #48	@ 0x30
 8000fc6:	b2da      	uxtb	r2, r3
 8000fc8:	4b2e      	ldr	r3, [pc, #184]	@ (8001084 <_Z7appLorav+0x3dc>)
 8000fca:	74da      	strb	r2, [r3, #19]
		loraSelect.setCommand( txCommandPointer->command,			// Fija comando en la salida
 8000fcc:	4b2e      	ldr	r3, [pc, #184]	@ (8001088 <_Z7appLorav+0x3e0>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	6859      	ldr	r1, [r3, #4]
 8000fd2:	4b2d      	ldr	r3, [pc, #180]	@ (8001088 <_Z7appLorav+0x3e0>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	781a      	ldrb	r2, [r3, #0]
 8000fd8:	4b2b      	ldr	r3, [pc, #172]	@ (8001088 <_Z7appLorav+0x3e0>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	7a1b      	ldrb	r3, [r3, #8]
 8000fde:	482b      	ldr	r0, [pc, #172]	@ (800108c <_Z7appLorav+0x3e4>)
 8000fe0:	f002 fd36 	bl	8003a50 <_ZN10loraSelect10setCommandEPhhh>
				txCommandPointer->size,								// Inserta tamañp del comando
				txCommandPointer->responseSize);					// Inserta tamaño de respuesta
		stateLoraApp	= 10;										// Pasa a S10
 8000fe4:	4b23      	ldr	r3, [pc, #140]	@ (8001074 <_Z7appLorav+0x3cc>)
 8000fe6:	220a      	movs	r2, #10
 8000fe8:	701a      	strb	r2, [r3, #0]
		break;
 8000fea:	e040      	b.n	800106e <_Z7appLorav+0x3c6>
	//////////////////////////
	// S10 - CHECK RESPONSE //
	//////////////////////////

	case 10:
		if ( !loraDecision.enable() ){									// Si el chip esta habilitado
 8000fec:	4822      	ldr	r0, [pc, #136]	@ (8001078 <_Z7appLorav+0x3d0>)
 8000fee:	f002 fe2d 	bl	8003c4c <_ZN12loraDecision6enableEv>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	f083 0301 	eor.w	r3, r3, #1
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d003      	beq.n	8001006 <_Z7appLorav+0x35e>
			stateLoraApp	= 6;										// Pasa a S6
 8000ffe:	4b1d      	ldr	r3, [pc, #116]	@ (8001074 <_Z7appLorav+0x3cc>)
 8001000:	2206      	movs	r2, #6
 8001002:	701a      	strb	r2, [r3, #0]
			stateLoraApp	= 9;										// Vuelve a S9
		}
		else{															// Si no
			stateLoraApp	= 10;										// Se queda en S10
		}
		break;
 8001004:	e033      	b.n	800106e <_Z7appLorav+0x3c6>
		else if ( loraDecision.correct() && countChSet == 71 ){			// Si llegó la respuesta correcta y es la ultima
 8001006:	481c      	ldr	r0, [pc, #112]	@ (8001078 <_Z7appLorav+0x3d0>)
 8001008:	f002 fe2c 	bl	8003c64 <_ZN12loraDecision7correctEv>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d005      	beq.n	800101e <_Z7appLorav+0x376>
 8001012:	4b1a      	ldr	r3, [pc, #104]	@ (800107c <_Z7appLorav+0x3d4>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	2b47      	cmp	r3, #71	@ 0x47
 8001018:	d101      	bne.n	800101e <_Z7appLorav+0x376>
 800101a:	2301      	movs	r3, #1
 800101c:	e000      	b.n	8001020 <_Z7appLorav+0x378>
 800101e:	2300      	movs	r3, #0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d00c      	beq.n	800103e <_Z7appLorav+0x396>
			macSetCh10_RN2903[18]	= '1';								// Fija comando en valor original '1'
 8001024:	4b17      	ldr	r3, [pc, #92]	@ (8001084 <_Z7appLorav+0x3dc>)
 8001026:	2231      	movs	r2, #49	@ 0x31
 8001028:	749a      	strb	r2, [r3, #18]
			macSetCh10_RN2903[19]	= '0';								// Fija comando en valor original '0'
 800102a:	4b16      	ldr	r3, [pc, #88]	@ (8001084 <_Z7appLorav+0x3dc>)
 800102c:	2230      	movs	r2, #48	@ 0x30
 800102e:	74da      	strb	r2, [r3, #19]
			countChSet		= 10;										// Reinicia contador en 10
 8001030:	4b12      	ldr	r3, [pc, #72]	@ (800107c <_Z7appLorav+0x3d4>)
 8001032:	220a      	movs	r2, #10
 8001034:	701a      	strb	r2, [r3, #0]
			stateLoraApp	= 1;										// Pasa a  S3
 8001036:	4b0f      	ldr	r3, [pc, #60]	@ (8001074 <_Z7appLorav+0x3cc>)
 8001038:	2201      	movs	r2, #1
 800103a:	701a      	strb	r2, [r3, #0]
		break;
 800103c:	e017      	b.n	800106e <_Z7appLorav+0x3c6>
		else if ( loraDecision.correct() ){								// Si solo es correctao
 800103e:	480e      	ldr	r0, [pc, #56]	@ (8001078 <_Z7appLorav+0x3d0>)
 8001040:	f002 fe10 	bl	8003c64 <_ZN12loraDecision7correctEv>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d009      	beq.n	800105e <_Z7appLorav+0x3b6>
			countChSet++;												// Suma 1 al contador
 800104a:	4b0c      	ldr	r3, [pc, #48]	@ (800107c <_Z7appLorav+0x3d4>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	3301      	adds	r3, #1
 8001050:	b2da      	uxtb	r2, r3
 8001052:	4b0a      	ldr	r3, [pc, #40]	@ (800107c <_Z7appLorav+0x3d4>)
 8001054:	701a      	strb	r2, [r3, #0]
			stateLoraApp	= 9;										// Vuelve a S9
 8001056:	4b07      	ldr	r3, [pc, #28]	@ (8001074 <_Z7appLorav+0x3cc>)
 8001058:	2209      	movs	r2, #9
 800105a:	701a      	strb	r2, [r3, #0]
		break;
 800105c:	e007      	b.n	800106e <_Z7appLorav+0x3c6>
			stateLoraApp	= 10;										// Se queda en S10
 800105e:	4b05      	ldr	r3, [pc, #20]	@ (8001074 <_Z7appLorav+0x3cc>)
 8001060:	220a      	movs	r2, #10
 8001062:	701a      	strb	r2, [r3, #0]
		break;
 8001064:	e003      	b.n	800106e <_Z7appLorav+0x3c6>

	default:
		stateLoraApp	= 0;
 8001066:	4b03      	ldr	r3, [pc, #12]	@ (8001074 <_Z7appLorav+0x3cc>)
 8001068:	2200      	movs	r2, #0
 800106a:	701a      	strb	r2, [r3, #0]
		break;
 800106c:	bf00      	nop
	}
}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	20000008 	.word	0x20000008
 8001078:	20000b78 	.word	0x20000b78
 800107c:	200003fc 	.word	0x200003fc
 8001080:	cccccccd 	.word	0xcccccccd
 8001084:	20000378 	.word	0x20000378
 8001088:	200003f0 	.word	0x200003f0
 800108c:	20000b80 	.word	0x20000b80

08001090 <_Z10uint2hex_Ah>:

uint8_t uint2hex_A( uint8_t number ){
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	71fb      	strb	r3, [r7, #7]
	uint8_t value = (number >> 4 & 0x0F);
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	091b      	lsrs	r3, r3, #4
 800109e:	73fb      	strb	r3, [r7, #15]

	switch ( value ){
 80010a0:	7bfb      	ldrb	r3, [r7, #15]
 80010a2:	2b0f      	cmp	r3, #15
 80010a4:	d852      	bhi.n	800114c <_Z10uint2hex_Ah+0xbc>
 80010a6:	a201      	add	r2, pc, #4	@ (adr r2, 80010ac <_Z10uint2hex_Ah+0x1c>)
 80010a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ac:	080010ed 	.word	0x080010ed
 80010b0:	080010f3 	.word	0x080010f3
 80010b4:	080010f9 	.word	0x080010f9
 80010b8:	080010ff 	.word	0x080010ff
 80010bc:	08001105 	.word	0x08001105
 80010c0:	0800110b 	.word	0x0800110b
 80010c4:	08001111 	.word	0x08001111
 80010c8:	08001117 	.word	0x08001117
 80010cc:	0800111d 	.word	0x0800111d
 80010d0:	08001123 	.word	0x08001123
 80010d4:	08001129 	.word	0x08001129
 80010d8:	0800112f 	.word	0x0800112f
 80010dc:	08001135 	.word	0x08001135
 80010e0:	0800113b 	.word	0x0800113b
 80010e4:	08001141 	.word	0x08001141
 80010e8:	08001147 	.word	0x08001147
	case 0:
		value = '0';
 80010ec:	2330      	movs	r3, #48	@ 0x30
 80010ee:	73fb      	strb	r3, [r7, #15]
		break;
 80010f0:	e02c      	b.n	800114c <_Z10uint2hex_Ah+0xbc>

	case 1:
		value = '1';
 80010f2:	2331      	movs	r3, #49	@ 0x31
 80010f4:	73fb      	strb	r3, [r7, #15]
		break;
 80010f6:	e029      	b.n	800114c <_Z10uint2hex_Ah+0xbc>

	case 2:
		value = '2';
 80010f8:	2332      	movs	r3, #50	@ 0x32
 80010fa:	73fb      	strb	r3, [r7, #15]
		break;
 80010fc:	e026      	b.n	800114c <_Z10uint2hex_Ah+0xbc>

	case 3:
		value = '3';
 80010fe:	2333      	movs	r3, #51	@ 0x33
 8001100:	73fb      	strb	r3, [r7, #15]
		break;
 8001102:	e023      	b.n	800114c <_Z10uint2hex_Ah+0xbc>

	case 4:
		value = '4';
 8001104:	2334      	movs	r3, #52	@ 0x34
 8001106:	73fb      	strb	r3, [r7, #15]
		break;
 8001108:	e020      	b.n	800114c <_Z10uint2hex_Ah+0xbc>

	case 5:
		value = '5';
 800110a:	2335      	movs	r3, #53	@ 0x35
 800110c:	73fb      	strb	r3, [r7, #15]
		break;
 800110e:	e01d      	b.n	800114c <_Z10uint2hex_Ah+0xbc>

	case 6:
		value = '6';
 8001110:	2336      	movs	r3, #54	@ 0x36
 8001112:	73fb      	strb	r3, [r7, #15]
		break;
 8001114:	e01a      	b.n	800114c <_Z10uint2hex_Ah+0xbc>

	case 7:
		value = '7';
 8001116:	2337      	movs	r3, #55	@ 0x37
 8001118:	73fb      	strb	r3, [r7, #15]
		break;
 800111a:	e017      	b.n	800114c <_Z10uint2hex_Ah+0xbc>

	case 8:
		value = '8';
 800111c:	2338      	movs	r3, #56	@ 0x38
 800111e:	73fb      	strb	r3, [r7, #15]
		break;
 8001120:	e014      	b.n	800114c <_Z10uint2hex_Ah+0xbc>

	case 9:
		value = '9';
 8001122:	2339      	movs	r3, #57	@ 0x39
 8001124:	73fb      	strb	r3, [r7, #15]
		break;
 8001126:	e011      	b.n	800114c <_Z10uint2hex_Ah+0xbc>

	case 10:
		value = 'A';
 8001128:	2341      	movs	r3, #65	@ 0x41
 800112a:	73fb      	strb	r3, [r7, #15]
		break;
 800112c:	e00e      	b.n	800114c <_Z10uint2hex_Ah+0xbc>

	case 11:
		value = 'B';
 800112e:	2342      	movs	r3, #66	@ 0x42
 8001130:	73fb      	strb	r3, [r7, #15]
		break;
 8001132:	e00b      	b.n	800114c <_Z10uint2hex_Ah+0xbc>

	case 12:
		value = 'C';
 8001134:	2343      	movs	r3, #67	@ 0x43
 8001136:	73fb      	strb	r3, [r7, #15]
		break;
 8001138:	e008      	b.n	800114c <_Z10uint2hex_Ah+0xbc>

	case 13:
		value = 'D';
 800113a:	2344      	movs	r3, #68	@ 0x44
 800113c:	73fb      	strb	r3, [r7, #15]
		break;
 800113e:	e005      	b.n	800114c <_Z10uint2hex_Ah+0xbc>

	case 14:
		value = 'E';
 8001140:	2345      	movs	r3, #69	@ 0x45
 8001142:	73fb      	strb	r3, [r7, #15]
		break;
 8001144:	e002      	b.n	800114c <_Z10uint2hex_Ah+0xbc>

	case 15:
		value = 'F';
 8001146:	2346      	movs	r3, #70	@ 0x46
 8001148:	73fb      	strb	r3, [r7, #15]
		break;
 800114a:	bf00      	nop
	}
	return  value;
 800114c:	7bfb      	ldrb	r3, [r7, #15]
}
 800114e:	4618      	mov	r0, r3
 8001150:	3714      	adds	r7, #20
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop

0800115c <_Z10uint2hex_Bh>:

uint8_t uint2hex_B( uint8_t number ){
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	71fb      	strb	r3, [r7, #7]
	uint8_t value = (number & 0x0F);
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	f003 030f 	and.w	r3, r3, #15
 800116c:	73fb      	strb	r3, [r7, #15]

	switch ( value ){
 800116e:	7bfb      	ldrb	r3, [r7, #15]
 8001170:	2b0f      	cmp	r3, #15
 8001172:	d853      	bhi.n	800121c <_Z10uint2hex_Bh+0xc0>
 8001174:	a201      	add	r2, pc, #4	@ (adr r2, 800117c <_Z10uint2hex_Bh+0x20>)
 8001176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800117a:	bf00      	nop
 800117c:	080011bd 	.word	0x080011bd
 8001180:	080011c3 	.word	0x080011c3
 8001184:	080011c9 	.word	0x080011c9
 8001188:	080011cf 	.word	0x080011cf
 800118c:	080011d5 	.word	0x080011d5
 8001190:	080011db 	.word	0x080011db
 8001194:	080011e1 	.word	0x080011e1
 8001198:	080011e7 	.word	0x080011e7
 800119c:	080011ed 	.word	0x080011ed
 80011a0:	080011f3 	.word	0x080011f3
 80011a4:	080011f9 	.word	0x080011f9
 80011a8:	080011ff 	.word	0x080011ff
 80011ac:	08001205 	.word	0x08001205
 80011b0:	0800120b 	.word	0x0800120b
 80011b4:	08001211 	.word	0x08001211
 80011b8:	08001217 	.word	0x08001217
	case 0:
		value = '0';
 80011bc:	2330      	movs	r3, #48	@ 0x30
 80011be:	73fb      	strb	r3, [r7, #15]
		break;
 80011c0:	e02c      	b.n	800121c <_Z10uint2hex_Bh+0xc0>

	case 1:
		value = '1';
 80011c2:	2331      	movs	r3, #49	@ 0x31
 80011c4:	73fb      	strb	r3, [r7, #15]
		break;
 80011c6:	e029      	b.n	800121c <_Z10uint2hex_Bh+0xc0>

	case 2:
		value = '2';
 80011c8:	2332      	movs	r3, #50	@ 0x32
 80011ca:	73fb      	strb	r3, [r7, #15]
		break;
 80011cc:	e026      	b.n	800121c <_Z10uint2hex_Bh+0xc0>

	case 3:
		value = '3';
 80011ce:	2333      	movs	r3, #51	@ 0x33
 80011d0:	73fb      	strb	r3, [r7, #15]
		break;
 80011d2:	e023      	b.n	800121c <_Z10uint2hex_Bh+0xc0>

	case 4:
		value = '4';
 80011d4:	2334      	movs	r3, #52	@ 0x34
 80011d6:	73fb      	strb	r3, [r7, #15]
		break;
 80011d8:	e020      	b.n	800121c <_Z10uint2hex_Bh+0xc0>

	case 5:
		value = '5';
 80011da:	2335      	movs	r3, #53	@ 0x35
 80011dc:	73fb      	strb	r3, [r7, #15]
		break;
 80011de:	e01d      	b.n	800121c <_Z10uint2hex_Bh+0xc0>

	case 6:
		value = '6';
 80011e0:	2336      	movs	r3, #54	@ 0x36
 80011e2:	73fb      	strb	r3, [r7, #15]
		break;
 80011e4:	e01a      	b.n	800121c <_Z10uint2hex_Bh+0xc0>

	case 7:
		value = '7';
 80011e6:	2337      	movs	r3, #55	@ 0x37
 80011e8:	73fb      	strb	r3, [r7, #15]
		break;
 80011ea:	e017      	b.n	800121c <_Z10uint2hex_Bh+0xc0>

	case 8:
		value = '8';
 80011ec:	2338      	movs	r3, #56	@ 0x38
 80011ee:	73fb      	strb	r3, [r7, #15]
		break;
 80011f0:	e014      	b.n	800121c <_Z10uint2hex_Bh+0xc0>

	case 9:
		value = '9';
 80011f2:	2339      	movs	r3, #57	@ 0x39
 80011f4:	73fb      	strb	r3, [r7, #15]
		break;
 80011f6:	e011      	b.n	800121c <_Z10uint2hex_Bh+0xc0>

	case 10:
		value = 'A';
 80011f8:	2341      	movs	r3, #65	@ 0x41
 80011fa:	73fb      	strb	r3, [r7, #15]
		break;
 80011fc:	e00e      	b.n	800121c <_Z10uint2hex_Bh+0xc0>

	case 11:
		value = 'B';
 80011fe:	2342      	movs	r3, #66	@ 0x42
 8001200:	73fb      	strb	r3, [r7, #15]
		break;
 8001202:	e00b      	b.n	800121c <_Z10uint2hex_Bh+0xc0>

	case 12:
		value = 'C';
 8001204:	2343      	movs	r3, #67	@ 0x43
 8001206:	73fb      	strb	r3, [r7, #15]
		break;
 8001208:	e008      	b.n	800121c <_Z10uint2hex_Bh+0xc0>

	case 13:
		value = 'D';
 800120a:	2344      	movs	r3, #68	@ 0x44
 800120c:	73fb      	strb	r3, [r7, #15]
		break;
 800120e:	e005      	b.n	800121c <_Z10uint2hex_Bh+0xc0>

	case 14:
		value = 'E';
 8001210:	2345      	movs	r3, #69	@ 0x45
 8001212:	73fb      	strb	r3, [r7, #15]
		break;
 8001214:	e002      	b.n	800121c <_Z10uint2hex_Bh+0xc0>

	case 15:
		value = 'F';
 8001216:	2346      	movs	r3, #70	@ 0x46
 8001218:	73fb      	strb	r3, [r7, #15]
		break;
 800121a:	bf00      	nop
	}
	return  value;
 800121c:	7bfb      	ldrb	r3, [r7, #15]
}
 800121e:	4618      	mov	r0, r3
 8001220:	3714      	adds	r7, #20
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop

0800122c <_Z41__static_initialization_and_destruction_0ii>:
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	6039      	str	r1, [r7, #0]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2b01      	cmp	r3, #1
 800123a:	d10d      	bne.n	8001258 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001242:	4293      	cmp	r3, r2
 8001244:	d108      	bne.n	8001258 <_Z41__static_initialization_and_destruction_0ii+0x2c>
int limitLoraApp = 5000/superloop;
 8001246:	4b07      	ldr	r3, [pc, #28]	@ (8001264 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	461a      	mov	r2, r3
 800124c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001250:	fb93 f3f2 	sdiv	r3, r3, r2
 8001254:	4a04      	ldr	r2, [pc, #16]	@ (8001268 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8001256:	6013      	str	r3, [r2, #0]
}
 8001258:	bf00      	nop
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	20000395 	.word	0x20000395
 8001268:	200003f8 	.word	0x200003f8

0800126c <_GLOBAL__sub_I_stateContent>:
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
 8001270:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001274:	2001      	movs	r0, #1
 8001276:	f7ff ffd9 	bl	800122c <_Z41__static_initialization_and_destruction_0ii>
 800127a:	bd80      	pop	{r7, pc}

0800127c <_ZN12fifoCommands9availableEv>:

///////////////
// AVAILABLE //
///////////////

bool fifoCommands::available(){		// Indica si hay elementos en Fifo
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
	return this->bussy;				// Retorna flag
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
}
 800128a:	4618      	mov	r0, r3
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr

08001296 <_ZN12fifoCommands3addEPhh>:

/////////////////
// ADD COMMAND //
/////////////////

void fifoCommands::add( uint8_t *command, uint8_t size ){
 8001296:	b480      	push	{r7}
 8001298:	b087      	sub	sp, #28
 800129a:	af00      	add	r7, sp, #0
 800129c:	60f8      	str	r0, [r7, #12]
 800129e:	60b9      	str	r1, [r7, #8]
 80012a0:	4613      	mov	r3, r2
 80012a2:	71fb      	strb	r3, [r7, #7]
	uint8_t i;															// Crea variable

	if ( this->index < 10 ){											// Si el indice es menor a 10
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80012aa:	2b09      	cmp	r3, #9
 80012ac:	d828      	bhi.n	8001300 <_ZN12fifoCommands3addEPhh+0x6a>
		for( i = 0; i < size ; i++){									// Recorre el largo del comando
 80012ae:	2300      	movs	r3, #0
 80012b0:	75fb      	strb	r3, [r7, #23]
 80012b2:	e010      	b.n	80012d6 <_ZN12fifoCommands3addEPhh+0x40>
			*(this->rxCommand[this->index] + i)  = *(command + i);		// Copia valores del comando
 80012b4:	7dfb      	ldrb	r3, [r7, #23]
 80012b6:	68ba      	ldr	r2, [r7, #8]
 80012b8:	441a      	add	r2, r3
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80012c0:	68f9      	ldr	r1, [r7, #12]
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	440b      	add	r3, r1
 80012c6:	6859      	ldr	r1, [r3, #4]
 80012c8:	7dfb      	ldrb	r3, [r7, #23]
 80012ca:	440b      	add	r3, r1
 80012cc:	7812      	ldrb	r2, [r2, #0]
 80012ce:	701a      	strb	r2, [r3, #0]
		for( i = 0; i < size ; i++){									// Recorre el largo del comando
 80012d0:	7dfb      	ldrb	r3, [r7, #23]
 80012d2:	3301      	adds	r3, #1
 80012d4:	75fb      	strb	r3, [r7, #23]
 80012d6:	7dfa      	ldrb	r2, [r7, #23]
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	429a      	cmp	r2, r3
 80012dc:	d3ea      	bcc.n	80012b4 <_ZN12fifoCommands3addEPhh+0x1e>
		}
		this->index++;													// Suma 1 al indice
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80012e4:	3301      	adds	r3, #1
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
		this->full 	= 0;												// Indica que no está full
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	2200      	movs	r2, #0
 80012f2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
		this->bussy	= 1;												// Indica que hay elementos
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	2201      	movs	r2, #1
 80012fa:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
	}
	else{																// Si no
		this->bussy	= 1;												// Indica que hay elementos
		this->full 	= 1;												// Indica que esta full
	}
}
 80012fe:	e007      	b.n	8001310 <_ZN12fifoCommands3addEPhh+0x7a>
		this->bussy	= 1;												// Indica que hay elementos
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	2201      	movs	r2, #1
 8001304:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
		this->full 	= 1;												// Indica que esta full
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	2201      	movs	r2, #1
 800130c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 8001310:	bf00      	nop
 8001312:	371c      	adds	r7, #28
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <_ZN12fifoCommands4readEPhh>:
//////////////////

/*
 * El output de esta operacion es la variable *buffer que a su vez es una entrada
 */
void fifoCommands::read( uint8_t *buffer, uint8_t size ){
 800131c:	b480      	push	{r7}
 800131e:	b087      	sub	sp, #28
 8001320:	af00      	add	r7, sp, #0
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	60b9      	str	r1, [r7, #8]
 8001326:	4613      	mov	r3, r2
 8001328:	71fb      	strb	r3, [r7, #7]
	uint8_t i;																// Crea variable
	uint8_t j;																// Crea variable

	if ( this->index > 0 ){													// Si el indice es mayo a 0
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001330:	2b00      	cmp	r3, #0
 8001332:	d040      	beq.n	80013b6 <_ZN12fifoCommands4readEPhh+0x9a>
		for (i = 0; i < size; i++){											// Recorre largo del comando
 8001334:	2300      	movs	r3, #0
 8001336:	75fb      	strb	r3, [r7, #23]
 8001338:	e00b      	b.n	8001352 <_ZN12fifoCommands4readEPhh+0x36>
			buffer[i]	= this->rxCommand_0[i];								// Copia comando en buffer
 800133a:	7dfa      	ldrb	r2, [r7, #23]
 800133c:	7dfb      	ldrb	r3, [r7, #23]
 800133e:	68b9      	ldr	r1, [r7, #8]
 8001340:	440b      	add	r3, r1
 8001342:	68f9      	ldr	r1, [r7, #12]
 8001344:	440a      	add	r2, r1
 8001346:	f892 202f 	ldrb.w	r2, [r2, #47]	@ 0x2f
 800134a:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < size; i++){											// Recorre largo del comando
 800134c:	7dfb      	ldrb	r3, [r7, #23]
 800134e:	3301      	adds	r3, #1
 8001350:	75fb      	strb	r3, [r7, #23]
 8001352:	7dfa      	ldrb	r2, [r7, #23]
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	429a      	cmp	r2, r3
 8001358:	d3ef      	bcc.n	800133a <_ZN12fifoCommands4readEPhh+0x1e>
		}

		for (i = 0; i < this->index; i++){									// Recorre Fifo ocupada
 800135a:	2300      	movs	r3, #0
 800135c:	75fb      	strb	r3, [r7, #23]
 800135e:	e01c      	b.n	800139a <_ZN12fifoCommands4readEPhh+0x7e>
			for (j = 0; j < 10; j++){										// Recorre elementos de comando
 8001360:	2300      	movs	r3, #0
 8001362:	75bb      	strb	r3, [r7, #22]
 8001364:	e013      	b.n	800138e <_ZN12fifoCommands4readEPhh+0x72>
				*(this->rxCommand[i] + j) = *(this->rxCommand[i + 1] + j);	// Realiza un shift de los comandos en fifo
 8001366:	7dfb      	ldrb	r3, [r7, #23]
 8001368:	3301      	adds	r3, #1
 800136a:	68fa      	ldr	r2, [r7, #12]
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	4413      	add	r3, r2
 8001370:	685a      	ldr	r2, [r3, #4]
 8001372:	7dbb      	ldrb	r3, [r7, #22]
 8001374:	441a      	add	r2, r3
 8001376:	7dfb      	ldrb	r3, [r7, #23]
 8001378:	68f9      	ldr	r1, [r7, #12]
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	440b      	add	r3, r1
 800137e:	6859      	ldr	r1, [r3, #4]
 8001380:	7dbb      	ldrb	r3, [r7, #22]
 8001382:	440b      	add	r3, r1
 8001384:	7812      	ldrb	r2, [r2, #0]
 8001386:	701a      	strb	r2, [r3, #0]
			for (j = 0; j < 10; j++){										// Recorre elementos de comando
 8001388:	7dbb      	ldrb	r3, [r7, #22]
 800138a:	3301      	adds	r3, #1
 800138c:	75bb      	strb	r3, [r7, #22]
 800138e:	7dbb      	ldrb	r3, [r7, #22]
 8001390:	2b09      	cmp	r3, #9
 8001392:	d9e8      	bls.n	8001366 <_ZN12fifoCommands4readEPhh+0x4a>
		for (i = 0; i < this->index; i++){									// Recorre Fifo ocupada
 8001394:	7dfb      	ldrb	r3, [r7, #23]
 8001396:	3301      	adds	r3, #1
 8001398:	75fb      	strb	r3, [r7, #23]
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80013a0:	7dfa      	ldrb	r2, [r7, #23]
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d3dc      	bcc.n	8001360 <_ZN12fifoCommands4readEPhh+0x44>
			}
		}
		this->index--;														// Resta 1 en largo de fifo ocupada
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80013ac:	3b01      	subs	r3, #1
 80013ae:	b2da      	uxtb	r2, r3
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	}

	if ( this->index == 0){													// Si el largo es 0
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d103      	bne.n	80013c8 <_ZN12fifoCommands4readEPhh+0xac>
		this->bussy	= 0;													// Indica que no está ocupada
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	2200      	movs	r2, #0
 80013c4:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
	}
}
 80013c8:	bf00      	nop
 80013ca:	371c      	adds	r7, #28
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <_ZN8fifoUartC1Ev>:


/********************/

fifoUart::fifoUart(){
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
	this->finalElement = this->elements;	// Cuando se construye la fifo
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f103 020c 	add.w	r2, r3, #12
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	601a      	str	r2, [r3, #0]
											// El puntero de ultimo elemento
											// Apunta al primer elemento de la cadena
}
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4618      	mov	r0, r3
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <_ZN8fifoUart13insertElementEh>:

////////////////////
// INSERT ELEMENT //
////////////////////

bool fifoUart::insertElement( uint8_t element ){
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	460b      	mov	r3, r1
 80013fe:	70fb      	strb	r3, [r7, #3]

	if (!(this->bussyFifo)){							// Si no está lleno
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	795b      	ldrb	r3, [r3, #5]
 8001404:	f083 0301 	eor.w	r3, r3, #1
 8001408:	b2db      	uxtb	r3, r3
 800140a:	2b00      	cmp	r3, #0
 800140c:	d00d      	beq.n	800142a <_ZN8fifoUart13insertElementEh+0x36>
		*this->finalElement	= element;					// Inserta elemento
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	78fa      	ldrb	r2, [r7, #3]
 8001414:	701a      	strb	r2, [r3, #0]
		this->finalElement = this->finalElement + 1;	// Suma 1 al puntero
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	1c5a      	adds	r2, r3, #1
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	601a      	str	r2, [r3, #0]
		this->large++;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	1c5a      	adds	r2, r3, #1
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	609a      	str	r2, [r3, #8]
	}

	if ( this->finalElement == &this->elements[50] ){	// Si el puntero es el último del array
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	333e      	adds	r3, #62	@ 0x3e
 8001432:	429a      	cmp	r2, r3
 8001434:	d103      	bne.n	800143e <_ZN8fifoUart13insertElementEh+0x4a>
		this->bussyFifo	= 1;							// Indica que se lleno el buffer
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2201      	movs	r2, #1
 800143a:	715a      	strb	r2, [r3, #5]
 800143c:	e002      	b.n	8001444 <_ZN8fifoUart13insertElementEh+0x50>
	}
	else{												// Si no
		this->bussyFifo	= 0;							// Indica que no se ha llenado
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2200      	movs	r2, #0
 8001442:	715a      	strb	r2, [r3, #5]
	}

	return !(this->bussyFifo);							// 1: Se insertó correctamente
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	795b      	ldrb	r3, [r3, #5]
 8001448:	f083 0301 	eor.w	r3, r3, #1
 800144c:	b2db      	uxtb	r3, r3
														// 0: No se inserto por Fifo llena
}
 800144e:	4618      	mov	r0, r3
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr

0800145a <_ZN8fifoUart11readElementEv>:

//////////////////
// READ ELEMENT //
//////////////////

uint8_t fifoUart::readElement(){
 800145a:	b480      	push	{r7}
 800145c:	b085      	sub	sp, #20
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]

	uint8_t elementy	= this->elements[0];							// Copia primer valor en fifo
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	7b1b      	ldrb	r3, [r3, #12]
 8001466:	72fb      	strb	r3, [r7, #11]

	for (uint8_t *j = this->elements; j < this->finalElement; j++){		// Recorre los elementos de fifo
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	330c      	adds	r3, #12
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	e006      	b.n	800147e <_ZN8fifoUart11readElementEv+0x24>
		*j	= *(j+1);													// Copia el elemento siguiente
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	785a      	ldrb	r2, [r3, #1]
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	701a      	strb	r2, [r3, #0]
	for (uint8_t *j = this->elements; j < this->finalElement; j++){		// Recorre los elementos de fifo
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	3301      	adds	r3, #1
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	68fa      	ldr	r2, [r7, #12]
 8001484:	429a      	cmp	r2, r3
 8001486:	d3f3      	bcc.n	8001470 <_ZN8fifoUart11readElementEv+0x16>
	}

	*this->finalElement = 0;											// Rellena el último valor con 0
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2200      	movs	r2, #0
 800148e:	701a      	strb	r2, [r3, #0]

	if (this->finalElement != this->elements){							// Si el último elemento no es el primero
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	330c      	adds	r3, #12
 8001498:	429a      	cmp	r2, r3
 800149a:	d00d      	beq.n	80014b8 <_ZN8fifoUart11readElementEv+0x5e>
		this->finalElement	= this->finalElement - 1;					//  Resta una posición al elemento final
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	1e5a      	subs	r2, r3, #1
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	601a      	str	r2, [r3, #0]
		this->emptyFifo	= 0;											// Indica que fifo no esta vacia
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2200      	movs	r2, #0
 80014aa:	711a      	strb	r2, [r3, #4]
		this->large--;													// Quita 1 al largo
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	1e5a      	subs	r2, r3, #1
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	609a      	str	r2, [r3, #8]
 80014b6:	e002      	b.n	80014be <_ZN8fifoUart11readElementEv+0x64>
	}
	else{																// Si no
		this->emptyFifo	= 1;											// Indica que fifo esta vacia
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2201      	movs	r2, #1
 80014bc:	711a      	strb	r2, [r3, #4]
	}

	return elementy;													// Retorna elementos a leer
 80014be:	7afb      	ldrb	r3, [r7, #11]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3714      	adds	r7, #20
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <_ZN8fifoUart9availableEv>:

///////////////
// AVAILABLE //
///////////////

bool fifoUart::available(){
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
	if (this->finalElement == &this->elements[0]){		// Si el puntero está apuntando
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	330c      	adds	r3, #12
 80014dc:	429a      	cmp	r2, r3
 80014de:	d103      	bne.n	80014e8 <_ZN8fifoUart9availableEv+0x1c>
														// al primer elemento de la fifo
		this->emptyFifo	= 1;							// Indica que la fifo esta vacia
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2201      	movs	r2, #1
 80014e4:	711a      	strb	r2, [r3, #4]
 80014e6:	e002      	b.n	80014ee <_ZN8fifoUart9availableEv+0x22>
	}
	else{												// Sino
		this->emptyFifo	= 0;							// Indica que la fifo contiene elementos
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2200      	movs	r2, #0
 80014ec:	711a      	strb	r2, [r3, #4]
	}
	return !(this->emptyFifo);							// 1: Elementos disponibles
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	791b      	ldrb	r3, [r3, #4]
 80014f2:	f083 0301 	eor.w	r3, r3, #1
 80014f6:	b2db      	uxtb	r3, r3
}														// 0: Sin elementos
 80014f8:	4618      	mov	r0, r3
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <_ZN8gpsInputC1Ev>:

///////////////////////////
// CONSTRUCTOR GPS INPUT //
///////////////////////////

gpsInput::gpsInput(){
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
};
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	4618      	mov	r0, r3
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
	...

0800151c <_ZN8gpsInput11insertValueEh>:

//////////////////
// INSERT VALUE //
//////////////////

void gpsInput::insertValue(uint8_t symbol){
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	460b      	mov	r3, r1
 8001526:	70fb      	strb	r3, [r7, #3]

	uint8_t *state	= &this->stateInsert;	// El estado apunta al registro del objeto
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	3356      	adds	r3, #86	@ 0x56
 800152c:	60fb      	str	r3, [r7, #12]

	this->lapsCounter++;			// Aumenta una vuelta
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	68db      	ldr	r3, [r3, #12]
 8001532:	1c5a      	adds	r2, r3, #1
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	60da      	str	r2, [r3, #12]

	switch ( *state ){
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b3c      	cmp	r3, #60	@ 0x3c
 800153e:	f200 829e 	bhi.w	8001a7e <_ZN8gpsInput11insertValueEh+0x562>
 8001542:	a201      	add	r2, pc, #4	@ (adr r2, 8001548 <_ZN8gpsInput11insertValueEh+0x2c>)
 8001544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001548:	0800163d 	.word	0x0800163d
 800154c:	08001667 	.word	0x08001667
 8001550:	0800167d 	.word	0x0800167d
 8001554:	08001693 	.word	0x08001693
 8001558:	080016c5 	.word	0x080016c5
 800155c:	080016db 	.word	0x080016db
 8001560:	080016f1 	.word	0x080016f1
 8001564:	0800172b 	.word	0x0800172b
 8001568:	08001789 	.word	0x08001789
 800156c:	080017a9 	.word	0x080017a9
 8001570:	08001803 	.word	0x08001803
 8001574:	0800181f 	.word	0x0800181f
 8001578:	08001879 	.word	0x08001879
 800157c:	08001895 	.word	0x08001895
 8001580:	080018ef 	.word	0x080018ef
 8001584:	08001949 	.word	0x08001949
 8001588:	08001a7f 	.word	0x08001a7f
 800158c:	08001a7f 	.word	0x08001a7f
 8001590:	08001a7f 	.word	0x08001a7f
 8001594:	08001a7f 	.word	0x08001a7f
 8001598:	08001a7f 	.word	0x08001a7f
 800159c:	08001a7f 	.word	0x08001a7f
 80015a0:	08001a7f 	.word	0x08001a7f
 80015a4:	08001a7f 	.word	0x08001a7f
 80015a8:	08001a7f 	.word	0x08001a7f
 80015ac:	08001a7f 	.word	0x08001a7f
 80015b0:	08001a7f 	.word	0x08001a7f
 80015b4:	08001a7f 	.word	0x08001a7f
 80015b8:	08001a7f 	.word	0x08001a7f
 80015bc:	08001a7f 	.word	0x08001a7f
 80015c0:	08001a7f 	.word	0x08001a7f
 80015c4:	08001a7f 	.word	0x08001a7f
 80015c8:	08001a7f 	.word	0x08001a7f
 80015cc:	08001a7f 	.word	0x08001a7f
 80015d0:	08001a7f 	.word	0x08001a7f
 80015d4:	08001a7f 	.word	0x08001a7f
 80015d8:	08001a7f 	.word	0x08001a7f
 80015dc:	08001a7f 	.word	0x08001a7f
 80015e0:	08001a7f 	.word	0x08001a7f
 80015e4:	08001a7f 	.word	0x08001a7f
 80015e8:	08001a7f 	.word	0x08001a7f
 80015ec:	08001a7f 	.word	0x08001a7f
 80015f0:	08001a7f 	.word	0x08001a7f
 80015f4:	08001a7f 	.word	0x08001a7f
 80015f8:	08001a7f 	.word	0x08001a7f
 80015fc:	08001a7f 	.word	0x08001a7f
 8001600:	08001a7f 	.word	0x08001a7f
 8001604:	08001a7f 	.word	0x08001a7f
 8001608:	08001a7f 	.word	0x08001a7f
 800160c:	08001a7f 	.word	0x08001a7f
 8001610:	08001981 	.word	0x08001981
 8001614:	08001997 	.word	0x08001997
 8001618:	080019ad 	.word	0x080019ad
 800161c:	080019bd 	.word	0x080019bd
 8001620:	080019ef 	.word	0x080019ef
 8001624:	08001a13 	.word	0x08001a13
 8001628:	08001a23 	.word	0x08001a23
 800162c:	08001a33 	.word	0x08001a33
 8001630:	08001a49 	.word	0x08001a49
 8001634:	08001a59 	.word	0x08001a59
 8001638:	08001a6f 	.word	0x08001a6f

		///////////////////////
		// S0 - FIRST SYMBOL //
		///////////////////////
		case 0:
			this->flagNew	= 0;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	749a      	strb	r2, [r3, #18]

			if ( symbol == '$' ){	// Si el simbolo es $
 8001642:	78fb      	ldrb	r3, [r7, #3]
 8001644:	2b24      	cmp	r3, #36	@ 0x24
 8001646:	d103      	bne.n	8001650 <_ZN8gpsInput11insertValueEh+0x134>
				*state	=	1;		// Pasa a S1
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	2201      	movs	r2, #1
 800164c:	701a      	strb	r2, [r3, #0]
				*state	= 2;
			}
			else{					// Si no
				*state	= 	0;		// Se queda en S0
			}
		break;
 800164e:	e21a      	b.n	8001a86 <_ZN8gpsInput11insertValueEh+0x56a>
			else if( symbol == 'G' ){
 8001650:	78fb      	ldrb	r3, [r7, #3]
 8001652:	2b47      	cmp	r3, #71	@ 0x47
 8001654:	d103      	bne.n	800165e <_ZN8gpsInput11insertValueEh+0x142>
				*state	= 2;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	2202      	movs	r2, #2
 800165a:	701a      	strb	r2, [r3, #0]
		break;
 800165c:	e213      	b.n	8001a86 <_ZN8gpsInput11insertValueEh+0x56a>
				*state	= 	0;		// Se queda en S0
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2200      	movs	r2, #0
 8001662:	701a      	strb	r2, [r3, #0]
		break;
 8001664:	e20f      	b.n	8001a86 <_ZN8gpsInput11insertValueEh+0x56a>
		// S1 - SECOND SYMBOL //
		////////////////////////

		case 1:

			if ( symbol ==  'G' ){		// Si el simbolo es G
 8001666:	78fb      	ldrb	r3, [r7, #3]
 8001668:	2b47      	cmp	r3, #71	@ 0x47
 800166a:	d103      	bne.n	8001674 <_ZN8gpsInput11insertValueEh+0x158>
				*state	= 2;			// Pasa a S2
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2202      	movs	r2, #2
 8001670:	701a      	strb	r2, [r3, #0]
			}
			else{						// Si no
				*state	= 0;			// Vuelve a S0
			}
			break;
 8001672:	e208      	b.n	8001a86 <_ZN8gpsInput11insertValueEh+0x56a>
				*state	= 0;			// Vuelve a S0
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2200      	movs	r2, #0
 8001678:	701a      	strb	r2, [r3, #0]
			break;
 800167a:	e204      	b.n	8001a86 <_ZN8gpsInput11insertValueEh+0x56a>
		// S2 - THIRD SYMBOL //
		///////////////////////

		case 2:

			if ( symbol	== 'P'){		// Si el simbolo es P
 800167c:	78fb      	ldrb	r3, [r7, #3]
 800167e:	2b50      	cmp	r3, #80	@ 0x50
 8001680:	d103      	bne.n	800168a <_ZN8gpsInput11insertValueEh+0x16e>
				*state	= 3;			// Pasa a S3
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2203      	movs	r2, #3
 8001686:	701a      	strb	r2, [r3, #0]
			}
			else{						// Si no
				*state	= 0;			// Vuelve a s0
			}
			break;
 8001688:	e1fd      	b.n	8001a86 <_ZN8gpsInput11insertValueEh+0x56a>
				*state	= 0;			// Vuelve a s0
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	2200      	movs	r2, #0
 800168e:	701a      	strb	r2, [r3, #0]
			break;
 8001690:	e1f9      	b.n	8001a86 <_ZN8gpsInput11insertValueEh+0x56a>
		////////////////////////
		// S3 - FOURTH SYMBOL //
		////////////////////////

		case 3:
			if ( symbol == 'R'){		// Si el simbolo es R
 8001692:	78fb      	ldrb	r3, [r7, #3]
 8001694:	2b52      	cmp	r3, #82	@ 0x52
 8001696:	d103      	bne.n	80016a0 <_ZN8gpsInput11insertValueEh+0x184>
				*state	= 4;			// Pasa a S4
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2204      	movs	r2, #4
 800169c:	701a      	strb	r2, [r3, #0]
				*state = 53;			// Pasa a S53 - DETECTA GPGSV
			}
			else{						// Si no
				*state	= 0;			// Vuelve a S0
			}
			break;
 800169e:	e1f2      	b.n	8001a86 <_ZN8gpsInput11insertValueEh+0x56a>
			else if ( symbol == 'V'){	// Si el simbolo es T
 80016a0:	78fb      	ldrb	r3, [r7, #3]
 80016a2:	2b56      	cmp	r3, #86	@ 0x56
 80016a4:	d103      	bne.n	80016ae <_ZN8gpsInput11insertValueEh+0x192>
				*state	= 50;			// Pasa a S50 - DETECTA SI ES MODO GPTVG
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	2232      	movs	r2, #50	@ 0x32
 80016aa:	701a      	strb	r2, [r3, #0]
			break;
 80016ac:	e1eb      	b.n	8001a86 <_ZN8gpsInput11insertValueEh+0x56a>
			else if ( symbol == 'G'){	// Si simboolo es G
 80016ae:	78fb      	ldrb	r3, [r7, #3]
 80016b0:	2b47      	cmp	r3, #71	@ 0x47
 80016b2:	d103      	bne.n	80016bc <_ZN8gpsInput11insertValueEh+0x1a0>
				*state = 53;			// Pasa a S53 - DETECTA GPGSV
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2235      	movs	r2, #53	@ 0x35
 80016b8:	701a      	strb	r2, [r3, #0]
			break;
 80016ba:	e1e4      	b.n	8001a86 <_ZN8gpsInput11insertValueEh+0x56a>
				*state	= 0;			// Vuelve a S0
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2200      	movs	r2, #0
 80016c0:	701a      	strb	r2, [r3, #0]
			break;
 80016c2:	e1e0      	b.n	8001a86 <_ZN8gpsInput11insertValueEh+0x56a>
		// S4 - FIFTH SYMBOL //
		///////////////////////

		case 4:

			if ( symbol == 'M'){	// Si el simbolo es M
 80016c4:	78fb      	ldrb	r3, [r7, #3]
 80016c6:	2b4d      	cmp	r3, #77	@ 0x4d
 80016c8:	d103      	bne.n	80016d2 <_ZN8gpsInput11insertValueEh+0x1b6>
				*state	= 5;		// Pasa a S5
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	2205      	movs	r2, #5
 80016ce:	701a      	strb	r2, [r3, #0]
			}
			else{					// Si no
				*state	= 0;		// Vieñve a S0
			}
			break;
 80016d0:	e1d9      	b.n	8001a86 <_ZN8gpsInput11insertValueEh+0x56a>
				*state	= 0;		// Vieñve a S0
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2200      	movs	r2, #0
 80016d6:	701a      	strb	r2, [r3, #0]
			break;
 80016d8:	e1d5      	b.n	8001a86 <_ZN8gpsInput11insertValueEh+0x56a>
		// S5 - SIXTH SYMBOL //
		///////////////////////

		case 5:

			if ( symbol == 'C'){	// Si el simbolo es M
 80016da:	78fb      	ldrb	r3, [r7, #3]
 80016dc:	2b43      	cmp	r3, #67	@ 0x43
 80016de:	d103      	bne.n	80016e8 <_ZN8gpsInput11insertValueEh+0x1cc>
				*state	= 6;		// Pasa a S6
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	2206      	movs	r2, #6
 80016e4:	701a      	strb	r2, [r3, #0]
			}
			else{					// Si no
				*state	= 0;		// Vieñve a S0
			}
			break;
 80016e6:	e1ce      	b.n	8001a86 <_ZN8gpsInput11insertValueEh+0x56a>
				*state	= 0;		// Vieñve a S0
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2200      	movs	r2, #0
 80016ec:	701a      	strb	r2, [r3, #0]
			break;
 80016ee:	e1ca      	b.n	8001a86 <_ZN8gpsInput11insertValueEh+0x56a>
		///////////////////////
		// S6 - GPRMC PACKET //
		///////////////////////

		case 6:
			this->lapsBetween	= this->lapsCounter;	//Guarda valor de contador
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	68da      	ldr	r2, [r3, #12]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	609a      	str	r2, [r3, #8]
			this->lapsCounter	= 0;					// Reinicia contador
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2200      	movs	r2, #0
 80016fc:	60da      	str	r2, [r3, #12]
			this->flagNew		= 1;					// Indica que llego mensaje
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2201      	movs	r2, #1
 8001702:	749a      	strb	r2, [r3, #18]

			this->setMode(1);							// Inserta el valor de mensaje tipo GPRMC
 8001704:	2101      	movs	r1, #1
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f000 f9c2 	bl	8001a90 <_ZN8gpsInput7setModeEh>
			this->countGprmc	= 0;					// Reinicia el contador que guarda elementos
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

			if ( symbol == ','){						// Si el simbolo es , y confirma el formato del paquete
 8001714:	78fb      	ldrb	r3, [r7, #3]
 8001716:	2b2c      	cmp	r3, #44	@ 0x2c
 8001718:	d103      	bne.n	8001722 <_ZN8gpsInput11insertValueEh+0x206>
				*state	= 7;							// Pasa a S7
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	2207      	movs	r2, #7
 800171e:	701a      	strb	r2, [r3, #0]
			}
			else{										// Si no
				*state	= 0;							// Vieñve a S0
			}
			break;
 8001720:	e1b1      	b.n	8001a86 <_ZN8gpsInput11insertValueEh+0x56a>
				*state	= 0;							// Vieñve a S0
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	2200      	movs	r2, #0
 8001726:	701a      	strb	r2, [r3, #0]
			break;
 8001728:	e1ad      	b.n	8001a86 <_ZN8gpsInput11insertValueEh+0x56a>
		////////////////////
		// S7 - SAVE TIME //
		////////////////////

		case 7:
			this->flagNew		= 0;				// Indica que llego mensaje
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	749a      	strb	r2, [r3, #18]

			if ( symbol == ',' ){					// Si el simbolo es ,
 8001730:	78fb      	ldrb	r3, [r7, #3]
 8001732:	2b2c      	cmp	r3, #44	@ 0x2c
 8001734:	d107      	bne.n	8001746 <_ZN8gpsInput11insertValueEh+0x22a>
				this->countGprmc	= 0;			// Reinicia contador
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2200      	movs	r2, #0
 800173a:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
				*state	= 8;						// Pasa a S8
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	2208      	movs	r2, #8
 8001742:	701a      	strb	r2, [r3, #0]
				this->time[this->countGprmc]  =	symbol;	// Guarda el simbolo en el buffer
				this->countGprmc++;						// Suma uno al indice
				*state	= 7;							// Se queda en S7
			}

			break;
 8001744:	e19f      	b.n	8001a86 <_ZN8gpsInput11insertValueEh+0x56a>
			else if ( this->countGprmc >= 10 ){
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800174c:	2b09      	cmp	r3, #9
 800174e:	d907      	bls.n	8001760 <_ZN8gpsInput11insertValueEh+0x244>
				this->countGprmc	= 0;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2200      	movs	r2, #0
 8001754:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
				*state	= 0;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2200      	movs	r2, #0
 800175c:	701a      	strb	r2, [r3, #0]
			break;
 800175e:	e192      	b.n	8001a86 <_ZN8gpsInput11insertValueEh+0x56a>
				this->time[this->countGprmc]  =	symbol;	// Guarda el simbolo en el buffer
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001766:	461a      	mov	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	4413      	add	r3, r2
 800176c:	78fa      	ldrb	r2, [r7, #3]
 800176e:	751a      	strb	r2, [r3, #20]
				this->countGprmc++;						// Suma uno al indice
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001776:	3301      	adds	r3, #1
 8001778:	b2da      	uxtb	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
				*state	= 7;							// Se queda en S7
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2207      	movs	r2, #7
 8001784:	701a      	strb	r2, [r3, #0]
			break;
 8001786:	e17e      	b.n	8001a86 <_ZN8gpsInput11insertValueEh+0x56a>
			 *
			 * 	,A,
			 *
			 * 	Fija VALID hasta que encuentre ,
			 */
			if( symbol == ',' ){			// Si es ,
 8001788:	78fb      	ldrb	r3, [r7, #3]
 800178a:	2b2c      	cmp	r3, #44	@ 0x2c
 800178c:	d103      	bne.n	8001796 <_ZN8gpsInput11insertValueEh+0x27a>
				*state	= 9;				// Pasa a S9
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2209      	movs	r2, #9
 8001792:	701a      	strb	r2, [r3, #0]
			}
			else{							// Si no
				this->setValid(symbol);		// Fija simbolo de valido
				*state	= 8;				// Se queda en S8
			}
			break;
 8001794:	e177      	b.n	8001a86 <_ZN8gpsInput11insertValueEh+0x56a>
				this->setValid(symbol);		// Fija simbolo de valido
 8001796:	78fb      	ldrb	r3, [r7, #3]
 8001798:	4619      	mov	r1, r3
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f000 fa28 	bl	8001bf0 <_ZN8gpsInput8setValidEc>
				*state	= 8;				// Se queda en S8
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2208      	movs	r2, #8
 80017a4:	701a      	strb	r2, [r3, #0]
			break;
 80017a6:	e16e      	b.n	8001a86 <_ZN8gpsInput11insertValueEh+0x56a>
		////////////////////////
		// S9 - SAVE LONGITUD //
		////////////////////////

		case 9:
			if ( symbol == ',' ){							// Si es ,
 80017a8:	78fb      	ldrb	r3, [r7, #3]
 80017aa:	2b2c      	cmp	r3, #44	@ 0x2c
 80017ac:	d107      	bne.n	80017be <_ZN8gpsInput11insertValueEh+0x2a2>
				this->countGprmc	= 0;					// Reinicia contador
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2200      	movs	r2, #0
 80017b2:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
				*state 	= 10;								// Pasa a S10
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	220a      	movs	r2, #10
 80017ba:	701a      	strb	r2, [r3, #0]
			else{											// Si no
				this->latitud[this->countGprmc]  =	symbol;	// Guarda el simbolo en el buffer
				this->countGprmc++;							// Suma uno al indice
				*state	= 9;								// Se queda en S9
			}
			break;
 80017bc:	e163      	b.n	8001a86 <_ZN8gpsInput11insertValueEh+0x56a>
			else if ( this->countGprmc >= 10 ){
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80017c4:	2b09      	cmp	r3, #9
 80017c6:	d907      	bls.n	80017d8 <_ZN8gpsInput11insertValueEh+0x2bc>
				this->countGprmc	= 0;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
				*state	= 0;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	2200      	movs	r2, #0
 80017d4:	701a      	strb	r2, [r3, #0]
			break;
 80017d6:	e156      	b.n	8001a86 <_ZN8gpsInput11insertValueEh+0x56a>
				this->latitud[this->countGprmc]  =	symbol;	// Guarda el simbolo en el buffer
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80017de:	461a      	mov	r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	4413      	add	r3, r2
 80017e4:	78fa      	ldrb	r2, [r7, #3]
 80017e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
				this->countGprmc++;							// Suma uno al indice
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80017f0:	3301      	adds	r3, #1
 80017f2:	b2da      	uxtb	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
				*state	= 9;								// Se queda en S9
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2209      	movs	r2, #9
 80017fe:	701a      	strb	r2, [r3, #0]
			break;
 8001800:	e141      	b.n	8001a86 <_ZN8gpsInput11insertValueEh+0x56a>
		///////////////////////////////////
		// S10 - SAVE LONGITUD DIRECTION //
		///////////////////////////////////

		case 10:
			if ( symbol == ',' ){			// Si es ,
 8001802:	78fb      	ldrb	r3, [r7, #3]
 8001804:	2b2c      	cmp	r3, #44	@ 0x2c
 8001806:	d103      	bne.n	8001810 <_ZN8gpsInput11insertValueEh+0x2f4>
				*state	= 11;				// Pasa a S11
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	220b      	movs	r2, #11
 800180c:	701a      	strb	r2, [r3, #0]
			}
			else{							// Si no
				this->latDirect	= symbol;	// Guarda el simbolo
				*state	= 10;				// Pasa a S10
			}
			break;
 800180e:	e13a      	b.n	8001a86 <_ZN8gpsInput11insertValueEh+0x56a>
				this->latDirect	= symbol;	// Guarda el simbolo
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	78fa      	ldrb	r2, [r7, #3]
 8001814:	77da      	strb	r2, [r3, #31]
				*state	= 10;				// Pasa a S10
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	220a      	movs	r2, #10
 800181a:	701a      	strb	r2, [r3, #0]
			break;
 800181c:	e133      	b.n	8001a86 <_ZN8gpsInput11insertValueEh+0x56a>
		////////////////////////
		// S11 - SAVE LATITUD //
		////////////////////////

		case 11:
			if ( symbol == ',' ){							// Si el simbolo es ,
 800181e:	78fb      	ldrb	r3, [r7, #3]
 8001820:	2b2c      	cmp	r3, #44	@ 0x2c
 8001822:	d107      	bne.n	8001834 <_ZN8gpsInput11insertValueEh+0x318>
				this->countGprmc	= 0;					// Reinicia contador
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
				*state	= 12;								// Pasa a S12
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	220c      	movs	r2, #12
 8001830:	701a      	strb	r2, [r3, #0]
			else{											// Si no
				this->longitud[this->countGprmc]  =	symbol;	// Guarda el simbolo en el buffer
				this->countGprmc++;							// Suma uno al indice
				*state	= 11;								// Queda en S11
			}
			break;
 8001832:	e128      	b.n	8001a86 <_ZN8gpsInput11insertValueEh+0x56a>
			else if ( this->countGprmc >= 10 ){
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800183a:	2b09      	cmp	r3, #9
 800183c:	d907      	bls.n	800184e <_ZN8gpsInput11insertValueEh+0x332>
				this->countGprmc	= 0;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
				*state	= 0;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	2200      	movs	r2, #0
 800184a:	701a      	strb	r2, [r3, #0]
			break;
 800184c:	e11b      	b.n	8001a86 <_ZN8gpsInput11insertValueEh+0x56a>
				this->longitud[this->countGprmc]  =	symbol;	// Guarda el simbolo en el buffer
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001854:	461a      	mov	r2, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4413      	add	r3, r2
 800185a:	78fa      	ldrb	r2, [r7, #3]
 800185c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
				this->countGprmc++;							// Suma uno al indice
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001866:	3301      	adds	r3, #1
 8001868:	b2da      	uxtb	r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
				*state	= 11;								// Queda en S11
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	220b      	movs	r2, #11
 8001874:	701a      	strb	r2, [r3, #0]
			break;
 8001876:	e106      	b.n	8001a86 <_ZN8gpsInput11insertValueEh+0x56a>
		//////////////////////////////////
		// S12 - SAVE DIRECTION LATITUD //
		//////////////////////////////////

		case 12:
			if ( symbol == ',' ){
 8001878:	78fb      	ldrb	r3, [r7, #3]
 800187a:	2b2c      	cmp	r3, #44	@ 0x2c
 800187c:	d103      	bne.n	8001886 <_ZN8gpsInput11insertValueEh+0x36a>
				*state = 13;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	220d      	movs	r2, #13
 8001882:	701a      	strb	r2, [r3, #0]

			else{
				this->longDirect	= symbol;
				*state = 12;
			}
			break;
 8001884:	e0ff      	b.n	8001a86 <_ZN8gpsInput11insertValueEh+0x56a>
				this->longDirect	= symbol;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	78fa      	ldrb	r2, [r7, #3]
 800188a:	779a      	strb	r2, [r3, #30]
				*state = 12;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	220c      	movs	r2, #12
 8001890:	701a      	strb	r2, [r3, #0]
			break;
 8001892:	e0f8      	b.n	8001a86 <_ZN8gpsInput11insertValueEh+0x56a>
		////////////////////
		// S13 - VELOCITY //
		////////////////////

		case 13:
			if ( symbol == ',' ){							//
 8001894:	78fb      	ldrb	r3, [r7, #3]
 8001896:	2b2c      	cmp	r3, #44	@ 0x2c
 8001898:	d107      	bne.n	80018aa <_ZN8gpsInput11insertValueEh+0x38e>
				this->countGprmc	= 0;					// Reinicia contador
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
				*state	= 14;								//
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	220e      	movs	r2, #14
 80018a6:	701a      	strb	r2, [r3, #0]
			else{											//
				this->velocity[this->countGprmc]  =	symbol;	// Guarda el simbolo en el buffer
				this->countGprmc++;							// Suma uno al indice
				*state 	= 13;								//
			}
			break;
 80018a8:	e0ed      	b.n	8001a86 <_ZN8gpsInput11insertValueEh+0x56a>
			else if ( this->countGprmc >= 10 ){
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80018b0:	2b09      	cmp	r3, #9
 80018b2:	d907      	bls.n	80018c4 <_ZN8gpsInput11insertValueEh+0x3a8>
				this->countGprmc	= 0;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2200      	movs	r2, #0
 80018b8:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
				*state	= 0;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2200      	movs	r2, #0
 80018c0:	701a      	strb	r2, [r3, #0]
			break;
 80018c2:	e0e0      	b.n	8001a86 <_ZN8gpsInput11insertValueEh+0x56a>
				this->velocity[this->countGprmc]  =	symbol;	// Guarda el simbolo en el buffer
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80018ca:	461a      	mov	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4413      	add	r3, r2
 80018d0:	78fa      	ldrb	r2, [r7, #3]
 80018d2:	f883 2020 	strb.w	r2, [r3, #32]
				this->countGprmc++;							// Suma uno al indice
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80018dc:	3301      	adds	r3, #1
 80018de:	b2da      	uxtb	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
				*state 	= 13;								//
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	220d      	movs	r2, #13
 80018ea:	701a      	strb	r2, [r3, #0]
			break;
 80018ec:	e0cb      	b.n	8001a86 <_ZN8gpsInput11insertValueEh+0x56a>
		/////////////////
		// S14 - ANGLE //
		/////////////////

		case 14:
			if ( symbol == ',' ){							//
 80018ee:	78fb      	ldrb	r3, [r7, #3]
 80018f0:	2b2c      	cmp	r3, #44	@ 0x2c
 80018f2:	d107      	bne.n	8001904 <_ZN8gpsInput11insertValueEh+0x3e8>
				this->countGprmc	= 0;					// Reinicia contador
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2200      	movs	r2, #0
 80018f8:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
				*state	= 15;								//
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	220f      	movs	r2, #15
 8001900:	701a      	strb	r2, [r3, #0]
			else{											//
				this->angle[this->countGprmc]  =	symbol;	// Guarda el simbolo en el buffer
				this->countGprmc++;							// Suma uno al indice
				*state	= 14;								//
			}
			break;
 8001902:	e0c0      	b.n	8001a86 <_ZN8gpsInput11insertValueEh+0x56a>
			else if ( this->countGprmc >= 10 ){
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800190a:	2b09      	cmp	r3, #9
 800190c:	d907      	bls.n	800191e <_ZN8gpsInput11insertValueEh+0x402>
				this->countGprmc	= 0;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
				*state	= 0;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2200      	movs	r2, #0
 800191a:	701a      	strb	r2, [r3, #0]
			break;
 800191c:	e0b3      	b.n	8001a86 <_ZN8gpsInput11insertValueEh+0x56a>
				this->angle[this->countGprmc]  =	symbol;	// Guarda el simbolo en el buffer
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001924:	461a      	mov	r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4413      	add	r3, r2
 800192a:	78fa      	ldrb	r2, [r7, #3]
 800192c:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
				this->countGprmc++;							// Suma uno al indice
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001936:	3301      	adds	r3, #1
 8001938:	b2da      	uxtb	r2, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
				*state	= 14;								//
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	220e      	movs	r2, #14
 8001944:	701a      	strb	r2, [r3, #0]
			break;
 8001946:	e09e      	b.n	8001a86 <_ZN8gpsInput11insertValueEh+0x56a>
		////////////////
		// S15 - DATE //
		////////////////

		case 15:
			if ( symbol == ','){						// Si es una ,
 8001948:	78fb      	ldrb	r3, [r7, #3]
 800194a:	2b2c      	cmp	r3, #44	@ 0x2c
 800194c:	d103      	bne.n	8001956 <_ZN8gpsInput11insertValueEh+0x43a>
				*state	= 0;							// Cierra la maquina
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2200      	movs	r2, #0
 8001952:	701a      	strb	r2, [r3, #0]
			else{										// Si no
				this->date[this->countGprmc]  =	symbol;	// Guarda el simbolo en el buffer
				this->countGprmc++;						// Suma uno al indice
				*state	= 15;
			}
			break;
 8001954:	e097      	b.n	8001a86 <_ZN8gpsInput11insertValueEh+0x56a>
				this->date[this->countGprmc]  =	symbol;	// Guarda el simbolo en el buffer
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800195c:	461a      	mov	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4413      	add	r3, r2
 8001962:	78fa      	ldrb	r2, [r7, #3]
 8001964:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
				this->countGprmc++;						// Suma uno al indice
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800196e:	3301      	adds	r3, #1
 8001970:	b2da      	uxtb	r2, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
				*state	= 15;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	220f      	movs	r2, #15
 800197c:	701a      	strb	r2, [r3, #0]
			break;
 800197e:	e082      	b.n	8001a86 <_ZN8gpsInput11insertValueEh+0x56a>
		////////////////////
		// S50 - DETECT V //
		////////////////////

		case 50:
			if (symbol == 'T'){	// Si detecta V
 8001980:	78fb      	ldrb	r3, [r7, #3]
 8001982:	2b54      	cmp	r3, #84	@ 0x54
 8001984:	d103      	bne.n	800198e <_ZN8gpsInput11insertValueEh+0x472>
				*state	= 51;	// Pasa a S51
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2233      	movs	r2, #51	@ 0x33
 800198a:	701a      	strb	r2, [r3, #0]
			}
			else{				// Si no
				*state	= 0;	// Vuelve a S0
			}
			break;
 800198c:	e07b      	b.n	8001a86 <_ZN8gpsInput11insertValueEh+0x56a>
				*state	= 0;	// Vuelve a S0
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2200      	movs	r2, #0
 8001992:	701a      	strb	r2, [r3, #0]
			break;
 8001994:	e077      	b.n	8001a86 <_ZN8gpsInput11insertValueEh+0x56a>
		/////////////////////
		// S51	- DETECT G //
		/////////////////////

		case 51:
			if (symbol == 'G'){	// Si detecta G
 8001996:	78fb      	ldrb	r3, [r7, #3]
 8001998:	2b47      	cmp	r3, #71	@ 0x47
 800199a:	d103      	bne.n	80019a4 <_ZN8gpsInput11insertValueEh+0x488>
				*state	= 52;	// Pasa a S51
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2234      	movs	r2, #52	@ 0x34
 80019a0:	701a      	strb	r2, [r3, #0]
			}
			else{				// Si no
				*state	= 0;	// Vuelve a S0
				break;
			}
			break;
 80019a2:	e070      	b.n	8001a86 <_ZN8gpsInput11insertValueEh+0x56a>
				*state	= 0;	// Vuelve a S0
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2200      	movs	r2, #0
 80019a8:	701a      	strb	r2, [r3, #0]
				break;
 80019aa:	e06c      	b.n	8001a86 <_ZN8gpsInput11insertValueEh+0x56a>
		/////////////////////////////////
		// S52 - DETECT A GPTVG PACKET //
		/////////////////////////////////

		case 52:
			this->setMode(2);
 80019ac:	2102      	movs	r1, #2
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f000 f86e 	bl	8001a90 <_ZN8gpsInput7setModeEh>
			*state	= 0;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2200      	movs	r2, #0
 80019b8:	701a      	strb	r2, [r3, #0]
			break;
 80019ba:	e064      	b.n	8001a86 <_ZN8gpsInput11insertValueEh+0x56a>
		// S53 - DETECT A S //
		//////////////////////

		case 53:

			if (symbol == 'G'){
 80019bc:	78fb      	ldrb	r3, [r7, #3]
 80019be:	2b47      	cmp	r3, #71	@ 0x47
 80019c0:	d103      	bne.n	80019ca <_ZN8gpsInput11insertValueEh+0x4ae>
				*state = 54;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2236      	movs	r2, #54	@ 0x36
 80019c6:	701a      	strb	r2, [r3, #0]
				*state	= 59;
			}
			else{
				*state = 0;
			}
			break;
 80019c8:	e05d      	b.n	8001a86 <_ZN8gpsInput11insertValueEh+0x56a>
			else if (symbol == 'L'){
 80019ca:	78fb      	ldrb	r3, [r7, #3]
 80019cc:	2b4c      	cmp	r3, #76	@ 0x4c
 80019ce:	d103      	bne.n	80019d8 <_ZN8gpsInput11insertValueEh+0x4bc>
				*state	= 57;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2239      	movs	r2, #57	@ 0x39
 80019d4:	701a      	strb	r2, [r3, #0]
			break;
 80019d6:	e056      	b.n	8001a86 <_ZN8gpsInput11insertValueEh+0x56a>
			else if (symbol == 'S'){
 80019d8:	78fb      	ldrb	r3, [r7, #3]
 80019da:	2b53      	cmp	r3, #83	@ 0x53
 80019dc:	d103      	bne.n	80019e6 <_ZN8gpsInput11insertValueEh+0x4ca>
				*state	= 59;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	223b      	movs	r2, #59	@ 0x3b
 80019e2:	701a      	strb	r2, [r3, #0]
			break;
 80019e4:	e04f      	b.n	8001a86 <_ZN8gpsInput11insertValueEh+0x56a>
				*state = 0;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2200      	movs	r2, #0
 80019ea:	701a      	strb	r2, [r3, #0]
			break;
 80019ec:	e04b      	b.n	8001a86 <_ZN8gpsInput11insertValueEh+0x56a>
		//////////////////////
		// S54 - DETECT A V //
		//////////////////////

		case 54:
			if (symbol == 'A'){
 80019ee:	78fb      	ldrb	r3, [r7, #3]
 80019f0:	2b41      	cmp	r3, #65	@ 0x41
 80019f2:	d103      	bne.n	80019fc <_ZN8gpsInput11insertValueEh+0x4e0>
				*state	= 55;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2237      	movs	r2, #55	@ 0x37
 80019f8:	701a      	strb	r2, [r3, #0]
				*state = 56;
			}
			else{
				*state	= 0;
			}
			break;
 80019fa:	e044      	b.n	8001a86 <_ZN8gpsInput11insertValueEh+0x56a>
			else if (symbol == 'V'){
 80019fc:	78fb      	ldrb	r3, [r7, #3]
 80019fe:	2b56      	cmp	r3, #86	@ 0x56
 8001a00:	d103      	bne.n	8001a0a <_ZN8gpsInput11insertValueEh+0x4ee>
				*state = 56;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2238      	movs	r2, #56	@ 0x38
 8001a06:	701a      	strb	r2, [r3, #0]
			break;
 8001a08:	e03d      	b.n	8001a86 <_ZN8gpsInput11insertValueEh+0x56a>
				*state	= 0;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	701a      	strb	r2, [r3, #0]
			break;
 8001a10:	e039      	b.n	8001a86 <_ZN8gpsInput11insertValueEh+0x56a>
		////////////////////////
		// S55 - DETECT GPGSA //
		////////////////////////

		case 55:
			this->setMode(32);
 8001a12:	2120      	movs	r1, #32
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f000 f83b 	bl	8001a90 <_ZN8gpsInput7setModeEh>
			*state	= 0;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	701a      	strb	r2, [r3, #0]
			break;
 8001a20:	e031      	b.n	8001a86 <_ZN8gpsInput11insertValueEh+0x56a>
		////////////////////////
		// S56 - DETECT GPGSV //
		////////////////////////

		case 56:
			this->setMode(4);
 8001a22:	2104      	movs	r1, #4
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f000 f833 	bl	8001a90 <_ZN8gpsInput7setModeEh>
			*state	= 0;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	701a      	strb	r2, [r3, #0]
			break;
 8001a30:	e029      	b.n	8001a86 <_ZN8gpsInput11insertValueEh+0x56a>
		////////////////////
		// S57 - DETECT L //
		////////////////////

		case 57:
			if (symbol == 'L'){
 8001a32:	78fb      	ldrb	r3, [r7, #3]
 8001a34:	2b4c      	cmp	r3, #76	@ 0x4c
 8001a36:	d103      	bne.n	8001a40 <_ZN8gpsInput11insertValueEh+0x524>
				*state	= 58;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	223a      	movs	r2, #58	@ 0x3a
 8001a3c:	701a      	strb	r2, [r3, #0]
			}
			else{
				*state	= 0;
			}
			break;
 8001a3e:	e022      	b.n	8001a86 <_ZN8gpsInput11insertValueEh+0x56a>
				*state	= 0;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2200      	movs	r2, #0
 8001a44:	701a      	strb	r2, [r3, #0]
			break;
 8001a46:	e01e      	b.n	8001a86 <_ZN8gpsInput11insertValueEh+0x56a>
		////////////////////////
		// S58 - DETECT GPGLL //
		////////////////////////

		case 58:
			this->setMode(8);
 8001a48:	2108      	movs	r1, #8
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f000 f820 	bl	8001a90 <_ZN8gpsInput7setModeEh>
			*state	= 0;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2200      	movs	r2, #0
 8001a54:	701a      	strb	r2, [r3, #0]
			break;
 8001a56:	e016      	b.n	8001a86 <_ZN8gpsInput11insertValueEh+0x56a>
		////////////////////
		// S59 - DETECT A //
		////////////////////

		case 59:
			if (symbol == 'V'){
 8001a58:	78fb      	ldrb	r3, [r7, #3]
 8001a5a:	2b56      	cmp	r3, #86	@ 0x56
 8001a5c:	d103      	bne.n	8001a66 <_ZN8gpsInput11insertValueEh+0x54a>
				*state	= 60;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	223c      	movs	r2, #60	@ 0x3c
 8001a62:	701a      	strb	r2, [r3, #0]
			}
			else{
				*state	= 0;
			}
			break;
 8001a64:	e00f      	b.n	8001a86 <_ZN8gpsInput11insertValueEh+0x56a>
				*state	= 0;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	701a      	strb	r2, [r3, #0]
			break;
 8001a6c:	e00b      	b.n	8001a86 <_ZN8gpsInput11insertValueEh+0x56a>
		////////////////////////
		// S60 - DETECT GPGGA //
		////////////////////////

		case 60:
			this->setMode(16);
 8001a6e:	2110      	movs	r1, #16
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f000 f80d 	bl	8001a90 <_ZN8gpsInput7setModeEh>
			*state = 0;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	701a      	strb	r2, [r3, #0]
			break;
 8001a7c:	e003      	b.n	8001a86 <_ZN8gpsInput11insertValueEh+0x56a>
		/////////////
		// DEFAULT //
		/////////////

		default:
			*state	= 0;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2200      	movs	r2, #0
 8001a82:	701a      	strb	r2, [r3, #0]
			break;
 8001a84:	bf00      	nop
	}
}
 8001a86:	bf00      	nop
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop

08001a90 <_ZN8gpsInput7setModeEh>:

//////////////
// SET MODE //
//////////////

void gpsInput::setMode(uint8_t mode){
 8001a90:	b480      	push	{r7}
 8001a92:	b087      	sub	sp, #28
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	460b      	mov	r3, r1
 8001a9a:	70fb      	strb	r3, [r7, #3]
	this->limitMsgModes	= 15;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	220f      	movs	r2, #15
 8001aa0:	74da      	strb	r2, [r3, #19]
	uint8_t output	= 0;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	75fb      	strb	r3, [r7, #23]
	uint8_t pot2[6]	= {1, 2, 4, 8, 16, 32};
 8001aa6:	4a51      	ldr	r2, [pc, #324]	@ (8001bec <_ZN8gpsInput7setModeEh+0x15c>)
 8001aa8:	f107 0308 	add.w	r3, r7, #8
 8001aac:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ab0:	6018      	str	r0, [r3, #0]
 8001ab2:	3304      	adds	r3, #4
 8001ab4:	8019      	strh	r1, [r3, #0]

	switch (mode){
 8001ab6:	78fb      	ldrb	r3, [r7, #3]
 8001ab8:	3b01      	subs	r3, #1
 8001aba:	2b1f      	cmp	r3, #31
 8001abc:	d866      	bhi.n	8001b8c <_ZN8gpsInput7setModeEh+0xfc>
 8001abe:	a201      	add	r2, pc, #4	@ (adr r2, 8001ac4 <_ZN8gpsInput7setModeEh+0x34>)
 8001ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ac4:	08001b45 	.word	0x08001b45
 8001ac8:	08001b51 	.word	0x08001b51
 8001acc:	08001b8d 	.word	0x08001b8d
 8001ad0:	08001b5d 	.word	0x08001b5d
 8001ad4:	08001b8d 	.word	0x08001b8d
 8001ad8:	08001b8d 	.word	0x08001b8d
 8001adc:	08001b8d 	.word	0x08001b8d
 8001ae0:	08001b69 	.word	0x08001b69
 8001ae4:	08001b8d 	.word	0x08001b8d
 8001ae8:	08001b8d 	.word	0x08001b8d
 8001aec:	08001b8d 	.word	0x08001b8d
 8001af0:	08001b8d 	.word	0x08001b8d
 8001af4:	08001b8d 	.word	0x08001b8d
 8001af8:	08001b8d 	.word	0x08001b8d
 8001afc:	08001b8d 	.word	0x08001b8d
 8001b00:	08001b75 	.word	0x08001b75
 8001b04:	08001b8d 	.word	0x08001b8d
 8001b08:	08001b8d 	.word	0x08001b8d
 8001b0c:	08001b8d 	.word	0x08001b8d
 8001b10:	08001b8d 	.word	0x08001b8d
 8001b14:	08001b8d 	.word	0x08001b8d
 8001b18:	08001b8d 	.word	0x08001b8d
 8001b1c:	08001b8d 	.word	0x08001b8d
 8001b20:	08001b8d 	.word	0x08001b8d
 8001b24:	08001b8d 	.word	0x08001b8d
 8001b28:	08001b8d 	.word	0x08001b8d
 8001b2c:	08001b8d 	.word	0x08001b8d
 8001b30:	08001b8d 	.word	0x08001b8d
 8001b34:	08001b8d 	.word	0x08001b8d
 8001b38:	08001b8d 	.word	0x08001b8d
 8001b3c:	08001b8d 	.word	0x08001b8d
 8001b40:	08001b81 	.word	0x08001b81

	///////////
	// GPRMC //
	///////////
	case 1:
		this->countModes[0]	= this->limitMsgModes;	// Asigna valor maximo
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	7cda      	ldrb	r2, [r3, #19]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		break;
 8001b4e:	e01e      	b.n	8001b8e <_ZN8gpsInput7setModeEh+0xfe>

	///////////
	// GPTVG //
	///////////
	case 2:
		this->countModes[1]	= this->limitMsgModes;	// Asigna valor maximo
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	7cda      	ldrb	r2, [r3, #19]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
		break;
 8001b5a:	e018      	b.n	8001b8e <_ZN8gpsInput7setModeEh+0xfe>
	///////////
	// GPGGV //
	///////////

	case 4:
		this->countModes[2]	= this->limitMsgModes;	// Asigna valor maximo
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	7cda      	ldrb	r2, [r3, #19]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
		break;
 8001b66:	e012      	b.n	8001b8e <_ZN8gpsInput7setModeEh+0xfe>

	///////////
	// GPGLL //
	///////////
	case 8:
		this->countModes[3]	= this->limitMsgModes;	// Asigna valor maximo
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	7cda      	ldrb	r2, [r3, #19]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
		break;
 8001b72:	e00c      	b.n	8001b8e <_ZN8gpsInput7setModeEh+0xfe>

	///////////
	// GPGSV //
	///////////
	case 16:
		this->countModes[4]	= this->limitMsgModes;	// Asigna valor maximo
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	7cda      	ldrb	r2, [r3, #19]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		break;
 8001b7e:	e006      	b.n	8001b8e <_ZN8gpsInput7setModeEh+0xfe>

	///////////
	// GPGGA //
	///////////
	case 32:
		this->countModes[5]	= this->limitMsgModes;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	7cda      	ldrb	r2, [r3, #19]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
		break;
 8001b8a:	e000      	b.n	8001b8e <_ZN8gpsInput7setModeEh+0xfe>

	default:
		break;
 8001b8c:	bf00      	nop
	}

	for (int i = 0; i<6; i++){			// Recorre array de count
 8001b8e:	2300      	movs	r3, #0
 8001b90:	613b      	str	r3, [r7, #16]
 8001b92:	e01e      	b.n	8001bd2 <_ZN8gpsInput7setModeEh+0x142>
		if (this->countModes[i] > 0){	// Si el contador >0
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	4413      	add	r3, r2
 8001b9a:	333c      	adds	r3, #60	@ 0x3c
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d014      	beq.n	8001bcc <_ZN8gpsInput7setModeEh+0x13c>
			this->countModes[i]--;		// Resta 1
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	333c      	adds	r3, #60	@ 0x3c
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	3b01      	subs	r3, #1
 8001bae:	b2d9      	uxtb	r1, r3
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	333c      	adds	r3, #60	@ 0x3c
 8001bb8:	460a      	mov	r2, r1
 8001bba:	701a      	strb	r2, [r3, #0]
			output = output + pot2[i];		// Suma un exponente de 2
 8001bbc:	f107 0208 	add.w	r2, r7, #8
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	781a      	ldrb	r2, [r3, #0]
 8001bc6:	7dfb      	ldrb	r3, [r7, #23]
 8001bc8:	4413      	add	r3, r2
 8001bca:	75fb      	strb	r3, [r7, #23]
	for (int i = 0; i<6; i++){			// Recorre array de count
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	3301      	adds	r3, #1
 8001bd0:	613b      	str	r3, [r7, #16]
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	2b05      	cmp	r3, #5
 8001bd6:	dddd      	ble.n	8001b94 <_ZN8gpsInput7setModeEh+0x104>
		}								// Genera numero unico
		else{							// Si no
			//this->countModes[i]	= 0;	// Asigna 0
		}
	}
	this->mode	= output;	// Asigna modo
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	7dfa      	ldrb	r2, [r7, #23]
 8001bdc:	711a      	strb	r2, [r3, #4]
}
 8001bde:	bf00      	nop
 8001be0:	371c      	adds	r7, #28
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	0800d764 	.word	0x0800d764

08001bf0 <_ZN8gpsInput8setValidEc>:

///////////////
// SET VALID //
///////////////

void gpsInput::setValid(char valid){
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	70fb      	strb	r3, [r7, #3]
	this->flagValid	= valid;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	78fa      	ldrb	r2, [r7, #3]
 8001c00:	741a      	strb	r2, [r3, #16]
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <_ZN8gpsInput8getValidEv>:

///////////////////////
// GET VALID MESSAGE //
///////////////////////

bool gpsInput::getValid(){
 8001c0e:	b480      	push	{r7}
 8001c10:	b085      	sub	sp, #20
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
	bool flag	= 0;
 8001c16:	2300      	movs	r3, #0
 8001c18:	73fb      	strb	r3, [r7, #15]

	if (this->flagValid == 'A'){
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	7c1b      	ldrb	r3, [r3, #16]
 8001c1e:	2b41      	cmp	r3, #65	@ 0x41
 8001c20:	d102      	bne.n	8001c28 <_ZN8gpsInput8getValidEv+0x1a>
		flag = 1;
 8001c22:	2301      	movs	r3, #1
 8001c24:	73fb      	strb	r3, [r7, #15]
 8001c26:	e001      	b.n	8001c2c <_ZN8gpsInput8getValidEv+0x1e>
	}
	else{
		flag = 0;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	73fb      	strb	r3, [r7, #15]
	}

	return flag;
 8001c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3714      	adds	r7, #20
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <_ZN8gpsInput13getNewMessageEv>:

//////////////////////////
// GET NEW MESSAGE FLAG //
//////////////////////////

bool gpsInput::getNewMessage(){
 8001c3a:	b480      	push	{r7}
 8001c3c:	b083      	sub	sp, #12
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
	return	this->flagNew;	// Guarda el valor de flagNew
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	7c9b      	ldrb	r3, [r3, #18]

}
 8001c46:	4618      	mov	r0, r3
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <_Z7hwInputv>:
							*	7: FUTURO USO
							*/

/***** INPUT *****/

void hwInput(){
 8001c52:	b580      	push	{r7, lr}
 8001c54:	af00      	add	r7, sp, #0
	hwBoton();
 8001c56:	f000 fa55 	bl	8002104 <_Z7hwBotonv>
	hwSht31();
 8001c5a:	f000 f8fb 	bl	8001e54 <_Z7hwSht31v>
	hwAds1115();
 8001c5e:	f000 f829 	bl	8001cb4 <_Z9hwAds1115v>
	hwAnalog();
 8001c62:	f000 fad7 	bl	8002214 <_Z8hwAnalogv>
	hwEEPROM();
 8001c66:	f000 fb35 	bl	80022d4 <_Z8hwEEPROMv>
	hwGpsIn();
 8001c6a:	f000 faad 	bl	80021c8 <_Z7hwGpsInv>
	hwLoraIn();
 8001c6e:	f000 f803 	bl	8001c78 <_Z8hwLoraInv>
}
 8001c72:	bf00      	nop
 8001c74:	bd80      	pop	{r7, pc}
	...

08001c78 <_Z8hwLoraInv>:
 * Traspaso de de loraBus a loraInput
 *
 * loraInput detecta respuesta dentro de bytes entrantes
 */

void hwLoraIn(){
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
	if ( loraIn.available() ){					// Si hay elementos disponibles en FIFO desde DMA
 8001c7c:	480a      	ldr	r0, [pc, #40]	@ (8001ca8 <_Z8hwLoraInv+0x30>)
 8001c7e:	f7ff fc25 	bl	80014cc <_ZN8fifoUart9availableEv>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d00c      	beq.n	8001ca2 <_Z8hwLoraInv+0x2a>
		loraBus	= loraIn.readElement();			// Guarda el valor
 8001c88:	4807      	ldr	r0, [pc, #28]	@ (8001ca8 <_Z8hwLoraInv+0x30>)
 8001c8a:	f7ff fbe6 	bl	800145a <_ZN8fifoUart11readElementEv>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	461a      	mov	r2, r3
 8001c92:	4b06      	ldr	r3, [pc, #24]	@ (8001cac <_Z8hwLoraInv+0x34>)
 8001c94:	701a      	strb	r2, [r3, #0]
		loraInput.insertElement( loraBus );		// Inserta en Lora Input
 8001c96:	4b05      	ldr	r3, [pc, #20]	@ (8001cac <_Z8hwLoraInv+0x34>)
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4804      	ldr	r0, [pc, #16]	@ (8001cb0 <_Z8hwLoraInv+0x38>)
 8001c9e:	f001 fe79 	bl	8003994 <_ZN9loraInput13insertElementEh>
	}
}
 8001ca2:	bf00      	nop
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	20000ae4 	.word	0x20000ae4
 8001cac:	200004c8 	.word	0x200004c8
 8001cb0:	20000b24 	.word	0x20000b24

08001cb4 <_Z9hwAds1115v>:
 *	INPUT	:	I2C
 *	OUTPUT	:	alphaA, alphaB
 *				warningHardware[2]
 */

void hwAds1115(){
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0

	switch ( stateAdc ){
 8001cb8:	4b57      	ldr	r3, [pc, #348]	@ (8001e18 <_Z9hwAds1115v+0x164>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	2b05      	cmp	r3, #5
 8001cbe:	f200 80a8 	bhi.w	8001e12 <_Z9hwAds1115v+0x15e>
 8001cc2:	a201      	add	r2, pc, #4	@ (adr r2, 8001cc8 <_Z9hwAds1115v+0x14>)
 8001cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cc8:	08001ce1 	.word	0x08001ce1
 8001ccc:	08001d15 	.word	0x08001d15
 8001cd0:	08001d4b 	.word	0x08001d4b
 8001cd4:	08001d7d 	.word	0x08001d7d
 8001cd8:	08001da3 	.word	0x08001da3
 8001cdc:	08001df7 	.word	0x08001df7
	////////////////////////////
	// S0 - WAIT FOR SAMPLING //
	////////////////////////////
	case 0:

		countAdc++;									// Suma 1 al contador
 8001ce0:	4b4e      	ldr	r3, [pc, #312]	@ (8001e1c <_Z9hwAds1115v+0x168>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	4a4d      	ldr	r2, [pc, #308]	@ (8001e1c <_Z9hwAds1115v+0x168>)
 8001ce8:	6013      	str	r3, [r2, #0]

		if ( countAdc >= sampleAdc && enableI2C ){	// Si pasa limite de medición y el I2C esta habilitado
 8001cea:	4b4c      	ldr	r3, [pc, #304]	@ (8001e1c <_Z9hwAds1115v+0x168>)
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	4b4c      	ldr	r3, [pc, #304]	@ (8001e20 <_Z9hwAds1115v+0x16c>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	db0a      	blt.n	8001d0c <_Z9hwAds1115v+0x58>
 8001cf6:	4b4b      	ldr	r3, [pc, #300]	@ (8001e24 <_Z9hwAds1115v+0x170>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d006      	beq.n	8001d0c <_Z9hwAds1115v+0x58>
			enableI2C	= 0;						// Deshabilita I2C
 8001cfe:	4b49      	ldr	r3, [pc, #292]	@ (8001e24 <_Z9hwAds1115v+0x170>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	701a      	strb	r2, [r3, #0]
			stateAdc	= 1;						// Pasa a S1
 8001d04:	4b44      	ldr	r3, [pc, #272]	@ (8001e18 <_Z9hwAds1115v+0x164>)
 8001d06:	2201      	movs	r2, #1
 8001d08:	701a      	strb	r2, [r3, #0]
		}
		else{										// Si no
			stateAdc	= 0;						// Espera en S0
		}
		break;
 8001d0a:	e083      	b.n	8001e14 <_Z9hwAds1115v+0x160>
			stateAdc	= 0;						// Espera en S0
 8001d0c:	4b42      	ldr	r3, [pc, #264]	@ (8001e18 <_Z9hwAds1115v+0x164>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	701a      	strb	r2, [r3, #0]
		break;
 8001d12:	e07f      	b.n	8001e14 <_Z9hwAds1115v+0x160>
	////////////////////////////
	// S1 - TRANSMIT COMMANDS //
	////////////////////////////

	case 1:
		countAdc	= 0;																// Reinicia contador
 8001d14:	4b41      	ldr	r3, [pc, #260]	@ (8001e1c <_Z9hwAds1115v+0x168>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	601a      	str	r2, [r3, #0]

		if ( selectChannelAds ){														// Si esta seleccionado channel 0
 8001d1a:	4b43      	ldr	r3, [pc, #268]	@ (8001e28 <_Z9hwAds1115v+0x174>)
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d006      	beq.n	8001d30 <_Z9hwAds1115v+0x7c>
			HAL_I2C_Master_Transmit_DMA(&hi2c1, ADS1115_ADDRESS<<1, AdsCommand_0, 3);	// Transmite comando
 8001d22:	2303      	movs	r3, #3
 8001d24:	4a41      	ldr	r2, [pc, #260]	@ (8001e2c <_Z9hwAds1115v+0x178>)
 8001d26:	2190      	movs	r1, #144	@ 0x90
 8001d28:	4841      	ldr	r0, [pc, #260]	@ (8001e30 <_Z9hwAds1115v+0x17c>)
 8001d2a:	f005 ffd9 	bl	8007ce0 <HAL_I2C_Master_Transmit_DMA>
 8001d2e:	e005      	b.n	8001d3c <_Z9hwAds1115v+0x88>
		}
		else{																			// Si esta seleccionado channel 1
			HAL_I2C_Master_Transmit_DMA(&hi2c1, ADS1115_ADDRESS<<1, AdsCommand_2, 3);	// Transmite comando
 8001d30:	2303      	movs	r3, #3
 8001d32:	4a40      	ldr	r2, [pc, #256]	@ (8001e34 <_Z9hwAds1115v+0x180>)
 8001d34:	2190      	movs	r1, #144	@ 0x90
 8001d36:	483e      	ldr	r0, [pc, #248]	@ (8001e30 <_Z9hwAds1115v+0x17c>)
 8001d38:	f005 ffd2 	bl	8007ce0 <HAL_I2C_Master_Transmit_DMA>
		}

		flagI2C_DMA	= 0;																// Reinicia flag DMA
 8001d3c:	4b3e      	ldr	r3, [pc, #248]	@ (8001e38 <_Z9hwAds1115v+0x184>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	701a      	strb	r2, [r3, #0]
		stateAdc	= 2;																// Pasa a S2
 8001d42:	4b35      	ldr	r3, [pc, #212]	@ (8001e18 <_Z9hwAds1115v+0x164>)
 8001d44:	2202      	movs	r2, #2
 8001d46:	701a      	strb	r2, [r3, #0]

		break;
 8001d48:	e064      	b.n	8001e14 <_Z9hwAds1115v+0x160>
	/////////////////////////
	// S2 - CHECK TRANSMIT //
	/////////////////////////

	case 2:
		HAL_I2C_Master_Transmit_DMA(&hi2c1, ADS1115_ADDRESS<<1, AdsCommand_1, 1);	// Transmite comando
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	4a3b      	ldr	r2, [pc, #236]	@ (8001e3c <_Z9hwAds1115v+0x188>)
 8001d4e:	2190      	movs	r1, #144	@ 0x90
 8001d50:	4837      	ldr	r0, [pc, #220]	@ (8001e30 <_Z9hwAds1115v+0x17c>)
 8001d52:	f005 ffc5 	bl	8007ce0 <HAL_I2C_Master_Transmit_DMA>
		errorHardware[5]	= !flagI2C_DMA;											// Registra si no hay ADS
 8001d56:	4b38      	ldr	r3, [pc, #224]	@ (8001e38 <_Z9hwAds1115v+0x184>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	f083 0301 	eor.w	r3, r3, #1
 8001d5e:	b2da      	uxtb	r2, r3
 8001d60:	4b37      	ldr	r3, [pc, #220]	@ (8001e40 <_Z9hwAds1115v+0x18c>)
 8001d62:	715a      	strb	r2, [r3, #5]

		if ( flagI2C_DMA ){					// Si HAY ADC
 8001d64:	4b34      	ldr	r3, [pc, #208]	@ (8001e38 <_Z9hwAds1115v+0x184>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d003      	beq.n	8001d74 <_Z9hwAds1115v+0xc0>
			stateAdc	= 3;				// Pasa a S3
 8001d6c:	4b2a      	ldr	r3, [pc, #168]	@ (8001e18 <_Z9hwAds1115v+0x164>)
 8001d6e:	2203      	movs	r2, #3
 8001d70:	701a      	strb	r2, [r3, #0]
		}
		else{								// Si no
			stateAdc	= 5;				// Pasa  s5
		}
		break;
 8001d72:	e04f      	b.n	8001e14 <_Z9hwAds1115v+0x160>
			stateAdc	= 5;				// Pasa  s5
 8001d74:	4b28      	ldr	r3, [pc, #160]	@ (8001e18 <_Z9hwAds1115v+0x164>)
 8001d76:	2205      	movs	r2, #5
 8001d78:	701a      	strb	r2, [r3, #0]
		break;
 8001d7a:	e04b      	b.n	8001e14 <_Z9hwAds1115v+0x160>
	////////////////////////////
	// S3 - WAIT FOR RESPONSE //
	////////////////////////////

	case 3:
		countAdc++;							// Suma 1 al contador
 8001d7c:	4b27      	ldr	r3, [pc, #156]	@ (8001e1c <_Z9hwAds1115v+0x168>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	3301      	adds	r3, #1
 8001d82:	4a26      	ldr	r2, [pc, #152]	@ (8001e1c <_Z9hwAds1115v+0x168>)
 8001d84:	6013      	str	r3, [r2, #0]

		if ( countAdc >= limitAds_i2c ){	// Si pasa el limite de espera de respuesta
 8001d86:	4b25      	ldr	r3, [pc, #148]	@ (8001e1c <_Z9hwAds1115v+0x168>)
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	4b2e      	ldr	r3, [pc, #184]	@ (8001e44 <_Z9hwAds1115v+0x190>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	db03      	blt.n	8001d9a <_Z9hwAds1115v+0xe6>
			stateAdc	= 4;				// Pasa a S4
 8001d92:	4b21      	ldr	r3, [pc, #132]	@ (8001e18 <_Z9hwAds1115v+0x164>)
 8001d94:	2204      	movs	r2, #4
 8001d96:	701a      	strb	r2, [r3, #0]
		}
		else{								// Si no
			stateAdc	= 3;				// Pasa a S3
		}
		break;
 8001d98:	e03c      	b.n	8001e14 <_Z9hwAds1115v+0x160>
			stateAdc	= 3;				// Pasa a S3
 8001d9a:	4b1f      	ldr	r3, [pc, #124]	@ (8001e18 <_Z9hwAds1115v+0x164>)
 8001d9c:	2203      	movs	r2, #3
 8001d9e:	701a      	strb	r2, [r3, #0]
		break;
 8001da0:	e038      	b.n	8001e14 <_Z9hwAds1115v+0x160>
	//////////////////////
	// S4 - RECEIVE I2C //
	//////////////////////

	case 4:
		countAdc	= 0;																// Reinicia contador
 8001da2:	4b1e      	ldr	r3, [pc, #120]	@ (8001e1c <_Z9hwAds1115v+0x168>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
		HAL_I2C_Master_Receive_DMA(&hi2c1, ADS1115_ADDRESS<<1, buffer_ADS_I2C_IN, 2);	// Solicita datos del buffer
 8001da8:	2302      	movs	r3, #2
 8001daa:	4a27      	ldr	r2, [pc, #156]	@ (8001e48 <_Z9hwAds1115v+0x194>)
 8001dac:	2190      	movs	r1, #144	@ 0x90
 8001dae:	4820      	ldr	r0, [pc, #128]	@ (8001e30 <_Z9hwAds1115v+0x17c>)
 8001db0:	f006 f8aa 	bl	8007f08 <HAL_I2C_Master_Receive_DMA>
		if ( selectChannelAds ){														// Si esta seleccionado channel 0
 8001db4:	4b1c      	ldr	r3, [pc, #112]	@ (8001e28 <_Z9hwAds1115v+0x174>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d00c      	beq.n	8001dd6 <_Z9hwAds1115v+0x122>
			alphaA = ( buffer_ADS_I2C_IN[0] << 8 | buffer_ADS_I2C_IN[1] );				// Guarda en Alpha0
 8001dbc:	4b22      	ldr	r3, [pc, #136]	@ (8001e48 <_Z9hwAds1115v+0x194>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	021b      	lsls	r3, r3, #8
 8001dc2:	b21a      	sxth	r2, r3
 8001dc4:	4b20      	ldr	r3, [pc, #128]	@ (8001e48 <_Z9hwAds1115v+0x194>)
 8001dc6:	785b      	ldrb	r3, [r3, #1]
 8001dc8:	b21b      	sxth	r3, r3
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	b21b      	sxth	r3, r3
 8001dce:	b29a      	uxth	r2, r3
 8001dd0:	4b1e      	ldr	r3, [pc, #120]	@ (8001e4c <_Z9hwAds1115v+0x198>)
 8001dd2:	801a      	strh	r2, [r3, #0]
 8001dd4:	e00b      	b.n	8001dee <_Z9hwAds1115v+0x13a>
		}
		else{																			// Si esta seleccionado channel 1
			alphaB = ( buffer_ADS_I2C_IN[0] << 8 | buffer_ADS_I2C_IN[1] );				// Guarda en Alpha1
 8001dd6:	4b1c      	ldr	r3, [pc, #112]	@ (8001e48 <_Z9hwAds1115v+0x194>)
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	021b      	lsls	r3, r3, #8
 8001ddc:	b21a      	sxth	r2, r3
 8001dde:	4b1a      	ldr	r3, [pc, #104]	@ (8001e48 <_Z9hwAds1115v+0x194>)
 8001de0:	785b      	ldrb	r3, [r3, #1]
 8001de2:	b21b      	sxth	r3, r3
 8001de4:	4313      	orrs	r3, r2
 8001de6:	b21b      	sxth	r3, r3
 8001de8:	b29a      	uxth	r2, r3
 8001dea:	4b19      	ldr	r3, [pc, #100]	@ (8001e50 <_Z9hwAds1115v+0x19c>)
 8001dec:	801a      	strh	r2, [r3, #0]
		}
		stateAdc	= 5;																// Pasa a S5
 8001dee:	4b0a      	ldr	r3, [pc, #40]	@ (8001e18 <_Z9hwAds1115v+0x164>)
 8001df0:	2205      	movs	r2, #5
 8001df2:	701a      	strb	r2, [r3, #0]
		break;
 8001df4:	e00e      	b.n	8001e14 <_Z9hwAds1115v+0x160>
	/////////////////////
	// S5 - CLOSE LOOP //
	/////////////////////

	case 5:
		selectChannelAds	= !selectChannelAds;	// Cambia canal
 8001df6:	4b0c      	ldr	r3, [pc, #48]	@ (8001e28 <_Z9hwAds1115v+0x174>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	f083 0301 	eor.w	r3, r3, #1
 8001dfe:	b2da      	uxtb	r2, r3
 8001e00:	4b09      	ldr	r3, [pc, #36]	@ (8001e28 <_Z9hwAds1115v+0x174>)
 8001e02:	701a      	strb	r2, [r3, #0]
		enableI2C	= 1;							// Habilita uso de I2C
 8001e04:	4b07      	ldr	r3, [pc, #28]	@ (8001e24 <_Z9hwAds1115v+0x170>)
 8001e06:	2201      	movs	r2, #1
 8001e08:	701a      	strb	r2, [r3, #0]
		stateAdc	= 0;							// Vuelve a S0
 8001e0a:	4b03      	ldr	r3, [pc, #12]	@ (8001e18 <_Z9hwAds1115v+0x164>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	701a      	strb	r2, [r3, #0]
		break;
 8001e10:	e000      	b.n	8001e14 <_Z9hwAds1115v+0x160>

	default:
		break;
 8001e12:	bf00      	nop
	}
}
 8001e14:	bf00      	nop
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	20000428 	.word	0x20000428
 8001e1c:	2000042c 	.word	0x2000042c
 8001e20:	20000430 	.word	0x20000430
 8001e24:	2000000f 	.word	0x2000000f
 8001e28:	20000442 	.word	0x20000442
 8001e2c:	20000010 	.word	0x20000010
 8001e30:	200006c4 	.word	0x200006c4
 8001e34:	20000014 	.word	0x20000014
 8001e38:	20001093 	.word	0x20001093
 8001e3c:	20000438 	.word	0x20000438
 8001e40:	200004d4 	.word	0x200004d4
 8001e44:	20000434 	.word	0x20000434
 8001e48:	2000043c 	.word	0x2000043c
 8001e4c:	2000043e 	.word	0x2000043e
 8001e50:	20000440 	.word	0x20000440

08001e54 <_Z7hwSht31v>:
 *	OUTPUT	: 	tempIntern, tempExtern
 *				humIntern, humExtern
 *				warningHardware[0], warningHardware[1]
 */

void hwSht31(){
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0

	switch ( stateSht31 ){
 8001e58:	4b98      	ldr	r3, [pc, #608]	@ (80020bc <_Z7hwSht31v+0x268>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	2b06      	cmp	r3, #6
 8001e5e:	f200 8126 	bhi.w	80020ae <_Z7hwSht31v+0x25a>
 8001e62:	a201      	add	r2, pc, #4	@ (adr r2, 8001e68 <_Z7hwSht31v+0x14>)
 8001e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e68:	08001e85 	.word	0x08001e85
 8001e6c:	08001eb9 	.word	0x08001eb9
 8001e70:	08001ef7 	.word	0x08001ef7
 8001e74:	08001f3b 	.word	0x08001f3b
 8001e78:	08001f61 	.word	0x08001f61
 8001e7c:	08001f81 	.word	0x08001f81
 8001e80:	0800207d 	.word	0x0800207d
	///////////////////////////
	// S0 - WAIT FOR MEASURE //
	///////////////////////////

	case 0:
		countSht31++;							// Suma 1 al contador
 8001e84:	4b8e      	ldr	r3, [pc, #568]	@ (80020c0 <_Z7hwSht31v+0x26c>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	4a8d      	ldr	r2, [pc, #564]	@ (80020c0 <_Z7hwSht31v+0x26c>)
 8001e8c:	6013      	str	r3, [r2, #0]

		if ( countSht31 >= limitSht31_measure && enableI2C ){// Si el contador pasa limite
 8001e8e:	4b8c      	ldr	r3, [pc, #560]	@ (80020c0 <_Z7hwSht31v+0x26c>)
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	4b8c      	ldr	r3, [pc, #560]	@ (80020c4 <_Z7hwSht31v+0x270>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	db0a      	blt.n	8001eb0 <_Z7hwSht31v+0x5c>
 8001e9a:	4b8b      	ldr	r3, [pc, #556]	@ (80020c8 <_Z7hwSht31v+0x274>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d006      	beq.n	8001eb0 <_Z7hwSht31v+0x5c>
			enableI2C	= 0;					// Deshabilita uso de I2C
 8001ea2:	4b89      	ldr	r3, [pc, #548]	@ (80020c8 <_Z7hwSht31v+0x274>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	701a      	strb	r2, [r3, #0]
			stateSht31	= 1;					// Pasa a S1
 8001ea8:	4b84      	ldr	r3, [pc, #528]	@ (80020bc <_Z7hwSht31v+0x268>)
 8001eaa:	2201      	movs	r2, #1
 8001eac:	701a      	strb	r2, [r3, #0]
		}
		else{									// Si no
			stateSht31	= 0;					// Espera
		}
		break;
 8001eae:	e102      	b.n	80020b6 <_Z7hwSht31v+0x262>
			stateSht31	= 0;					// Espera
 8001eb0:	4b82      	ldr	r3, [pc, #520]	@ (80020bc <_Z7hwSht31v+0x268>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	701a      	strb	r2, [r3, #0]
		break;
 8001eb6:	e0fe      	b.n	80020b6 <_Z7hwSht31v+0x262>
	///////////////////////////
	// S1 - TRANSMIT COMMAND //
	///////////////////////////

	case 1:
		countSht31	= 0;				// Reinicia contador
 8001eb8:	4b81      	ldr	r3, [pc, #516]	@ (80020c0 <_Z7hwSht31v+0x26c>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	601a      	str	r2, [r3, #0]
										// Transmite comando por I2C al SHT31 correspondiente
										// Solicita respuesta del proceso

		buffer_SHT31_I2C_OUT[0]	= command_Sht31 >> 8;				// Copia primer byte del comando
 8001ebe:	4b83      	ldr	r3, [pc, #524]	@ (80020cc <_Z7hwSht31v+0x278>)
 8001ec0:	881b      	ldrh	r3, [r3, #0]
 8001ec2:	0a1b      	lsrs	r3, r3, #8
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	b2da      	uxtb	r2, r3
 8001ec8:	4b81      	ldr	r3, [pc, #516]	@ (80020d0 <_Z7hwSht31v+0x27c>)
 8001eca:	701a      	strb	r2, [r3, #0]
		buffer_SHT31_I2C_OUT[1]	= uint8_t ( command_Sht31 & 0xFF );	// Copia segundo byte del comando
 8001ecc:	4b7f      	ldr	r3, [pc, #508]	@ (80020cc <_Z7hwSht31v+0x278>)
 8001ece:	881b      	ldrh	r3, [r3, #0]
 8001ed0:	b2da      	uxtb	r2, r3
 8001ed2:	4b7f      	ldr	r3, [pc, #508]	@ (80020d0 <_Z7hwSht31v+0x27c>)
 8001ed4:	705a      	strb	r2, [r3, #1]

		flagI2C_DMA	= 0;											// Reinicia flag de envio de datos
 8001ed6:	4b7f      	ldr	r3, [pc, #508]	@ (80020d4 <_Z7hwSht31v+0x280>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	701a      	strb	r2, [r3, #0]
														 			// Transmite comando
		HAL_I2C_Master_Transmit_DMA(&hi2c1, addressSht31<<1, buffer_SHT31_I2C_OUT, 2);
 8001edc:	4b7e      	ldr	r3, [pc, #504]	@ (80020d8 <_Z7hwSht31v+0x284>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	b299      	uxth	r1, r3
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	4a7a      	ldr	r2, [pc, #488]	@ (80020d0 <_Z7hwSht31v+0x27c>)
 8001ee8:	487c      	ldr	r0, [pc, #496]	@ (80020dc <_Z7hwSht31v+0x288>)
 8001eea:	f005 fef9 	bl	8007ce0 <HAL_I2C_Master_Transmit_DMA>

		stateSht31	= 2;											// Pasa a S2
 8001eee:	4b73      	ldr	r3, [pc, #460]	@ (80020bc <_Z7hwSht31v+0x268>)
 8001ef0:	2202      	movs	r2, #2
 8001ef2:	701a      	strb	r2, [r3, #0]
		break;
 8001ef4:	e0df      	b.n	80020b6 <_Z7hwSht31v+0x262>
										// PERO CON FALTA DE INFORMACIÓN PARA EL SENSOR
										// flagI2C_DMA -> 0: No hay sensor | 1: Hay sensor
										// flagI2C_DMA se actualiza en HAL_I2C_MasterTxCpltCallback
										// HAL_I2C_MasterTxCpltCallback se activa cuando el DMA transmitió correctamente

		if ( !selectSht31 ){					// Si esta seleccionado SHT31 interno
 8001ef6:	4b7a      	ldr	r3, [pc, #488]	@ (80020e0 <_Z7hwSht31v+0x28c>)
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	f083 0301 	eor.w	r3, r3, #1
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d007      	beq.n	8001f14 <_Z7hwSht31v+0xc0>
			errorHardware[0]	= !flagI2C_DMA;	// Marca estado del sensor
 8001f04:	4b73      	ldr	r3, [pc, #460]	@ (80020d4 <_Z7hwSht31v+0x280>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	f083 0301 	eor.w	r3, r3, #1
 8001f0c:	b2da      	uxtb	r2, r3
 8001f0e:	4b75      	ldr	r3, [pc, #468]	@ (80020e4 <_Z7hwSht31v+0x290>)
 8001f10:	701a      	strb	r2, [r3, #0]
 8001f12:	e006      	b.n	8001f22 <_Z7hwSht31v+0xce>
		}
		else{									// Si esta seleccionado SHT31 externo
			errorHardware[1]	= !flagI2C_DMA;	// Marca estado del sensor
 8001f14:	4b6f      	ldr	r3, [pc, #444]	@ (80020d4 <_Z7hwSht31v+0x280>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	f083 0301 	eor.w	r3, r3, #1
 8001f1c:	b2da      	uxtb	r2, r3
 8001f1e:	4b71      	ldr	r3, [pc, #452]	@ (80020e4 <_Z7hwSht31v+0x290>)
 8001f20:	705a      	strb	r2, [r3, #1]
		}

		if ( flagI2C_DMA ){						// Si hay sensor
 8001f22:	4b6c      	ldr	r3, [pc, #432]	@ (80020d4 <_Z7hwSht31v+0x280>)
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <_Z7hwSht31v+0xde>
			stateSht31	= 3;					// Pasa a S3 para recibir datos
 8001f2a:	4b64      	ldr	r3, [pc, #400]	@ (80020bc <_Z7hwSht31v+0x268>)
 8001f2c:	2203      	movs	r2, #3
 8001f2e:	701a      	strb	r2, [r3, #0]
		}
		else{									// Si no hay sensor
			stateSht31	= 6;					// Pasa a S6 - cambio de sensor
		}
		break;
 8001f30:	e0c1      	b.n	80020b6 <_Z7hwSht31v+0x262>
			stateSht31	= 6;					// Pasa a S6 - cambio de sensor
 8001f32:	4b62      	ldr	r3, [pc, #392]	@ (80020bc <_Z7hwSht31v+0x268>)
 8001f34:	2206      	movs	r2, #6
 8001f36:	701a      	strb	r2, [r3, #0]
		break;
 8001f38:	e0bd      	b.n	80020b6 <_Z7hwSht31v+0x262>
	///////////////////////////
	// S3 - ESPERA RESPUESTA //
	///////////////////////////

	case 3:
		countSht31++;							// Suma 1 al contador
 8001f3a:	4b61      	ldr	r3, [pc, #388]	@ (80020c0 <_Z7hwSht31v+0x26c>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	3301      	adds	r3, #1
 8001f40:	4a5f      	ldr	r2, [pc, #380]	@ (80020c0 <_Z7hwSht31v+0x26c>)
 8001f42:	6013      	str	r3, [r2, #0]

		if ( countSht31 >= limitSht31_i2c ){	// Si pasa el limite de respuesta
 8001f44:	4b5e      	ldr	r3, [pc, #376]	@ (80020c0 <_Z7hwSht31v+0x26c>)
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	4b67      	ldr	r3, [pc, #412]	@ (80020e8 <_Z7hwSht31v+0x294>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	db03      	blt.n	8001f58 <_Z7hwSht31v+0x104>
			stateSht31	= 4;					// Pasa a S4
 8001f50:	4b5a      	ldr	r3, [pc, #360]	@ (80020bc <_Z7hwSht31v+0x268>)
 8001f52:	2204      	movs	r2, #4
 8001f54:	701a      	strb	r2, [r3, #0]
		}
		else{									// Sino
			stateSht31	= 3;					// Espera en S3
		}
		break;
 8001f56:	e0ae      	b.n	80020b6 <_Z7hwSht31v+0x262>
			stateSht31	= 3;					// Espera en S3
 8001f58:	4b58      	ldr	r3, [pc, #352]	@ (80020bc <_Z7hwSht31v+0x268>)
 8001f5a:	2203      	movs	r2, #3
 8001f5c:	701a      	strb	r2, [r3, #0]
		break;
 8001f5e:	e0aa      	b.n	80020b6 <_Z7hwSht31v+0x262>

	///////////////////////
	// S4 - RECIBE DATOS //
	///////////////////////
	case 4:
		countSht31	= 0;	// Reinicia contador
 8001f60:	4b57      	ldr	r3, [pc, #348]	@ (80020c0 <_Z7hwSht31v+0x26c>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	601a      	str	r2, [r3, #0]
							// RECIBE LOS DATOS DEL BUS I2C
		HAL_I2C_Master_Receive_DMA(&hi2c1, addressSht31<<1, buffer_SHT31_I2C_IN, 6);
 8001f66:	4b5c      	ldr	r3, [pc, #368]	@ (80020d8 <_Z7hwSht31v+0x284>)
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	b299      	uxth	r1, r3
 8001f6e:	2306      	movs	r3, #6
 8001f70:	4a5e      	ldr	r2, [pc, #376]	@ (80020ec <_Z7hwSht31v+0x298>)
 8001f72:	485a      	ldr	r0, [pc, #360]	@ (80020dc <_Z7hwSht31v+0x288>)
 8001f74:	f005 ffc8 	bl	8007f08 <HAL_I2C_Master_Receive_DMA>
		stateSht31	= 5;	// Pasa a S5 para
 8001f78:	4b50      	ldr	r3, [pc, #320]	@ (80020bc <_Z7hwSht31v+0x268>)
 8001f7a:	2205      	movs	r2, #5
 8001f7c:	701a      	strb	r2, [r3, #0]
		break;
 8001f7e:	e09a      	b.n	80020b6 <_Z7hwSht31v+0x262>
	// S5 - ESCALA DE VARIABLES //
	//////////////////////////////

	case 5:

		if ( !selectSht31 ){														// Si esta seleccionado SHT INTERNO
 8001f80:	4b57      	ldr	r3, [pc, #348]	@ (80020e0 <_Z7hwSht31v+0x28c>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	f083 0301 	eor.w	r3, r3, #1
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d039      	beq.n	8002002 <_Z7hwSht31v+0x1ae>
			tempIntern	= (buffer_SHT31_I2C_IN[0] << 8) + buffer_SHT31_I2C_IN[1];	// Une valores del bus para temperatura
 8001f8e:	4b57      	ldr	r3, [pc, #348]	@ (80020ec <_Z7hwSht31v+0x298>)
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	021b      	lsls	r3, r3, #8
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	4a55      	ldr	r2, [pc, #340]	@ (80020ec <_Z7hwSht31v+0x298>)
 8001f98:	7852      	ldrb	r2, [r2, #1]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	b29a      	uxth	r2, r3
 8001f9e:	4b54      	ldr	r3, [pc, #336]	@ (80020f0 <_Z7hwSht31v+0x29c>)
 8001fa0:	801a      	strh	r2, [r3, #0]
			tempIntern	= 1750*tempIntern/65535 - 450;								// Escala sugerida
 8001fa2:	4b53      	ldr	r3, [pc, #332]	@ (80020f0 <_Z7hwSht31v+0x29c>)
 8001fa4:	881b      	ldrh	r3, [r3, #0]
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	f240 63d6 	movw	r3, #1750	@ 0x6d6
 8001fac:	fb02 f303 	mul.w	r3, r2, r3
 8001fb0:	4a50      	ldr	r2, [pc, #320]	@ (80020f4 <_Z7hwSht31v+0x2a0>)
 8001fb2:	fb82 1203 	smull	r1, r2, r2, r3
 8001fb6:	441a      	add	r2, r3
 8001fb8:	13d2      	asrs	r2, r2, #15
 8001fba:	17db      	asrs	r3, r3, #31
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	f5a3 73e1 	sub.w	r3, r3, #450	@ 0x1c2
 8001fc4:	b29a      	uxth	r2, r3
 8001fc6:	4b4a      	ldr	r3, [pc, #296]	@ (80020f0 <_Z7hwSht31v+0x29c>)
 8001fc8:	801a      	strh	r2, [r3, #0]

			humIntern	= (buffer_SHT31_I2C_IN[3] << 8) + buffer_SHT31_I2C_IN[4];	// Une los valores del bus para humedad
 8001fca:	4b48      	ldr	r3, [pc, #288]	@ (80020ec <_Z7hwSht31v+0x298>)
 8001fcc:	78db      	ldrb	r3, [r3, #3]
 8001fce:	021b      	lsls	r3, r3, #8
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	4a46      	ldr	r2, [pc, #280]	@ (80020ec <_Z7hwSht31v+0x298>)
 8001fd4:	7912      	ldrb	r2, [r2, #4]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	b29a      	uxth	r2, r3
 8001fda:	4b47      	ldr	r3, [pc, #284]	@ (80020f8 <_Z7hwSht31v+0x2a4>)
 8001fdc:	801a      	strh	r2, [r3, #0]
			humIntern	= 1000*humIntern/65535;										// Escala sugerida
 8001fde:	4b46      	ldr	r3, [pc, #280]	@ (80020f8 <_Z7hwSht31v+0x2a4>)
 8001fe0:	881b      	ldrh	r3, [r3, #0]
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fe8:	fb02 f303 	mul.w	r3, r2, r3
 8001fec:	4a41      	ldr	r2, [pc, #260]	@ (80020f4 <_Z7hwSht31v+0x2a0>)
 8001fee:	fb82 1203 	smull	r1, r2, r2, r3
 8001ff2:	441a      	add	r2, r3
 8001ff4:	13d2      	asrs	r2, r2, #15
 8001ff6:	17db      	asrs	r3, r3, #31
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	4b3e      	ldr	r3, [pc, #248]	@ (80020f8 <_Z7hwSht31v+0x2a4>)
 8001ffe:	801a      	strh	r2, [r3, #0]
 8002000:	e038      	b.n	8002074 <_Z7hwSht31v+0x220>
		}
		else{																		// Si esta seleccionado SHT EXTERNO
			tempExtern	= (buffer_SHT31_I2C_IN[0] << 8) + buffer_SHT31_I2C_IN[1];	// Une valores del bus paa temperatura externa
 8002002:	4b3a      	ldr	r3, [pc, #232]	@ (80020ec <_Z7hwSht31v+0x298>)
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	021b      	lsls	r3, r3, #8
 8002008:	b29b      	uxth	r3, r3
 800200a:	4a38      	ldr	r2, [pc, #224]	@ (80020ec <_Z7hwSht31v+0x298>)
 800200c:	7852      	ldrb	r2, [r2, #1]
 800200e:	4413      	add	r3, r2
 8002010:	b29a      	uxth	r2, r3
 8002012:	4b3a      	ldr	r3, [pc, #232]	@ (80020fc <_Z7hwSht31v+0x2a8>)
 8002014:	801a      	strh	r2, [r3, #0]
			tempExtern	= 1750*tempExtern/65535 - 450;								// Escala sugerida
 8002016:	4b39      	ldr	r3, [pc, #228]	@ (80020fc <_Z7hwSht31v+0x2a8>)
 8002018:	881b      	ldrh	r3, [r3, #0]
 800201a:	461a      	mov	r2, r3
 800201c:	f240 63d6 	movw	r3, #1750	@ 0x6d6
 8002020:	fb02 f303 	mul.w	r3, r2, r3
 8002024:	4a33      	ldr	r2, [pc, #204]	@ (80020f4 <_Z7hwSht31v+0x2a0>)
 8002026:	fb82 1203 	smull	r1, r2, r2, r3
 800202a:	441a      	add	r2, r3
 800202c:	13d2      	asrs	r2, r2, #15
 800202e:	17db      	asrs	r3, r3, #31
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	b29b      	uxth	r3, r3
 8002034:	f5a3 73e1 	sub.w	r3, r3, #450	@ 0x1c2
 8002038:	b29a      	uxth	r2, r3
 800203a:	4b30      	ldr	r3, [pc, #192]	@ (80020fc <_Z7hwSht31v+0x2a8>)
 800203c:	801a      	strh	r2, [r3, #0]

			humExtern	= (buffer_SHT31_I2C_IN[3] << 8) + buffer_SHT31_I2C_IN[4];	// Une valores del bus para humedad
 800203e:	4b2b      	ldr	r3, [pc, #172]	@ (80020ec <_Z7hwSht31v+0x298>)
 8002040:	78db      	ldrb	r3, [r3, #3]
 8002042:	021b      	lsls	r3, r3, #8
 8002044:	b29b      	uxth	r3, r3
 8002046:	4a29      	ldr	r2, [pc, #164]	@ (80020ec <_Z7hwSht31v+0x298>)
 8002048:	7912      	ldrb	r2, [r2, #4]
 800204a:	4413      	add	r3, r2
 800204c:	b29a      	uxth	r2, r3
 800204e:	4b2c      	ldr	r3, [pc, #176]	@ (8002100 <_Z7hwSht31v+0x2ac>)
 8002050:	801a      	strh	r2, [r3, #0]
			humExtern	= 1000*humExtern/65535;										// Escala sugerida
 8002052:	4b2b      	ldr	r3, [pc, #172]	@ (8002100 <_Z7hwSht31v+0x2ac>)
 8002054:	881b      	ldrh	r3, [r3, #0]
 8002056:	461a      	mov	r2, r3
 8002058:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800205c:	fb02 f303 	mul.w	r3, r2, r3
 8002060:	4a24      	ldr	r2, [pc, #144]	@ (80020f4 <_Z7hwSht31v+0x2a0>)
 8002062:	fb82 1203 	smull	r1, r2, r2, r3
 8002066:	441a      	add	r2, r3
 8002068:	13d2      	asrs	r2, r2, #15
 800206a:	17db      	asrs	r3, r3, #31
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	b29a      	uxth	r2, r3
 8002070:	4b23      	ldr	r3, [pc, #140]	@ (8002100 <_Z7hwSht31v+0x2ac>)
 8002072:	801a      	strh	r2, [r3, #0]
		}
		stateSht31	= 6;
 8002074:	4b11      	ldr	r3, [pc, #68]	@ (80020bc <_Z7hwSht31v+0x268>)
 8002076:	2206      	movs	r2, #6
 8002078:	701a      	strb	r2, [r3, #0]
		break;
 800207a:	e01c      	b.n	80020b6 <_Z7hwSht31v+0x262>

	///////////////////////////
	// S6 - CAMBIO DE SENSOR //
	///////////////////////////
	case 6:
		enableI2C	= 1;
 800207c:	4b12      	ldr	r3, [pc, #72]	@ (80020c8 <_Z7hwSht31v+0x274>)
 800207e:	2201      	movs	r2, #1
 8002080:	701a      	strb	r2, [r3, #0]
		selectSht31	= !selectSht31;				//	Cambia sht31 seleccionado
 8002082:	4b17      	ldr	r3, [pc, #92]	@ (80020e0 <_Z7hwSht31v+0x28c>)
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	f083 0301 	eor.w	r3, r3, #1
 800208a:	b2da      	uxtb	r2, r3
 800208c:	4b14      	ldr	r3, [pc, #80]	@ (80020e0 <_Z7hwSht31v+0x28c>)
 800208e:	701a      	strb	r2, [r3, #0]

		if ( selectSht31 ){						// Si selecciona SHT31 Externo
 8002090:	4b13      	ldr	r3, [pc, #76]	@ (80020e0 <_Z7hwSht31v+0x28c>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d003      	beq.n	80020a0 <_Z7hwSht31v+0x24c>
			addressSht31	= SHT31_ADDRESS_A;	// Dija address 0x4
 8002098:	4b0f      	ldr	r3, [pc, #60]	@ (80020d8 <_Z7hwSht31v+0x284>)
 800209a:	2244      	movs	r2, #68	@ 0x44
 800209c:	701a      	strb	r2, [r3, #0]
 800209e:	e002      	b.n	80020a6 <_Z7hwSht31v+0x252>
		}
		else{									// Si selecciona SHT31 Interno
			addressSht31	= SHT31_ADDRESS_B;	// Fija address 0x45
 80020a0:	4b0d      	ldr	r3, [pc, #52]	@ (80020d8 <_Z7hwSht31v+0x284>)
 80020a2:	2245      	movs	r2, #69	@ 0x45
 80020a4:	701a      	strb	r2, [r3, #0]
		}

		stateSht31	= 0;						// Cierra el ciclo
 80020a6:	4b05      	ldr	r3, [pc, #20]	@ (80020bc <_Z7hwSht31v+0x268>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	701a      	strb	r2, [r3, #0]
		break;
 80020ac:	e003      	b.n	80020b6 <_Z7hwSht31v+0x262>

	default:
		stateSht31	= 0;
 80020ae:	4b03      	ldr	r3, [pc, #12]	@ (80020bc <_Z7hwSht31v+0x268>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	701a      	strb	r2, [r3, #0]
		break;
 80020b4:	bf00      	nop
	}
}
 80020b6:	bf00      	nop
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	20000409 	.word	0x20000409
 80020c0:	2000040c 	.word	0x2000040c
 80020c4:	20000410 	.word	0x20000410
 80020c8:	2000000f 	.word	0x2000000f
 80020cc:	2000000a 	.word	0x2000000a
 80020d0:	2000000c 	.word	0x2000000c
 80020d4:	20001093 	.word	0x20001093
 80020d8:	2000000e 	.word	0x2000000e
 80020dc:	200006c4 	.word	0x200006c4
 80020e0:	2000041e 	.word	0x2000041e
 80020e4:	200004d4 	.word	0x200004d4
 80020e8:	20000414 	.word	0x20000414
 80020ec:	20000418 	.word	0x20000418
 80020f0:	20000420 	.word	0x20000420
 80020f4:	80008001 	.word	0x80008001
 80020f8:	20000422 	.word	0x20000422
 80020fc:	20000424 	.word	0x20000424
 8002100:	20000426 	.word	0x20000426

08002104 <_Z7hwBotonv>:
 *	INPUT 	: GPIO_A, PIN_3
 *	OUTPUT	: flagBoton
 *
 */

void hwBoton(){
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
	///////////
	// BOTON //
	///////////

	boton	= ! HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);	// Invierte la entrada
 8002108:	2108      	movs	r1, #8
 800210a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800210e:	f005 fd1b 	bl	8007b48 <HAL_GPIO_ReadPin>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	bf0c      	ite	eq
 8002118:	2301      	moveq	r3, #1
 800211a:	2300      	movne	r3, #0
 800211c:	b2da      	uxtb	r2, r3
 800211e:	4b25      	ldr	r3, [pc, #148]	@ (80021b4 <_Z7hwBotonv+0xb0>)
 8002120:	701a      	strb	r2, [r3, #0]

	switch (stateBoton){
 8002122:	4b25      	ldr	r3, [pc, #148]	@ (80021b8 <_Z7hwBotonv+0xb4>)
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	2b02      	cmp	r3, #2
 8002128:	d03a      	beq.n	80021a0 <_Z7hwBotonv+0x9c>
 800212a:	2b02      	cmp	r3, #2
 800212c:	dc3f      	bgt.n	80021ae <_Z7hwBotonv+0xaa>
 800212e:	2b00      	cmp	r3, #0
 8002130:	d002      	beq.n	8002138 <_Z7hwBotonv+0x34>
 8002132:	2b01      	cmp	r3, #1
 8002134:	d012      	beq.n	800215c <_Z7hwBotonv+0x58>
		flagBoton	= 1;		// Indica que se presiono el boton
		stateBoton	= 0;		// Vuelve a S0
		break;

	default:
		break;
 8002136:	e03a      	b.n	80021ae <_Z7hwBotonv+0xaa>
		countBoton	= 0;		//	Reinicia contador
 8002138:	4b20      	ldr	r3, [pc, #128]	@ (80021bc <_Z7hwBotonv+0xb8>)
 800213a:	2200      	movs	r2, #0
 800213c:	601a      	str	r2, [r3, #0]
		flagBoton	= 0;		//	Reinicia flag de boton apretado
 800213e:	4b20      	ldr	r3, [pc, #128]	@ (80021c0 <_Z7hwBotonv+0xbc>)
 8002140:	2200      	movs	r2, #0
 8002142:	701a      	strb	r2, [r3, #0]
		if ( boton ){			//	Si se presiona el boton
 8002144:	4b1b      	ldr	r3, [pc, #108]	@ (80021b4 <_Z7hwBotonv+0xb0>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d003      	beq.n	8002154 <_Z7hwBotonv+0x50>
			stateBoton	= 1;	//	Pasa a S1
 800214c:	4b1a      	ldr	r3, [pc, #104]	@ (80021b8 <_Z7hwBotonv+0xb4>)
 800214e:	2201      	movs	r2, #1
 8002150:	701a      	strb	r2, [r3, #0]
		break;
 8002152:	e02d      	b.n	80021b0 <_Z7hwBotonv+0xac>
			stateBoton	= 0;	// Se queda en S0
 8002154:	4b18      	ldr	r3, [pc, #96]	@ (80021b8 <_Z7hwBotonv+0xb4>)
 8002156:	2200      	movs	r2, #0
 8002158:	701a      	strb	r2, [r3, #0]
		break;
 800215a:	e029      	b.n	80021b0 <_Z7hwBotonv+0xac>
		countBoton++;								// Suma 1 al contador
 800215c:	4b17      	ldr	r3, [pc, #92]	@ (80021bc <_Z7hwBotonv+0xb8>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	3301      	adds	r3, #1
 8002162:	4a16      	ldr	r2, [pc, #88]	@ (80021bc <_Z7hwBotonv+0xb8>)
 8002164:	6013      	str	r3, [r2, #0]
		if ( boton && countBoton >= limitBoton ){	// Si el boton esta presionado y llega al limite del contador
 8002166:	4b13      	ldr	r3, [pc, #76]	@ (80021b4 <_Z7hwBotonv+0xb0>)
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d009      	beq.n	8002182 <_Z7hwBotonv+0x7e>
 800216e:	4b13      	ldr	r3, [pc, #76]	@ (80021bc <_Z7hwBotonv+0xb8>)
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	4b14      	ldr	r3, [pc, #80]	@ (80021c4 <_Z7hwBotonv+0xc0>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	429a      	cmp	r2, r3
 8002178:	db03      	blt.n	8002182 <_Z7hwBotonv+0x7e>
			stateBoton	= 2;						// Pasa a S2
 800217a:	4b0f      	ldr	r3, [pc, #60]	@ (80021b8 <_Z7hwBotonv+0xb4>)
 800217c:	2202      	movs	r2, #2
 800217e:	701a      	strb	r2, [r3, #0]
		break;
 8002180:	e016      	b.n	80021b0 <_Z7hwBotonv+0xac>
		else if ( !boton ){							// Si el boton no estaba apretado
 8002182:	4b0c      	ldr	r3, [pc, #48]	@ (80021b4 <_Z7hwBotonv+0xb0>)
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	f083 0301 	eor.w	r3, r3, #1
 800218a:	b2db      	uxtb	r3, r3
 800218c:	2b00      	cmp	r3, #0
 800218e:	d003      	beq.n	8002198 <_Z7hwBotonv+0x94>
			stateBoton	= 0;						// Vuelve a S0
 8002190:	4b09      	ldr	r3, [pc, #36]	@ (80021b8 <_Z7hwBotonv+0xb4>)
 8002192:	2200      	movs	r2, #0
 8002194:	701a      	strb	r2, [r3, #0]
		break;
 8002196:	e00b      	b.n	80021b0 <_Z7hwBotonv+0xac>
			stateBoton	= 1;						// Se queda en S1
 8002198:	4b07      	ldr	r3, [pc, #28]	@ (80021b8 <_Z7hwBotonv+0xb4>)
 800219a:	2201      	movs	r2, #1
 800219c:	701a      	strb	r2, [r3, #0]
		break;
 800219e:	e007      	b.n	80021b0 <_Z7hwBotonv+0xac>
		flagBoton	= 1;		// Indica que se presiono el boton
 80021a0:	4b07      	ldr	r3, [pc, #28]	@ (80021c0 <_Z7hwBotonv+0xbc>)
 80021a2:	2201      	movs	r2, #1
 80021a4:	701a      	strb	r2, [r3, #0]
		stateBoton	= 0;		// Vuelve a S0
 80021a6:	4b04      	ldr	r3, [pc, #16]	@ (80021b8 <_Z7hwBotonv+0xb4>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	701a      	strb	r2, [r3, #0]
		break;
 80021ac:	e000      	b.n	80021b0 <_Z7hwBotonv+0xac>
		break;
 80021ae:	bf00      	nop
	}
}
 80021b0:	bf00      	nop
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	200003fd 	.word	0x200003fd
 80021b8:	20000408 	.word	0x20000408
 80021bc:	20000400 	.word	0x20000400
 80021c0:	20000a34 	.word	0x20000a34
 80021c4:	20000404 	.word	0x20000404

080021c8 <_Z7hwGpsInv>:
 *
 *	INPUT	:	gpsIn.available()
 *	OUTPUT	:	gpsInput.inserValue()
 */

void hwGpsIn(){
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
	if ( gpsIn.available() ){			// Si hay un elemento en fifo
 80021cc:	480e      	ldr	r0, [pc, #56]	@ (8002208 <_Z7hwGpsInv+0x40>)
 80021ce:	f7ff f97d 	bl	80014cc <_ZN8fifoUart9availableEv>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d015      	beq.n	8002204 <_Z7hwGpsInv+0x3c>
		gpsBus = gpsIn.readElement();	// Lee valor en fifo
 80021d8:	480b      	ldr	r0, [pc, #44]	@ (8002208 <_Z7hwGpsInv+0x40>)
 80021da:	f7ff f93e 	bl	800145a <_ZN8fifoUart11readElementEv>
 80021de:	4603      	mov	r3, r0
 80021e0:	461a      	mov	r2, r3
 80021e2:	4b0a      	ldr	r3, [pc, #40]	@ (800220c <_Z7hwGpsInv+0x44>)
 80021e4:	701a      	strb	r2, [r3, #0]
		gpsInput.insertValue( gpsBus );	// Pasa el simbolo al otro metodo
 80021e6:	4b09      	ldr	r3, [pc, #36]	@ (800220c <_Z7hwGpsInv+0x44>)
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	4619      	mov	r1, r3
 80021ec:	4808      	ldr	r0, [pc, #32]	@ (8002210 <_Z7hwGpsInv+0x48>)
 80021ee:	f7ff f995 	bl	800151c <_ZN8gpsInput11insertValueEh>

		if ( gpsInput.stateInsert == 7){
 80021f2:	4b07      	ldr	r3, [pc, #28]	@ (8002210 <_Z7hwGpsInv+0x48>)
 80021f4:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80021f8:	2b07      	cmp	r3, #7
 80021fa:	d103      	bne.n	8002204 <_Z7hwGpsInv+0x3c>
			gpsBus = gpsBus;
 80021fc:	4b03      	ldr	r3, [pc, #12]	@ (800220c <_Z7hwGpsInv+0x44>)
 80021fe:	781a      	ldrb	r2, [r3, #0]
 8002200:	4b02      	ldr	r3, [pc, #8]	@ (800220c <_Z7hwGpsInv+0x44>)
 8002202:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8002204:	bf00      	nop
 8002206:	bd80      	pop	{r7, pc}
 8002208:	20000a90 	.word	0x20000a90
 800220c:	200004c7 	.word	0x200004c7
 8002210:	20000a38 	.word	0x20000a38

08002214 <_Z8hwAnalogv>:
 *
 *	INPUT	:	analog[0],	analog[1], flagAnalog
 *	OUTPUT	:	battery, alphaAnalog_A, alphaAnalog_B
 */

void hwAnalog(){
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
	switch ( stateAnalog ){
 8002218:	4b25      	ldr	r3, [pc, #148]	@ (80022b0 <_Z8hwAnalogv+0x9c>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	2b02      	cmp	r3, #2
 800221e:	d025      	beq.n	800226c <_Z8hwAnalogv+0x58>
 8002220:	2b02      	cmp	r3, #2
 8002222:	dc42      	bgt.n	80022aa <_Z8hwAnalogv+0x96>
 8002224:	2b00      	cmp	r3, #0
 8002226:	d002      	beq.n	800222e <_Z8hwAnalogv+0x1a>
 8002228:	2b01      	cmp	r3, #1
 800222a:	d013      	beq.n	8002254 <_Z8hwAnalogv+0x40>
		else{												// Si no ha guardado
			stateAnalog		= 2;							// Espera en S2
		}
		break;
	}
}
 800222c:	e03d      	b.n	80022aa <_Z8hwAnalogv+0x96>
		countAnalog++;						// Suma 1 al contador
 800222e:	4b21      	ldr	r3, [pc, #132]	@ (80022b4 <_Z8hwAnalogv+0xa0>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	3301      	adds	r3, #1
 8002234:	4a1f      	ldr	r2, [pc, #124]	@ (80022b4 <_Z8hwAnalogv+0xa0>)
 8002236:	6013      	str	r3, [r2, #0]
		if ( countAnalog >= sampleAnalog ){	// Si cumple el tiempo de muestreo
 8002238:	4b1e      	ldr	r3, [pc, #120]	@ (80022b4 <_Z8hwAnalogv+0xa0>)
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	4b1e      	ldr	r3, [pc, #120]	@ (80022b8 <_Z8hwAnalogv+0xa4>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	429a      	cmp	r2, r3
 8002242:	db03      	blt.n	800224c <_Z8hwAnalogv+0x38>
			stateAnalog	= 1;				// Pasa a S1
 8002244:	4b1a      	ldr	r3, [pc, #104]	@ (80022b0 <_Z8hwAnalogv+0x9c>)
 8002246:	2201      	movs	r2, #1
 8002248:	701a      	strb	r2, [r3, #0]
		break;
 800224a:	e02e      	b.n	80022aa <_Z8hwAnalogv+0x96>
			stateAnalog	= 0;				// Espera en S0
 800224c:	4b18      	ldr	r3, [pc, #96]	@ (80022b0 <_Z8hwAnalogv+0x9c>)
 800224e:	2200      	movs	r2, #0
 8002250:	701a      	strb	r2, [r3, #0]
		break;
 8002252:	e02a      	b.n	80022aa <_Z8hwAnalogv+0x96>
		countAnalog	= 0;									// Reinicia contador
 8002254:	4b17      	ldr	r3, [pc, #92]	@ (80022b4 <_Z8hwAnalogv+0xa0>)
 8002256:	2200      	movs	r2, #0
 8002258:	601a      	str	r2, [r3, #0]
		HAL_ADC_Start_DMA(&hadc1, (uint32_t *) analog, 3);	// Inicia muestreo
 800225a:	2203      	movs	r2, #3
 800225c:	4917      	ldr	r1, [pc, #92]	@ (80022bc <_Z8hwAnalogv+0xa8>)
 800225e:	4818      	ldr	r0, [pc, #96]	@ (80022c0 <_Z8hwAnalogv+0xac>)
 8002260:	f003 fc72 	bl	8005b48 <HAL_ADC_Start_DMA>
		stateAnalog	= 2;									// Pasa a S2
 8002264:	4b12      	ldr	r3, [pc, #72]	@ (80022b0 <_Z8hwAnalogv+0x9c>)
 8002266:	2202      	movs	r2, #2
 8002268:	701a      	strb	r2, [r3, #0]
		break;
 800226a:	e01e      	b.n	80022aa <_Z8hwAnalogv+0x96>
		if ( flagAnalog ){									// Si guardo correctamente
 800226c:	4b15      	ldr	r3, [pc, #84]	@ (80022c4 <_Z8hwAnalogv+0xb0>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d016      	beq.n	80022a2 <_Z8hwAnalogv+0x8e>
			battery			= (analog[0] & 0xFFFF);			// Guarda valor bateria
 8002274:	4b11      	ldr	r3, [pc, #68]	@ (80022bc <_Z8hwAnalogv+0xa8>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	b29a      	uxth	r2, r3
 800227a:	4b13      	ldr	r3, [pc, #76]	@ (80022c8 <_Z8hwAnalogv+0xb4>)
 800227c:	801a      	strh	r2, [r3, #0]
			alphaAnalog_A	= (analog[0] >> 16 & 0xFFFF);	// Guarda valor Alpha A
 800227e:	4b0f      	ldr	r3, [pc, #60]	@ (80022bc <_Z8hwAnalogv+0xa8>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	0c1b      	lsrs	r3, r3, #16
 8002284:	b29a      	uxth	r2, r3
 8002286:	4b11      	ldr	r3, [pc, #68]	@ (80022cc <_Z8hwAnalogv+0xb8>)
 8002288:	801a      	strh	r2, [r3, #0]
			alphaAnalog_B	= (analog[1] & 0xFFFF);			// Guarda valor Alpha B
 800228a:	4b0c      	ldr	r3, [pc, #48]	@ (80022bc <_Z8hwAnalogv+0xa8>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	b29a      	uxth	r2, r3
 8002290:	4b0f      	ldr	r3, [pc, #60]	@ (80022d0 <_Z8hwAnalogv+0xbc>)
 8002292:	801a      	strh	r2, [r3, #0]
			flagAnalog		= 0;							// Reinicia flag de medicion analogica
 8002294:	4b0b      	ldr	r3, [pc, #44]	@ (80022c4 <_Z8hwAnalogv+0xb0>)
 8002296:	2200      	movs	r2, #0
 8002298:	701a      	strb	r2, [r3, #0]
			stateAnalog		= 0;							// Vuelve a S0
 800229a:	4b05      	ldr	r3, [pc, #20]	@ (80022b0 <_Z8hwAnalogv+0x9c>)
 800229c:	2200      	movs	r2, #0
 800229e:	701a      	strb	r2, [r3, #0]
		break;
 80022a0:	e002      	b.n	80022a8 <_Z8hwAnalogv+0x94>
			stateAnalog		= 2;							// Espera en S2
 80022a2:	4b03      	ldr	r3, [pc, #12]	@ (80022b0 <_Z8hwAnalogv+0x9c>)
 80022a4:	2202      	movs	r2, #2
 80022a6:	701a      	strb	r2, [r3, #0]
		break;
 80022a8:	bf00      	nop
}
 80022aa:	bf00      	nop
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	20000454 	.word	0x20000454
 80022b4:	2000044c 	.word	0x2000044c
 80022b8:	20000450 	.word	0x20000450
 80022bc:	2000112c 	.word	0x2000112c
 80022c0:	20000614 	.word	0x20000614
 80022c4:	20001138 	.word	0x20001138
 80022c8:	20000444 	.word	0x20000444
 80022cc:	20000446 	.word	0x20000446
 80022d0:	20000448 	.word	0x20000448

080022d4 <_Z8hwEEPROMv>:
 * 1. Indicar cada uno de los pasos de calibracion
 * 2. Guardas datos de forma periodica en EEPROM
 * 3.
 */

void hwEEPROM(){
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0

	switch ( stateEEPROM ){
 80022da:	4b5f      	ldr	r3, [pc, #380]	@ (8002458 <_Z8hwEEPROMv+0x184>)
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	2b04      	cmp	r3, #4
 80022e0:	f200 80b0 	bhi.w	8002444 <_Z8hwEEPROMv+0x170>
 80022e4:	a201      	add	r2, pc, #4	@ (adr r2, 80022ec <_Z8hwEEPROMv+0x18>)
 80022e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ea:	bf00      	nop
 80022ec:	08002301 	.word	0x08002301
 80022f0:	08002369 	.word	0x08002369
 80022f4:	080023d1 	.word	0x080023d1
 80022f8:	080023d9 	.word	0x080023d9
 80022fc:	0800244d 	.word	0x0800244d
	// S0 - READ PAGE 0 //
	//////////////////////

	case 0:

		EEPROM_Read(0, 0,  nameSensor_0,	sizeof(nameSensor_0));		// Name of sensor
 8002300:	2314      	movs	r3, #20
 8002302:	4a56      	ldr	r2, [pc, #344]	@ (800245c <_Z8hwEEPROMv+0x188>)
 8002304:	2100      	movs	r1, #0
 8002306:	2000      	movs	r0, #0
 8002308:	f7fe f91a 	bl	8000540 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(0, 20, idSensor_0,		sizeof(idSensor_0));		// ID of sensor
 800230c:	2304      	movs	r3, #4
 800230e:	4a54      	ldr	r2, [pc, #336]	@ (8002460 <_Z8hwEEPROMv+0x18c>)
 8002310:	2114      	movs	r1, #20
 8002312:	2000      	movs	r0, #0
 8002314:	f7fe f914 	bl	8000540 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(0, 24, rangeSensor_0,	sizeof(rangeSensor_0));		// Range of sensor
 8002318:	2304      	movs	r3, #4
 800231a:	4a52      	ldr	r2, [pc, #328]	@ (8002464 <_Z8hwEEPROMv+0x190>)
 800231c:	2118      	movs	r1, #24
 800231e:	2000      	movs	r0, #0
 8002320:	f7fe f90e 	bl	8000540 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(0, 28, amplifier_10,	sizeof(amplifier_10));		// Amplifier 1 of sensor
 8002324:	2304      	movs	r3, #4
 8002326:	4a50      	ldr	r2, [pc, #320]	@ (8002468 <_Z8hwEEPROMv+0x194>)
 8002328:	211c      	movs	r1, #28
 800232a:	2000      	movs	r0, #0
 800232c:	f7fe f908 	bl	8000540 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(0, 32, amplifier_20,	sizeof(amplifier_20));		// Amplifier 2 of sensor
 8002330:	2304      	movs	r3, #4
 8002332:	4a4e      	ldr	r2, [pc, #312]	@ (800246c <_Z8hwEEPROMv+0x198>)
 8002334:	2120      	movs	r1, #32
 8002336:	2000      	movs	r0, #0
 8002338:	f7fe f902 	bl	8000540 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(0, 36, groundSensor_0,	sizeof(groundSensor_0));	// N of curve
 800233c:	2304      	movs	r3, #4
 800233e:	4a4c      	ldr	r2, [pc, #304]	@ (8002470 <_Z8hwEEPROMv+0x19c>)
 8002340:	2124      	movs	r1, #36	@ 0x24
 8002342:	2000      	movs	r0, #0
 8002344:	f7fe f8fc 	bl	8000540 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(0, 40, curveSensor_0,	sizeof(curveSensor_0));		// M of curve
 8002348:	2304      	movs	r3, #4
 800234a:	4a4a      	ldr	r2, [pc, #296]	@ (8002474 <_Z8hwEEPROMv+0x1a0>)
 800234c:	2128      	movs	r1, #40	@ 0x28
 800234e:	2000      	movs	r0, #0
 8002350:	f7fe f8f6 	bl	8000540 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(0, 44, dateCalib_0,		sizeof(dateCalib_0));		// Date of calibration
 8002354:	230a      	movs	r3, #10
 8002356:	4a48      	ldr	r2, [pc, #288]	@ (8002478 <_Z8hwEEPROMv+0x1a4>)
 8002358:	212c      	movs	r1, #44	@ 0x2c
 800235a:	2000      	movs	r0, #0
 800235c:	f7fe f8f0 	bl	8000540 <_Z11EEPROM_ReadttPht>
		stateEEPROM	= 1;												// S1 to read page 1
 8002360:	4b3d      	ldr	r3, [pc, #244]	@ (8002458 <_Z8hwEEPROMv+0x184>)
 8002362:	2201      	movs	r2, #1
 8002364:	701a      	strb	r2, [r3, #0]
		break;
 8002366:	e072      	b.n	800244e <_Z8hwEEPROMv+0x17a>
	//////////////////////
	// S1 - READ PAGE 1 //
	//////////////////////

	case 1:
		EEPROM_Read(1, 0,  nameSensor_1,	sizeof(nameSensor_1));		// Name of sensor
 8002368:	2314      	movs	r3, #20
 800236a:	4a44      	ldr	r2, [pc, #272]	@ (800247c <_Z8hwEEPROMv+0x1a8>)
 800236c:	2100      	movs	r1, #0
 800236e:	2001      	movs	r0, #1
 8002370:	f7fe f8e6 	bl	8000540 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(1, 20, idSensor_1,		sizeof(idSensor_1));		// ID of sensor
 8002374:	2304      	movs	r3, #4
 8002376:	4a42      	ldr	r2, [pc, #264]	@ (8002480 <_Z8hwEEPROMv+0x1ac>)
 8002378:	2114      	movs	r1, #20
 800237a:	2001      	movs	r0, #1
 800237c:	f7fe f8e0 	bl	8000540 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(1, 24, rangeSensor_1,	sizeof(rangeSensor_1));		// Range of sensor
 8002380:	2304      	movs	r3, #4
 8002382:	4a40      	ldr	r2, [pc, #256]	@ (8002484 <_Z8hwEEPROMv+0x1b0>)
 8002384:	2118      	movs	r1, #24
 8002386:	2001      	movs	r0, #1
 8002388:	f7fe f8da 	bl	8000540 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(1, 28, amplifier_11,	sizeof(amplifier_11));		// Amplifier 1 of sensor
 800238c:	2304      	movs	r3, #4
 800238e:	4a3e      	ldr	r2, [pc, #248]	@ (8002488 <_Z8hwEEPROMv+0x1b4>)
 8002390:	211c      	movs	r1, #28
 8002392:	2001      	movs	r0, #1
 8002394:	f7fe f8d4 	bl	8000540 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(1, 32, amplifier_21,	sizeof(amplifier_21));		// Amplifier 2 of sensor
 8002398:	2304      	movs	r3, #4
 800239a:	4a3c      	ldr	r2, [pc, #240]	@ (800248c <_Z8hwEEPROMv+0x1b8>)
 800239c:	2120      	movs	r1, #32
 800239e:	2001      	movs	r0, #1
 80023a0:	f7fe f8ce 	bl	8000540 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(1, 36, groundSensor_1,	sizeof(groundSensor_1));	// N of curve
 80023a4:	2304      	movs	r3, #4
 80023a6:	4a3a      	ldr	r2, [pc, #232]	@ (8002490 <_Z8hwEEPROMv+0x1bc>)
 80023a8:	2124      	movs	r1, #36	@ 0x24
 80023aa:	2001      	movs	r0, #1
 80023ac:	f7fe f8c8 	bl	8000540 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(1, 40, curveSensor_1,	sizeof(curveSensor_1));		// M of curve
 80023b0:	2304      	movs	r3, #4
 80023b2:	4a38      	ldr	r2, [pc, #224]	@ (8002494 <_Z8hwEEPROMv+0x1c0>)
 80023b4:	2128      	movs	r1, #40	@ 0x28
 80023b6:	2001      	movs	r0, #1
 80023b8:	f7fe f8c2 	bl	8000540 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(1, 44, dateCalib_1,		sizeof(dateCalib_1));		// Date of calibration
 80023bc:	230a      	movs	r3, #10
 80023be:	4a36      	ldr	r2, [pc, #216]	@ (8002498 <_Z8hwEEPROMv+0x1c4>)
 80023c0:	212c      	movs	r1, #44	@ 0x2c
 80023c2:	2001      	movs	r0, #1
 80023c4:	f7fe f8bc 	bl	8000540 <_Z11EEPROM_ReadttPht>
		stateEEPROM	= 2;												// S2 to stop of read
 80023c8:	4b23      	ldr	r3, [pc, #140]	@ (8002458 <_Z8hwEEPROMv+0x184>)
 80023ca:	2202      	movs	r2, #2
 80023cc:	701a      	strb	r2, [r3, #0]
		break;
 80023ce:	e03e      	b.n	800244e <_Z8hwEEPROMv+0x17a>
		EEPROM_Write(1, 32, amplifier2_1, sizeof(amplifier2_0));
		EEPROM_Write(1, 36, groundSensor1, sizeof(groundSensor0));
		EEPROM_Write(1, 40, curveSensor1, sizeof(curveSensor0));
		EEPROM_Write(1, 44, dateCalib1, sizeof(dateCalib0));
		*/
		stateEEPROM	= 3;								// Pasa a S3
 80023d0:	4b21      	ldr	r3, [pc, #132]	@ (8002458 <_Z8hwEEPROMv+0x184>)
 80023d2:	2203      	movs	r2, #3
 80023d4:	701a      	strb	r2, [r3, #0]
		break;
 80023d6:	e03a      	b.n	800244e <_Z8hwEEPROMv+0x17a>
	// S3 - STOP READING //
	///////////////////////

	case 3:
		uint8_t i;										// Inicia contador
		for (i = 0; i<sizeof(nameAlphaB) ; i++){		// Recorre caracter a caracter
 80023d8:	2300      	movs	r3, #0
 80023da:	71fb      	strb	r3, [r7, #7]
 80023dc:	e012      	b.n	8002404 <_Z8hwEEPROMv+0x130>
			if ( nameAlphaB[i]	== nameSensor_0[i] ){	// Compara caracter ideal y caracter leido
 80023de:	79fb      	ldrb	r3, [r7, #7]
 80023e0:	4a2e      	ldr	r2, [pc, #184]	@ (800249c <_Z8hwEEPROMv+0x1c8>)
 80023e2:	5cd2      	ldrb	r2, [r2, r3]
 80023e4:	79fb      	ldrb	r3, [r7, #7]
 80023e6:	491d      	ldr	r1, [pc, #116]	@ (800245c <_Z8hwEEPROMv+0x188>)
 80023e8:	5ccb      	ldrb	r3, [r1, r3]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d103      	bne.n	80023f6 <_Z8hwEEPROMv+0x122>
				errorHardware[4]	= 0;				// Si son iguales  no hay error
 80023ee:	4b2c      	ldr	r3, [pc, #176]	@ (80024a0 <_Z8hwEEPROMv+0x1cc>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	711a      	strb	r2, [r3, #4]
 80023f4:	e003      	b.n	80023fe <_Z8hwEEPROMv+0x12a>
			}
			else{										// Si son distintos
				errorHardware[4]	= 1;				// Indica error
 80023f6:	4b2a      	ldr	r3, [pc, #168]	@ (80024a0 <_Z8hwEEPROMv+0x1cc>)
 80023f8:	2201      	movs	r2, #1
 80023fa:	711a      	strb	r2, [r3, #4]
				break;									// Termina loop
 80023fc:	e005      	b.n	800240a <_Z8hwEEPROMv+0x136>
		for (i = 0; i<sizeof(nameAlphaB) ; i++){		// Recorre caracter a caracter
 80023fe:	79fb      	ldrb	r3, [r7, #7]
 8002400:	3301      	adds	r3, #1
 8002402:	71fb      	strb	r3, [r7, #7]
 8002404:	79fb      	ldrb	r3, [r7, #7]
 8002406:	2b11      	cmp	r3, #17
 8002408:	d9e9      	bls.n	80023de <_Z8hwEEPROMv+0x10a>
			}
		}

		for (i = 0; i<sizeof(nameAlphaB) ; i++){		// Recorre caracter a caracter del valor ideal
 800240a:	2300      	movs	r3, #0
 800240c:	71fb      	strb	r3, [r7, #7]
 800240e:	e012      	b.n	8002436 <_Z8hwEEPROMv+0x162>
			if ( nameAlphaB[i]	== nameSensor_0[i] ){	// Compara caracter ideal y caracter leido
 8002410:	79fb      	ldrb	r3, [r7, #7]
 8002412:	4a22      	ldr	r2, [pc, #136]	@ (800249c <_Z8hwEEPROMv+0x1c8>)
 8002414:	5cd2      	ldrb	r2, [r2, r3]
 8002416:	79fb      	ldrb	r3, [r7, #7]
 8002418:	4910      	ldr	r1, [pc, #64]	@ (800245c <_Z8hwEEPROMv+0x188>)
 800241a:	5ccb      	ldrb	r3, [r1, r3]
 800241c:	429a      	cmp	r2, r3
 800241e:	d103      	bne.n	8002428 <_Z8hwEEPROMv+0x154>
				errorHardware[4]	= 0;				// Si son iguales no idnica error
 8002420:	4b1f      	ldr	r3, [pc, #124]	@ (80024a0 <_Z8hwEEPROMv+0x1cc>)
 8002422:	2200      	movs	r2, #0
 8002424:	711a      	strb	r2, [r3, #4]
 8002426:	e003      	b.n	8002430 <_Z8hwEEPROMv+0x15c>
			}
			else{										// Si son distintos
				errorHardware[4]	= 1;				// Indica error
 8002428:	4b1d      	ldr	r3, [pc, #116]	@ (80024a0 <_Z8hwEEPROMv+0x1cc>)
 800242a:	2201      	movs	r2, #1
 800242c:	711a      	strb	r2, [r3, #4]
				break;									// Termina loop
 800242e:	e005      	b.n	800243c <_Z8hwEEPROMv+0x168>
		for (i = 0; i<sizeof(nameAlphaB) ; i++){		// Recorre caracter a caracter del valor ideal
 8002430:	79fb      	ldrb	r3, [r7, #7]
 8002432:	3301      	adds	r3, #1
 8002434:	71fb      	strb	r3, [r7, #7]
 8002436:	79fb      	ldrb	r3, [r7, #7]
 8002438:	2b11      	cmp	r3, #17
 800243a:	d9e9      	bls.n	8002410 <_Z8hwEEPROMv+0x13c>
			}
		}
		stateEEPROM	= 4;
 800243c:	4b06      	ldr	r3, [pc, #24]	@ (8002458 <_Z8hwEEPROMv+0x184>)
 800243e:	2204      	movs	r2, #4
 8002440:	701a      	strb	r2, [r3, #0]
		break;
 8002442:	e004      	b.n	800244e <_Z8hwEEPROMv+0x17a>

	case 4:
		break;
	default:
		stateEEPROM	= 0;
 8002444:	4b04      	ldr	r3, [pc, #16]	@ (8002458 <_Z8hwEEPROMv+0x184>)
 8002446:	2200      	movs	r2, #0
 8002448:	701a      	strb	r2, [r3, #0]
		break;
 800244a:	e000      	b.n	800244e <_Z8hwEEPROMv+0x17a>
		break;
 800244c:	bf00      	nop
	}
}
 800244e:	bf00      	nop
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	200004c6 	.word	0x200004c6
 800245c:	20000458 	.word	0x20000458
 8002460:	2000046c 	.word	0x2000046c
 8002464:	20000470 	.word	0x20000470
 8002468:	20000474 	.word	0x20000474
 800246c:	20000478 	.word	0x20000478
 8002470:	2000047c 	.word	0x2000047c
 8002474:	20000480 	.word	0x20000480
 8002478:	20000484 	.word	0x20000484
 800247c:	20000490 	.word	0x20000490
 8002480:	200004a4 	.word	0x200004a4
 8002484:	200004a8 	.word	0x200004a8
 8002488:	200004ac 	.word	0x200004ac
 800248c:	200004b0 	.word	0x200004b0
 8002490:	200004b4 	.word	0x200004b4
 8002494:	200004b8 	.word	0x200004b8
 8002498:	200004bc 	.word	0x200004bc
 800249c:	20000018 	.word	0x20000018
 80024a0:	200004d4 	.word	0x200004d4

080024a4 <_Z41__static_initialization_and_destruction_0ii>:
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d137      	bne.n	8002524 <_Z41__static_initialization_and_destruction_0ii+0x80>
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d132      	bne.n	8002524 <_Z41__static_initialization_and_destruction_0ii+0x80>
int limitBoton	= 400/superloop;	// 400 milisegundos en 100 microsegundos
 80024be:	4b1c      	ldr	r3, [pc, #112]	@ (8002530 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	461a      	mov	r2, r3
 80024c4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80024c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80024cc:	4a19      	ldr	r2, [pc, #100]	@ (8002534 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80024ce:	6013      	str	r3, [r2, #0]
int limitSht31_measure	= 2000/superloop;		// Limite de espera entre operaciones
 80024d0:	4b17      	ldr	r3, [pc, #92]	@ (8002530 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	461a      	mov	r2, r3
 80024d6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80024da:	fb93 f3f2 	sdiv	r3, r3, r2
 80024de:	4a16      	ldr	r2, [pc, #88]	@ (8002538 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80024e0:	6013      	str	r3, [r2, #0]
int limitSht31_i2c		= 50/superloop;			// Limite
 80024e2:	4b13      	ldr	r3, [pc, #76]	@ (8002530 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	461a      	mov	r2, r3
 80024e8:	2332      	movs	r3, #50	@ 0x32
 80024ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80024ee:	4a13      	ldr	r2, [pc, #76]	@ (800253c <_Z41__static_initialization_and_destruction_0ii+0x98>)
 80024f0:	6013      	str	r3, [r2, #0]
const int sampleAdc	= 100/superloop;			// Tiempo de medicion
 80024f2:	4b0f      	ldr	r3, [pc, #60]	@ (8002530 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	461a      	mov	r2, r3
 80024f8:	2364      	movs	r3, #100	@ 0x64
 80024fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80024fe:	4a10      	ldr	r2, [pc, #64]	@ (8002540 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8002500:	6013      	str	r3, [r2, #0]
const int limitAds_i2c = 20/superloop-1;		// Tiempo que espera respuesta
 8002502:	4b0b      	ldr	r3, [pc, #44]	@ (8002530 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	461a      	mov	r2, r3
 8002508:	2314      	movs	r3, #20
 800250a:	fb93 f3f2 	sdiv	r3, r3, r2
 800250e:	3b01      	subs	r3, #1
 8002510:	4a0c      	ldr	r2, [pc, #48]	@ (8002544 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8002512:	6013      	str	r3, [r2, #0]
int sampleAnalog	= 50/superloop;	// Frecuencia de muestreo
 8002514:	4b06      	ldr	r3, [pc, #24]	@ (8002530 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	461a      	mov	r2, r3
 800251a:	2332      	movs	r3, #50	@ 0x32
 800251c:	fb93 f3f2 	sdiv	r3, r3, r2
 8002520:	4a09      	ldr	r2, [pc, #36]	@ (8002548 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8002522:	6013      	str	r3, [r2, #0]
}
 8002524:	bf00      	nop
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr
 8002530:	20000395 	.word	0x20000395
 8002534:	20000404 	.word	0x20000404
 8002538:	20000410 	.word	0x20000410
 800253c:	20000414 	.word	0x20000414
 8002540:	20000430 	.word	0x20000430
 8002544:	20000434 	.word	0x20000434
 8002548:	20000450 	.word	0x20000450

0800254c <_GLOBAL__sub_I_boton>:
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
 8002550:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002554:	2001      	movs	r0, #1
 8002556:	f7ff ffa5 	bl	80024a4 <_Z41__static_initialization_and_destruction_0ii>
 800255a:	bd80      	pop	{r7, pc}

0800255c <_Z8hwOutputv>:
uint16_t limitUartGps	= 20000/superloop;


/***** OUTPUT	*****/

void hwOutput(){
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
	//hwDisplay();
	//hwAlarms();
	hwLoraOut();
 8002560:	f000 f966 	bl	8002830 <_Z9hwLoraOutv>
	hwGpsOut();
 8002564:	f000 f802 	bl	800256c <_Z8hwGpsOutv>
}
 8002568:	bf00      	nop
 800256a:	bd80      	pop	{r7, pc}

0800256c <_Z8hwGpsOutv>:

/////////
// GPS //
/////////

void hwGpsOut(){
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0

	////////////
	// ENABLE //
	////////////

	switch ( stateUartGps ){
 8002570:	4b9d      	ldr	r3, [pc, #628]	@ (80027e8 <_Z8hwGpsOutv+0x27c>)
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	2b02      	cmp	r3, #2
 8002576:	d03d      	beq.n	80025f4 <_Z8hwGpsOutv+0x88>
 8002578:	2b02      	cmp	r3, #2
 800257a:	dc4a      	bgt.n	8002612 <_Z8hwGpsOutv+0xa6>
 800257c:	2b00      	cmp	r3, #0
 800257e:	d002      	beq.n	8002586 <_Z8hwGpsOutv+0x1a>
 8002580:	2b01      	cmp	r3, #1
 8002582:	d011      	beq.n	80025a8 <_Z8hwGpsOutv+0x3c>
 8002584:	e045      	b.n	8002612 <_Z8hwGpsOutv+0xa6>
	/////////////////////////
	// S0 - WAIT AVAILABLE //
	/////////////////////////

	case 0:
		if ( availableGps ){										// Si
 8002586:	4b99      	ldr	r3, [pc, #612]	@ (80027ec <_Z8hwGpsOutv+0x280>)
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d008      	beq.n	80025a0 <_Z8hwGpsOutv+0x34>
			HAL_UART_Receive_DMA(&huart5,	rxGps, sizeof(rxGps));	//
 800258e:	2202      	movs	r2, #2
 8002590:	4997      	ldr	r1, [pc, #604]	@ (80027f0 <_Z8hwGpsOutv+0x284>)
 8002592:	4898      	ldr	r0, [pc, #608]	@ (80027f4 <_Z8hwGpsOutv+0x288>)
 8002594:	f009 fe16 	bl	800c1c4 <HAL_UART_Receive_DMA>
			stateUartGps	= 1;									//
 8002598:	4b93      	ldr	r3, [pc, #588]	@ (80027e8 <_Z8hwGpsOutv+0x27c>)
 800259a:	2201      	movs	r2, #1
 800259c:	701a      	strb	r2, [r3, #0]
		}
		else{														//
			stateUartGps	= 0;									//
		}
		break;
 800259e:	e03c      	b.n	800261a <_Z8hwGpsOutv+0xae>
			stateUartGps	= 0;									//
 80025a0:	4b91      	ldr	r3, [pc, #580]	@ (80027e8 <_Z8hwGpsOutv+0x27c>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	701a      	strb	r2, [r3, #0]
		break;
 80025a6:	e038      	b.n	800261a <_Z8hwGpsOutv+0xae>

	case 1:
		countUartGps++;
 80025a8:	4b93      	ldr	r3, [pc, #588]	@ (80027f8 <_Z8hwGpsOutv+0x28c>)
 80025aa:	881b      	ldrh	r3, [r3, #0]
 80025ac:	3301      	adds	r3, #1
 80025ae:	b29a      	uxth	r2, r3
 80025b0:	4b91      	ldr	r3, [pc, #580]	@ (80027f8 <_Z8hwGpsOutv+0x28c>)
 80025b2:	801a      	strh	r2, [r3, #0]

		if ( !availableGps ){
 80025b4:	4b8d      	ldr	r3, [pc, #564]	@ (80027ec <_Z8hwGpsOutv+0x280>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	f083 0301 	eor.w	r3, r3, #1
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d006      	beq.n	80025d0 <_Z8hwGpsOutv+0x64>
			countUartGps	= 0;
 80025c2:	4b8d      	ldr	r3, [pc, #564]	@ (80027f8 <_Z8hwGpsOutv+0x28c>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	801a      	strh	r2, [r3, #0]
			stateUartGps	= 0;
 80025c8:	4b87      	ldr	r3, [pc, #540]	@ (80027e8 <_Z8hwGpsOutv+0x27c>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	701a      	strb	r2, [r3, #0]
			stateUartGps	= 2;
		}
		else{
			stateUartGps	= 1;
		}
		break;
 80025ce:	e024      	b.n	800261a <_Z8hwGpsOutv+0xae>
		else if ( (countUartGps >= limitUartGps || flagUartGps)){
 80025d0:	4b89      	ldr	r3, [pc, #548]	@ (80027f8 <_Z8hwGpsOutv+0x28c>)
 80025d2:	881a      	ldrh	r2, [r3, #0]
 80025d4:	4b89      	ldr	r3, [pc, #548]	@ (80027fc <_Z8hwGpsOutv+0x290>)
 80025d6:	881b      	ldrh	r3, [r3, #0]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d203      	bcs.n	80025e4 <_Z8hwGpsOutv+0x78>
 80025dc:	4b88      	ldr	r3, [pc, #544]	@ (8002800 <_Z8hwGpsOutv+0x294>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d003      	beq.n	80025ec <_Z8hwGpsOutv+0x80>
			stateUartGps	= 2;
 80025e4:	4b80      	ldr	r3, [pc, #512]	@ (80027e8 <_Z8hwGpsOutv+0x27c>)
 80025e6:	2202      	movs	r2, #2
 80025e8:	701a      	strb	r2, [r3, #0]
		break;
 80025ea:	e016      	b.n	800261a <_Z8hwGpsOutv+0xae>
			stateUartGps	= 1;
 80025ec:	4b7e      	ldr	r3, [pc, #504]	@ (80027e8 <_Z8hwGpsOutv+0x27c>)
 80025ee:	2201      	movs	r2, #1
 80025f0:	701a      	strb	r2, [r3, #0]
		break;
 80025f2:	e012      	b.n	800261a <_Z8hwGpsOutv+0xae>

	case 2:
		flagUartGps		= 0;
 80025f4:	4b82      	ldr	r3, [pc, #520]	@ (8002800 <_Z8hwGpsOutv+0x294>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	701a      	strb	r2, [r3, #0]
		countUartGps	= 0;
 80025fa:	4b7f      	ldr	r3, [pc, #508]	@ (80027f8 <_Z8hwGpsOutv+0x28c>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart5,	rxGps, sizeof(rxGps));
 8002600:	2202      	movs	r2, #2
 8002602:	497b      	ldr	r1, [pc, #492]	@ (80027f0 <_Z8hwGpsOutv+0x284>)
 8002604:	487b      	ldr	r0, [pc, #492]	@ (80027f4 <_Z8hwGpsOutv+0x288>)
 8002606:	f009 fddd 	bl	800c1c4 <HAL_UART_Receive_DMA>
		stateUartGps	= 1;
 800260a:	4b77      	ldr	r3, [pc, #476]	@ (80027e8 <_Z8hwGpsOutv+0x27c>)
 800260c:	2201      	movs	r2, #1
 800260e:	701a      	strb	r2, [r3, #0]
		break;
 8002610:	e003      	b.n	800261a <_Z8hwGpsOutv+0xae>
	default:
		stateUartGps	= 0;
 8002612:	4b75      	ldr	r3, [pc, #468]	@ (80027e8 <_Z8hwGpsOutv+0x27c>)
 8002614:	2200      	movs	r2, #0
 8002616:	701a      	strb	r2, [r3, #0]
		break;
 8002618:	bf00      	nop

	/////////////
	// MESSAGE //
	/////////////

	switch ( stateHwGpsEnable ){
 800261a:	4b7a      	ldr	r3, [pc, #488]	@ (8002804 <_Z8hwGpsOutv+0x298>)
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	2b03      	cmp	r3, #3
 8002620:	d869      	bhi.n	80026f6 <_Z8hwGpsOutv+0x18a>
 8002622:	a201      	add	r2, pc, #4	@ (adr r2, 8002628 <_Z8hwGpsOutv+0xbc>)
 8002624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002628:	08002639 	.word	0x08002639
 800262c:	08002667 	.word	0x08002667
 8002630:	0800269b 	.word	0x0800269b
 8002634:	080026d9 	.word	0x080026d9

		case 0:
			availableGps	= 0;
 8002638:	4b6c      	ldr	r3, [pc, #432]	@ (80027ec <_Z8hwGpsOutv+0x280>)
 800263a:	2200      	movs	r2, #0
 800263c:	701a      	strb	r2, [r3, #0]

			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 800263e:	2200      	movs	r2, #0
 8002640:	2101      	movs	r1, #1
 8002642:	4871      	ldr	r0, [pc, #452]	@ (8002808 <_Z8hwGpsOutv+0x29c>)
 8002644:	f005 fa98 	bl	8007b78 <HAL_GPIO_WritePin>
			//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
			//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
			if ( enableGps ){
 8002648:	4b70      	ldr	r3, [pc, #448]	@ (800280c <_Z8hwGpsOutv+0x2a0>)
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d006      	beq.n	800265e <_Z8hwGpsOutv+0xf2>
				HAL_UART_Init(&huart5);
 8002650:	4868      	ldr	r0, [pc, #416]	@ (80027f4 <_Z8hwGpsOutv+0x288>)
 8002652:	f009 fcaf 	bl	800bfb4 <HAL_UART_Init>
				stateHwGpsEnable	= 1;
 8002656:	4b6b      	ldr	r3, [pc, #428]	@ (8002804 <_Z8hwGpsOutv+0x298>)
 8002658:	2201      	movs	r2, #1
 800265a:	701a      	strb	r2, [r3, #0]
			}
			else{
				stateHwGpsEnable	= 0;
			}
			break;
 800265c:	e04f      	b.n	80026fe <_Z8hwGpsOutv+0x192>
				stateHwGpsEnable	= 0;
 800265e:	4b69      	ldr	r3, [pc, #420]	@ (8002804 <_Z8hwGpsOutv+0x298>)
 8002660:	2200      	movs	r2, #0
 8002662:	701a      	strb	r2, [r3, #0]
			break;
 8002664:	e04b      	b.n	80026fe <_Z8hwGpsOutv+0x192>

		case 1:
			availableGps	= 0;
 8002666:	4b61      	ldr	r3, [pc, #388]	@ (80027ec <_Z8hwGpsOutv+0x280>)
 8002668:	2200      	movs	r2, #0
 800266a:	701a      	strb	r2, [r3, #0]
			countGpsAvailable++;
 800266c:	4b68      	ldr	r3, [pc, #416]	@ (8002810 <_Z8hwGpsOutv+0x2a4>)
 800266e:	881b      	ldrh	r3, [r3, #0]
 8002670:	3301      	adds	r3, #1
 8002672:	b29a      	uxth	r2, r3
 8002674:	4b66      	ldr	r3, [pc, #408]	@ (8002810 <_Z8hwGpsOutv+0x2a4>)
 8002676:	801a      	strh	r2, [r3, #0]

			if ( countGpsAvailable >= limitGpsAvailable ) {
 8002678:	4b65      	ldr	r3, [pc, #404]	@ (8002810 <_Z8hwGpsOutv+0x2a4>)
 800267a:	881a      	ldrh	r2, [r3, #0]
 800267c:	4b65      	ldr	r3, [pc, #404]	@ (8002814 <_Z8hwGpsOutv+0x2a8>)
 800267e:	881b      	ldrh	r3, [r3, #0]
 8002680:	429a      	cmp	r2, r3
 8002682:	d306      	bcc.n	8002692 <_Z8hwGpsOutv+0x126>
				countGpsAvailable	= 0;
 8002684:	4b62      	ldr	r3, [pc, #392]	@ (8002810 <_Z8hwGpsOutv+0x2a4>)
 8002686:	2200      	movs	r2, #0
 8002688:	801a      	strh	r2, [r3, #0]
				stateHwGpsEnable	= 2;
 800268a:	4b5e      	ldr	r3, [pc, #376]	@ (8002804 <_Z8hwGpsOutv+0x298>)
 800268c:	2202      	movs	r2, #2
 800268e:	701a      	strb	r2, [r3, #0]
			}
			else{
				stateHwGpsEnable	= 1;
			}
			break;
 8002690:	e035      	b.n	80026fe <_Z8hwGpsOutv+0x192>
				stateHwGpsEnable	= 1;
 8002692:	4b5c      	ldr	r3, [pc, #368]	@ (8002804 <_Z8hwGpsOutv+0x298>)
 8002694:	2201      	movs	r2, #1
 8002696:	701a      	strb	r2, [r3, #0]
			break;
 8002698:	e031      	b.n	80026fe <_Z8hwGpsOutv+0x192>

		case 2:
			availableGps	= 1;
 800269a:	4b54      	ldr	r3, [pc, #336]	@ (80027ec <_Z8hwGpsOutv+0x280>)
 800269c:	2201      	movs	r2, #1
 800269e:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 80026a0:	2201      	movs	r2, #1
 80026a2:	2101      	movs	r1, #1
 80026a4:	4858      	ldr	r0, [pc, #352]	@ (8002808 <_Z8hwGpsOutv+0x29c>)
 80026a6:	f005 fa67 	bl	8007b78 <HAL_GPIO_WritePin>
			countGpsAvailable++;
 80026aa:	4b59      	ldr	r3, [pc, #356]	@ (8002810 <_Z8hwGpsOutv+0x2a4>)
 80026ac:	881b      	ldrh	r3, [r3, #0]
 80026ae:	3301      	adds	r3, #1
 80026b0:	b29a      	uxth	r2, r3
 80026b2:	4b57      	ldr	r3, [pc, #348]	@ (8002810 <_Z8hwGpsOutv+0x2a4>)
 80026b4:	801a      	strh	r2, [r3, #0]

			if ( countGpsAvailable >= limitGpsAvailable ) {
 80026b6:	4b56      	ldr	r3, [pc, #344]	@ (8002810 <_Z8hwGpsOutv+0x2a4>)
 80026b8:	881a      	ldrh	r2, [r3, #0]
 80026ba:	4b56      	ldr	r3, [pc, #344]	@ (8002814 <_Z8hwGpsOutv+0x2a8>)
 80026bc:	881b      	ldrh	r3, [r3, #0]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d306      	bcc.n	80026d0 <_Z8hwGpsOutv+0x164>
				countGpsAvailable	= 0;
 80026c2:	4b53      	ldr	r3, [pc, #332]	@ (8002810 <_Z8hwGpsOutv+0x2a4>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	801a      	strh	r2, [r3, #0]
				stateHwGpsEnable	= 3;
 80026c8:	4b4e      	ldr	r3, [pc, #312]	@ (8002804 <_Z8hwGpsOutv+0x298>)
 80026ca:	2203      	movs	r2, #3
 80026cc:	701a      	strb	r2, [r3, #0]
			}
			else{
				stateHwGpsEnable	= 2;
			}
			break;
 80026ce:	e016      	b.n	80026fe <_Z8hwGpsOutv+0x192>
				stateHwGpsEnable	= 2;
 80026d0:	4b4c      	ldr	r3, [pc, #304]	@ (8002804 <_Z8hwGpsOutv+0x298>)
 80026d2:	2202      	movs	r2, #2
 80026d4:	701a      	strb	r2, [r3, #0]
			break;
 80026d6:	e012      	b.n	80026fe <_Z8hwGpsOutv+0x192>

		case 3:
			if ( enableGps ){
 80026d8:	4b4c      	ldr	r3, [pc, #304]	@ (800280c <_Z8hwGpsOutv+0x2a0>)
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d003      	beq.n	80026e8 <_Z8hwGpsOutv+0x17c>
				stateHwGpsEnable	= 3;
 80026e0:	4b48      	ldr	r3, [pc, #288]	@ (8002804 <_Z8hwGpsOutv+0x298>)
 80026e2:	2203      	movs	r2, #3
 80026e4:	701a      	strb	r2, [r3, #0]
			else{

				HAL_UART_DeInit(&huart5);
				stateHwGpsEnable	= 0;
			}
			break;
 80026e6:	e00a      	b.n	80026fe <_Z8hwGpsOutv+0x192>
				HAL_UART_DeInit(&huart5);
 80026e8:	4842      	ldr	r0, [pc, #264]	@ (80027f4 <_Z8hwGpsOutv+0x288>)
 80026ea:	f009 fcb1 	bl	800c050 <HAL_UART_DeInit>
				stateHwGpsEnable	= 0;
 80026ee:	4b45      	ldr	r3, [pc, #276]	@ (8002804 <_Z8hwGpsOutv+0x298>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	701a      	strb	r2, [r3, #0]
			break;
 80026f4:	e003      	b.n	80026fe <_Z8hwGpsOutv+0x192>
		default:
			stateHwGpsEnable	= 0;
 80026f6:	4b43      	ldr	r3, [pc, #268]	@ (8002804 <_Z8hwGpsOutv+0x298>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	701a      	strb	r2, [r3, #0]
			break;
 80026fc:	bf00      	nop
		}

	switch( stateConfigGps ){
 80026fe:	4b46      	ldr	r3, [pc, #280]	@ (8002818 <_Z8hwGpsOutv+0x2ac>)
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	2b0a      	cmp	r3, #10
 8002704:	d86d      	bhi.n	80027e2 <_Z8hwGpsOutv+0x276>
 8002706:	a201      	add	r2, pc, #4	@ (adr r2, 800270c <_Z8hwGpsOutv+0x1a0>)
 8002708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800270c:	08002739 	.word	0x08002739
 8002710:	08002751 	.word	0x08002751
 8002714:	08002763 	.word	0x08002763
 8002718:	0800276b 	.word	0x0800276b
 800271c:	0800277d 	.word	0x0800277d
 8002720:	08002785 	.word	0x08002785
 8002724:	08002797 	.word	0x08002797
 8002728:	0800279f 	.word	0x0800279f
 800272c:	080027b1 	.word	0x080027b1
 8002730:	080027b9 	.word	0x080027b9
 8002734:	080027cb 	.word	0x080027cb
	case 0:
		if ( availableGps ){
 8002738:	4b2c      	ldr	r3, [pc, #176]	@ (80027ec <_Z8hwGpsOutv+0x280>)
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d003      	beq.n	8002748 <_Z8hwGpsOutv+0x1dc>
			//HAL_UART_Receive_DMA(&huart5,	rxGps, sizeof(rxGps));
			stateConfigGps	= 1;
 8002740:	4b35      	ldr	r3, [pc, #212]	@ (8002818 <_Z8hwGpsOutv+0x2ac>)
 8002742:	2201      	movs	r2, #1
 8002744:	701a      	strb	r2, [r3, #0]
		}
		else{
			stateConfigGps	= 0;
		}
		break;
 8002746:	e04c      	b.n	80027e2 <_Z8hwGpsOutv+0x276>
			stateConfigGps	= 0;
 8002748:	4b33      	ldr	r3, [pc, #204]	@ (8002818 <_Z8hwGpsOutv+0x2ac>)
 800274a:	2200      	movs	r2, #0
 800274c:	701a      	strb	r2, [r3, #0]
		break;
 800274e:	e048      	b.n	80027e2 <_Z8hwGpsOutv+0x276>

	case 1:
		HAL_UART_Transmit_DMA(&huart5, commandUart, sizeof(commandUart) - 1);
 8002750:	2219      	movs	r2, #25
 8002752:	4932      	ldr	r1, [pc, #200]	@ (800281c <_Z8hwGpsOutv+0x2b0>)
 8002754:	4827      	ldr	r0, [pc, #156]	@ (80027f4 <_Z8hwGpsOutv+0x288>)
 8002756:	f009 fcb9 	bl	800c0cc <HAL_UART_Transmit_DMA>
		stateConfigGps	= 2;
 800275a:	4b2f      	ldr	r3, [pc, #188]	@ (8002818 <_Z8hwGpsOutv+0x2ac>)
 800275c:	2202      	movs	r2, #2
 800275e:	701a      	strb	r2, [r3, #0]
		break;
 8002760:	e03f      	b.n	80027e2 <_Z8hwGpsOutv+0x276>

	case 2:

		stateConfigGps	= 3;
 8002762:	4b2d      	ldr	r3, [pc, #180]	@ (8002818 <_Z8hwGpsOutv+0x2ac>)
 8002764:	2203      	movs	r2, #3
 8002766:	701a      	strb	r2, [r3, #0]
		break;
 8002768:	e03b      	b.n	80027e2 <_Z8hwGpsOutv+0x276>

	case 3:
		HAL_UART_Transmit_DMA(&huart5, commandUart3, sizeof(commandUart2) - 1);
 800276a:	2219      	movs	r2, #25
 800276c:	492c      	ldr	r1, [pc, #176]	@ (8002820 <_Z8hwGpsOutv+0x2b4>)
 800276e:	4821      	ldr	r0, [pc, #132]	@ (80027f4 <_Z8hwGpsOutv+0x288>)
 8002770:	f009 fcac 	bl	800c0cc <HAL_UART_Transmit_DMA>
		stateConfigGps	= 4;
 8002774:	4b28      	ldr	r3, [pc, #160]	@ (8002818 <_Z8hwGpsOutv+0x2ac>)
 8002776:	2204      	movs	r2, #4
 8002778:	701a      	strb	r2, [r3, #0]
		break;
 800277a:	e032      	b.n	80027e2 <_Z8hwGpsOutv+0x276>

	case 4:
		//HAL_UART_Transmit_DMA(&huart5, commandUart4, sizeof(commandUart4) - 1);
		stateConfigGps	= 5;
 800277c:	4b26      	ldr	r3, [pc, #152]	@ (8002818 <_Z8hwGpsOutv+0x2ac>)
 800277e:	2205      	movs	r2, #5
 8002780:	701a      	strb	r2, [r3, #0]
		break;
 8002782:	e02e      	b.n	80027e2 <_Z8hwGpsOutv+0x276>

	case 5:
		HAL_UART_Transmit_DMA(&huart5, commandUart2, sizeof(commandUart3) - 1);
 8002784:	2219      	movs	r2, #25
 8002786:	4927      	ldr	r1, [pc, #156]	@ (8002824 <_Z8hwGpsOutv+0x2b8>)
 8002788:	481a      	ldr	r0, [pc, #104]	@ (80027f4 <_Z8hwGpsOutv+0x288>)
 800278a:	f009 fc9f 	bl	800c0cc <HAL_UART_Transmit_DMA>
		//HAL_UART_Transmit_DMA(&huart5, commandUart5, sizeof(commandUart5) - 1);
		stateConfigGps	= 6;
 800278e:	4b22      	ldr	r3, [pc, #136]	@ (8002818 <_Z8hwGpsOutv+0x2ac>)
 8002790:	2206      	movs	r2, #6
 8002792:	701a      	strb	r2, [r3, #0]
		break;
 8002794:	e025      	b.n	80027e2 <_Z8hwGpsOutv+0x276>

	case 6:
		//HAL_UART_Transmit_DMA(&huart5, commandUart6, sizeof(commandUart6) - 1);
		stateConfigGps	= 7;
 8002796:	4b20      	ldr	r3, [pc, #128]	@ (8002818 <_Z8hwGpsOutv+0x2ac>)
 8002798:	2207      	movs	r2, #7
 800279a:	701a      	strb	r2, [r3, #0]
		break;
 800279c:	e021      	b.n	80027e2 <_Z8hwGpsOutv+0x276>

	case 7:
		HAL_UART_Transmit_DMA(&huart5, commandUart8, sizeof(commandUart8) - 1);
 800279e:	2211      	movs	r2, #17
 80027a0:	4921      	ldr	r1, [pc, #132]	@ (8002828 <_Z8hwGpsOutv+0x2bc>)
 80027a2:	4814      	ldr	r0, [pc, #80]	@ (80027f4 <_Z8hwGpsOutv+0x288>)
 80027a4:	f009 fc92 	bl	800c0cc <HAL_UART_Transmit_DMA>
		//HAL_UART_Transmit_DMA(&huart5, commandUart7, sizeof(commandUart7) - 1);
		stateConfigGps	= 8;
 80027a8:	4b1b      	ldr	r3, [pc, #108]	@ (8002818 <_Z8hwGpsOutv+0x2ac>)
 80027aa:	2208      	movs	r2, #8
 80027ac:	701a      	strb	r2, [r3, #0]
		break;
 80027ae:	e018      	b.n	80027e2 <_Z8hwGpsOutv+0x276>

	case 8:

		stateConfigGps	= 9;
 80027b0:	4b19      	ldr	r3, [pc, #100]	@ (8002818 <_Z8hwGpsOutv+0x2ac>)
 80027b2:	2209      	movs	r2, #9
 80027b4:	701a      	strb	r2, [r3, #0]
		break;
 80027b6:	e014      	b.n	80027e2 <_Z8hwGpsOutv+0x276>

	case 9:
		HAL_UART_Transmit_DMA(&huart5, commandUart9, sizeof(commandUart9) - 1);
 80027b8:	220d      	movs	r2, #13
 80027ba:	491c      	ldr	r1, [pc, #112]	@ (800282c <_Z8hwGpsOutv+0x2c0>)
 80027bc:	480d      	ldr	r0, [pc, #52]	@ (80027f4 <_Z8hwGpsOutv+0x288>)
 80027be:	f009 fc85 	bl	800c0cc <HAL_UART_Transmit_DMA>
		stateConfigGps	= 10;
 80027c2:	4b15      	ldr	r3, [pc, #84]	@ (8002818 <_Z8hwGpsOutv+0x2ac>)
 80027c4:	220a      	movs	r2, #10
 80027c6:	701a      	strb	r2, [r3, #0]
		break;
 80027c8:	e00b      	b.n	80027e2 <_Z8hwGpsOutv+0x276>
	case 10:
		if ( enableGps ){
 80027ca:	4b10      	ldr	r3, [pc, #64]	@ (800280c <_Z8hwGpsOutv+0x2a0>)
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d003      	beq.n	80027da <_Z8hwGpsOutv+0x26e>
			stateConfigGps	= 10;
 80027d2:	4b11      	ldr	r3, [pc, #68]	@ (8002818 <_Z8hwGpsOutv+0x2ac>)
 80027d4:	220a      	movs	r2, #10
 80027d6:	701a      	strb	r2, [r3, #0]
		}
		else{
			stateConfigGps	= 0;
		}
		break;
 80027d8:	e002      	b.n	80027e0 <_Z8hwGpsOutv+0x274>
			stateConfigGps	= 0;
 80027da:	4b0f      	ldr	r3, [pc, #60]	@ (8002818 <_Z8hwGpsOutv+0x2ac>)
 80027dc:	2200      	movs	r2, #0
 80027de:	701a      	strb	r2, [r3, #0]
		break;
 80027e0:	bf00      	nop
	}
}
 80027e2:	bf00      	nop
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	200004ed 	.word	0x200004ed
 80027ec:	200004dc 	.word	0x200004dc
 80027f0:	20000ad0 	.word	0x20000ad0
 80027f4:	20000830 	.word	0x20000830
 80027f8:	200004ee 	.word	0x200004ee
 80027fc:	200004f0 	.word	0x200004f0
 8002800:	200004e4 	.word	0x200004e4
 8002804:	200004e2 	.word	0x200004e2
 8002808:	48000c00 	.word	0x48000c00
 800280c:	20000394 	.word	0x20000394
 8002810:	200004de 	.word	0x200004de
 8002814:	200004e0 	.word	0x200004e0
 8002818:	200004e3 	.word	0x200004e3
 800281c:	2000002c 	.word	0x2000002c
 8002820:	20000064 	.word	0x20000064
 8002824:	20000048 	.word	0x20000048
 8002828:	20000080 	.word	0x20000080
 800282c:	20000094 	.word	0x20000094

08002830 <_Z9hwLoraOutv>:

//////////
// LORA //
//////////

void hwLoraOut(){
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
	 *
	 * Transmite un comando por hardware
	 *
	 */

	if ( flagTxLora ){													// Si hay una señal de transmision
 8002834:	4b33      	ldr	r3, [pc, #204]	@ (8002904 <_Z9hwLoraOutv+0xd4>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d012      	beq.n	8002862 <_Z9hwLoraOutv+0x32>
		flagTxLora	= 0;												// Reinicia señal
 800283c:	4b31      	ldr	r3, [pc, #196]	@ (8002904 <_Z9hwLoraOutv+0xd4>)
 800283e:	2200      	movs	r2, #0
 8002840:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_DMA(&huart4, loraTxCommand0, sizeTxCommand0);	// Transmite por DMA para no estancar procesamiento
 8002842:	4b31      	ldr	r3, [pc, #196]	@ (8002908 <_Z9hwLoraOutv+0xd8>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a31      	ldr	r2, [pc, #196]	@ (800290c <_Z9hwLoraOutv+0xdc>)
 8002848:	7812      	ldrb	r2, [r2, #0]
 800284a:	4619      	mov	r1, r3
 800284c:	4830      	ldr	r0, [pc, #192]	@ (8002910 <_Z9hwLoraOutv+0xe0>)
 800284e:	f009 fc3d 	bl	800c0cc <HAL_UART_Transmit_DMA>
		HAL_UART_Receive_DMA(&huart4, rxLora, sizeof(rxLora));			// Inicia recepcion por DMA
 8002852:	2201      	movs	r2, #1
 8002854:	492f      	ldr	r1, [pc, #188]	@ (8002914 <_Z9hwLoraOutv+0xe4>)
 8002856:	482e      	ldr	r0, [pc, #184]	@ (8002910 <_Z9hwLoraOutv+0xe0>)
 8002858:	f009 fcb4 	bl	800c1c4 <HAL_UART_Receive_DMA>
		flagUartGps	= 1;
 800285c:	4b2e      	ldr	r3, [pc, #184]	@ (8002918 <_Z9hwLoraOutv+0xe8>)
 800285e:	2201      	movs	r2, #1
 8002860:	701a      	strb	r2, [r3, #0]
	 * S0: Espera 500ms, indica que esta deshabilitado
	 * S1: Indica que esta deshabiltiado, espera señal de RESET
	 *
	 */

	switch ( stateResetHwLora ){
 8002862:	4b2e      	ldr	r3, [pc, #184]	@ (800291c <_Z9hwLoraOutv+0xec>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d002      	beq.n	8002870 <_Z9hwLoraOutv+0x40>
 800286a:	2b01      	cmp	r3, #1
 800286c:	d020      	beq.n	80028b0 <_Z9hwLoraOutv+0x80>
 800286e:	e042      	b.n	80028f6 <_Z9hwLoraOutv+0xc6>
	// S0 - DISABLE //
	//////////////////

	case 0:

		countResetHwLora++;										// Suma 1 al contador
 8002870:	4b2b      	ldr	r3, [pc, #172]	@ (8002920 <_Z9hwLoraOutv+0xf0>)
 8002872:	881b      	ldrh	r3, [r3, #0]
 8002874:	3301      	adds	r3, #1
 8002876:	b29a      	uxth	r2, r3
 8002878:	4b29      	ldr	r3, [pc, #164]	@ (8002920 <_Z9hwLoraOutv+0xf0>)
 800287a:	801a      	strh	r2, [r3, #0]
		flagEnableHwLora	= 0;								// Indica que el chip esta deshabilitado
 800287c:	4b29      	ldr	r3, [pc, #164]	@ (8002924 <_Z9hwLoraOutv+0xf4>)
 800287e:	2200      	movs	r2, #0
 8002880:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);	// Pin en RESET
 8002882:	2200      	movs	r2, #0
 8002884:	2104      	movs	r1, #4
 8002886:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800288a:	f005 f975 	bl	8007b78 <HAL_GPIO_WritePin>

		if ( countResetHwLora >= resetHwLora ){					// Si pasa el limite de reset
 800288e:	4b24      	ldr	r3, [pc, #144]	@ (8002920 <_Z9hwLoraOutv+0xf0>)
 8002890:	881a      	ldrh	r2, [r3, #0]
 8002892:	4b25      	ldr	r3, [pc, #148]	@ (8002928 <_Z9hwLoraOutv+0xf8>)
 8002894:	881b      	ldrh	r3, [r3, #0]
 8002896:	429a      	cmp	r2, r3
 8002898:	d306      	bcc.n	80028a8 <_Z9hwLoraOutv+0x78>
			countResetHwLora	= 0;							// Reinicia contador
 800289a:	4b21      	ldr	r3, [pc, #132]	@ (8002920 <_Z9hwLoraOutv+0xf0>)
 800289c:	2200      	movs	r2, #0
 800289e:	801a      	strh	r2, [r3, #0]
			stateResetHwLora	= 1;							// Pasa a S1
 80028a0:	4b1e      	ldr	r3, [pc, #120]	@ (800291c <_Z9hwLoraOutv+0xec>)
 80028a2:	2201      	movs	r2, #1
 80028a4:	701a      	strb	r2, [r3, #0]
		}
		else{													// Si no
			stateResetHwLora	= 0;							// Espera en S0
		}
		break;
 80028a6:	e02a      	b.n	80028fe <_Z9hwLoraOutv+0xce>
			stateResetHwLora	= 0;							// Espera en S0
 80028a8:	4b1c      	ldr	r3, [pc, #112]	@ (800291c <_Z9hwLoraOutv+0xec>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	701a      	strb	r2, [r3, #0]
		break;
 80028ae:	e026      	b.n	80028fe <_Z9hwLoraOutv+0xce>
	/////////////////
	// S1 - ENABLE //
	/////////////////

	case 1:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);	// Pin en SET
 80028b0:	2201      	movs	r2, #1
 80028b2:	2104      	movs	r1, #4
 80028b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028b8:	f005 f95e 	bl	8007b78 <HAL_GPIO_WritePin>
		flagEnableHwLora	= 1;							// Indica que el chip esta habilitado
 80028bc:	4b19      	ldr	r3, [pc, #100]	@ (8002924 <_Z9hwLoraOutv+0xf4>)
 80028be:	2201      	movs	r2, #1
 80028c0:	701a      	strb	r2, [r3, #0]

		if ( flagResetHwLora ){								// Si se da la señal de reinicio
 80028c2:	4b1a      	ldr	r3, [pc, #104]	@ (800292c <_Z9hwLoraOutv+0xfc>)
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d011      	beq.n	80028ee <_Z9hwLoraOutv+0xbe>
			flagResetHwLora		= 0;						// Apaga señal
 80028ca:	4b18      	ldr	r3, [pc, #96]	@ (800292c <_Z9hwLoraOutv+0xfc>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_DMA(&huart4, rxLora, sizeof(rxLora));
 80028d0:	2201      	movs	r2, #1
 80028d2:	4910      	ldr	r1, [pc, #64]	@ (8002914 <_Z9hwLoraOutv+0xe4>)
 80028d4:	480e      	ldr	r0, [pc, #56]	@ (8002910 <_Z9hwLoraOutv+0xe0>)
 80028d6:	f009 fc75 	bl	800c1c4 <HAL_UART_Receive_DMA>
			countResetHwLora2++;
 80028da:	4b15      	ldr	r3, [pc, #84]	@ (8002930 <_Z9hwLoraOutv+0x100>)
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	3301      	adds	r3, #1
 80028e0:	b2da      	uxtb	r2, r3
 80028e2:	4b13      	ldr	r3, [pc, #76]	@ (8002930 <_Z9hwLoraOutv+0x100>)
 80028e4:	701a      	strb	r2, [r3, #0]
			stateResetHwLora	= 0;						// Pasa  S0
 80028e6:	4b0d      	ldr	r3, [pc, #52]	@ (800291c <_Z9hwLoraOutv+0xec>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	701a      	strb	r2, [r3, #0]
		}
		else{												// Si no
			stateResetHwLora	= 1;						// Espera en S1
		}
		break;
 80028ec:	e007      	b.n	80028fe <_Z9hwLoraOutv+0xce>
			stateResetHwLora	= 1;						// Espera en S1
 80028ee:	4b0b      	ldr	r3, [pc, #44]	@ (800291c <_Z9hwLoraOutv+0xec>)
 80028f0:	2201      	movs	r2, #1
 80028f2:	701a      	strb	r2, [r3, #0]
		break;
 80028f4:	e003      	b.n	80028fe <_Z9hwLoraOutv+0xce>

	default:
		stateResetHwLora	= 0;
 80028f6:	4b09      	ldr	r3, [pc, #36]	@ (800291c <_Z9hwLoraOutv+0xec>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	701a      	strb	r2, [r3, #0]
		break;
 80028fc:	bf00      	nop

	}
}
 80028fe:	bf00      	nop
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	200004e5 	.word	0x200004e5
 8002908:	20001160 	.word	0x20001160
 800290c:	20001164 	.word	0x20001164
 8002910:	200007a8 	.word	0x200007a8
 8002914:	20000ae0 	.word	0x20000ae0
 8002918:	200004e4 	.word	0x200004e4
 800291c:	200004e6 	.word	0x200004e6
 8002920:	200004e8 	.word	0x200004e8
 8002924:	200004e7 	.word	0x200004e7
 8002928:	200004ea 	.word	0x200004ea
 800292c:	2000052d 	.word	0x2000052d
 8002930:	200004ec 	.word	0x200004ec

08002934 <_Z41__static_initialization_and_destruction_0ii>:
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
	}
}
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2b01      	cmp	r3, #1
 8002942:	d122      	bne.n	800298a <_Z41__static_initialization_and_destruction_0ii+0x56>
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800294a:	4293      	cmp	r3, r2
 800294c:	d11d      	bne.n	800298a <_Z41__static_initialization_and_destruction_0ii+0x56>
uint16_t limitGpsAvailable	= 5000/superloop;
 800294e:	4b12      	ldr	r3, [pc, #72]	@ (8002998 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	461a      	mov	r2, r3
 8002954:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002958:	fb93 f3f2 	sdiv	r3, r3, r2
 800295c:	b29a      	uxth	r2, r3
 800295e:	4b0f      	ldr	r3, [pc, #60]	@ (800299c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8002960:	801a      	strh	r2, [r3, #0]
uint16_t resetHwLora		= 500/superloop;	// Tiempo que deshabilita chip
 8002962:	4b0d      	ldr	r3, [pc, #52]	@ (8002998 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	461a      	mov	r2, r3
 8002968:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800296c:	fb93 f3f2 	sdiv	r3, r3, r2
 8002970:	b29a      	uxth	r2, r3
 8002972:	4b0b      	ldr	r3, [pc, #44]	@ (80029a0 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8002974:	801a      	strh	r2, [r3, #0]
uint16_t limitUartGps	= 20000/superloop;
 8002976:	4b08      	ldr	r3, [pc, #32]	@ (8002998 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	461a      	mov	r2, r3
 800297c:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8002980:	fb93 f3f2 	sdiv	r3, r3, r2
 8002984:	b29a      	uxth	r2, r3
 8002986:	4b07      	ldr	r3, [pc, #28]	@ (80029a4 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8002988:	801a      	strh	r2, [r3, #0]
}
 800298a:	bf00      	nop
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	20000395 	.word	0x20000395
 800299c:	200004e0 	.word	0x200004e0
 80029a0:	200004ea 	.word	0x200004ea
 80029a4:	200004f0 	.word	0x200004f0

080029a8 <_GLOBAL__sub_I_availableGps>:
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80029b0:	2001      	movs	r0, #1
 80029b2:	f7ff ffbf 	bl	8002934 <_Z41__static_initialization_and_destruction_0ii>
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <_Z9linkInputv>:
uint16_t limitBat	= 5000/superloop;	// Tiempo que la bateria se considera en estado fijo
uint16_t countBat;						// Contador bateria

/***** INPUT *****/

void linkInput(){
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
	linkInGps();
 80029bc:	f000 f94c 	bl	8002c58 <_Z9linkInGpsv>
	linkInLora();
 80029c0:	f000 f8cc 	bl	8002b5c <_Z10linkInLorav>
	linkBoton();
 80029c4:	f000 fb6a 	bl	800309c <_Z9linkBotonv>
	linkAnalog();
 80029c8:	f000 fbce 	bl	8003168 <_Z10linkAnalogv>
	linkBattery();
 80029cc:	f000 f802 	bl	80029d4 <_Z11linkBatteryv>
}
 80029d0:	bf00      	nop
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <_Z11linkBatteryv>:
 * Output:
 * 		errorHardware[6]
 *
 */

void linkBattery(){
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0

	batScaled = battery *510/10000;		// Escalamiento de bateria
 80029d8:	4b58      	ldr	r3, [pc, #352]	@ (8002b3c <_Z11linkBatteryv+0x168>)
 80029da:	881b      	ldrh	r3, [r3, #0]
 80029dc:	461a      	mov	r2, r3
 80029de:	4613      	mov	r3, r2
 80029e0:	021b      	lsls	r3, r3, #8
 80029e2:	1a9b      	subs	r3, r3, r2
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	4a56      	ldr	r2, [pc, #344]	@ (8002b40 <_Z11linkBatteryv+0x16c>)
 80029e8:	fb82 1203 	smull	r1, r2, r2, r3
 80029ec:	1312      	asrs	r2, r2, #12
 80029ee:	17db      	asrs	r3, r3, #31
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	4a54      	ldr	r2, [pc, #336]	@ (8002b44 <_Z11linkBatteryv+0x170>)
 80029f4:	6013      	str	r3, [r2, #0]

	switch ( stateBattery ){
 80029f6:	4b54      	ldr	r3, [pc, #336]	@ (8002b48 <_Z11linkBatteryv+0x174>)
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	2b04      	cmp	r3, #4
 80029fc:	f200 8095 	bhi.w	8002b2a <_Z11linkBatteryv+0x156>
 8002a00:	a201      	add	r2, pc, #4	@ (adr r2, 8002a08 <_Z11linkBatteryv+0x34>)
 8002a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a06:	bf00      	nop
 8002a08:	08002a1d 	.word	0x08002a1d
 8002a0c:	08002a4b 	.word	0x08002a4b
 8002a10:	08002a6d 	.word	0x08002a6d
 8002a14:	08002abb 	.word	0x08002abb
 8002a18:	08002add 	.word	0x08002add
	//////////////////////////
	// S0 -  WAIT STABILITY //
	//////////////////////////

	case 0:
		countBat++;						// Suma 1 al contador
 8002a1c:	4b4b      	ldr	r3, [pc, #300]	@ (8002b4c <_Z11linkBatteryv+0x178>)
 8002a1e:	881b      	ldrh	r3, [r3, #0]
 8002a20:	3301      	adds	r3, #1
 8002a22:	b29a      	uxth	r2, r3
 8002a24:	4b49      	ldr	r3, [pc, #292]	@ (8002b4c <_Z11linkBatteryv+0x178>)
 8002a26:	801a      	strh	r2, [r3, #0]

		if ( countBat >= limitBat ){	// Si pasa limite
 8002a28:	4b48      	ldr	r3, [pc, #288]	@ (8002b4c <_Z11linkBatteryv+0x178>)
 8002a2a:	881a      	ldrh	r2, [r3, #0]
 8002a2c:	4b48      	ldr	r3, [pc, #288]	@ (8002b50 <_Z11linkBatteryv+0x17c>)
 8002a2e:	881b      	ldrh	r3, [r3, #0]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d306      	bcc.n	8002a42 <_Z11linkBatteryv+0x6e>
			countBat		= 0;		// Reinicia contador
 8002a34:	4b45      	ldr	r3, [pc, #276]	@ (8002b4c <_Z11linkBatteryv+0x178>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	801a      	strh	r2, [r3, #0]
			stateBattery	= 1;		// Pasa a S1
 8002a3a:	4b43      	ldr	r3, [pc, #268]	@ (8002b48 <_Z11linkBatteryv+0x174>)
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	701a      	strb	r2, [r3, #0]
		}
		else{							// Si no
			stateBattery	= 0;		// Queda en S0
		}
		break;
 8002a40:	e077      	b.n	8002b32 <_Z11linkBatteryv+0x15e>
			stateBattery	= 0;		// Queda en S0
 8002a42:	4b41      	ldr	r3, [pc, #260]	@ (8002b48 <_Z11linkBatteryv+0x174>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	701a      	strb	r2, [r3, #0]
		break;
 8002a48:	e073      	b.n	8002b32 <_Z11linkBatteryv+0x15e>
	////////////////////////
	// S1 - CHECK BATTERY //
	////////////////////////

	case 1:
		errorHardware[6]	= 0;			// Sin error
 8002a4a:	4b42      	ldr	r3, [pc, #264]	@ (8002b54 <_Z11linkBatteryv+0x180>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	719a      	strb	r2, [r3, #6]

		if ( batScaled < thresholdBat ){	// Si la bateria baja del limite
 8002a50:	4b3c      	ldr	r3, [pc, #240]	@ (8002b44 <_Z11linkBatteryv+0x170>)
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	4b40      	ldr	r3, [pc, #256]	@ (8002b58 <_Z11linkBatteryv+0x184>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	da03      	bge.n	8002a64 <_Z11linkBatteryv+0x90>
			stateBattery	= 2;			// Pasa a S2
 8002a5c:	4b3a      	ldr	r3, [pc, #232]	@ (8002b48 <_Z11linkBatteryv+0x174>)
 8002a5e:	2202      	movs	r2, #2
 8002a60:	701a      	strb	r2, [r3, #0]
		}
		else{								// Si no
			stateBattery	= 1;			// Queda en S1
		}
		break;
 8002a62:	e066      	b.n	8002b32 <_Z11linkBatteryv+0x15e>
			stateBattery	= 1;			// Queda en S1
 8002a64:	4b38      	ldr	r3, [pc, #224]	@ (8002b48 <_Z11linkBatteryv+0x174>)
 8002a66:	2201      	movs	r2, #1
 8002a68:	701a      	strb	r2, [r3, #0]
		break;
 8002a6a:	e062      	b.n	8002b32 <_Z11linkBatteryv+0x15e>
	//////////////////////////
	// S2 - CHECK STABILITY //
	//////////////////////////

	case 2:
		errorHardware[6]	= 0;			// Sin error
 8002a6c:	4b39      	ldr	r3, [pc, #228]	@ (8002b54 <_Z11linkBatteryv+0x180>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	719a      	strb	r2, [r3, #6]
		countBat++;							// Suma 1 al contador
 8002a72:	4b36      	ldr	r3, [pc, #216]	@ (8002b4c <_Z11linkBatteryv+0x178>)
 8002a74:	881b      	ldrh	r3, [r3, #0]
 8002a76:	3301      	adds	r3, #1
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	4b34      	ldr	r3, [pc, #208]	@ (8002b4c <_Z11linkBatteryv+0x178>)
 8002a7c:	801a      	strh	r2, [r3, #0]

		if ( batScaled > thresholdBat ){	// Si la bateria esta Ok
 8002a7e:	4b31      	ldr	r3, [pc, #196]	@ (8002b44 <_Z11linkBatteryv+0x170>)
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	4b35      	ldr	r3, [pc, #212]	@ (8002b58 <_Z11linkBatteryv+0x184>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	dd06      	ble.n	8002a98 <_Z11linkBatteryv+0xc4>
			countBat		= 0;			// Reinicia contador
 8002a8a:	4b30      	ldr	r3, [pc, #192]	@ (8002b4c <_Z11linkBatteryv+0x178>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	801a      	strh	r2, [r3, #0]
			stateBattery	= 1;			// Vuelve a S1
 8002a90:	4b2d      	ldr	r3, [pc, #180]	@ (8002b48 <_Z11linkBatteryv+0x174>)
 8002a92:	2201      	movs	r2, #1
 8002a94:	701a      	strb	r2, [r3, #0]
			stateBattery	= 3;			// Pasa a S3
		}
		else{								// Si no
			stateBattery	= 2;			// Queda en S2
		}
		break;
 8002a96:	e04c      	b.n	8002b32 <_Z11linkBatteryv+0x15e>
		else if ( countBat >= limitBat ){	// Si el contador pasa limite
 8002a98:	4b2c      	ldr	r3, [pc, #176]	@ (8002b4c <_Z11linkBatteryv+0x178>)
 8002a9a:	881a      	ldrh	r2, [r3, #0]
 8002a9c:	4b2c      	ldr	r3, [pc, #176]	@ (8002b50 <_Z11linkBatteryv+0x17c>)
 8002a9e:	881b      	ldrh	r3, [r3, #0]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d306      	bcc.n	8002ab2 <_Z11linkBatteryv+0xde>
			countBat		= 0;			// Reinicia contador
 8002aa4:	4b29      	ldr	r3, [pc, #164]	@ (8002b4c <_Z11linkBatteryv+0x178>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	801a      	strh	r2, [r3, #0]
			stateBattery	= 3;			// Pasa a S3
 8002aaa:	4b27      	ldr	r3, [pc, #156]	@ (8002b48 <_Z11linkBatteryv+0x174>)
 8002aac:	2203      	movs	r2, #3
 8002aae:	701a      	strb	r2, [r3, #0]
		break;
 8002ab0:	e03f      	b.n	8002b32 <_Z11linkBatteryv+0x15e>
			stateBattery	= 2;			// Queda en S2
 8002ab2:	4b25      	ldr	r3, [pc, #148]	@ (8002b48 <_Z11linkBatteryv+0x174>)
 8002ab4:	2202      	movs	r2, #2
 8002ab6:	701a      	strb	r2, [r3, #0]
		break;
 8002ab8:	e03b      	b.n	8002b32 <_Z11linkBatteryv+0x15e>
	///////////////////////////////////
	// S3 - CHECK BATTERY WITH ERROR //
	///////////////////////////////////

	case 3:
		errorHardware[6]	= 1;			// Indica error
 8002aba:	4b26      	ldr	r3, [pc, #152]	@ (8002b54 <_Z11linkBatteryv+0x180>)
 8002abc:	2201      	movs	r2, #1
 8002abe:	719a      	strb	r2, [r3, #6]

		if ( batScaled < thresholdBat ){	// Si la bateria esta baja
 8002ac0:	4b20      	ldr	r3, [pc, #128]	@ (8002b44 <_Z11linkBatteryv+0x170>)
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	4b24      	ldr	r3, [pc, #144]	@ (8002b58 <_Z11linkBatteryv+0x184>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	da03      	bge.n	8002ad4 <_Z11linkBatteryv+0x100>
			stateBattery	= 3;			// Sigue en S3
 8002acc:	4b1e      	ldr	r3, [pc, #120]	@ (8002b48 <_Z11linkBatteryv+0x174>)
 8002ace:	2203      	movs	r2, #3
 8002ad0:	701a      	strb	r2, [r3, #0]
		}
		else{								// Si no
			stateBattery	= 4;			// Pasa a S4
		}
		break;
 8002ad2:	e02e      	b.n	8002b32 <_Z11linkBatteryv+0x15e>
			stateBattery	= 4;			// Pasa a S4
 8002ad4:	4b1c      	ldr	r3, [pc, #112]	@ (8002b48 <_Z11linkBatteryv+0x174>)
 8002ad6:	2204      	movs	r2, #4
 8002ad8:	701a      	strb	r2, [r3, #0]
		break;
 8002ada:	e02a      	b.n	8002b32 <_Z11linkBatteryv+0x15e>
	//////////////////////////
	// S4 - CHECK STABILITY //
	//////////////////////////

	case 4:
		errorHardware[6]	= 1;			// Indica error
 8002adc:	4b1d      	ldr	r3, [pc, #116]	@ (8002b54 <_Z11linkBatteryv+0x180>)
 8002ade:	2201      	movs	r2, #1
 8002ae0:	719a      	strb	r2, [r3, #6]
		countBat++;							// Suma 1 al contador
 8002ae2:	4b1a      	ldr	r3, [pc, #104]	@ (8002b4c <_Z11linkBatteryv+0x178>)
 8002ae4:	881b      	ldrh	r3, [r3, #0]
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	b29a      	uxth	r2, r3
 8002aea:	4b18      	ldr	r3, [pc, #96]	@ (8002b4c <_Z11linkBatteryv+0x178>)
 8002aec:	801a      	strh	r2, [r3, #0]

		if ( batScaled < thresholdBat ){	// Si la bateria sigue baja
 8002aee:	4b15      	ldr	r3, [pc, #84]	@ (8002b44 <_Z11linkBatteryv+0x170>)
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	4b19      	ldr	r3, [pc, #100]	@ (8002b58 <_Z11linkBatteryv+0x184>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	da06      	bge.n	8002b08 <_Z11linkBatteryv+0x134>
			countBat		= 0;			// Reinicia contador
 8002afa:	4b14      	ldr	r3, [pc, #80]	@ (8002b4c <_Z11linkBatteryv+0x178>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	801a      	strh	r2, [r3, #0]
			stateBattery	= 3;			// Vuelve a S3
 8002b00:	4b11      	ldr	r3, [pc, #68]	@ (8002b48 <_Z11linkBatteryv+0x174>)
 8002b02:	2203      	movs	r2, #3
 8002b04:	701a      	strb	r2, [r3, #0]
			stateBattery	= 1;			// Pasa a S3
		}
		else{								// Si no
			stateBattery	= 4;			// Queda en S4
		}
		break;
 8002b06:	e014      	b.n	8002b32 <_Z11linkBatteryv+0x15e>
		else if ( countBat >= limitBat ){	// Si contador pasa limite
 8002b08:	4b10      	ldr	r3, [pc, #64]	@ (8002b4c <_Z11linkBatteryv+0x178>)
 8002b0a:	881a      	ldrh	r2, [r3, #0]
 8002b0c:	4b10      	ldr	r3, [pc, #64]	@ (8002b50 <_Z11linkBatteryv+0x17c>)
 8002b0e:	881b      	ldrh	r3, [r3, #0]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d306      	bcc.n	8002b22 <_Z11linkBatteryv+0x14e>
			countBat		= 0;			// Reinicia contador
 8002b14:	4b0d      	ldr	r3, [pc, #52]	@ (8002b4c <_Z11linkBatteryv+0x178>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	801a      	strh	r2, [r3, #0]
			stateBattery	= 1;			// Pasa a S3
 8002b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8002b48 <_Z11linkBatteryv+0x174>)
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	701a      	strb	r2, [r3, #0]
		break;
 8002b20:	e007      	b.n	8002b32 <_Z11linkBatteryv+0x15e>
			stateBattery	= 4;			// Queda en S4
 8002b22:	4b09      	ldr	r3, [pc, #36]	@ (8002b48 <_Z11linkBatteryv+0x174>)
 8002b24:	2204      	movs	r2, #4
 8002b26:	701a      	strb	r2, [r3, #0]
		break;
 8002b28:	e003      	b.n	8002b32 <_Z11linkBatteryv+0x15e>

	default:
		stateBattery	= 0;
 8002b2a:	4b07      	ldr	r3, [pc, #28]	@ (8002b48 <_Z11linkBatteryv+0x174>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	701a      	strb	r2, [r3, #0]
		break;
 8002b30:	bf00      	nop
	}
}
 8002b32:	bf00      	nop
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr
 8002b3c:	20000444 	.word	0x20000444
 8002b40:	68db8bad 	.word	0x68db8bad
 8002b44:	20000524 	.word	0x20000524
 8002b48:	20000522 	.word	0x20000522
 8002b4c:	2000052a 	.word	0x2000052a
 8002b50:	20000528 	.word	0x20000528
 8002b54:	200004d4 	.word	0x200004d4
 8002b58:	200000a4 	.word	0x200000a4

08002b5c <_Z10linkInLorav>:
 *				INPUT	:	flagEnableHwLora
 *
 *				OUTPUT	:	flagWdLora
 */

void linkInLora(){
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0

	//////////////
	// SOFTWARE //
	//////////////

	if ( loraInput.newResponse() ){						// Si hay nueva respuesta desde el modulo lora
 8002b60:	4833      	ldr	r0, [pc, #204]	@ (8002c30 <_Z10linkInLorav+0xd4>)
 8002b62:	f000 ff49 	bl	80039f8 <_ZN9loraInput11newResponseEv>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d020      	beq.n	8002bae <_Z10linkInLorav+0x52>
		responseLora	 = loraInput.response();		// Guarda la respuesta
 8002b6c:	4830      	ldr	r0, [pc, #192]	@ (8002c30 <_Z10linkInLorav+0xd4>)
 8002b6e:	f000 ff56 	bl	8003a1e <_ZN9loraInput8responseEv>
 8002b72:	4603      	mov	r3, r0
 8002b74:	4a2f      	ldr	r2, [pc, #188]	@ (8002c34 <_Z10linkInLorav+0xd8>)
 8002b76:	6013      	str	r3, [r2, #0]
		responseLoraSize = loraInput.responseSize();	// Guarda tamaño de la respuesta
 8002b78:	482d      	ldr	r0, [pc, #180]	@ (8002c30 <_Z10linkInLorav+0xd4>)
 8002b7a:	f000 ff5c 	bl	8003a36 <_ZN9loraInput12responseSizeEv>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	461a      	mov	r2, r3
 8002b82:	4b2d      	ldr	r3, [pc, #180]	@ (8002c38 <_Z10linkInLorav+0xdc>)
 8002b84:	701a      	strb	r2, [r3, #0]

		loraCheck.newResponse(responseLora, responseLoraSize);	// Inserta respuesta en modulo de checkeo de respuesta
 8002b86:	4b2b      	ldr	r3, [pc, #172]	@ (8002c34 <_Z10linkInLorav+0xd8>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a2b      	ldr	r2, [pc, #172]	@ (8002c38 <_Z10linkInLorav+0xdc>)
 8002b8c:	7812      	ldrb	r2, [r2, #0]
 8002b8e:	4619      	mov	r1, r3
 8002b90:	482a      	ldr	r0, [pc, #168]	@ (8002c3c <_Z10linkInLorav+0xe0>)
 8002b92:	f000 fe55 	bl	8003840 <_ZN9loraCheck11newResponseEPhh>
		loraTimeWd.setInput();									// Indica al watchdog que llego mensaje
 8002b96:	482a      	ldr	r0, [pc, #168]	@ (8002c40 <_Z10linkInLorav+0xe4>)
 8002b98:	f000 fe0b 	bl	80037b2 <_ZN9wdTimeout8setInputEv>
		qttyMessagesInputs++;									// Contador de respuestas recibidas
 8002b9c:	4b29      	ldr	r3, [pc, #164]	@ (8002c44 <_Z10linkInLorav+0xe8>)
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	b2da      	uxtb	r2, r3
 8002ba4:	4b27      	ldr	r3, [pc, #156]	@ (8002c44 <_Z10linkInLorav+0xe8>)
 8002ba6:	701a      	strb	r2, [r3, #0]
		flagUartGps	= 1;
 8002ba8:	4b27      	ldr	r3, [pc, #156]	@ (8002c48 <_Z10linkInLorav+0xec>)
 8002baa:	2201      	movs	r2, #1
 8002bac:	701a      	strb	r2, [r3, #0]

	//////////////
	// WATCHDOG //
	//////////////

	switch ( stateWdLora ){
 8002bae:	4b27      	ldr	r3, [pc, #156]	@ (8002c4c <_Z10linkInLorav+0xf0>)
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d031      	beq.n	8002c1a <_Z10linkInLorav+0xbe>
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	dc36      	bgt.n	8002c28 <_Z10linkInLorav+0xcc>
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d002      	beq.n	8002bc4 <_Z10linkInLorav+0x68>
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d012      	beq.n	8002be8 <_Z10linkInLorav+0x8c>
		flagWdLora	= 1;			// Reinicia chip por hw
		stateWdLora	= 0;			// Vuelve a S0
		break;

	default:
		break;
 8002bc2:	e031      	b.n	8002c28 <_Z10linkInLorav+0xcc>
		flagWdLora	= 0;			// Reinicia indicador de reset
 8002bc4:	4b22      	ldr	r3, [pc, #136]	@ (8002c50 <_Z10linkInLorav+0xf4>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	701a      	strb	r2, [r3, #0]
		if ( flagEnableHwLora ){	// Si el chip esta habilitado
 8002bca:	4b22      	ldr	r3, [pc, #136]	@ (8002c54 <_Z10linkInLorav+0xf8>)
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d006      	beq.n	8002be0 <_Z10linkInLorav+0x84>
			loraTimeWd.setOutput();	// Indica que salio un mensaje
 8002bd2:	481b      	ldr	r0, [pc, #108]	@ (8002c40 <_Z10linkInLorav+0xe4>)
 8002bd4:	f000 fdbd 	bl	8003752 <_ZN9wdTimeout9setOutputEv>
			stateWdLora = 1;		// Pasa a S1
 8002bd8:	4b1c      	ldr	r3, [pc, #112]	@ (8002c4c <_Z10linkInLorav+0xf0>)
 8002bda:	2201      	movs	r2, #1
 8002bdc:	701a      	strb	r2, [r3, #0]
		break;
 8002bde:	e024      	b.n	8002c2a <_Z10linkInLorav+0xce>
			stateWdLora = 0;		// Espera en S0
 8002be0:	4b1a      	ldr	r3, [pc, #104]	@ (8002c4c <_Z10linkInLorav+0xf0>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	701a      	strb	r2, [r3, #0]
		break;
 8002be6:	e020      	b.n	8002c2a <_Z10linkInLorav+0xce>
		loraTimeWd.addOne();			// Suma 1 al wd
 8002be8:	4815      	ldr	r0, [pc, #84]	@ (8002c40 <_Z10linkInLorav+0xe4>)
 8002bea:	f000 fdc2 	bl	8003772 <_ZN9wdTimeout6addOneEv>
		if ( loraTimeWd.timeOut() ){	// Si se cumple timeout
 8002bee:	4814      	ldr	r0, [pc, #80]	@ (8002c40 <_Z10linkInLorav+0xe4>)
 8002bf0:	f000 fdf3 	bl	80037da <_ZN9wdTimeout7timeOutEv>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d003      	beq.n	8002c02 <_Z10linkInLorav+0xa6>
			stateWdLora = 2;			// Pasa a S2
 8002bfa:	4b14      	ldr	r3, [pc, #80]	@ (8002c4c <_Z10linkInLorav+0xf0>)
 8002bfc:	2202      	movs	r2, #2
 8002bfe:	701a      	strb	r2, [r3, #0]
		break;
 8002c00:	e013      	b.n	8002c2a <_Z10linkInLorav+0xce>
		else if ( flagEnableHwLora ){	// Si sigue habilitado por hw
 8002c02:	4b14      	ldr	r3, [pc, #80]	@ (8002c54 <_Z10linkInLorav+0xf8>)
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d003      	beq.n	8002c12 <_Z10linkInLorav+0xb6>
			stateWdLora = 1;			// Espera en S1
 8002c0a:	4b10      	ldr	r3, [pc, #64]	@ (8002c4c <_Z10linkInLorav+0xf0>)
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	701a      	strb	r2, [r3, #0]
		break;
 8002c10:	e00b      	b.n	8002c2a <_Z10linkInLorav+0xce>
			stateWdLora	= 0;			// Pasa a S0
 8002c12:	4b0e      	ldr	r3, [pc, #56]	@ (8002c4c <_Z10linkInLorav+0xf0>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	701a      	strb	r2, [r3, #0]
		break;
 8002c18:	e007      	b.n	8002c2a <_Z10linkInLorav+0xce>
		flagWdLora	= 1;			// Reinicia chip por hw
 8002c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8002c50 <_Z10linkInLorav+0xf4>)
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	701a      	strb	r2, [r3, #0]
		stateWdLora	= 0;			// Vuelve a S0
 8002c20:	4b0a      	ldr	r3, [pc, #40]	@ (8002c4c <_Z10linkInLorav+0xf0>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	701a      	strb	r2, [r3, #0]
		break;
 8002c26:	e000      	b.n	8002c2a <_Z10linkInLorav+0xce>
		break;
 8002c28:	bf00      	nop
	}
}
 8002c2a:	bf00      	nop
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	20000b24 	.word	0x20000b24
 8002c34:	20000500 	.word	0x20000500
 8002c38:	20000504 	.word	0x20000504
 8002c3c:	20000b64 	.word	0x20000b64
 8002c40:	20001078 	.word	0x20001078
 8002c44:	20000505 	.word	0x20000505
 8002c48:	200004e4 	.word	0x200004e4
 8002c4c:	20000507 	.word	0x20000507
 8002c50:	2000052c 	.word	0x2000052c
 8002c54:	200004e7 	.word	0x200004e7

08002c58 <_Z9linkInGpsv>:
 *				stopGps		|	Indicador detener GPS
 *				warning[]	|	Indica que no hay gps validos
 *
 */

void linkInGps(){
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0

	switch ( stateGpsLink ){
 8002c5c:	4b45      	ldr	r3, [pc, #276]	@ (8002d74 <_Z9linkInGpsv+0x11c>)
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	2b05      	cmp	r3, #5
 8002c62:	f200 8204 	bhi.w	800306e <_Z9linkInGpsv+0x416>
 8002c66:	a201      	add	r2, pc, #4	@ (adr r2, 8002c6c <_Z9linkInGpsv+0x14>)
 8002c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c6c:	08002c85 	.word	0x08002c85
 8002c70:	08002ca3 	.word	0x08002ca3
 8002c74:	08002d07 	.word	0x08002d07
 8002c78:	08002d2d 	.word	0x08002d2d
 8002c7c:	08002d51 	.word	0x08002d51
 8002c80:	08002da1 	.word	0x08002da1
	/////////////////////////
	// S0 - WAIT FOR START //
	/////////////////////////

	case 0:
		if ( startGps ){			// Si se inicia GPS
 8002c84:	4b3c      	ldr	r3, [pc, #240]	@ (8002d78 <_Z9linkInGpsv+0x120>)
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d006      	beq.n	8002c9a <_Z9linkInGpsv+0x42>
			startGps		= 0;	// Reinicia indicador
 8002c8c:	4b3a      	ldr	r3, [pc, #232]	@ (8002d78 <_Z9linkInGpsv+0x120>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	701a      	strb	r2, [r3, #0]
			stateGpsLink	= 1;	// Pasa a S1
 8002c92:	4b38      	ldr	r3, [pc, #224]	@ (8002d74 <_Z9linkInGpsv+0x11c>)
 8002c94:	2201      	movs	r2, #1
 8002c96:	701a      	strb	r2, [r3, #0]
		}
		else{						// Si no
			stateGpsLink	= 0;	// Espera en S0
		}
		break;
 8002c98:	e1e9      	b.n	800306e <_Z9linkInGpsv+0x416>
			stateGpsLink	= 0;	// Espera en S0
 8002c9a:	4b36      	ldr	r3, [pc, #216]	@ (8002d74 <_Z9linkInGpsv+0x11c>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	701a      	strb	r2, [r3, #0]
		break;
 8002ca0:	e1e5      	b.n	800306e <_Z9linkInGpsv+0x416>
	///////////////////////////
	// S1 - WAIT FOR MESSAGE //
	///////////////////////////

	case 1:
		countGpsLink++;								// Suma 1 al contador
 8002ca2:	4b36      	ldr	r3, [pc, #216]	@ (8002d7c <_Z9linkInGpsv+0x124>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	4a34      	ldr	r2, [pc, #208]	@ (8002d7c <_Z9linkInGpsv+0x124>)
 8002caa:	6013      	str	r3, [r2, #0]
		gpsNewMessage	= 0;						// Reinicia flag nuevo mensaje
 8002cac:	4b34      	ldr	r3, [pc, #208]	@ (8002d80 <_Z9linkInGpsv+0x128>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	701a      	strb	r2, [r3, #0]

		if ( gpsInput.getNewMessage() ){			// Si llega nuevo mensaje
 8002cb2:	4834      	ldr	r0, [pc, #208]	@ (8002d84 <_Z9linkInGpsv+0x12c>)
 8002cb4:	f7fe ffc1 	bl	8001c3a <_ZN8gpsInput13getNewMessageEv>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d009      	beq.n	8002cd2 <_Z9linkInGpsv+0x7a>
			gpsNewMessage	= 1;					// Marca flag de nuevo mensaje
 8002cbe:	4b30      	ldr	r3, [pc, #192]	@ (8002d80 <_Z9linkInGpsv+0x128>)
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	701a      	strb	r2, [r3, #0]
			gpsValid		= gpsInput.getValid();	// Copia mensaje valido
 8002cc4:	482f      	ldr	r0, [pc, #188]	@ (8002d84 <_Z9linkInGpsv+0x12c>)
 8002cc6:	f7fe ffa2 	bl	8001c0e <_ZN8gpsInput8getValidEv>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	461a      	mov	r2, r3
 8002cce:	4b2e      	ldr	r3, [pc, #184]	@ (8002d88 <_Z9linkInGpsv+0x130>)
 8002cd0:	701a      	strb	r2, [r3, #0]
		}

		if ( countGpsLink >= limitGpsLink ){		// Si pasa limite de 5 min
 8002cd2:	4b2a      	ldr	r3, [pc, #168]	@ (8002d7c <_Z9linkInGpsv+0x124>)
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	4b2d      	ldr	r3, [pc, #180]	@ (8002d8c <_Z9linkInGpsv+0x134>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	db03      	blt.n	8002ce6 <_Z9linkInGpsv+0x8e>
			stateGpsLink	= 2;					// Cierra en S2
 8002cde:	4b25      	ldr	r3, [pc, #148]	@ (8002d74 <_Z9linkInGpsv+0x11c>)
 8002ce0:	2202      	movs	r2, #2
 8002ce2:	701a      	strb	r2, [r3, #0]
			stateGpsLink	= 4;					// Pasa a S4
		}*/
		else{										// Si no
			stateGpsLink	= 1;					// Espera
		}
		break;
 8002ce4:	e1c3      	b.n	800306e <_Z9linkInGpsv+0x416>
		else if ( gpsNewMessage && gpsValid ){		// Si llega mensaje valido
 8002ce6:	4b26      	ldr	r3, [pc, #152]	@ (8002d80 <_Z9linkInGpsv+0x128>)
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d007      	beq.n	8002cfe <_Z9linkInGpsv+0xa6>
 8002cee:	4b26      	ldr	r3, [pc, #152]	@ (8002d88 <_Z9linkInGpsv+0x130>)
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d003      	beq.n	8002cfe <_Z9linkInGpsv+0xa6>
			stateGpsLink	= 3;					// Pasa a S3
 8002cf6:	4b1f      	ldr	r3, [pc, #124]	@ (8002d74 <_Z9linkInGpsv+0x11c>)
 8002cf8:	2203      	movs	r2, #3
 8002cfa:	701a      	strb	r2, [r3, #0]
		break;
 8002cfc:	e1b7      	b.n	800306e <_Z9linkInGpsv+0x416>
			stateGpsLink	= 1;					// Espera
 8002cfe:	4b1d      	ldr	r3, [pc, #116]	@ (8002d74 <_Z9linkInGpsv+0x11c>)
 8002d00:	2201      	movs	r2, #1
 8002d02:	701a      	strb	r2, [r3, #0]
		break;
 8002d04:	e1b3      	b.n	800306e <_Z9linkInGpsv+0x416>
	///////////////////////
	// S2 - STOP MEASURE //
	///////////////////////

	case 2:
		savedGps			= 0;	//  Reinicia indicador coordenadas guardadas
 8002d06:	4b22      	ldr	r3, [pc, #136]	@ (8002d90 <_Z9linkInGpsv+0x138>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	701a      	strb	r2, [r3, #0]
		countValidMsgGps	= 0;	//	Reinicia contador mensajes validos
 8002d0c:	4b21      	ldr	r3, [pc, #132]	@ (8002d94 <_Z9linkInGpsv+0x13c>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	701a      	strb	r2, [r3, #0]
		countInvalidMsgGps	= 0;	//	Reinicia contador mensajes invalidos
 8002d12:	4b21      	ldr	r3, [pc, #132]	@ (8002d98 <_Z9linkInGpsv+0x140>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	701a      	strb	r2, [r3, #0]
		countGpsLink		= 0;	//	Reinicia contador de espera mensajes gps
 8002d18:	4b18      	ldr	r3, [pc, #96]	@ (8002d7c <_Z9linkInGpsv+0x124>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	601a      	str	r2, [r3, #0]
		stopGps				= 1;	//	Fija apagado de GPS
 8002d1e:	4b1f      	ldr	r3, [pc, #124]	@ (8002d9c <_Z9linkInGpsv+0x144>)
 8002d20:	2201      	movs	r2, #1
 8002d22:	701a      	strb	r2, [r3, #0]
		stateGpsLink		= 0;	//	Vuelve a S0
 8002d24:	4b13      	ldr	r3, [pc, #76]	@ (8002d74 <_Z9linkInGpsv+0x11c>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	701a      	strb	r2, [r3, #0]
		break;
 8002d2a:	e1a0      	b.n	800306e <_Z9linkInGpsv+0x416>
	////////////////////////////
	// S3 - NEW VALID MESSAGE //
	////////////////////////////

	case 3:
		countValidMsgGps++;				// Suma 1 a mensaje valids nuevos
 8002d2c:	4b19      	ldr	r3, [pc, #100]	@ (8002d94 <_Z9linkInGpsv+0x13c>)
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	3301      	adds	r3, #1
 8002d32:	b2da      	uxtb	r2, r3
 8002d34:	4b17      	ldr	r3, [pc, #92]	@ (8002d94 <_Z9linkInGpsv+0x13c>)
 8002d36:	701a      	strb	r2, [r3, #0]

		if ( countValidMsgGps >= 4 ){	// Si es mayor a 10 mensajes
 8002d38:	4b16      	ldr	r3, [pc, #88]	@ (8002d94 <_Z9linkInGpsv+0x13c>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	2b03      	cmp	r3, #3
 8002d3e:	d903      	bls.n	8002d48 <_Z9linkInGpsv+0xf0>
			stateGpsLink	= 5;		// Pasa a S5
 8002d40:	4b0c      	ldr	r3, [pc, #48]	@ (8002d74 <_Z9linkInGpsv+0x11c>)
 8002d42:	2205      	movs	r2, #5
 8002d44:	701a      	strb	r2, [r3, #0]
		}
		else{							// Si no
			stateGpsLink	= 1;		// Vuelve a S5
		}
		break;
 8002d46:	e192      	b.n	800306e <_Z9linkInGpsv+0x416>
			stateGpsLink	= 1;		// Vuelve a S5
 8002d48:	4b0a      	ldr	r3, [pc, #40]	@ (8002d74 <_Z9linkInGpsv+0x11c>)
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	701a      	strb	r2, [r3, #0]
		break;
 8002d4e:	e18e      	b.n	800306e <_Z9linkInGpsv+0x416>
	//////////////////////////////
	// S4 - NEW INVALID MESSAGE //
	//////////////////////////////

	case 4:
		countInvalidMsgGps++;				// Suma 1 a mensaje invalido nuevos
 8002d50:	4b11      	ldr	r3, [pc, #68]	@ (8002d98 <_Z9linkInGpsv+0x140>)
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	3301      	adds	r3, #1
 8002d56:	b2da      	uxtb	r2, r3
 8002d58:	4b0f      	ldr	r3, [pc, #60]	@ (8002d98 <_Z9linkInGpsv+0x140>)
 8002d5a:	701a      	strb	r2, [r3, #0]

		if ( countInvalidMsgGps >= 30 ){	// Si es mayor a 10 mensajes
 8002d5c:	4b0e      	ldr	r3, [pc, #56]	@ (8002d98 <_Z9linkInGpsv+0x140>)
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	2b1d      	cmp	r3, #29
 8002d62:	d903      	bls.n	8002d6c <_Z9linkInGpsv+0x114>
			stateGpsLink	= 2;			// Pasa a S2
 8002d64:	4b03      	ldr	r3, [pc, #12]	@ (8002d74 <_Z9linkInGpsv+0x11c>)
 8002d66:	2202      	movs	r2, #2
 8002d68:	701a      	strb	r2, [r3, #0]
		}
		else{								// Si no
			stateGpsLink	= 1;			// Pasa a S1
		}
		break;
 8002d6a:	e180      	b.n	800306e <_Z9linkInGpsv+0x416>
			stateGpsLink	= 1;			// Pasa a S1
 8002d6c:	4b01      	ldr	r3, [pc, #4]	@ (8002d74 <_Z9linkInGpsv+0x11c>)
 8002d6e:	2201      	movs	r2, #1
 8002d70:	701a      	strb	r2, [r3, #0]
		break;
 8002d72:	e17c      	b.n	800306e <_Z9linkInGpsv+0x416>
 8002d74:	200004f2 	.word	0x200004f2
 8002d78:	20000393 	.word	0x20000393
 8002d7c:	200004f4 	.word	0x200004f4
 8002d80:	200004f3 	.word	0x200004f3
 8002d84:	20000a38 	.word	0x20000a38
 8002d88:	20000adc 	.word	0x20000adc
 8002d8c:	200004f8 	.word	0x200004f8
 8002d90:	20000ade 	.word	0x20000ade
 8002d94:	200004fc 	.word	0x200004fc
 8002d98:	200004fd 	.word	0x200004fd
 8002d9c:	20000add 	.word	0x20000add
	////////////////////////////////
	// S5 - SAVE LATITUD/LONGITUD //
	////////////////////////////////

	case 5:
		savedGps	= 1;										// Indica que se guardó valor correctamente
 8002da0:	4bb4      	ldr	r3, [pc, #720]	@ (8003074 <_Z9linkInGpsv+0x41c>)
 8002da2:	2201      	movs	r2, #1
 8002da4:	701a      	strb	r2, [r3, #0]

		latitud =	(gpsInput.latitud[0] - '0')*1000;			// Guarda unidad de mil latitud
 8002da6:	4bb4      	ldr	r3, [pc, #720]	@ (8003078 <_Z9linkInGpsv+0x420>)
 8002da8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002dac:	3b30      	subs	r3, #48	@ 0x30
 8002dae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002db2:	fb02 f303 	mul.w	r3, r2, r3
 8002db6:	ee07 3a90 	vmov	s15, r3
 8002dba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002dbe:	4baf      	ldr	r3, [pc, #700]	@ (800307c <_Z9linkInGpsv+0x424>)
 8002dc0:	edc3 7a00 	vstr	s15, [r3]
		latitud +=	(gpsInput.latitud[1] - '0')*100;			// Guarda centena de latitud
 8002dc4:	4bac      	ldr	r3, [pc, #688]	@ (8003078 <_Z9linkInGpsv+0x420>)
 8002dc6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002dca:	3b30      	subs	r3, #48	@ 0x30
 8002dcc:	2264      	movs	r2, #100	@ 0x64
 8002dce:	fb02 f303 	mul.w	r3, r2, r3
 8002dd2:	ee07 3a90 	vmov	s15, r3
 8002dd6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002dda:	4ba8      	ldr	r3, [pc, #672]	@ (800307c <_Z9linkInGpsv+0x424>)
 8002ddc:	edd3 7a00 	vldr	s15, [r3]
 8002de0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002de4:	4ba5      	ldr	r3, [pc, #660]	@ (800307c <_Z9linkInGpsv+0x424>)
 8002de6:	edc3 7a00 	vstr	s15, [r3]
		latitud +=	(gpsInput.latitud[2] - '0')*10;				// Guarda decena de latitud
 8002dea:	4ba3      	ldr	r3, [pc, #652]	@ (8003078 <_Z9linkInGpsv+0x420>)
 8002dec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002df0:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8002df4:	4613      	mov	r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	4413      	add	r3, r2
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	ee07 3a90 	vmov	s15, r3
 8002e00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e04:	4b9d      	ldr	r3, [pc, #628]	@ (800307c <_Z9linkInGpsv+0x424>)
 8002e06:	edd3 7a00 	vldr	s15, [r3]
 8002e0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e0e:	4b9b      	ldr	r3, [pc, #620]	@ (800307c <_Z9linkInGpsv+0x424>)
 8002e10:	edc3 7a00 	vstr	s15, [r3]
		latitud +=	(gpsInput.latitud[3] - '0')*1;				// Guarda unidad de latitud
 8002e14:	4b98      	ldr	r3, [pc, #608]	@ (8003078 <_Z9linkInGpsv+0x420>)
 8002e16:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002e1a:	3b30      	subs	r3, #48	@ 0x30
 8002e1c:	ee07 3a90 	vmov	s15, r3
 8002e20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e24:	4b95      	ldr	r3, [pc, #596]	@ (800307c <_Z9linkInGpsv+0x424>)
 8002e26:	edd3 7a00 	vldr	s15, [r3]
 8002e2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e2e:	4b93      	ldr	r3, [pc, #588]	@ (800307c <_Z9linkInGpsv+0x424>)
 8002e30:	edc3 7a00 	vstr	s15, [r3]
		latitud +=	( float(gpsInput.latitud[5]) - '0')/10;		// Guarda decima de latitud
 8002e34:	4b90      	ldr	r3, [pc, #576]	@ (8003078 <_Z9linkInGpsv+0x420>)
 8002e36:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8002e3a:	ee07 3a90 	vmov	s15, r3
 8002e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e42:	ed9f 7a8f 	vldr	s14, [pc, #572]	@ 8003080 <_Z9linkInGpsv+0x428>
 8002e46:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002e4a:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002e4e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002e52:	4b8a      	ldr	r3, [pc, #552]	@ (800307c <_Z9linkInGpsv+0x424>)
 8002e54:	edd3 7a00 	vldr	s15, [r3]
 8002e58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e5c:	4b87      	ldr	r3, [pc, #540]	@ (800307c <_Z9linkInGpsv+0x424>)
 8002e5e:	edc3 7a00 	vstr	s15, [r3]
		latitud +=	( float(gpsInput.latitud[6]) - '0')/100;	// Guarda centecina de latitud
 8002e62:	4b85      	ldr	r3, [pc, #532]	@ (8003078 <_Z9linkInGpsv+0x420>)
 8002e64:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8002e68:	ee07 3a90 	vmov	s15, r3
 8002e6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e70:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 8003080 <_Z9linkInGpsv+0x428>
 8002e74:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002e78:	eddf 6a82 	vldr	s13, [pc, #520]	@ 8003084 <_Z9linkInGpsv+0x42c>
 8002e7c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002e80:	4b7e      	ldr	r3, [pc, #504]	@ (800307c <_Z9linkInGpsv+0x424>)
 8002e82:	edd3 7a00 	vldr	s15, [r3]
 8002e86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e8a:	4b7c      	ldr	r3, [pc, #496]	@ (800307c <_Z9linkInGpsv+0x424>)
 8002e8c:	edc3 7a00 	vstr	s15, [r3]
		latitud +=	( float(gpsInput.latitud[7]) - '0')/1000;	// Guarda milecima de latitud
 8002e90:	4b79      	ldr	r3, [pc, #484]	@ (8003078 <_Z9linkInGpsv+0x420>)
 8002e92:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8002e96:	ee07 3a90 	vmov	s15, r3
 8002e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e9e:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 8003080 <_Z9linkInGpsv+0x428>
 8002ea2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002ea6:	eddf 6a78 	vldr	s13, [pc, #480]	@ 8003088 <_Z9linkInGpsv+0x430>
 8002eaa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002eae:	4b73      	ldr	r3, [pc, #460]	@ (800307c <_Z9linkInGpsv+0x424>)
 8002eb0:	edd3 7a00 	vldr	s15, [r3]
 8002eb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eb8:	4b70      	ldr	r3, [pc, #448]	@ (800307c <_Z9linkInGpsv+0x424>)
 8002eba:	edc3 7a00 	vstr	s15, [r3]
		latitud +=	( float(gpsInput.latitud[8]) - '0')/10000;	// Guarda decima de milecima de latitud
 8002ebe:	4b6e      	ldr	r3, [pc, #440]	@ (8003078 <_Z9linkInGpsv+0x420>)
 8002ec0:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8002ec4:	ee07 3a90 	vmov	s15, r3
 8002ec8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ecc:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8003080 <_Z9linkInGpsv+0x428>
 8002ed0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002ed4:	eddf 6a6d 	vldr	s13, [pc, #436]	@ 800308c <_Z9linkInGpsv+0x434>
 8002ed8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002edc:	4b67      	ldr	r3, [pc, #412]	@ (800307c <_Z9linkInGpsv+0x424>)
 8002ede:	edd3 7a00 	vldr	s15, [r3]
 8002ee2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ee6:	4b65      	ldr	r3, [pc, #404]	@ (800307c <_Z9linkInGpsv+0x424>)
 8002ee8:	edc3 7a00 	vstr	s15, [r3]

		longitud =	(gpsInput.longitud[0] - '0')*10000;			// Guarda decena de mil longitud
 8002eec:	4b62      	ldr	r3, [pc, #392]	@ (8003078 <_Z9linkInGpsv+0x420>)
 8002eee:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8002ef2:	3b30      	subs	r3, #48	@ 0x30
 8002ef4:	f242 7210 	movw	r2, #10000	@ 0x2710
 8002ef8:	fb02 f303 	mul.w	r3, r2, r3
 8002efc:	ee07 3a90 	vmov	s15, r3
 8002f00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f04:	4b62      	ldr	r3, [pc, #392]	@ (8003090 <_Z9linkInGpsv+0x438>)
 8002f06:	edc3 7a00 	vstr	s15, [r3]
		longitud +=	(gpsInput.longitud[1] - '0')*1000;			// Guarda unidad de mil longitud
 8002f0a:	4b5b      	ldr	r3, [pc, #364]	@ (8003078 <_Z9linkInGpsv+0x420>)
 8002f0c:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8002f10:	3b30      	subs	r3, #48	@ 0x30
 8002f12:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002f16:	fb02 f303 	mul.w	r3, r2, r3
 8002f1a:	ee07 3a90 	vmov	s15, r3
 8002f1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f22:	4b5b      	ldr	r3, [pc, #364]	@ (8003090 <_Z9linkInGpsv+0x438>)
 8002f24:	edd3 7a00 	vldr	s15, [r3]
 8002f28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f2c:	4b58      	ldr	r3, [pc, #352]	@ (8003090 <_Z9linkInGpsv+0x438>)
 8002f2e:	edc3 7a00 	vstr	s15, [r3]
		longitud +=	(gpsInput.longitud[2] - '0')*100;			// Guarda centecima de longitud
 8002f32:	4b51      	ldr	r3, [pc, #324]	@ (8003078 <_Z9linkInGpsv+0x420>)
 8002f34:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8002f38:	3b30      	subs	r3, #48	@ 0x30
 8002f3a:	2264      	movs	r2, #100	@ 0x64
 8002f3c:	fb02 f303 	mul.w	r3, r2, r3
 8002f40:	ee07 3a90 	vmov	s15, r3
 8002f44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f48:	4b51      	ldr	r3, [pc, #324]	@ (8003090 <_Z9linkInGpsv+0x438>)
 8002f4a:	edd3 7a00 	vldr	s15, [r3]
 8002f4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f52:	4b4f      	ldr	r3, [pc, #316]	@ (8003090 <_Z9linkInGpsv+0x438>)
 8002f54:	edc3 7a00 	vstr	s15, [r3]
		longitud +=	(gpsInput.longitud[3] - '0')*10;			// Guarda decena de longitud
 8002f58:	4b47      	ldr	r3, [pc, #284]	@ (8003078 <_Z9linkInGpsv+0x420>)
 8002f5a:	f893 304f 	ldrb.w	r3, [r3, #79]	@ 0x4f
 8002f5e:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8002f62:	4613      	mov	r3, r2
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	4413      	add	r3, r2
 8002f68:	005b      	lsls	r3, r3, #1
 8002f6a:	ee07 3a90 	vmov	s15, r3
 8002f6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f72:	4b47      	ldr	r3, [pc, #284]	@ (8003090 <_Z9linkInGpsv+0x438>)
 8002f74:	edd3 7a00 	vldr	s15, [r3]
 8002f78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f7c:	4b44      	ldr	r3, [pc, #272]	@ (8003090 <_Z9linkInGpsv+0x438>)
 8002f7e:	edc3 7a00 	vstr	s15, [r3]
		longitud +=	(gpsInput.longitud[4] - '0')*1;				// Guarda unidad de longitud
 8002f82:	4b3d      	ldr	r3, [pc, #244]	@ (8003078 <_Z9linkInGpsv+0x420>)
 8002f84:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002f88:	3b30      	subs	r3, #48	@ 0x30
 8002f8a:	ee07 3a90 	vmov	s15, r3
 8002f8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f92:	4b3f      	ldr	r3, [pc, #252]	@ (8003090 <_Z9linkInGpsv+0x438>)
 8002f94:	edd3 7a00 	vldr	s15, [r3]
 8002f98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f9c:	4b3c      	ldr	r3, [pc, #240]	@ (8003090 <_Z9linkInGpsv+0x438>)
 8002f9e:	edc3 7a00 	vstr	s15, [r3]
		longitud +=	( float(gpsInput.longitud[6]) - '0')/10;	// Guarda decima de longitud
 8002fa2:	4b35      	ldr	r3, [pc, #212]	@ (8003078 <_Z9linkInGpsv+0x420>)
 8002fa4:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8002fa8:	ee07 3a90 	vmov	s15, r3
 8002fac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fb0:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8003080 <_Z9linkInGpsv+0x428>
 8002fb4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002fb8:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002fbc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002fc0:	4b33      	ldr	r3, [pc, #204]	@ (8003090 <_Z9linkInGpsv+0x438>)
 8002fc2:	edd3 7a00 	vldr	s15, [r3]
 8002fc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fca:	4b31      	ldr	r3, [pc, #196]	@ (8003090 <_Z9linkInGpsv+0x438>)
 8002fcc:	edc3 7a00 	vstr	s15, [r3]
		longitud +=	( float(gpsInput.longitud[7]) - '0')/100;	// Guarda centecima de longitud
 8002fd0:	4b29      	ldr	r3, [pc, #164]	@ (8003078 <_Z9linkInGpsv+0x420>)
 8002fd2:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 8002fd6:	ee07 3a90 	vmov	s15, r3
 8002fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fde:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8003080 <_Z9linkInGpsv+0x428>
 8002fe2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002fe6:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8003084 <_Z9linkInGpsv+0x42c>
 8002fea:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002fee:	4b28      	ldr	r3, [pc, #160]	@ (8003090 <_Z9linkInGpsv+0x438>)
 8002ff0:	edd3 7a00 	vldr	s15, [r3]
 8002ff4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ff8:	4b25      	ldr	r3, [pc, #148]	@ (8003090 <_Z9linkInGpsv+0x438>)
 8002ffa:	edc3 7a00 	vstr	s15, [r3]
		longitud +=	( float(gpsInput.longitud[8]) - '0')/1000;	// Guarda milesima de longitud
 8002ffe:	4b1e      	ldr	r3, [pc, #120]	@ (8003078 <_Z9linkInGpsv+0x420>)
 8003000:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003004:	ee07 3a90 	vmov	s15, r3
 8003008:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800300c:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8003080 <_Z9linkInGpsv+0x428>
 8003010:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003014:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 8003088 <_Z9linkInGpsv+0x430>
 8003018:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800301c:	4b1c      	ldr	r3, [pc, #112]	@ (8003090 <_Z9linkInGpsv+0x438>)
 800301e:	edd3 7a00 	vldr	s15, [r3]
 8003022:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003026:	4b1a      	ldr	r3, [pc, #104]	@ (8003090 <_Z9linkInGpsv+0x438>)
 8003028:	edc3 7a00 	vstr	s15, [r3]
		longitud +=	( float(gpsInput.longitud[9]) - '0')/10000;	// Guarda decima de milesima de longitud
 800302c:	4b12      	ldr	r3, [pc, #72]	@ (8003078 <_Z9linkInGpsv+0x420>)
 800302e:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8003032:	ee07 3a90 	vmov	s15, r3
 8003036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800303a:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8003080 <_Z9linkInGpsv+0x428>
 800303e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003042:	eddf 6a12 	vldr	s13, [pc, #72]	@ 800308c <_Z9linkInGpsv+0x434>
 8003046:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800304a:	4b11      	ldr	r3, [pc, #68]	@ (8003090 <_Z9linkInGpsv+0x438>)
 800304c:	edd3 7a00 	vldr	s15, [r3]
 8003050:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003054:	4b0e      	ldr	r3, [pc, #56]	@ (8003090 <_Z9linkInGpsv+0x438>)
 8003056:	edc3 7a00 	vstr	s15, [r3]

		countSavedGps++;										// Contador de veces que se guardó un valor correctamente
 800305a:	4b0e      	ldr	r3, [pc, #56]	@ (8003094 <_Z9linkInGpsv+0x43c>)
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	3301      	adds	r3, #1
 8003060:	b2da      	uxtb	r2, r3
 8003062:	4b0c      	ldr	r3, [pc, #48]	@ (8003094 <_Z9linkInGpsv+0x43c>)
 8003064:	701a      	strb	r2, [r3, #0]
		stateGpsLink	= 2;									// Pasa a S2
 8003066:	4b0c      	ldr	r3, [pc, #48]	@ (8003098 <_Z9linkInGpsv+0x440>)
 8003068:	2202      	movs	r2, #2
 800306a:	701a      	strb	r2, [r3, #0]
		break;
 800306c:	bf00      	nop
	}

}
 800306e:	bf00      	nop
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	20000ade 	.word	0x20000ade
 8003078:	20000a38 	.word	0x20000a38
 800307c:	20000ad4 	.word	0x20000ad4
 8003080:	42400000 	.word	0x42400000
 8003084:	42c80000 	.word	0x42c80000
 8003088:	447a0000 	.word	0x447a0000
 800308c:	461c4000 	.word	0x461c4000
 8003090:	20000ad8 	.word	0x20000ad8
 8003094:	200004fe 	.word	0x200004fe
 8003098:	200004f2 	.word	0x200004f2

0800309c <_Z9linkBotonv>:
 *	INPUT	:	flagBoton
 *	OUTPUT	:	displayPhy.enable
 */


void linkBoton(){
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0

	switch ( stateEnableDisplay ){
 80030a0:	4b1b      	ldr	r3, [pc, #108]	@ (8003110 <_Z9linkBotonv+0x74>)
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d002      	beq.n	80030ae <_Z9linkBotonv+0x12>
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d013      	beq.n	80030d4 <_Z9linkBotonv+0x38>
 80030ac:	e029      	b.n	8003102 <_Z9linkBotonv+0x66>
	//////////////////////
	// S0 - WAIT BUTTON //
	//////////////////////

	case 0:
		displayPhy.enable(0);			//	Inhabilita display
 80030ae:	2100      	movs	r1, #0
 80030b0:	4818      	ldr	r0, [pc, #96]	@ (8003114 <_Z9linkBotonv+0x78>)
 80030b2:	f7fd fa13 	bl	80004dc <_ZN15displayPhysical6enableEb>
		countEnableDisplay	= 0;		//	Reinicia contador
 80030b6:	4b18      	ldr	r3, [pc, #96]	@ (8003118 <_Z9linkBotonv+0x7c>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]

		if ( flagBoton ){				//	Si se presiona el boton
 80030bc:	4b17      	ldr	r3, [pc, #92]	@ (800311c <_Z9linkBotonv+0x80>)
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d003      	beq.n	80030cc <_Z9linkBotonv+0x30>
			stateEnableDisplay	= 1;	//	Pasa a S1
 80030c4:	4b12      	ldr	r3, [pc, #72]	@ (8003110 <_Z9linkBotonv+0x74>)
 80030c6:	2201      	movs	r2, #1
 80030c8:	701a      	strb	r2, [r3, #0]
		}
		else{							//	Si no
			stateEnableDisplay	= 0;	//	Espera en S0
		}
		break;
 80030ca:	e01e      	b.n	800310a <_Z9linkBotonv+0x6e>
			stateEnableDisplay	= 0;	//	Espera en S0
 80030cc:	4b10      	ldr	r3, [pc, #64]	@ (8003110 <_Z9linkBotonv+0x74>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	701a      	strb	r2, [r3, #0]
		break;
 80030d2:	e01a      	b.n	800310a <_Z9linkBotonv+0x6e>
	/////////////////
	// S1 - ENABLE //
	/////////////////

	case 1:
		displayPhy.enable(1);							// Habilita display
 80030d4:	2101      	movs	r1, #1
 80030d6:	480f      	ldr	r0, [pc, #60]	@ (8003114 <_Z9linkBotonv+0x78>)
 80030d8:	f7fd fa00 	bl	80004dc <_ZN15displayPhysical6enableEb>

		countEnableDisplay++;							// Suma 1 al contador
 80030dc:	4b0e      	ldr	r3, [pc, #56]	@ (8003118 <_Z9linkBotonv+0x7c>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	3301      	adds	r3, #1
 80030e2:	4a0d      	ldr	r2, [pc, #52]	@ (8003118 <_Z9linkBotonv+0x7c>)
 80030e4:	6013      	str	r3, [r2, #0]

		if ( countEnableDisplay > limitEnableDisplay ){	// Si llega al limite
 80030e6:	4b0c      	ldr	r3, [pc, #48]	@ (8003118 <_Z9linkBotonv+0x7c>)
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	4b0d      	ldr	r3, [pc, #52]	@ (8003120 <_Z9linkBotonv+0x84>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	dd03      	ble.n	80030fa <_Z9linkBotonv+0x5e>
			stateEnableDisplay	= 0;					// Vuelve a S0
 80030f2:	4b07      	ldr	r3, [pc, #28]	@ (8003110 <_Z9linkBotonv+0x74>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	701a      	strb	r2, [r3, #0]
		}
		else{											// Si no
			stateEnableDisplay	= 1;					// Espera en S1
		}
		break;
 80030f8:	e007      	b.n	800310a <_Z9linkBotonv+0x6e>
			stateEnableDisplay	= 1;					// Espera en S1
 80030fa:	4b05      	ldr	r3, [pc, #20]	@ (8003110 <_Z9linkBotonv+0x74>)
 80030fc:	2201      	movs	r2, #1
 80030fe:	701a      	strb	r2, [r3, #0]
		break;
 8003100:	e003      	b.n	800310a <_Z9linkBotonv+0x6e>

	default:
		stateEnableDisplay	= 0;
 8003102:	4b03      	ldr	r3, [pc, #12]	@ (8003110 <_Z9linkBotonv+0x74>)
 8003104:	2200      	movs	r2, #0
 8003106:	701a      	strb	r2, [r3, #0]
		break;
 8003108:	bf00      	nop

	}
}
 800310a:	bf00      	nop
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	20000510 	.word	0x20000510
 8003114:	20001084 	.word	0x20001084
 8003118:	20000508 	.word	0x20000508
 800311c:	20000a34 	.word	0x20000a34
 8003120:	2000050c 	.word	0x2000050c

08003124 <_Z7adc2PPMth>:
 *	MODE 2	:	ADC interno A1
 *	MODE 3	:	ADC externo B1
 *	MODE 4	:	ADC interno B1
 */

uint8_t adc2PPM( uint16_t signal, uint8_t mode){
 8003124:	b480      	push	{r7}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
 800312a:	4603      	mov	r3, r0
 800312c:	460a      	mov	r2, r1
 800312e:	80fb      	strh	r3, [r7, #6]
 8003130:	4613      	mov	r3, r2
 8003132:	717b      	strb	r3, [r7, #5]
	uint8_t result;

	result	= 1;
 8003134:	2301      	movs	r3, #1
 8003136:	73fb      	strb	r3, [r7, #15]

	switch ( mode ){
 8003138:	797b      	ldrb	r3, [r7, #5]
 800313a:	3b01      	subs	r3, #1
 800313c:	2b03      	cmp	r3, #3
 800313e:	d80b      	bhi.n	8003158 <_Z7adc2PPMth+0x34>
 8003140:	a201      	add	r2, pc, #4	@ (adr r2, 8003148 <_Z7adc2PPMth+0x24>)
 8003142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003146:	bf00      	nop
 8003148:	08003159 	.word	0x08003159
 800314c:	08003159 	.word	0x08003159
 8003150:	08003159 	.word	0x08003159
 8003154:	08003159 	.word	0x08003159

	case 4:
		break;
	}

	return result;
 8003158:	7bfb      	ldrb	r3, [r7, #15]
}
 800315a:	4618      	mov	r0, r3
 800315c:	3714      	adds	r7, #20
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop

08003168 <_Z10linkAnalogv>:
 *				flagAlarm_PPM,
 *				flagAlarm_TEMP
 *				flagAlarm_HUM
 */

void linkAnalog(){
 8003168:	b580      	push	{r7, lr}
 800316a:	af00      	add	r7, sp, #0

	/////////////////
	// CALIBRATION //
	/////////////////

	switch ( stateCalibration ){
 800316c:	4b6a      	ldr	r3, [pc, #424]	@ (8003318 <_Z10linkAnalogv+0x1b0>)
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d002      	beq.n	800317a <_Z10linkAnalogv+0x12>
 8003174:	2b01      	cmp	r3, #1
 8003176:	d01d      	beq.n	80031b4 <_Z10linkAnalogv+0x4c>
 8003178:	e018      	b.n	80031ac <_Z10linkAnalogv+0x44>
	///////////////////////////////
	// S0 - WAIT FOR CALIBRATION //
	///////////////////////////////

	case 0:
		countCalibration++;								// Suma 1 al contador
 800317a:	4b68      	ldr	r3, [pc, #416]	@ (800331c <_Z10linkAnalogv+0x1b4>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	3301      	adds	r3, #1
 8003180:	4a66      	ldr	r2, [pc, #408]	@ (800331c <_Z10linkAnalogv+0x1b4>)
 8003182:	6013      	str	r3, [r2, #0]
		enableSensors	= 0;							// Deshabilita sensores
 8003184:	4b66      	ldr	r3, [pc, #408]	@ (8003320 <_Z10linkAnalogv+0x1b8>)
 8003186:	2200      	movs	r2, #0
 8003188:	701a      	strb	r2, [r3, #0]

		if ( countCalibration >= limitCalibration ){	// Si se cumple el tiempo de calibracion
 800318a:	4b64      	ldr	r3, [pc, #400]	@ (800331c <_Z10linkAnalogv+0x1b4>)
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	4b65      	ldr	r3, [pc, #404]	@ (8003324 <_Z10linkAnalogv+0x1bc>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	429a      	cmp	r2, r3
 8003194:	db06      	blt.n	80031a4 <_Z10linkAnalogv+0x3c>
			enableSensors		= 1;					// Habilita sensores
 8003196:	4b62      	ldr	r3, [pc, #392]	@ (8003320 <_Z10linkAnalogv+0x1b8>)
 8003198:	2201      	movs	r2, #1
 800319a:	701a      	strb	r2, [r3, #0]
			stateCalibration	= 1;					// Pasa a S1
 800319c:	4b5e      	ldr	r3, [pc, #376]	@ (8003318 <_Z10linkAnalogv+0x1b0>)
 800319e:	2201      	movs	r2, #1
 80031a0:	701a      	strb	r2, [r3, #0]
		}
		else{											// Si no
			stateCalibration	= 0;					// Espera en S0
		}
		break;
 80031a2:	e008      	b.n	80031b6 <_Z10linkAnalogv+0x4e>
			stateCalibration	= 0;					// Espera en S0
 80031a4:	4b5c      	ldr	r3, [pc, #368]	@ (8003318 <_Z10linkAnalogv+0x1b0>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	701a      	strb	r2, [r3, #0]
		break;
 80031aa:	e004      	b.n	80031b6 <_Z10linkAnalogv+0x4e>
	////////////////////
	case 1:
		break;

	default:
		stateCalibration	= 0;
 80031ac:	4b5a      	ldr	r3, [pc, #360]	@ (8003318 <_Z10linkAnalogv+0x1b0>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	701a      	strb	r2, [r3, #0]
		break;
 80031b2:	e000      	b.n	80031b6 <_Z10linkAnalogv+0x4e>
		break;
 80031b4:	bf00      	nop

	////////////
	// A1 HCL //
	////////////

	if ( !errorHardware[5] ){										// Si esta habilitado el ADC
 80031b6:	4b5c      	ldr	r3, [pc, #368]	@ (8003328 <_Z10linkAnalogv+0x1c0>)
 80031b8:	795b      	ldrb	r3, [r3, #5]
 80031ba:	f083 0301 	eor.w	r3, r3, #1
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d00f      	beq.n	80031e4 <_Z10linkAnalogv+0x7c>
		alpha_A1_PPM = adc2PPM(alphaA, 1) * enableSensors;			// Convierte en PPM
 80031c4:	4b59      	ldr	r3, [pc, #356]	@ (800332c <_Z10linkAnalogv+0x1c4>)
 80031c6:	881b      	ldrh	r3, [r3, #0]
 80031c8:	2101      	movs	r1, #1
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7ff ffaa 	bl	8003124 <_Z7adc2PPMth>
 80031d0:	4603      	mov	r3, r0
 80031d2:	461a      	mov	r2, r3
 80031d4:	4b52      	ldr	r3, [pc, #328]	@ (8003320 <_Z10linkAnalogv+0x1b8>)
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	fb12 f303 	smulbb	r3, r2, r3
 80031dc:	b2da      	uxtb	r2, r3
 80031de:	4b54      	ldr	r3, [pc, #336]	@ (8003330 <_Z10linkAnalogv+0x1c8>)
 80031e0:	701a      	strb	r2, [r3, #0]
 80031e2:	e00e      	b.n	8003202 <_Z10linkAnalogv+0x9a>
	}
	else{															// Si no esta habiltiado el ADC
		alpha_A1_PPM = adc2PPM(alphaAnalog_A, 2) * enableSensors;	// Convierte en PPM
 80031e4:	4b53      	ldr	r3, [pc, #332]	@ (8003334 <_Z10linkAnalogv+0x1cc>)
 80031e6:	881b      	ldrh	r3, [r3, #0]
 80031e8:	2102      	movs	r1, #2
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7ff ff9a 	bl	8003124 <_Z7adc2PPMth>
 80031f0:	4603      	mov	r3, r0
 80031f2:	461a      	mov	r2, r3
 80031f4:	4b4a      	ldr	r3, [pc, #296]	@ (8003320 <_Z10linkAnalogv+0x1b8>)
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	fb12 f303 	smulbb	r3, r2, r3
 80031fc:	b2da      	uxtb	r2, r3
 80031fe:	4b4c      	ldr	r3, [pc, #304]	@ (8003330 <_Z10linkAnalogv+0x1c8>)
 8003200:	701a      	strb	r2, [r3, #0]
	}

	if ( alpha_A1_PPM > 50 && enableSensors){		// Si pasa de 5 ppm
 8003202:	4b4b      	ldr	r3, [pc, #300]	@ (8003330 <_Z10linkAnalogv+0x1c8>)
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	2b32      	cmp	r3, #50	@ 0x32
 8003208:	d907      	bls.n	800321a <_Z10linkAnalogv+0xb2>
 800320a:	4b45      	ldr	r3, [pc, #276]	@ (8003320 <_Z10linkAnalogv+0x1b8>)
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d003      	beq.n	800321a <_Z10linkAnalogv+0xb2>
		flagAlarm_PPM	= 1;						// Indica alarma
 8003212:	4b49      	ldr	r3, [pc, #292]	@ (8003338 <_Z10linkAnalogv+0x1d0>)
 8003214:	2201      	movs	r2, #1
 8003216:	701a      	strb	r2, [r3, #0]
 8003218:	e002      	b.n	8003220 <_Z10linkAnalogv+0xb8>
	}
	else{											// Si no
		flagAlarm_PPM	= 0;						// No hay alarma
 800321a:	4b47      	ldr	r3, [pc, #284]	@ (8003338 <_Z10linkAnalogv+0x1d0>)
 800321c:	2200      	movs	r2, #0
 800321e:	701a      	strb	r2, [r3, #0]

	////////////
	// B1 HCL //
	////////////

	if ( !errorHardware[5] ){										// Si esta habitado el ADC
 8003220:	4b41      	ldr	r3, [pc, #260]	@ (8003328 <_Z10linkAnalogv+0x1c0>)
 8003222:	795b      	ldrb	r3, [r3, #5]
 8003224:	f083 0301 	eor.w	r3, r3, #1
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00f      	beq.n	800324e <_Z10linkAnalogv+0xe6>
		alpha_A1_PPM = adc2PPM(alphaA, 3) * enableSensors;			// Convierte en PPM
 800322e:	4b3f      	ldr	r3, [pc, #252]	@ (800332c <_Z10linkAnalogv+0x1c4>)
 8003230:	881b      	ldrh	r3, [r3, #0]
 8003232:	2103      	movs	r1, #3
 8003234:	4618      	mov	r0, r3
 8003236:	f7ff ff75 	bl	8003124 <_Z7adc2PPMth>
 800323a:	4603      	mov	r3, r0
 800323c:	461a      	mov	r2, r3
 800323e:	4b38      	ldr	r3, [pc, #224]	@ (8003320 <_Z10linkAnalogv+0x1b8>)
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	fb12 f303 	smulbb	r3, r2, r3
 8003246:	b2da      	uxtb	r2, r3
 8003248:	4b39      	ldr	r3, [pc, #228]	@ (8003330 <_Z10linkAnalogv+0x1c8>)
 800324a:	701a      	strb	r2, [r3, #0]
 800324c:	e00e      	b.n	800326c <_Z10linkAnalogv+0x104>
	}
	else{															// Si no esta habilitado el ADC
		alpha_A1_PPM = adc2PPM(alphaAnalog_A, 4) * enableSensors;	// Convierte en PPM
 800324e:	4b39      	ldr	r3, [pc, #228]	@ (8003334 <_Z10linkAnalogv+0x1cc>)
 8003250:	881b      	ldrh	r3, [r3, #0]
 8003252:	2104      	movs	r1, #4
 8003254:	4618      	mov	r0, r3
 8003256:	f7ff ff65 	bl	8003124 <_Z7adc2PPMth>
 800325a:	4603      	mov	r3, r0
 800325c:	461a      	mov	r2, r3
 800325e:	4b30      	ldr	r3, [pc, #192]	@ (8003320 <_Z10linkAnalogv+0x1b8>)
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	fb12 f303 	smulbb	r3, r2, r3
 8003266:	b2da      	uxtb	r2, r3
 8003268:	4b31      	ldr	r3, [pc, #196]	@ (8003330 <_Z10linkAnalogv+0x1c8>)
 800326a:	701a      	strb	r2, [r3, #0]
	}

	if ( alpha_A1_PPM > 50 && enableSensors ){		// Si pasa de 5 ppm
 800326c:	4b30      	ldr	r3, [pc, #192]	@ (8003330 <_Z10linkAnalogv+0x1c8>)
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	2b32      	cmp	r3, #50	@ 0x32
 8003272:	d907      	bls.n	8003284 <_Z10linkAnalogv+0x11c>
 8003274:	4b2a      	ldr	r3, [pc, #168]	@ (8003320 <_Z10linkAnalogv+0x1b8>)
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d003      	beq.n	8003284 <_Z10linkAnalogv+0x11c>
		flagAlarm_PPM	= 1;						// Indica alarma
 800327c:	4b2e      	ldr	r3, [pc, #184]	@ (8003338 <_Z10linkAnalogv+0x1d0>)
 800327e:	2201      	movs	r2, #1
 8003280:	701a      	strb	r2, [r3, #0]
 8003282:	e002      	b.n	800328a <_Z10linkAnalogv+0x122>
	}
	else{											// Si no
		flagAlarm_PPM	= 0;						// No hay alarma
 8003284:	4b2c      	ldr	r3, [pc, #176]	@ (8003338 <_Z10linkAnalogv+0x1d0>)
 8003286:	2200      	movs	r2, #0
 8003288:	701a      	strb	r2, [r3, #0]

	//////////////
	// TEMP HUM //
	///////////////

	if ( !errorHardware[1] ){			// Si hay sensor externo
 800328a:	4b27      	ldr	r3, [pc, #156]	@ (8003328 <_Z10linkAnalogv+0x1c0>)
 800328c:	785b      	ldrb	r3, [r3, #1]
 800328e:	f083 0301 	eor.w	r3, r3, #1
 8003292:	b2db      	uxtb	r3, r3
 8003294:	2b00      	cmp	r3, #0
 8003296:	d008      	beq.n	80032aa <_Z10linkAnalogv+0x142>
		tempApp	= tempExtern;			// Copia temperatura
 8003298:	4b28      	ldr	r3, [pc, #160]	@ (800333c <_Z10linkAnalogv+0x1d4>)
 800329a:	881a      	ldrh	r2, [r3, #0]
 800329c:	4b28      	ldr	r3, [pc, #160]	@ (8003340 <_Z10linkAnalogv+0x1d8>)
 800329e:	801a      	strh	r2, [r3, #0]
		humApp	= humExtern;			// Copia humedad
 80032a0:	4b28      	ldr	r3, [pc, #160]	@ (8003344 <_Z10linkAnalogv+0x1dc>)
 80032a2:	881a      	ldrh	r2, [r3, #0]
 80032a4:	4b28      	ldr	r3, [pc, #160]	@ (8003348 <_Z10linkAnalogv+0x1e0>)
 80032a6:	801a      	strh	r2, [r3, #0]
 80032a8:	e015      	b.n	80032d6 <_Z10linkAnalogv+0x16e>
	}
	else if ( !errorHardware[0] ){	// Si hay sensor interno
 80032aa:	4b1f      	ldr	r3, [pc, #124]	@ (8003328 <_Z10linkAnalogv+0x1c0>)
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	f083 0301 	eor.w	r3, r3, #1
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d008      	beq.n	80032ca <_Z10linkAnalogv+0x162>
		tempApp	= tempIntern;			// Copia temperatura
 80032b8:	4b24      	ldr	r3, [pc, #144]	@ (800334c <_Z10linkAnalogv+0x1e4>)
 80032ba:	881a      	ldrh	r2, [r3, #0]
 80032bc:	4b20      	ldr	r3, [pc, #128]	@ (8003340 <_Z10linkAnalogv+0x1d8>)
 80032be:	801a      	strh	r2, [r3, #0]
		humApp	= humIntern;			// Copia humedad
 80032c0:	4b23      	ldr	r3, [pc, #140]	@ (8003350 <_Z10linkAnalogv+0x1e8>)
 80032c2:	881a      	ldrh	r2, [r3, #0]
 80032c4:	4b20      	ldr	r3, [pc, #128]	@ (8003348 <_Z10linkAnalogv+0x1e0>)
 80032c6:	801a      	strh	r2, [r3, #0]
 80032c8:	e005      	b.n	80032d6 <_Z10linkAnalogv+0x16e>
	}
	else{								// Si no hay ninguno de ambos sensores
		tempApp	= 0;					// Copia 0
 80032ca:	4b1d      	ldr	r3, [pc, #116]	@ (8003340 <_Z10linkAnalogv+0x1d8>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	801a      	strh	r2, [r3, #0]
		humApp	= 0;					// Copia 0
 80032d0:	4b1d      	ldr	r3, [pc, #116]	@ (8003348 <_Z10linkAnalogv+0x1e0>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	801a      	strh	r2, [r3, #0]

	////////////
	// ALARMS //
	////////////

	if ( tempApp > 60 || tempApp < 5 ){	// Si pasa limite de sensores
 80032d6:	4b1a      	ldr	r3, [pc, #104]	@ (8003340 <_Z10linkAnalogv+0x1d8>)
 80032d8:	881b      	ldrh	r3, [r3, #0]
 80032da:	2b3c      	cmp	r3, #60	@ 0x3c
 80032dc:	d803      	bhi.n	80032e6 <_Z10linkAnalogv+0x17e>
 80032de:	4b18      	ldr	r3, [pc, #96]	@ (8003340 <_Z10linkAnalogv+0x1d8>)
 80032e0:	881b      	ldrh	r3, [r3, #0]
 80032e2:	2b04      	cmp	r3, #4
 80032e4:	d803      	bhi.n	80032ee <_Z10linkAnalogv+0x186>
		warningHardware[0]	= 1;			// Indica alarma
 80032e6:	4b1b      	ldr	r3, [pc, #108]	@ (8003354 <_Z10linkAnalogv+0x1ec>)
 80032e8:	2201      	movs	r2, #1
 80032ea:	701a      	strb	r2, [r3, #0]
 80032ec:	e002      	b.n	80032f4 <_Z10linkAnalogv+0x18c>
	}
	else{								// Si no
		warningHardware[0]	= 0;			// No hay alarma
 80032ee:	4b19      	ldr	r3, [pc, #100]	@ (8003354 <_Z10linkAnalogv+0x1ec>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	701a      	strb	r2, [r3, #0]
	}

	if ( humApp < 5 || humApp > 90){	// Si pasa limite de sensores
 80032f4:	4b14      	ldr	r3, [pc, #80]	@ (8003348 <_Z10linkAnalogv+0x1e0>)
 80032f6:	881b      	ldrh	r3, [r3, #0]
 80032f8:	2b04      	cmp	r3, #4
 80032fa:	d903      	bls.n	8003304 <_Z10linkAnalogv+0x19c>
 80032fc:	4b12      	ldr	r3, [pc, #72]	@ (8003348 <_Z10linkAnalogv+0x1e0>)
 80032fe:	881b      	ldrh	r3, [r3, #0]
 8003300:	2b5a      	cmp	r3, #90	@ 0x5a
 8003302:	d903      	bls.n	800330c <_Z10linkAnalogv+0x1a4>
		warningHardware[1]	= 1;			// Indica alarma
 8003304:	4b13      	ldr	r3, [pc, #76]	@ (8003354 <_Z10linkAnalogv+0x1ec>)
 8003306:	2201      	movs	r2, #1
 8003308:	705a      	strb	r2, [r3, #1]
 800330a:	e003      	b.n	8003314 <_Z10linkAnalogv+0x1ac>
	}
	else{								// Si no
		warningHardware[1]	= 0;			// No hay alarma
 800330c:	4b11      	ldr	r3, [pc, #68]	@ (8003354 <_Z10linkAnalogv+0x1ec>)
 800330e:	2200      	movs	r2, #0
 8003310:	705a      	strb	r2, [r3, #1]
	}
}
 8003312:	bf00      	nop
 8003314:	bf00      	nop
 8003316:	bd80      	pop	{r7, pc}
 8003318:	20000516 	.word	0x20000516
 800331c:	20000518 	.word	0x20000518
 8003320:	20000520 	.word	0x20000520
 8003324:	2000051c 	.word	0x2000051c
 8003328:	200004d4 	.word	0x200004d4
 800332c:	2000043e 	.word	0x2000043e
 8003330:	20000511 	.word	0x20000511
 8003334:	20000446 	.word	0x20000446
 8003338:	20000521 	.word	0x20000521
 800333c:	20000424 	.word	0x20000424
 8003340:	20000512 	.word	0x20000512
 8003344:	20000426 	.word	0x20000426
 8003348:	20000514 	.word	0x20000514
 800334c:	20000420 	.word	0x20000420
 8003350:	20000422 	.word	0x20000422
 8003354:	200004cc 	.word	0x200004cc

08003358 <_Z41__static_initialization_and_destruction_0ii>:
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2b01      	cmp	r3, #1
 8003366:	d127      	bne.n	80033b8 <_Z41__static_initialization_and_destruction_0ii+0x60>
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800336e:	4293      	cmp	r3, r2
 8003370:	d122      	bne.n	80033b8 <_Z41__static_initialization_and_destruction_0ii+0x60>
long int limitGpsLink	= 240000/superloop;	// Limite de tiempo esperando mensajes validos
 8003372:	4b14      	ldr	r3, [pc, #80]	@ (80033c4 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	461a      	mov	r2, r3
 8003378:	4b13      	ldr	r3, [pc, #76]	@ (80033c8 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800337a:	fb93 f3f2 	sdiv	r3, r3, r2
 800337e:	4a13      	ldr	r2, [pc, #76]	@ (80033cc <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8003380:	6013      	str	r3, [r2, #0]
int limitEnableDisplay		= 3000/superloop;	//	Limite de display habilitado
 8003382:	4b10      	ldr	r3, [pc, #64]	@ (80033c4 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	461a      	mov	r2, r3
 8003388:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800338c:	fb93 f3f2 	sdiv	r3, r3, r2
 8003390:	4a0f      	ldr	r2, [pc, #60]	@ (80033d0 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8003392:	6013      	str	r3, [r2, #0]
long limitCalibration	= 900000/superloop;	// Limite de calibracion
 8003394:	4b0b      	ldr	r3, [pc, #44]	@ (80033c4 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	461a      	mov	r2, r3
 800339a:	4b0e      	ldr	r3, [pc, #56]	@ (80033d4 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800339c:	fb93 f3f2 	sdiv	r3, r3, r2
 80033a0:	4a0d      	ldr	r2, [pc, #52]	@ (80033d8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80033a2:	6013      	str	r3, [r2, #0]
uint16_t limitBat	= 5000/superloop;	// Tiempo que la bateria se considera en estado fijo
 80033a4:	4b07      	ldr	r3, [pc, #28]	@ (80033c4 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	461a      	mov	r2, r3
 80033aa:	f241 3388 	movw	r3, #5000	@ 0x1388
 80033ae:	fb93 f3f2 	sdiv	r3, r3, r2
 80033b2:	b29a      	uxth	r2, r3
 80033b4:	4b09      	ldr	r3, [pc, #36]	@ (80033dc <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80033b6:	801a      	strh	r2, [r3, #0]
}
 80033b8:	bf00      	nop
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr
 80033c4:	20000395 	.word	0x20000395
 80033c8:	0003a980 	.word	0x0003a980
 80033cc:	200004f8 	.word	0x200004f8
 80033d0:	2000050c 	.word	0x2000050c
 80033d4:	000dbba0 	.word	0x000dbba0
 80033d8:	2000051c 	.word	0x2000051c
 80033dc:	20000528 	.word	0x20000528

080033e0 <_GLOBAL__sub_I_stateGpsLink>:
 80033e0:	b580      	push	{r7, lr}
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80033e8:	2001      	movs	r0, #1
 80033ea:	f7ff ffb5 	bl	8003358 <_Z41__static_initialization_and_destruction_0ii>
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <_Z10linkOutputv>:
extern wdTimeout loraTimeWd;	// Watchdog de Lorawan
extern bool flagTxLora;			// Indica que se envía un mensaje

/***** OUTPUT *****/

void linkOutput(){
 80033f0:	b580      	push	{r7, lr}
 80033f2:	af00      	add	r7, sp, #0
	linkOutLora();
 80033f4:	f000 f804 	bl	8003400 <_Z11linkOutLorav>
	linkOutGps();
 80033f8:	f000 f81c 	bl	8003434 <_Z10linkOutGpsv>
	//linkOutDisplay();
}
 80033fc:	bf00      	nop
 80033fe:	bd80      	pop	{r7, pc}

08003400 <_Z11linkOutLorav>:
/************************
 *****	LORA OUTPUT *****
 ************************
 *
 */
void linkOutLora(){
 8003400:	b580      	push	{r7, lr}
 8003402:	af00      	add	r7, sp, #0

	//////////////
	// SOFTWARE //
	//////////////

	if ( flagTxLora ){				// Si sale un comando
 8003404:	4b07      	ldr	r3, [pc, #28]	@ (8003424 <_Z11linkOutLorav+0x24>)
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d002      	beq.n	8003412 <_Z11linkOutLorav+0x12>
		loraTimeWd.setOutput();		// Se indica a wd
 800340c:	4806      	ldr	r0, [pc, #24]	@ (8003428 <_Z11linkOutLorav+0x28>)
 800340e:	f000 f9a0 	bl	8003752 <_ZN9wdTimeout9setOutputEv>

	//////////////
	// HARDWARE //
	//////////////

	if ( flagWdLora ){			// Si vence wd
 8003412:	4b06      	ldr	r3, [pc, #24]	@ (800342c <_Z11linkOutLorav+0x2c>)
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d002      	beq.n	8003420 <_Z11linkOutLorav+0x20>
		flagResetHwLora	= 1;	// Reinicia chip
 800341a:	4b05      	ldr	r3, [pc, #20]	@ (8003430 <_Z11linkOutLorav+0x30>)
 800341c:	2201      	movs	r2, #1
 800341e:	701a      	strb	r2, [r3, #0]
	}
}
 8003420:	bf00      	nop
 8003422:	bd80      	pop	{r7, pc}
 8003424:	200004e5 	.word	0x200004e5
 8003428:	20001078 	.word	0x20001078
 800342c:	2000052c 	.word	0x2000052c
 8003430:	2000052d 	.word	0x2000052d

08003434 <_Z10linkOutGpsv>:

/**********************
 ***** GPS OUTPUT *****
 **********************
 */
void linkOutGps(){
 8003434:	b480      	push	{r7}
 8003436:	af00      	add	r7, sp, #0

	if ( startGps ){		// Si se inicia Gps
 8003438:	4b0a      	ldr	r3, [pc, #40]	@ (8003464 <_Z10linkOutGpsv+0x30>)
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d002      	beq.n	8003446 <_Z10linkOutGpsv+0x12>
		enableGps	= 1;	// Habilita gps
 8003440:	4b09      	ldr	r3, [pc, #36]	@ (8003468 <_Z10linkOutGpsv+0x34>)
 8003442:	2201      	movs	r2, #1
 8003444:	701a      	strb	r2, [r3, #0]
	}

	if ( stopGps ){			// Si se detiene gps
 8003446:	4b09      	ldr	r3, [pc, #36]	@ (800346c <_Z10linkOutGpsv+0x38>)
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d005      	beq.n	800345a <_Z10linkOutGpsv+0x26>
		stopGps		= 0;	// Reinicia Flag
 800344e:	4b07      	ldr	r3, [pc, #28]	@ (800346c <_Z10linkOutGpsv+0x38>)
 8003450:	2200      	movs	r2, #0
 8003452:	701a      	strb	r2, [r3, #0]
		enableGps	= 0;	// Deshabilita gps
 8003454:	4b04      	ldr	r3, [pc, #16]	@ (8003468 <_Z10linkOutGpsv+0x34>)
 8003456:	2200      	movs	r2, #0
 8003458:	701a      	strb	r2, [r3, #0]
	}
}
 800345a:	bf00      	nop
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr
 8003464:	20000393 	.word	0x20000393
 8003468:	20000394 	.word	0x20000394
 800346c:	20000add 	.word	0x20000add

08003470 <_Z12setupLoraAppv>:

rn2903Command macSetCh8;
rn2903Command macSetCh9;
rn2903Command macSetCh10;

void setupLoraApp(){
 8003470:	b480      	push	{r7}
 8003472:	af00      	add	r7, sp, #0
	///////////////
	// SYS RESET //
	///////////////

	sysReset.command		= sysReset_RN2903;
 8003474:	4b57      	ldr	r3, [pc, #348]	@ (80035d4 <_Z12setupLoraAppv+0x164>)
 8003476:	4a58      	ldr	r2, [pc, #352]	@ (80035d8 <_Z12setupLoraAppv+0x168>)
 8003478:	605a      	str	r2, [r3, #4]
	sysReset.size			= sizeof( sysReset_RN2903 );
 800347a:	4b56      	ldr	r3, [pc, #344]	@ (80035d4 <_Z12setupLoraAppv+0x164>)
 800347c:	220c      	movs	r2, #12
 800347e:	701a      	strb	r2, [r3, #0]
	sysReset.responseSize	= 1;
 8003480:	4b54      	ldr	r3, [pc, #336]	@ (80035d4 <_Z12setupLoraAppv+0x164>)
 8003482:	2201      	movs	r2, #1
 8003484:	721a      	strb	r2, [r3, #8]

	///////////////////
	// RADIO SET MOD //
	///////////////////

	radioSetMod.command		= radioSetMod_RN2903;
 8003486:	4b55      	ldr	r3, [pc, #340]	@ (80035dc <_Z12setupLoraAppv+0x16c>)
 8003488:	4a55      	ldr	r2, [pc, #340]	@ (80035e0 <_Z12setupLoraAppv+0x170>)
 800348a:	605a      	str	r2, [r3, #4]
	radioSetMod.size		= sizeof( radioSetMod_RN2903 ) - 1;
 800348c:	4b53      	ldr	r3, [pc, #332]	@ (80035dc <_Z12setupLoraAppv+0x16c>)
 800348e:	2214      	movs	r2, #20
 8003490:	701a      	strb	r2, [r3, #0]
	radioSetMod.responseSize= 3;
 8003492:	4b52      	ldr	r3, [pc, #328]	@ (80035dc <_Z12setupLoraAppv+0x16c>)
 8003494:	2203      	movs	r2, #3
 8003496:	721a      	strb	r2, [r3, #8]

	//////////////////
	// RADIO SET SF //
	//////////////////

	radioSetSf.command		= radioSetSf_RN2903;
 8003498:	4b52      	ldr	r3, [pc, #328]	@ (80035e4 <_Z12setupLoraAppv+0x174>)
 800349a:	4a53      	ldr	r2, [pc, #332]	@ (80035e8 <_Z12setupLoraAppv+0x178>)
 800349c:	605a      	str	r2, [r3, #4]
	radioSetSf.size			= sizeof( radioSetSf_RN2903 ) - 1;
 800349e:	4b51      	ldr	r3, [pc, #324]	@ (80035e4 <_Z12setupLoraAppv+0x174>)
 80034a0:	2213      	movs	r2, #19
 80034a2:	701a      	strb	r2, [r3, #0]
	radioSetSf.responseSize	= 3;
 80034a4:	4b4f      	ldr	r3, [pc, #316]	@ (80035e4 <_Z12setupLoraAppv+0x174>)
 80034a6:	2203      	movs	r2, #3
 80034a8:	721a      	strb	r2, [r3, #8]

	//////////////////
	// RADIO SET BW //
	//////////////////

	radioSetBw.command		= radioSetBw_RN2903;
 80034aa:	4b50      	ldr	r3, [pc, #320]	@ (80035ec <_Z12setupLoraAppv+0x17c>)
 80034ac:	4a50      	ldr	r2, [pc, #320]	@ (80035f0 <_Z12setupLoraAppv+0x180>)
 80034ae:	605a      	str	r2, [r3, #4]
	radioSetBw.size			= sizeof( radioSetBw_RN2903 ) - 1;
 80034b0:	4b4e      	ldr	r3, [pc, #312]	@ (80035ec <_Z12setupLoraAppv+0x17c>)
 80034b2:	2212      	movs	r2, #18
 80034b4:	701a      	strb	r2, [r3, #0]
	radioSetBw.responseSize = 3;
 80034b6:	4b4d      	ldr	r3, [pc, #308]	@ (80035ec <_Z12setupLoraAppv+0x17c>)
 80034b8:	2203      	movs	r2, #3
 80034ba:	721a      	strb	r2, [r3, #8]

	///////////////////
	// RADIO SET PWR //
	///////////////////

	radioSetPwr.command		= radioSetPwr_RN2903;
 80034bc:	4b4d      	ldr	r3, [pc, #308]	@ (80035f4 <_Z12setupLoraAppv+0x184>)
 80034be:	4a4e      	ldr	r2, [pc, #312]	@ (80035f8 <_Z12setupLoraAppv+0x188>)
 80034c0:	605a      	str	r2, [r3, #4]
	radioSetPwr.size		= sizeof( radioSetPwr_RN2903 ) - 1;
 80034c2:	4b4c      	ldr	r3, [pc, #304]	@ (80035f4 <_Z12setupLoraAppv+0x184>)
 80034c4:	2212      	movs	r2, #18
 80034c6:	701a      	strb	r2, [r3, #0]
	radioSetPwr.responseSize= 3;
 80034c8:	4b4a      	ldr	r3, [pc, #296]	@ (80035f4 <_Z12setupLoraAppv+0x184>)
 80034ca:	2203      	movs	r2, #3
 80034cc:	721a      	strb	r2, [r3, #8]

	////////////////////
	// MAC SET DEVEUI //
	////////////////////

	macSetDeveui.command	= macSetDevEui_RN2903;
 80034ce:	4b4b      	ldr	r3, [pc, #300]	@ (80035fc <_Z12setupLoraAppv+0x18c>)
 80034d0:	4a4b      	ldr	r2, [pc, #300]	@ (8003600 <_Z12setupLoraAppv+0x190>)
 80034d2:	605a      	str	r2, [r3, #4]
	macSetDeveui.size		= sizeof( macSetDevEui_RN2903 ) - 1;
 80034d4:	4b49      	ldr	r3, [pc, #292]	@ (80035fc <_Z12setupLoraAppv+0x18c>)
 80034d6:	2220      	movs	r2, #32
 80034d8:	701a      	strb	r2, [r3, #0]
	macSetDeveui.responseSize	= 3;
 80034da:	4b48      	ldr	r3, [pc, #288]	@ (80035fc <_Z12setupLoraAppv+0x18c>)
 80034dc:	2203      	movs	r2, #3
 80034de:	721a      	strb	r2, [r3, #8]

	/////////////////////////
	// MAC SET NETWORK KEY //
	/////////////////////////

	macSetNwkskey.command	= macSetNwkskey_RN2903;
 80034e0:	4b48      	ldr	r3, [pc, #288]	@ (8003604 <_Z12setupLoraAppv+0x194>)
 80034e2:	4a49      	ldr	r2, [pc, #292]	@ (8003608 <_Z12setupLoraAppv+0x198>)
 80034e4:	605a      	str	r2, [r3, #4]
	macSetNwkskey.size		= sizeof( macSetNwkskey_RN2903 ) - 1;
 80034e6:	4b47      	ldr	r3, [pc, #284]	@ (8003604 <_Z12setupLoraAppv+0x194>)
 80034e8:	2232      	movs	r2, #50	@ 0x32
 80034ea:	701a      	strb	r2, [r3, #0]
	macSetNwkskey.responseSize	= 3;
 80034ec:	4b45      	ldr	r3, [pc, #276]	@ (8003604 <_Z12setupLoraAppv+0x194>)
 80034ee:	2203      	movs	r2, #3
 80034f0:	721a      	strb	r2, [r3, #8]

	//////////////////////
	// MAC SET APPS KEY //
	//////////////////////

	macSetAppskey.command	= macSetAppskey_RN2903;
 80034f2:	4b46      	ldr	r3, [pc, #280]	@ (800360c <_Z12setupLoraAppv+0x19c>)
 80034f4:	4a46      	ldr	r2, [pc, #280]	@ (8003610 <_Z12setupLoraAppv+0x1a0>)
 80034f6:	605a      	str	r2, [r3, #4]
	macSetAppskey.size		= sizeof( macSetAppskey_RN2903 ) - 1;
 80034f8:	4b44      	ldr	r3, [pc, #272]	@ (800360c <_Z12setupLoraAppv+0x19c>)
 80034fa:	2232      	movs	r2, #50	@ 0x32
 80034fc:	701a      	strb	r2, [r3, #0]
	macSetAppskey.responseSize	= 3;
 80034fe:	4b43      	ldr	r3, [pc, #268]	@ (800360c <_Z12setupLoraAppv+0x19c>)
 8003500:	2203      	movs	r2, #3
 8003502:	721a      	strb	r2, [r3, #8]

	/////////////////////////
	// MAC SET DEV ADDRESS //
	/////////////////////////

	macSetDevAddr.command		= macSetDevAddr_RN2903;
 8003504:	4b43      	ldr	r3, [pc, #268]	@ (8003614 <_Z12setupLoraAppv+0x1a4>)
 8003506:	4a44      	ldr	r2, [pc, #272]	@ (8003618 <_Z12setupLoraAppv+0x1a8>)
 8003508:	605a      	str	r2, [r3, #4]
	macSetDevAddr.size			= sizeof ( macSetDevAddr_RN2903 ) - 1;
 800350a:	4b42      	ldr	r3, [pc, #264]	@ (8003614 <_Z12setupLoraAppv+0x1a4>)
 800350c:	221a      	movs	r2, #26
 800350e:	701a      	strb	r2, [r3, #0]
	macSetDevAddr.responseSize	= 2;
 8003510:	4b40      	ldr	r3, [pc, #256]	@ (8003614 <_Z12setupLoraAppv+0x1a4>)
 8003512:	2202      	movs	r2, #2
 8003514:	721a      	strb	r2, [r3, #8]

	///////////////////
	// MAC JOIN OTAA //
	///////////////////

	macJoinOtaa.command			= macJoinOtaa_RN2903;
 8003516:	4b41      	ldr	r3, [pc, #260]	@ (800361c <_Z12setupLoraAppv+0x1ac>)
 8003518:	4a41      	ldr	r2, [pc, #260]	@ (8003620 <_Z12setupLoraAppv+0x1b0>)
 800351a:	605a      	str	r2, [r3, #4]
	macJoinOtaa.size			= sizeof ( macJoinOtaa_RN2903 ) - 1;
 800351c:	4b3f      	ldr	r3, [pc, #252]	@ (800361c <_Z12setupLoraAppv+0x1ac>)
 800351e:	220f      	movs	r2, #15
 8003520:	701a      	strb	r2, [r3, #0]
	macJoinOtaa.responseSize	= 7;
 8003522:	4b3e      	ldr	r3, [pc, #248]	@ (800361c <_Z12setupLoraAppv+0x1ac>)
 8003524:	2207      	movs	r2, #7
 8003526:	721a      	strb	r2, [r3, #8]

	//////////////////
	// MAC JOIN ABP //
	//////////////////

	macJoinAbp.command		= macJoinAbp_RN2903;
 8003528:	4b3e      	ldr	r3, [pc, #248]	@ (8003624 <_Z12setupLoraAppv+0x1b4>)
 800352a:	4a3f      	ldr	r2, [pc, #252]	@ (8003628 <_Z12setupLoraAppv+0x1b8>)
 800352c:	605a      	str	r2, [r3, #4]
	macJoinAbp.size			= sizeof( macJoinAbp_RN2903 ) - 1;
 800352e:	4b3d      	ldr	r3, [pc, #244]	@ (8003624 <_Z12setupLoraAppv+0x1b4>)
 8003530:	220e      	movs	r2, #14
 8003532:	701a      	strb	r2, [r3, #0]
	macJoinAbp.responseSize	= 2;
 8003534:	4b3b      	ldr	r3, [pc, #236]	@ (8003624 <_Z12setupLoraAppv+0x1b4>)
 8003536:	2202      	movs	r2, #2
 8003538:	721a      	strb	r2, [r3, #8]

	//////////////////
	// MAC SET SYNC //
	//////////////////

	macSetSync.command		= macSetSync_RN2903;
 800353a:	4b3c      	ldr	r3, [pc, #240]	@ (800362c <_Z12setupLoraAppv+0x1bc>)
 800353c:	4a3c      	ldr	r2, [pc, #240]	@ (8003630 <_Z12setupLoraAppv+0x1c0>)
 800353e:	605a      	str	r2, [r3, #4]
	macSetSync.size			= sizeof( macSetSync_RN2903 ) - 1;
 8003540:	4b3a      	ldr	r3, [pc, #232]	@ (800362c <_Z12setupLoraAppv+0x1bc>)
 8003542:	2211      	movs	r2, #17
 8003544:	701a      	strb	r2, [r3, #0]
	macSetSync.responseSize	= 3;
 8003546:	4b39      	ldr	r3, [pc, #228]	@ (800362c <_Z12setupLoraAppv+0x1bc>)
 8003548:	2203      	movs	r2, #3
 800354a:	721a      	strb	r2, [r3, #8]

	//////////////
	// MAC SAVE //
	//////////////

	macSave.command			= macSave_RN2903;
 800354c:	4b39      	ldr	r3, [pc, #228]	@ (8003634 <_Z12setupLoraAppv+0x1c4>)
 800354e:	4a3a      	ldr	r2, [pc, #232]	@ (8003638 <_Z12setupLoraAppv+0x1c8>)
 8003550:	605a      	str	r2, [r3, #4]
	macSave.size			= sizeof( macSave_RN2903 ) - 1;
 8003552:	4b38      	ldr	r3, [pc, #224]	@ (8003634 <_Z12setupLoraAppv+0x1c4>)
 8003554:	220a      	movs	r2, #10
 8003556:	701a      	strb	r2, [r3, #0]
	macSave.responseSize	= 3;
 8003558:	4b36      	ldr	r3, [pc, #216]	@ (8003634 <_Z12setupLoraAppv+0x1c4>)
 800355a:	2203      	movs	r2, #3
 800355c:	721a      	strb	r2, [r3, #8]

	/////////////////
	// MAC TX DATA //
	/////////////////

	 macTxData.command		= macTxData_RN2903;
 800355e:	4b37      	ldr	r3, [pc, #220]	@ (800363c <_Z12setupLoraAppv+0x1cc>)
 8003560:	4a37      	ldr	r2, [pc, #220]	@ (8003640 <_Z12setupLoraAppv+0x1d0>)
 8003562:	605a      	str	r2, [r3, #4]
	 macTxData.size			= sizeof( macTxData_RN2903 ) - 1;
 8003564:	4b35      	ldr	r3, [pc, #212]	@ (800363c <_Z12setupLoraAppv+0x1cc>)
 8003566:	2219      	movs	r2, #25
 8003568:	701a      	strb	r2, [r3, #0]
	 macTxData.responseSize	= 14;
 800356a:	4b34      	ldr	r3, [pc, #208]	@ (800363c <_Z12setupLoraAppv+0x1cc>)
 800356c:	220e      	movs	r2, #14
 800356e:	721a      	strb	r2, [r3, #8]

	 /////////////////
	 // MAC TX DATA //
	 /////////////////

	 macTxGps.command		= macTxGps_RN2903;
 8003570:	4b34      	ldr	r3, [pc, #208]	@ (8003644 <_Z12setupLoraAppv+0x1d4>)
 8003572:	4a35      	ldr	r2, [pc, #212]	@ (8003648 <_Z12setupLoraAppv+0x1d8>)
 8003574:	605a      	str	r2, [r3, #4]
	 macTxGps.size			= sizeof( macTxGps_RN2903 ) - 1;
 8003576:	4b33      	ldr	r3, [pc, #204]	@ (8003644 <_Z12setupLoraAppv+0x1d4>)
 8003578:	2219      	movs	r2, #25
 800357a:	701a      	strb	r2, [r3, #0]
	 macTxGps.responseSize	= 14;
 800357c:	4b31      	ldr	r3, [pc, #196]	@ (8003644 <_Z12setupLoraAppv+0x1d4>)
 800357e:	220e      	movs	r2, #14
 8003580:	721a      	strb	r2, [r3, #8]

	 /////////////////
	 // MAC TX DATA //
	 /////////////////

	  macTxSys.command		= macTxSys_RN2903;
 8003582:	4b32      	ldr	r3, [pc, #200]	@ (800364c <_Z12setupLoraAppv+0x1dc>)
 8003584:	4a32      	ldr	r2, [pc, #200]	@ (8003650 <_Z12setupLoraAppv+0x1e0>)
 8003586:	605a      	str	r2, [r3, #4]
	  macTxSys.size			= sizeof( macTxSys_RN2903 ) - 1;
 8003588:	4b30      	ldr	r3, [pc, #192]	@ (800364c <_Z12setupLoraAppv+0x1dc>)
 800358a:	2215      	movs	r2, #21
 800358c:	701a      	strb	r2, [r3, #0]
	  macTxSys.responseSize	= 14;
 800358e:	4b2f      	ldr	r3, [pc, #188]	@ (800364c <_Z12setupLoraAppv+0x1dc>)
 8003590:	220e      	movs	r2, #14
 8003592:	721a      	strb	r2, [r3, #8]

	  //////////////////
	  // MAC SET CH 8 //
	  //////////////////

	  macSetCh8.command		= macSetCh8_RN2903;
 8003594:	4b2f      	ldr	r3, [pc, #188]	@ (8003654 <_Z12setupLoraAppv+0x1e4>)
 8003596:	4a30      	ldr	r2, [pc, #192]	@ (8003658 <_Z12setupLoraAppv+0x1e8>)
 8003598:	605a      	str	r2, [r3, #4]
	  macSetCh8.size		= sizeof( macSetCh8_RN2903 ) - 1;
 800359a:	4b2e      	ldr	r3, [pc, #184]	@ (8003654 <_Z12setupLoraAppv+0x1e4>)
 800359c:	2219      	movs	r2, #25
 800359e:	701a      	strb	r2, [r3, #0]
	  macSetCh8.responseSize	= 9;
 80035a0:	4b2c      	ldr	r3, [pc, #176]	@ (8003654 <_Z12setupLoraAppv+0x1e4>)
 80035a2:	2209      	movs	r2, #9
 80035a4:	721a      	strb	r2, [r3, #8]

	  //////////////////
	  // MAC SET CH 9 //
	  //////////////////

	  macSetCh9.command		= macSetCh9_RN2903;
 80035a6:	4b2d      	ldr	r3, [pc, #180]	@ (800365c <_Z12setupLoraAppv+0x1ec>)
 80035a8:	4a2d      	ldr	r2, [pc, #180]	@ (8003660 <_Z12setupLoraAppv+0x1f0>)
 80035aa:	605a      	str	r2, [r3, #4]
	  macSetCh9.size		= sizeof( macSetCh9_RN2903 ) - 1;
 80035ac:	4b2b      	ldr	r3, [pc, #172]	@ (800365c <_Z12setupLoraAppv+0x1ec>)
 80035ae:	2219      	movs	r2, #25
 80035b0:	701a      	strb	r2, [r3, #0]
	  macSetCh9.responseSize	= 9;
 80035b2:	4b2a      	ldr	r3, [pc, #168]	@ (800365c <_Z12setupLoraAppv+0x1ec>)
 80035b4:	2209      	movs	r2, #9
 80035b6:	721a      	strb	r2, [r3, #8]

	  ///////////////////
	  // MAC SET CH 10 //
	  ///////////////////
	  macSetCh10.command		= macSetCh10_RN2903;
 80035b8:	4b2a      	ldr	r3, [pc, #168]	@ (8003664 <_Z12setupLoraAppv+0x1f4>)
 80035ba:	4a2b      	ldr	r2, [pc, #172]	@ (8003668 <_Z12setupLoraAppv+0x1f8>)
 80035bc:	605a      	str	r2, [r3, #4]
	  macSetCh10.size			= sizeof( macSetCh10_RN2903 ) - 1;
 80035be:	4b29      	ldr	r3, [pc, #164]	@ (8003664 <_Z12setupLoraAppv+0x1f4>)
 80035c0:	221a      	movs	r2, #26
 80035c2:	701a      	strb	r2, [r3, #0]
	  macSetCh10.responseSize	= 9;
 80035c4:	4b27      	ldr	r3, [pc, #156]	@ (8003664 <_Z12setupLoraAppv+0x1f4>)
 80035c6:	2209      	movs	r2, #9
 80035c8:	721a      	strb	r2, [r3, #8]

}
 80035ca:	bf00      	nop
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr
 80035d4:	20000530 	.word	0x20000530
 80035d8:	200001a8 	.word	0x200001a8
 80035dc:	2000053c 	.word	0x2000053c
 80035e0:	200001b4 	.word	0x200001b4
 80035e4:	20000548 	.word	0x20000548
 80035e8:	200001cc 	.word	0x200001cc
 80035ec:	20000554 	.word	0x20000554
 80035f0:	200001e0 	.word	0x200001e0
 80035f4:	20000560 	.word	0x20000560
 80035f8:	200001f4 	.word	0x200001f4
 80035fc:	2000056c 	.word	0x2000056c
 8003600:	20000208 	.word	0x20000208
 8003604:	20000584 	.word	0x20000584
 8003608:	20000248 	.word	0x20000248
 800360c:	20000590 	.word	0x20000590
 8003610:	2000027c 	.word	0x2000027c
 8003614:	20000578 	.word	0x20000578
 8003618:	2000022c 	.word	0x2000022c
 800361c:	2000059c 	.word	0x2000059c
 8003620:	200002b0 	.word	0x200002b0
 8003624:	200005a8 	.word	0x200005a8
 8003628:	200002c0 	.word	0x200002c0
 800362c:	200005b4 	.word	0x200005b4
 8003630:	200002d0 	.word	0x200002d0
 8003634:	200005c0 	.word	0x200005c0
 8003638:	200002e4 	.word	0x200002e4
 800363c:	200005cc 	.word	0x200005cc
 8003640:	200002f0 	.word	0x200002f0
 8003644:	200005d8 	.word	0x200005d8
 8003648:	2000030c 	.word	0x2000030c
 800364c:	200005e4 	.word	0x200005e4
 8003650:	20000328 	.word	0x20000328
 8003654:	200005f0 	.word	0x200005f0
 8003658:	20000340 	.word	0x20000340
 800365c:	200005fc 	.word	0x200005fc
 8003660:	2000035c 	.word	0x2000035c
 8003664:	20000608 	.word	0x20000608
 8003668:	20000378 	.word	0x20000378

0800366c <_ZN10loraRutine10addCommandEP13rn2903Command>:

/////////////////
// ADD COMMAND //
/////////////////

void loraRutine::addCommand ( rn2903Command *command ){
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
	this->listCommands[ this->sizeList ]	= command;	// AÑADE PUNTERO A LISTA
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f893 3191 	ldrb.w	r3, [r3, #401]	@ 0x191
 800367c:	4619      	mov	r1, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	683a      	ldr	r2, [r7, #0]
 8003682:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	this->sizeList++;									// Suma 1 al largo de lista
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f893 3191 	ldrb.w	r3, [r3, #401]	@ 0x191
 800368c:	3301      	adds	r3, #1
 800368e:	b2da      	uxtb	r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f883 2191 	strb.w	r2, [r3, #401]	@ 0x191
}
 8003696:	bf00      	nop
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr

080036a2 <_ZN10loraRutine7commandEv>:

/////////////
// COMMAND //
/////////////

rn2903Command *loraRutine::command(){
 80036a2:	b480      	push	{r7}
 80036a4:	b085      	sub	sp, #20
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
	uint8_t count	= this->actual;			// Copia elemento actual de rutina
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 80036b0:	73fb      	strb	r3, [r7, #15]

	this->actual++;							// Suma 1 al elemento actuañ
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 80036b8:	3301      	adds	r3, #1
 80036ba:	b2da      	uxtb	r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f883 2192 	strb.w	r2, [r3, #402]	@ 0x192

	if (this->actual >= this->sizeList){	// Si es el ultimo de la lista
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f893 2192 	ldrb.w	r2, [r3, #402]	@ 0x192
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f893 3191 	ldrb.w	r3, [r3, #401]	@ 0x191
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d307      	bcc.n	80036e2 <_ZN10loraRutine7commandEv+0x40>
		this->actual	= 0;				// Reinicia la lista
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 2192 	strb.w	r2, [r3, #402]	@ 0x192
		this->stopped	= 1;				// Indica que es el ultimo elemento
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2201      	movs	r2, #1
 80036de:	f883 2190 	strb.w	r2, [r3, #400]	@ 0x190
	}
	return this->listCommands[count];		// Retorta puntero
 80036e2:	7bfa      	ldrb	r2, [r7, #15]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3714      	adds	r7, #20
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr

080036f6 <_ZN10loraRutine5resetEv>:

///////////
// RESET //
///////////

void loraRutine::reset(){
 80036f6:	b480      	push	{r7}
 80036f8:	b083      	sub	sp, #12
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
	this->actual	= 0;	// Reinicia contador de lista
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 2192 	strb.w	r2, [r3, #402]	@ 0x192
	this->stopped	= 0;	// No esta en el ultimo elemento
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 2190 	strb.w	r2, [r3, #400]	@ 0x190
}
 800370e:	bf00      	nop
 8003710:	370c      	adds	r7, #12
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr

0800371a <_ZN10loraRutine6finishEv>:

////////////
// FINISH //
////////////
bool loraRutine::finish(){
 800371a:	b480      	push	{r7}
 800371c:	b083      	sub	sp, #12
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
	return this->stopped;	// Indica si es el ultimo elemento
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f893 3190 	ldrb.w	r3, [r3, #400]	@ 0x190

}
 8003728:	4618      	mov	r0, r3
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <_ZN9wdTimeoutC1El>:
 *		5.- newMessage:	Indica si se recibió un mensaje
 *		6.- timeout:	Indica si hubo un timeout
 *
 */

wdTimeout::wdTimeout( long limit ){	// Constructor
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
	this->limit	= limit;			// Se debe fijar el limite de timeout
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	683a      	ldr	r2, [r7, #0]
 8003742:	609a      	str	r2, [r3, #8]
}
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4618      	mov	r0, r3
 8003748:	370c      	adds	r7, #12
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr

08003752 <_ZN9wdTimeout9setOutputEv>:

////////////////
// SET OUTPUT //
////////////////

void wdTimeout::setOutput(){	//
 8003752:	b480      	push	{r7}
 8003754:	b083      	sub	sp, #12
 8003756:	af00      	add	r7, sp, #0
 8003758:	6078      	str	r0, [r7, #4]
	this->flagOutput	= 1;	// Indica que salió un comando
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2201      	movs	r2, #1
 800375e:	705a      	strb	r2, [r3, #1]
	this->counter		= 0;	// Reinicia contador
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	605a      	str	r2, [r3, #4]
}
 8003766:	bf00      	nop
 8003768:	370c      	adds	r7, #12
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr

08003772 <_ZN9wdTimeout6addOneEv>:

/////////////
// ADD ONE //
/////////////

void wdTimeout::addOne(){
 8003772:	b480      	push	{r7}
 8003774:	b083      	sub	sp, #12
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
	if ( this->flagOutput ){			// Si salió un comando
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	785b      	ldrb	r3, [r3, #1]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d004      	beq.n	800378c <_ZN9wdTimeout6addOneEv+0x1a>
		this->counter++;				// Suma uno al contador
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	1c5a      	adds	r2, r3, #1
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	605a      	str	r2, [r3, #4]
	}

	if (this->counter >= this->limit ){	// Si pasa el límite
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685a      	ldr	r2, [r3, #4]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	429a      	cmp	r2, r3
 8003796:	db03      	blt.n	80037a0 <_ZN9wdTimeout6addOneEv+0x2e>
		this->flagTimeout	= 1;		// Se considera timeout
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	709a      	strb	r2, [r3, #2]
	}
	else{								// Si no
		this->flagTimeout	= 0;		// No indica timeout
	}
}
 800379e:	e002      	b.n	80037a6 <_ZN9wdTimeout6addOneEv+0x34>
		this->flagTimeout	= 0;		// No indica timeout
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	709a      	strb	r2, [r3, #2]
}
 80037a6:	bf00      	nop
 80037a8:	370c      	adds	r7, #12
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr

080037b2 <_ZN9wdTimeout8setInputEv>:

///////////////
// SET INPUT //
///////////////

void wdTimeout::setInput(){
 80037b2:	b480      	push	{r7}
 80037b4:	b083      	sub	sp, #12
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
	this->flagInput		= this->flagOutput;		// Copia indicador salida de comando )
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	785a      	ldrb	r2, [r3, #1]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	701a      	strb	r2, [r3, #0]
												// Si hay multiples respuestas toma sentido
	this->flagOutput	= 0;					// Reinicia indicador de salida comando
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	705a      	strb	r2, [r3, #1]
	this->counter		= 0;					// Reinicia contador
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	605a      	str	r2, [r3, #4]
}
 80037ce:	bf00      	nop
 80037d0:	370c      	adds	r7, #12
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr

080037da <_ZN9wdTimeout7timeOutEv>:

/////////////
// TIMEOUT //
/////////////

bool wdTimeout::timeOut(){
 80037da:	b480      	push	{r7}
 80037dc:	b085      	sub	sp, #20
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
	bool flag			= this->flagTimeout;	// Copia indicador timeout
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	789b      	ldrb	r3, [r3, #2]
 80037e6:	73fb      	strb	r3, [r7, #15]
	this->flagTimeout	= 0;					// Reinicia indicador timeout
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	709a      	strb	r2, [r3, #2]
	return flag;								// Retorna valor guardado
 80037ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3714      	adds	r7, #20
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <_ZN9loraCheck18setResponsePointerEPPhh>:

//////////////////////////
// SET RESPONSE POINTER //
//////////////////////////

void loraCheck::setResponsePointer( uint8_t *pointer[], uint8_t sizeIdealResponses ){
 80037fc:	b480      	push	{r7}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	4613      	mov	r3, r2
 8003808:	71fb      	strb	r3, [r7, #7]
	this->idealResponses		= &pointer[0];
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	68ba      	ldr	r2, [r7, #8]
 800380e:	609a      	str	r2, [r3, #8]
	this->sizeIdealResponses	= sizeIdealResponses;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	79fa      	ldrb	r2, [r7, #7]
 8003814:	731a      	strb	r2, [r3, #12]
}
 8003816:	bf00      	nop
 8003818:	3714      	adds	r7, #20
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr

08003822 <_ZN9loraCheck17setIdealResponsesEh>:

////////////////////////
// SET IDEAL RESPONSE //
////////////////////////

void loraCheck::setIdealResponses( uint8_t qtty ){
 8003822:	b480      	push	{r7}
 8003824:	b083      	sub	sp, #12
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
 800382a:	460b      	mov	r3, r1
 800382c:	70fb      	strb	r3, [r7, #3]
	this->qtty				= qtty;				// Copia el largo del arreglo
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	78fa      	ldrb	r2, [r7, #3]
 8003832:	705a      	strb	r2, [r3, #1]
}
 8003834:	bf00      	nop
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <_ZN9loraCheck11newResponseEPhh>:

//////////////////
// NEW RESPONSE //
//////////////////

void loraCheck::newResponse( uint8_t *response, uint8_t sizeResponse ){
 8003840:	b480      	push	{r7}
 8003842:	b087      	sub	sp, #28
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	4613      	mov	r3, r2
 800384c:	71fb      	strb	r3, [r7, #7]
	this->realResponse	= response;			// Copia la respuesta entregada por el modulo
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	68ba      	ldr	r2, [r7, #8]
 8003852:	611a      	str	r2, [r3, #16]
	this->sizeResponse	= sizeResponse;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	79fa      	ldrb	r2, [r7, #7]
 8003858:	701a      	strb	r2, [r3, #0]

	uint8_t i;	// Crea variable auxiliar
	uint8_t j;

	for( i = 0; i < this->qtty; i++ ){								// Recorre el arreglo con for
 800385a:	2300      	movs	r3, #0
 800385c:	75fb      	strb	r3, [r7, #23]
 800385e:	e029      	b.n	80038b4 <_ZN9loraCheck11newResponseEPhh+0x74>
		for ( j = 0; j < this->sizeResponse; j++ ){
 8003860:	2300      	movs	r3, #0
 8003862:	75bb      	strb	r3, [r7, #22]
 8003864:	e01a      	b.n	800389c <_ZN9loraCheck11newResponseEPhh+0x5c>
			if ( *(this->idealResponses[i] + j) == this->realResponse[j]){
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	689a      	ldr	r2, [r3, #8]
 800386a:	7dfb      	ldrb	r3, [r7, #23]
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	4413      	add	r3, r2
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	7dbb      	ldrb	r3, [r7, #22]
 8003874:	4413      	add	r3, r2
 8003876:	781a      	ldrb	r2, [r3, #0]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6919      	ldr	r1, [r3, #16]
 800387c:	7dbb      	ldrb	r3, [r7, #22]
 800387e:	440b      	add	r3, r1
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	429a      	cmp	r2, r3
 8003884:	d103      	bne.n	800388e <_ZN9loraCheck11newResponseEPhh+0x4e>
				this->flagCorrect	= 1;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2201      	movs	r2, #1
 800388a:	70da      	strb	r2, [r3, #3]
 800388c:	e003      	b.n	8003896 <_ZN9loraCheck11newResponseEPhh+0x56>
			}
			else{
				this->flagCorrect	= 0;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	70da      	strb	r2, [r3, #3]
				break;
 8003894:	e007      	b.n	80038a6 <_ZN9loraCheck11newResponseEPhh+0x66>
		for ( j = 0; j < this->sizeResponse; j++ ){
 8003896:	7dbb      	ldrb	r3, [r7, #22]
 8003898:	3301      	adds	r3, #1
 800389a:	75bb      	strb	r3, [r7, #22]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	7dba      	ldrb	r2, [r7, #22]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d3df      	bcc.n	8003866 <_ZN9loraCheck11newResponseEPhh+0x26>
			}
		}
		if (this->flagCorrect){
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	78db      	ldrb	r3, [r3, #3]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d108      	bne.n	80038c0 <_ZN9loraCheck11newResponseEPhh+0x80>
	for( i = 0; i < this->qtty; i++ ){								// Recorre el arreglo con for
 80038ae:	7dfb      	ldrb	r3, [r7, #23]
 80038b0:	3301      	adds	r3, #1
 80038b2:	75fb      	strb	r3, [r7, #23]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	785b      	ldrb	r3, [r3, #1]
 80038b8:	7dfa      	ldrb	r2, [r7, #23]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d3d0      	bcc.n	8003860 <_ZN9loraCheck11newResponseEPhh+0x20>
 80038be:	e000      	b.n	80038c2 <_ZN9loraCheck11newResponseEPhh+0x82>
			break;
 80038c0:	bf00      	nop
		}
	}

	this->position	= i;											// Copia posicion final
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	7dfa      	ldrb	r2, [r7, #23]
 80038c6:	709a      	strb	r2, [r3, #2]
	this->flagCheck	= 1;											// Indica que hay nuevo resultado
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2201      	movs	r2, #1
 80038cc:	711a      	strb	r2, [r3, #4]
}
 80038ce:	bf00      	nop
 80038d0:	371c      	adds	r7, #28
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr

080038da <_ZN9loraCheck5checkEv>:

////////////////////
// CHECK RESPONSE //
////////////////////

bool loraCheck::check(){
 80038da:	b480      	push	{r7}
 80038dc:	b085      	sub	sp, #20
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
	bool flag;							// Crea variable auxiliar
	flag			= this->flagCheck;	// Copia resultado de flag
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	791b      	ldrb	r3, [r3, #4]
 80038e6:	73fb      	strb	r3, [r7, #15]
	this->flagCheck	= 0;				// Reinicia el indicador de nuevo resultado
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	711a      	strb	r2, [r3, #4]

	return 	flag;						// Entrega resultado
 80038ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3714      	adds	r7, #20
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <_ZN9loraCheck8responseEv>:

//////////////
// RESPONSE //
//////////////

uint8_t loraCheck::response(){
 80038fc:	b480      	push	{r7}
 80038fe:	b085      	sub	sp, #20
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
	uint8_t	finalResult;				// Crea variable auxiliar
	uint8_t i;

	if (this->flagCorrect){				// Si hubo respuesta correcta
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	78db      	ldrb	r3, [r3, #3]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d003      	beq.n	8003914 <_ZN9loraCheck8responseEv+0x18>
		finalResult	= this->position;	// Copia posición
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	789b      	ldrb	r3, [r3, #2]
 8003910:	73fb      	strb	r3, [r7, #15]
 8003912:	e001      	b.n	8003918 <_ZN9loraCheck8responseEv+0x1c>
	}
	else{								// Si no
		finalResult	= 99;				// Entrega 99
 8003914:	2363      	movs	r3, #99	@ 0x63
 8003916:	73fb      	strb	r3, [r7, #15]
	}
	finalResult = this->position;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	789b      	ldrb	r3, [r3, #2]
 800391c:	73fb      	strb	r3, [r7, #15]

	if ( this->sizeResponse > 30 ){
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	2b1e      	cmp	r3, #30
 8003924:	d91c      	bls.n	8003960 <_ZN9loraCheck8responseEv+0x64>
		for (i = 0; i < this->sizeResponse-1; i++){
 8003926:	2300      	movs	r3, #0
 8003928:	73bb      	strb	r3, [r7, #14]
 800392a:	e013      	b.n	8003954 <_ZN9loraCheck8responseEv+0x58>
			if ( this->realResponse[i] == 'R' && this->realResponse[i+1] == 'N'){
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	691a      	ldr	r2, [r3, #16]
 8003930:	7bbb      	ldrb	r3, [r7, #14]
 8003932:	4413      	add	r3, r2
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	2b52      	cmp	r3, #82	@ 0x52
 8003938:	d109      	bne.n	800394e <_ZN9loraCheck8responseEv+0x52>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	691a      	ldr	r2, [r3, #16]
 800393e:	7bbb      	ldrb	r3, [r7, #14]
 8003940:	3301      	adds	r3, #1
 8003942:	4413      	add	r3, r2
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	2b4e      	cmp	r3, #78	@ 0x4e
 8003948:	d101      	bne.n	800394e <_ZN9loraCheck8responseEv+0x52>
				finalResult	= 98;
 800394a:	2362      	movs	r3, #98	@ 0x62
 800394c:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < this->sizeResponse-1; i++){
 800394e:	7bbb      	ldrb	r3, [r7, #14]
 8003950:	3301      	adds	r3, #1
 8003952:	73bb      	strb	r3, [r7, #14]
 8003954:	7bba      	ldrb	r2, [r7, #14]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	3b01      	subs	r3, #1
 800395c:	429a      	cmp	r2, r3
 800395e:	dbe5      	blt.n	800392c <_ZN9loraCheck8responseEv+0x30>
			}
		}
	}

	return finalResult;					// Retorna decisión
 8003960:	7bfb      	ldrb	r3, [r7, #15]
}
 8003962:	4618      	mov	r0, r3
 8003964:	3714      	adds	r7, #20
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr

0800396e <_ZN9loraInput12insertBufferEPhh>:

///////////////////
// INSERT BUFFER //
///////////////////

void loraInput::insertBuffer(uint8_t *buffer, uint8_t sizeBuffer){
 800396e:	b480      	push	{r7}
 8003970:	b085      	sub	sp, #20
 8003972:	af00      	add	r7, sp, #0
 8003974:	60f8      	str	r0, [r7, #12]
 8003976:	60b9      	str	r1, [r7, #8]
 8003978:	4613      	mov	r3, r2
 800397a:	71fb      	strb	r3, [r7, #7]
	this->buffer		= buffer;		// Guarda puntero inicial del buffer
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	68ba      	ldr	r2, [r7, #8]
 8003980:	605a      	str	r2, [r3, #4]
	this->sizeBuffer	= sizeBuffer;	// Guarda tamaño del buffer
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	79fa      	ldrb	r2, [r7, #7]
 8003986:	721a      	strb	r2, [r3, #8]
}
 8003988:	bf00      	nop
 800398a:	3714      	adds	r7, #20
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <_ZN9loraInput13insertElementEh>:

////////////////////
// INSERT ELEMENT //
////////////////////

void loraInput::insertElement(uint8_t element){
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	460b      	mov	r3, r1
 800399e:	70fb      	strb	r3, [r7, #3]
	if (element == '\n'){							// Si llega un salto de linea
 80039a0:	78fb      	ldrb	r3, [r7, #3]
 80039a2:	2b0a      	cmp	r3, #10
 80039a4:	d10c      	bne.n	80039c0 <_ZN9loraInput13insertElementEh+0x2c>
		this->sizeResponse		= this->count;		// Guarda tamaño de la respuesta
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	781a      	ldrb	r2, [r3, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
		this->count				= 0;				// Reinicia contador
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	701a      	strb	r2, [r3, #0]
		this->flagNewResponse	= 1;				// Indica que llego mensaje nuevo
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2201      	movs	r2, #1
 80039ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
			this->count	= 0;						// Reinicia buffer
		}
		this->buffer[this->count]	= element;	// Copia elemento en buffer
		this->count++;
	}
}
 80039be:	e015      	b.n	80039ec <_ZN9loraInput13insertElementEh+0x58>
		if (this->count >= this->sizeBuffer){		// Si el contador se pasa del buffero
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	781a      	ldrb	r2, [r3, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	7a1b      	ldrb	r3, [r3, #8]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d302      	bcc.n	80039d2 <_ZN9loraInput13insertElementEh+0x3e>
			this->count	= 0;						// Reinicia buffer
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	701a      	strb	r2, [r3, #0]
		this->buffer[this->count]	= element;	// Copia elemento en buffer
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	7812      	ldrb	r2, [r2, #0]
 80039da:	4413      	add	r3, r2
 80039dc:	78fa      	ldrb	r2, [r7, #3]
 80039de:	701a      	strb	r2, [r3, #0]
		this->count++;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	3301      	adds	r3, #1
 80039e6:	b2da      	uxtb	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	701a      	strb	r2, [r3, #0]
}
 80039ec:	bf00      	nop
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <_ZN9loraInput11newResponseEv>:

//////////////////
// NEW RESPONSE //
//////////////////

bool loraInput::newResponse(){						// Se reinicia cuando es consultado
 80039f8:	b480      	push	{r7}
 80039fa:	b085      	sub	sp, #20
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
	bool flag				= this->flagNewResponse;	// Copia flag de nuevo mensaje
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a06:	73fb      	strb	r3, [r7, #15]
	this->flagNewResponse	= 0;						// Reinicia flag
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
	return flag;										// Retorna respuesta guardada
 8003a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3714      	adds	r7, #20
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr

08003a1e <_ZN9loraInput8responseEv>:

//////////////
// RESPONSE //
//////////////

uint8_t* loraInput::response(){	//
 8003a1e:	b480      	push	{r7}
 8003a20:	b083      	sub	sp, #12
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
	return this->buffer;		// Entrega la respuesta final
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	370c      	adds	r7, #12
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr

08003a36 <_ZN9loraInput12responseSizeEv>:

uint8_t loraInput::responseSize(){
 8003a36:	b480      	push	{r7}
 8003a38:	b083      	sub	sp, #12
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
	return this->sizeResponse;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <_ZN10loraSelect10setCommandEPhhh>:

/////////////////
// SET COMMAND //
/////////////////

void loraSelect::setCommand( uint8_t *command, uint8_t sizeCommand, uint8_t qtty ){
 8003a50:	b480      	push	{r7}
 8003a52:	b085      	sub	sp, #20
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	4611      	mov	r1, r2
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	460b      	mov	r3, r1
 8003a60:	71fb      	strb	r3, [r7, #7]
 8003a62:	4613      	mov	r3, r2
 8003a64:	71bb      	strb	r3, [r7, #6]
	this->command		= command;		//	Copia comando
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	68ba      	ldr	r2, [r7, #8]
 8003a6a:	601a      	str	r2, [r3, #0]
	this->commandSize	= sizeCommand;	//	Copia lista de respuestas
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	79fa      	ldrb	r2, [r7, #7]
 8003a70:	711a      	strb	r2, [r3, #4]
	this->qtty			= qtty;			//	Copia cantidad de respeustas
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	79ba      	ldrb	r2, [r7, #6]
 8003a76:	715a      	strb	r2, [r3, #5]
	this->flagNew		= 1;			//	Indica que hay nuevo comando
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	71da      	strb	r2, [r3, #7]
}
 8003a7e:	bf00      	nop
 8003a80:	3714      	adds	r7, #20
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr

08003a8a <_ZN10loraSelect10newCommandEv>:

/////////////////
// NEW COMMAND //
/////////////////

bool loraSelect::newCommand(){
 8003a8a:	b480      	push	{r7}
 8003a8c:	b085      	sub	sp, #20
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
	bool flag = this->flagNew;								// Crea variable
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	79db      	ldrb	r3, [r3, #7]
 8003a96:	73fb      	strb	r3, [r7, #15]
	this->flagNew	= 0;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	71da      	strb	r2, [r3, #7]

	return flag;							// Retorna salida
 8003a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3714      	adds	r7, #20
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <_ZN10loraSelect10getCommandEv>:

/////////////////
// GET COMMAND //
/////////////////

uint8_t	*loraSelect::getCommand(){
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
	return this->command;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <_ZN10loraSelect14getCommandSizeEv>:

///////////////////
// GET RESPONSES //
///////////////////

uint8_t loraSelect::getCommandSize(){
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
	return this->commandSize;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	791b      	ldrb	r3, [r3, #4]
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <_ZN10loraSelect13qttyResponsesEv>:

////////////////////////
// QUANTITY RESPONSES //
////////////////////////

uint8_t loraSelect::qttyResponses(){
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
	return this->qtty;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	795b      	ldrb	r3, [r3, #5]
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <_ZN12loraDecision10setRetriesEh>:

//////////////////
// SET RETRIES  //
//////////////////

void loraDecision::setRetries( uint8_t retries ){
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	460b      	mov	r3, r1
 8003afe:	70fb      	strb	r3, [r7, #3]
	this->retries	= retries;					//
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	78fa      	ldrb	r2, [r7, #3]
 8003b04:	701a      	strb	r2, [r3, #0]
}
 8003b06:	bf00      	nop
 8003b08:	370c      	adds	r7, #12
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr

08003b12 <_ZN12loraDecision8responseEh>:
//////////////
// RESPONSE //
//////////////


void loraDecision::response ( uint8_t position ){
 8003b12:	b480      	push	{r7}
 8003b14:	b083      	sub	sp, #12
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	70fb      	strb	r3, [r7, #3]
	this->position	= position;					//	Copia posicion
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	78fa      	ldrb	r2, [r7, #3]
 8003b22:	705a      	strb	r2, [r3, #1]

	if ( position == 0 || position == 12 ){						//	Si no hay error
 8003b24:	78fb      	ldrb	r3, [r7, #3]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d002      	beq.n	8003b30 <_ZN12loraDecision8responseEh+0x1e>
 8003b2a:	78fb      	ldrb	r3, [r7, #3]
 8003b2c:	2b0c      	cmp	r3, #12
 8003b2e:	d10f      	bne.n	8003b50 <_ZN12loraDecision8responseEh+0x3e>
		this->flagCorrect	= 1;				//	Indica que la respuesta es correcta
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	70da      	strb	r2, [r3, #3]
		this->flagEnable	= 1;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	719a      	strb	r2, [r3, #6]
		this->flagBurn		= 0;				//	Reinicia flag quemado
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	711a      	strb	r2, [r3, #4]
		this->flagRepeat	= 0;				//	Reinicia flag repetir
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	715a      	strb	r2, [r3, #5]
		this->count			= 0;				//	Reinicia contador
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	709a      	strb	r2, [r3, #2]
		else{									//	Si no pasa  limite
			this->flagBurn		= 0;			//	No esta quemado
			this->flagRepeat	= 1;			//	Solicita repetir
		}
	}
}
 8003b4e:	e054      	b.n	8003bfa <_ZN12loraDecision8responseEh+0xe8>
	else if ( position == 10 ){
 8003b50:	78fb      	ldrb	r3, [r7, #3]
 8003b52:	2b0a      	cmp	r3, #10
 8003b54:	d10f      	bne.n	8003b76 <_ZN12loraDecision8responseEh+0x64>
		this->flagCorrect	= 0;				//	Indica que la respuesta es correcta
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	70da      	strb	r2, [r3, #3]
		this->flagEnable	= 1;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	719a      	strb	r2, [r3, #6]
		this->flagBurn		= 1;				//	Reinicia flag quemado
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2201      	movs	r2, #1
 8003b66:	711a      	strb	r2, [r3, #4]
		this->flagRepeat	= 0;				//	Reinicia flag repetir
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	715a      	strb	r2, [r3, #5]
		this->count			= 0;				//	Reinicia contador
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	709a      	strb	r2, [r3, #2]
}
 8003b74:	e041      	b.n	8003bfa <_ZN12loraDecision8responseEh+0xe8>
	else if ( position < 98 ){
 8003b76:	78fb      	ldrb	r3, [r7, #3]
 8003b78:	2b61      	cmp	r3, #97	@ 0x61
 8003b7a:	d80f      	bhi.n	8003b9c <_ZN12loraDecision8responseEh+0x8a>
		this->flagCorrect	= 1;				//	Indica que la respuesta es correcta
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	70da      	strb	r2, [r3, #3]
		this->flagEnable	= 1;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2201      	movs	r2, #1
 8003b86:	719a      	strb	r2, [r3, #6]
		this->flagBurn		= 0;				//	Reinicia flag quemado
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	711a      	strb	r2, [r3, #4]
		this->flagRepeat	= 0;				//	Reinicia flag repetir
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	715a      	strb	r2, [r3, #5]
		this->count			= 0;				//	Reinicia contador
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	709a      	strb	r2, [r3, #2]
}
 8003b9a:	e02e      	b.n	8003bfa <_ZN12loraDecision8responseEh+0xe8>
	else if ( position == 98 ){
 8003b9c:	78fb      	ldrb	r3, [r7, #3]
 8003b9e:	2b62      	cmp	r3, #98	@ 0x62
 8003ba0:	d10f      	bne.n	8003bc2 <_ZN12loraDecision8responseEh+0xb0>
		this->flagCorrect	= 0;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	70da      	strb	r2, [r3, #3]
		this->flagBurn		= 0;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	711a      	strb	r2, [r3, #4]
		this->flagRepeat	= 0;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	715a      	strb	r2, [r3, #5]
		this->count			= 0;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	709a      	strb	r2, [r3, #2]
		this->flagEnable	= 1;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	719a      	strb	r2, [r3, #6]
}
 8003bc0:	e01b      	b.n	8003bfa <_ZN12loraDecision8responseEh+0xe8>
		this->flagCorrect	= 0;				//	Reinicia flag correcto
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	70da      	strb	r2, [r3, #3]
		this->count++;							//	Suma uno al contador
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	789b      	ldrb	r3, [r3, #2]
 8003bcc:	3301      	adds	r3, #1
 8003bce:	b2da      	uxtb	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	709a      	strb	r2, [r3, #2]
		if ( this->count >= this->retries ){	//	Si pasa limite de reintentos
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	789a      	ldrb	r2, [r3, #2]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d306      	bcc.n	8003bee <_ZN12loraDecision8responseEh+0xdc>
			this->flagBurn		= 1;			//	Indica que esta quemado
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	711a      	strb	r2, [r3, #4]
			this->flagRepeat	= 0;			//	No hay que repetir
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	715a      	strb	r2, [r3, #5]
}
 8003bec:	e005      	b.n	8003bfa <_ZN12loraDecision8responseEh+0xe8>
			this->flagBurn		= 0;			//	No esta quemado
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	711a      	strb	r2, [r3, #4]
			this->flagRepeat	= 1;			//	Solicita repetir
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	715a      	strb	r2, [r3, #5]
}
 8003bfa:	bf00      	nop
 8003bfc:	370c      	adds	r7, #12
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr

08003c06 <_ZN12loraDecision5resetEv>:

///////////
// RESET //
///////////

void loraDecision::reset(){
 8003c06:	b480      	push	{r7}
 8003c08:	b083      	sub	sp, #12
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	6078      	str	r0, [r7, #4]
	this->flagCorrect	= 0;	//	Reinicia indicador de msj correcto
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	70da      	strb	r2, [r3, #3]
	this->flagBurn		= 0;	//	Reinicia indicador de msj quemado
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	711a      	strb	r2, [r3, #4]
	this->flagRepeat	= 0;	//	Reinicia indicador de repetir mensaje
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	715a      	strb	r2, [r3, #5]
	this->count			= 0;	//	Reinicia contador
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	709a      	strb	r2, [r3, #2]
}
 8003c26:	bf00      	nop
 8003c28:	370c      	adds	r7, #12
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr

08003c32 <_ZN12loraDecision7disableEv>:

void loraDecision::disable(){
 8003c32:	b480      	push	{r7}
 8003c34:	b083      	sub	sp, #12
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
	this->flagEnable	= 0;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	719a      	strb	r2, [r3, #6]
}
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <_ZN12loraDecision6enableEv>:

bool loraDecision::enable(){
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
	return this->flagEnable;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	799b      	ldrb	r3, [r3, #6]
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <_ZN12loraDecision7correctEv>:

/////////////
// CORRECT //
/////////////

bool loraDecision::correct(){
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
	return this->flagCorrect;	//
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	78db      	ldrb	r3, [r3, #3]
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <_ZN12loraDecision4burnEv>:

//////////
// BURN //
//////////

bool loraDecision::burn(){
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
	return this->flagBurn;		//
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	791b      	ldrb	r3, [r3, #4]
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <_ZN12fifoCommandsC1Ev>:
////////////////////////
// FIFO COMMAND CLASS //
////////////////////////


class fifoCommands{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f103 022f 	add.w	r2, r3, #47	@ 0x2f
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	605a      	str	r2, [r3, #4]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f103 0239 	add.w	r2, r3, #57	@ 0x39
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	609a      	str	r2, [r3, #8]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f103 0243 	add.w	r2, r3, #67	@ 0x43
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	60da      	str	r2, [r3, #12]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f103 024d 	add.w	r2, r3, #77	@ 0x4d
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	611a      	str	r2, [r3, #16]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f103 0257 	add.w	r2, r3, #87	@ 0x57
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	615a      	str	r2, [r3, #20]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f103 0261 	add.w	r2, r3, #97	@ 0x61
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	619a      	str	r2, [r3, #24]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f103 026b 	add.w	r2, r3, #107	@ 0x6b
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	61da      	str	r2, [r3, #28]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f103 0275 	add.w	r2, r3, #117	@ 0x75
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	621a      	str	r2, [r3, #32]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f103 027f 	add.w	r2, r3, #127	@ 0x7f
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	625a      	str	r2, [r3, #36]	@ 0x24
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f103 0289 	add.w	r2, r3, #137	@ 0x89
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	629a      	str	r2, [r3, #40]	@ 0x28
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4618      	mov	r0, r3
 8003d04:	370c      	adds	r7, #12
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
	...

08003d10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003d14:	f001 fb25 	bl	8005362 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003d18:	f000 f8e8 	bl	8003eec <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003d1c:	f000 fb62 	bl	80043e4 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8003d20:	f000 fb06 	bl	8004330 <_ZL11MX_DMA_Initv>
  MX_UART4_Init();
 8003d24:	f000 fa9c 	bl	8004260 <_ZL13MX_UART4_Initv>
  MX_UART5_Init();
 8003d28:	f000 face 	bl	80042c8 <_ZL13MX_UART5_Initv>
  MX_I2C1_Init();
 8003d2c:	f000 fa0a 	bl	8004144 <_ZL12MX_I2C1_Initv>
  MX_TIM6_Init();
 8003d30:	f000 fa56 	bl	80041e0 <_ZL12MX_TIM6_Initv>
  MX_ADC1_Init();
 8003d34:	f000 f956 	bl	8003fe4 <_ZL12MX_ADC1_Initv>
  MX_IWDG_Init();
 8003d38:	f000 f930 	bl	8003f9c <_ZL12MX_IWDG_Initv>

  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT	(&htim6);
 8003d3c:	484b      	ldr	r0, [pc, #300]	@ (8003e6c <main+0x15c>)
 8003d3e:	f007 fe5f 	bl	800ba00 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_DMA	(&huart4,	rxLora, sizeof(rxLora));
 8003d42:	2201      	movs	r2, #1
 8003d44:	494a      	ldr	r1, [pc, #296]	@ (8003e70 <main+0x160>)
 8003d46:	484b      	ldr	r0, [pc, #300]	@ (8003e74 <main+0x164>)
 8003d48:	f008 fa3c 	bl	800c1c4 <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA	(&huart5,	rxGps, sizeof(rxGps));
 8003d4c:	2202      	movs	r2, #2
 8003d4e:	494a      	ldr	r1, [pc, #296]	@ (8003e78 <main+0x168>)
 8003d50:	484a      	ldr	r0, [pc, #296]	@ (8003e7c <main+0x16c>)
 8003d52:	f008 fa37 	bl	800c1c4 <HAL_UART_Receive_DMA>
  HAL_ADC_Start_DMA		(&hadc1, analog, 3);
 8003d56:	2203      	movs	r2, #3
 8003d58:	4949      	ldr	r1, [pc, #292]	@ (8003e80 <main+0x170>)
 8003d5a:	484a      	ldr	r0, [pc, #296]	@ (8003e84 <main+0x174>)
 8003d5c:	f001 fef4 	bl	8005b48 <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setupLoraApp();
 8003d60:	f7ff fb86 	bl	8003470 <_Z12setupLoraAppv>

  chSetRN2903.addCommand( &macSetCh8 );
 8003d64:	4948      	ldr	r1, [pc, #288]	@ (8003e88 <main+0x178>)
 8003d66:	4849      	ldr	r0, [pc, #292]	@ (8003e8c <main+0x17c>)
 8003d68:	f7ff fc80 	bl	800366c <_ZN10loraRutine10addCommandEP13rn2903Command>
  chSetRN2903.addCommand( &macSetCh9 );
 8003d6c:	4948      	ldr	r1, [pc, #288]	@ (8003e90 <main+0x180>)
 8003d6e:	4847      	ldr	r0, [pc, #284]	@ (8003e8c <main+0x17c>)
 8003d70:	f7ff fc7c 	bl	800366c <_ZN10loraRutine10addCommandEP13rn2903Command>
  chSetRN2903.addCommand( &macSetCh10 );
 8003d74:	4947      	ldr	r1, [pc, #284]	@ (8003e94 <main+0x184>)
 8003d76:	4845      	ldr	r0, [pc, #276]	@ (8003e8c <main+0x17c>)
 8003d78:	f7ff fc78 	bl	800366c <_ZN10loraRutine10addCommandEP13rn2903Command>

  setupRN2903.addCommand( &radioSetMod	);
 8003d7c:	4946      	ldr	r1, [pc, #280]	@ (8003e98 <main+0x188>)
 8003d7e:	4847      	ldr	r0, [pc, #284]	@ (8003e9c <main+0x18c>)
 8003d80:	f7ff fc74 	bl	800366c <_ZN10loraRutine10addCommandEP13rn2903Command>
  setupRN2903.addCommand( &radioSetSf 	);
 8003d84:	4946      	ldr	r1, [pc, #280]	@ (8003ea0 <main+0x190>)
 8003d86:	4845      	ldr	r0, [pc, #276]	@ (8003e9c <main+0x18c>)
 8003d88:	f7ff fc70 	bl	800366c <_ZN10loraRutine10addCommandEP13rn2903Command>
  setupRN2903.addCommand( &radioSetBw 	);
 8003d8c:	4945      	ldr	r1, [pc, #276]	@ (8003ea4 <main+0x194>)
 8003d8e:	4843      	ldr	r0, [pc, #268]	@ (8003e9c <main+0x18c>)
 8003d90:	f7ff fc6c 	bl	800366c <_ZN10loraRutine10addCommandEP13rn2903Command>
  setupRN2903.addCommand( &radioSetPwr 	);
 8003d94:	4944      	ldr	r1, [pc, #272]	@ (8003ea8 <main+0x198>)
 8003d96:	4841      	ldr	r0, [pc, #260]	@ (8003e9c <main+0x18c>)
 8003d98:	f7ff fc68 	bl	800366c <_ZN10loraRutine10addCommandEP13rn2903Command>

  setupRN2903.addCommand( &macSetDeveui );
 8003d9c:	4943      	ldr	r1, [pc, #268]	@ (8003eac <main+0x19c>)
 8003d9e:	483f      	ldr	r0, [pc, #252]	@ (8003e9c <main+0x18c>)
 8003da0:	f7ff fc64 	bl	800366c <_ZN10loraRutine10addCommandEP13rn2903Command>
  setupRN2903.addCommand( &macSetDevAddr );
 8003da4:	4942      	ldr	r1, [pc, #264]	@ (8003eb0 <main+0x1a0>)
 8003da6:	483d      	ldr	r0, [pc, #244]	@ (8003e9c <main+0x18c>)
 8003da8:	f7ff fc60 	bl	800366c <_ZN10loraRutine10addCommandEP13rn2903Command>
  setupRN2903.addCommand( &macSetNwkskey );
 8003dac:	4941      	ldr	r1, [pc, #260]	@ (8003eb4 <main+0x1a4>)
 8003dae:	483b      	ldr	r0, [pc, #236]	@ (8003e9c <main+0x18c>)
 8003db0:	f7ff fc5c 	bl	800366c <_ZN10loraRutine10addCommandEP13rn2903Command>
  setupRN2903.addCommand( &macSetAppskey );
 8003db4:	4940      	ldr	r1, [pc, #256]	@ (8003eb8 <main+0x1a8>)
 8003db6:	4839      	ldr	r0, [pc, #228]	@ (8003e9c <main+0x18c>)
 8003db8:	f7ff fc58 	bl	800366c <_ZN10loraRutine10addCommandEP13rn2903Command>
  setupRN2903.addCommand( &macJoinAbp );
 8003dbc:	493f      	ldr	r1, [pc, #252]	@ (8003ebc <main+0x1ac>)
 8003dbe:	4837      	ldr	r0, [pc, #220]	@ (8003e9c <main+0x18c>)
 8003dc0:	f7ff fc54 	bl	800366c <_ZN10loraRutine10addCommandEP13rn2903Command>
  setupRN2903.addCommand( &macSetSync );
 8003dc4:	493e      	ldr	r1, [pc, #248]	@ (8003ec0 <main+0x1b0>)
 8003dc6:	4835      	ldr	r0, [pc, #212]	@ (8003e9c <main+0x18c>)
 8003dc8:	f7ff fc50 	bl	800366c <_ZN10loraRutine10addCommandEP13rn2903Command>
  setupRN2903.addCommand( &macSave );
 8003dcc:	493d      	ldr	r1, [pc, #244]	@ (8003ec4 <main+0x1b4>)
 8003dce:	4833      	ldr	r0, [pc, #204]	@ (8003e9c <main+0x18c>)
 8003dd0:	f7ff fc4c 	bl	800366c <_ZN10loraRutine10addCommandEP13rn2903Command>

  loopRN2903.addCommand( &macTxData );
 8003dd4:	493c      	ldr	r1, [pc, #240]	@ (8003ec8 <main+0x1b8>)
 8003dd6:	483d      	ldr	r0, [pc, #244]	@ (8003ecc <main+0x1bc>)
 8003dd8:	f7ff fc48 	bl	800366c <_ZN10loraRutine10addCommandEP13rn2903Command>
  loopRN2903.addCommand( &macTxData );
 8003ddc:	493a      	ldr	r1, [pc, #232]	@ (8003ec8 <main+0x1b8>)
 8003dde:	483b      	ldr	r0, [pc, #236]	@ (8003ecc <main+0x1bc>)
 8003de0:	f7ff fc44 	bl	800366c <_ZN10loraRutine10addCommandEP13rn2903Command>

  loraCheck.setResponsePointer( rxCommand, 13);
 8003de4:	220d      	movs	r2, #13
 8003de6:	493a      	ldr	r1, [pc, #232]	@ (8003ed0 <main+0x1c0>)
 8003de8:	483a      	ldr	r0, [pc, #232]	@ (8003ed4 <main+0x1c4>)
 8003dea:	f7ff fd07 	bl	80037fc <_ZN9loraCheck18setResponsePointerEPPhh>
  loraDecision.setRetries(3);
 8003dee:	2103      	movs	r1, #3
 8003df0:	4839      	ldr	r0, [pc, #228]	@ (8003ed8 <main+0x1c8>)
 8003df2:	f7ff fe7f 	bl	8003af4 <_ZN12loraDecision10setRetriesEh>

  loraInput.insertBuffer( bufferLoraIn, sizeof(bufferLoraIn));
 8003df6:	2232      	movs	r2, #50	@ 0x32
 8003df8:	4938      	ldr	r1, [pc, #224]	@ (8003edc <main+0x1cc>)
 8003dfa:	4839      	ldr	r0, [pc, #228]	@ (8003ee0 <main+0x1d0>)
 8003dfc:	f7ff fdb7 	bl	800396e <_ZN9loraInput12insertBufferEPhh>
  //displayLink.inputDisplay(8888, 3);
  //
  HAL_IWDG_Init(&hiwdg);
 8003e00:	4838      	ldr	r0, [pc, #224]	@ (8003ee4 <main+0x1d4>)
 8003e02:	f006 f966 	bl	800a0d2 <HAL_IWDG_Init>
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8003e06:	2201      	movs	r2, #1
 8003e08:	2110      	movs	r1, #16
 8003e0a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003e0e:	f003 feb3 	bl	8007b78 <HAL_GPIO_WritePin>

	  hwInput();
 8003e12:	f7fd ff1e 	bl	8001c52 <_Z7hwInputv>
	  linkInput();
 8003e16:	f7fe fdcf 	bl	80029b8 <_Z9linkInputv>
	  tcpInput();
 8003e1a:	f001 f8a3 	bl	8004f64 <_Z8tcpInputv>
	  app();
 8003e1e:	f7fc fbf1 	bl	8000604 <_Z3appv>
	  tcpOutput();
 8003e22:	f001 f9db 	bl	80051dc <_Z9tcpOutputv>
	  linkOutput();
 8003e26:	f7ff fae3 	bl	80033f0 <_Z10linkOutputv>
	  hwOutput();
 8003e2a:	f7fe fb97 	bl	800255c <_Z8hwOutputv>

	  /* USER CODE END WHILE */

	  /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8003e2e:	2200      	movs	r2, #0
 8003e30:	2110      	movs	r1, #16
 8003e32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003e36:	f003 fe9f 	bl	8007b78 <HAL_GPIO_WritePin>

	  HAL_SuspendTick();
 8003e3a:	f001 fb07 	bl	800544c <HAL_SuspendTick>
	  HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8003e3e:	2101      	movs	r1, #1
 8003e40:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003e44:	f006 f99c 	bl	800a180 <HAL_PWR_EnterSLEEPMode>

	  while (!flagSuperloop){	// SI NO SE HA CUMPLIDO L TIMER
 8003e48:	bf00      	nop
 8003e4a:	4b27      	ldr	r3, [pc, #156]	@ (8003ee8 <main+0x1d8>)
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	f083 0301 	eor.w	r3, r3, #1
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d1f8      	bne.n	8003e4a <main+0x13a>
	  }							// ESPERA ETERNAMENTE
	  flagSuperloop	= 0;		// REINICIA FLAG
 8003e58:	4b23      	ldr	r3, [pc, #140]	@ (8003ee8 <main+0x1d8>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	701a      	strb	r2, [r3, #0]

	  HAL_ResumeTick();
 8003e5e:	f001 fb05 	bl	800546c <HAL_ResumeTick>
	  HAL_IWDG_Refresh(&hiwdg);
 8003e62:	4820      	ldr	r0, [pc, #128]	@ (8003ee4 <main+0x1d4>)
 8003e64:	f006 f97b 	bl	800a15e <HAL_IWDG_Refresh>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8003e68:	e7cd      	b.n	8003e06 <main+0xf6>
 8003e6a:	bf00      	nop
 8003e6c:	200009d8 	.word	0x200009d8
 8003e70:	20000ae0 	.word	0x20000ae0
 8003e74:	200007a8 	.word	0x200007a8
 8003e78:	20000ad0 	.word	0x20000ad0
 8003e7c:	20000830 	.word	0x20000830
 8003e80:	2000112c 	.word	0x2000112c
 8003e84:	20000614 	.word	0x20000614
 8003e88:	200005f0 	.word	0x200005f0
 8003e8c:	20000d1c 	.word	0x20000d1c
 8003e90:	200005fc 	.word	0x200005fc
 8003e94:	20000608 	.word	0x20000608
 8003e98:	2000053c 	.word	0x2000053c
 8003e9c:	20000b88 	.word	0x20000b88
 8003ea0:	20000548 	.word	0x20000548
 8003ea4:	20000554 	.word	0x20000554
 8003ea8:	20000560 	.word	0x20000560
 8003eac:	2000056c 	.word	0x2000056c
 8003eb0:	20000578 	.word	0x20000578
 8003eb4:	20000584 	.word	0x20000584
 8003eb8:	20000590 	.word	0x20000590
 8003ebc:	200005a8 	.word	0x200005a8
 8003ec0:	200005b4 	.word	0x200005b4
 8003ec4:	200005c0 	.word	0x200005c0
 8003ec8:	200005cc 	.word	0x200005cc
 8003ecc:	20000eb0 	.word	0x20000eb0
 8003ed0:	20000170 	.word	0x20000170
 8003ed4:	20000b64 	.word	0x20000b64
 8003ed8:	20000b78 	.word	0x20000b78
 8003edc:	20001044 	.word	0x20001044
 8003ee0:	20000b24 	.word	0x20000b24
 8003ee4:	20000a24 	.word	0x20000a24
 8003ee8:	20001128 	.word	0x20001128

08003eec <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b096      	sub	sp, #88	@ 0x58
 8003ef0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ef2:	f107 0314 	add.w	r3, r7, #20
 8003ef6:	2244      	movs	r2, #68	@ 0x44
 8003ef8:	2100      	movs	r1, #0
 8003efa:	4618      	mov	r0, r3
 8003efc:	f009 fbf9 	bl	800d6f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003f00:	463b      	mov	r3, r7
 8003f02:	2200      	movs	r2, #0
 8003f04:	601a      	str	r2, [r3, #0]
 8003f06:	605a      	str	r2, [r3, #4]
 8003f08:	609a      	str	r2, [r3, #8]
 8003f0a:	60da      	str	r2, [r3, #12]
 8003f0c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003f0e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003f12:	f006 f977 	bl	800a204 <HAL_PWREx_ControlVoltageScaling>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	bf14      	ite	ne
 8003f1c:	2301      	movne	r3, #1
 8003f1e:	2300      	moveq	r3, #0
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d001      	beq.n	8003f2a <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 8003f26:	f000 fb8d 	bl	8004644 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003f2e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003f32:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003f34:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003f38:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003f3a:	2340      	movs	r3, #64	@ 0x40
 8003f3c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003f42:	f107 0314 	add.w	r3, r7, #20
 8003f46:	4618      	mov	r0, r3
 8003f48:	f006 f9fa 	bl	800a340 <HAL_RCC_OscConfig>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	bf14      	ite	ne
 8003f52:	2301      	movne	r3, #1
 8003f54:	2300      	moveq	r3, #0
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d001      	beq.n	8003f60 <_Z18SystemClock_Configv+0x74>
  {
    Error_Handler();
 8003f5c:	f000 fb72 	bl	8004644 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003f60:	230f      	movs	r3, #15
 8003f62:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8003f64:	2302      	movs	r3, #2
 8003f66:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003f70:	2300      	movs	r3, #0
 8003f72:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003f74:	463b      	mov	r3, r7
 8003f76:	2100      	movs	r1, #0
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f006 fdfb 	bl	800ab74 <HAL_RCC_ClockConfig>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	bf14      	ite	ne
 8003f84:	2301      	movne	r3, #1
 8003f86:	2300      	moveq	r3, #0
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d001      	beq.n	8003f92 <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 8003f8e:	f000 fb59 	bl	8004644 <Error_Handler>
  }
}
 8003f92:	bf00      	nop
 8003f94:	3758      	adds	r7, #88	@ 0x58
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
	...

08003f9c <_ZL12MX_IWDG_Initv>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
void MX_IWDG_Init(void)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IWDG_Init 0 */

  /* USER CODE END IWDG_Init 0 */

  /* Initialize the IWDG peripheral */
  hiwdg.Instance = IWDG;
 8003fa0:	4b0e      	ldr	r3, [pc, #56]	@ (8003fdc <_ZL12MX_IWDG_Initv+0x40>)
 8003fa2:	4a0f      	ldr	r2, [pc, #60]	@ (8003fe0 <_ZL12MX_IWDG_Initv+0x44>)
 8003fa4:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8003fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8003fdc <_ZL12MX_IWDG_Initv+0x40>)
 8003fa8:	2200      	movs	r2, #0
 8003faa:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 399;
 8003fac:	4b0b      	ldr	r3, [pc, #44]	@ (8003fdc <_ZL12MX_IWDG_Initv+0x40>)
 8003fae:	f240 128f 	movw	r2, #399	@ 0x18f
 8003fb2:	609a      	str	r2, [r3, #8]
  hiwdg.Init.Window	= 390;
 8003fb4:	4b09      	ldr	r3, [pc, #36]	@ (8003fdc <_ZL12MX_IWDG_Initv+0x40>)
 8003fb6:	f44f 72c3 	mov.w	r2, #390	@ 0x186
 8003fba:	60da      	str	r2, [r3, #12]

  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8003fbc:	4807      	ldr	r0, [pc, #28]	@ (8003fdc <_ZL12MX_IWDG_Initv+0x40>)
 8003fbe:	f006 f888 	bl	800a0d2 <HAL_IWDG_Init>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	bf14      	ite	ne
 8003fc8:	2301      	movne	r3, #1
 8003fca:	2300      	moveq	r3, #0
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d001      	beq.n	8003fd6 <_ZL12MX_IWDG_Initv+0x3a>
  {
    Error_Handler();
 8003fd2:	f000 fb37 	bl	8004644 <Error_Handler>
  }

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
}
 8003fd6:	bf00      	nop
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	20000a24 	.word	0x20000a24
 8003fe0:	40003000 	.word	0x40003000

08003fe4 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b08a      	sub	sp, #40	@ 0x28
 8003fe8:	af00      	add	r7, sp, #0
	  /* USER CODE BEGIN ADC1_Init 0 */

	  /* USER CODE END ADC1_Init 0 */

	  ADC_MultiModeTypeDef multimode = {0};
 8003fea:	f107 031c 	add.w	r3, r7, #28
 8003fee:	2200      	movs	r2, #0
 8003ff0:	601a      	str	r2, [r3, #0]
 8003ff2:	605a      	str	r2, [r3, #4]
 8003ff4:	609a      	str	r2, [r3, #8]
	  ADC_ChannelConfTypeDef sConfig = {0};
 8003ff6:	1d3b      	adds	r3, r7, #4
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	601a      	str	r2, [r3, #0]
 8003ffc:	605a      	str	r2, [r3, #4]
 8003ffe:	609a      	str	r2, [r3, #8]
 8004000:	60da      	str	r2, [r3, #12]
 8004002:	611a      	str	r2, [r3, #16]
 8004004:	615a      	str	r2, [r3, #20]

	  /* USER CODE END ADC1_Init 1 */

	  /** Common config
	  */
	  hadc1.Instance = ADC1;
 8004006:	4b4a      	ldr	r3, [pc, #296]	@ (8004130 <_ZL12MX_ADC1_Initv+0x14c>)
 8004008:	4a4a      	ldr	r2, [pc, #296]	@ (8004134 <_ZL12MX_ADC1_Initv+0x150>)
 800400a:	601a      	str	r2, [r3, #0]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800400c:	4b48      	ldr	r3, [pc, #288]	@ (8004130 <_ZL12MX_ADC1_Initv+0x14c>)
 800400e:	2200      	movs	r2, #0
 8004010:	605a      	str	r2, [r3, #4]
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004012:	4b47      	ldr	r3, [pc, #284]	@ (8004130 <_ZL12MX_ADC1_Initv+0x14c>)
 8004014:	2200      	movs	r2, #0
 8004016:	609a      	str	r2, [r3, #8]
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004018:	4b45      	ldr	r3, [pc, #276]	@ (8004130 <_ZL12MX_ADC1_Initv+0x14c>)
 800401a:	2200      	movs	r2, #0
 800401c:	60da      	str	r2, [r3, #12]
	  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800401e:	4b44      	ldr	r3, [pc, #272]	@ (8004130 <_ZL12MX_ADC1_Initv+0x14c>)
 8004020:	2201      	movs	r2, #1
 8004022:	611a      	str	r2, [r3, #16]
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004024:	4b42      	ldr	r3, [pc, #264]	@ (8004130 <_ZL12MX_ADC1_Initv+0x14c>)
 8004026:	2204      	movs	r2, #4
 8004028:	615a      	str	r2, [r3, #20]
	  hadc1.Init.LowPowerAutoWait = DISABLE;
 800402a:	4b41      	ldr	r3, [pc, #260]	@ (8004130 <_ZL12MX_ADC1_Initv+0x14c>)
 800402c:	2200      	movs	r2, #0
 800402e:	761a      	strb	r2, [r3, #24]
	  hadc1.Init.ContinuousConvMode = ENABLE;
 8004030:	4b3f      	ldr	r3, [pc, #252]	@ (8004130 <_ZL12MX_ADC1_Initv+0x14c>)
 8004032:	2201      	movs	r2, #1
 8004034:	765a      	strb	r2, [r3, #25]
	  hadc1.Init.NbrOfConversion = 3;
 8004036:	4b3e      	ldr	r3, [pc, #248]	@ (8004130 <_ZL12MX_ADC1_Initv+0x14c>)
 8004038:	2203      	movs	r2, #3
 800403a:	61da      	str	r2, [r3, #28]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800403c:	4b3c      	ldr	r3, [pc, #240]	@ (8004130 <_ZL12MX_ADC1_Initv+0x14c>)
 800403e:	2200      	movs	r2, #0
 8004040:	f883 2020 	strb.w	r2, [r3, #32]
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004044:	4b3a      	ldr	r3, [pc, #232]	@ (8004130 <_ZL12MX_ADC1_Initv+0x14c>)
 8004046:	2200      	movs	r2, #0
 8004048:	629a      	str	r2, [r3, #40]	@ 0x28
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800404a:	4b39      	ldr	r3, [pc, #228]	@ (8004130 <_ZL12MX_ADC1_Initv+0x14c>)
 800404c:	2200      	movs	r2, #0
 800404e:	62da      	str	r2, [r3, #44]	@ 0x2c
	  hadc1.Init.DMAContinuousRequests = DISABLE;
 8004050:	4b37      	ldr	r3, [pc, #220]	@ (8004130 <_ZL12MX_ADC1_Initv+0x14c>)
 8004052:	2200      	movs	r2, #0
 8004054:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004058:	4b35      	ldr	r3, [pc, #212]	@ (8004130 <_ZL12MX_ADC1_Initv+0x14c>)
 800405a:	2200      	movs	r2, #0
 800405c:	635a      	str	r2, [r3, #52]	@ 0x34
	  hadc1.Init.OversamplingMode = DISABLE;
 800405e:	4b34      	ldr	r3, [pc, #208]	@ (8004130 <_ZL12MX_ADC1_Initv+0x14c>)
 8004060:	2200      	movs	r2, #0
 8004062:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004066:	4832      	ldr	r0, [pc, #200]	@ (8004130 <_ZL12MX_ADC1_Initv+0x14c>)
 8004068:	f001 fc1a 	bl	80058a0 <HAL_ADC_Init>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	bf14      	ite	ne
 8004072:	2301      	movne	r3, #1
 8004074:	2300      	moveq	r3, #0
 8004076:	b2db      	uxtb	r3, r3
 8004078:	2b00      	cmp	r3, #0
 800407a:	d001      	beq.n	8004080 <_ZL12MX_ADC1_Initv+0x9c>
	  {
	    Error_Handler();
 800407c:	f000 fae2 	bl	8004644 <Error_Handler>
	  }

	  /** Configure the ADC multi-mode
	  */
	  multimode.Mode = ADC_MODE_INDEPENDENT;
 8004080:	2300      	movs	r3, #0
 8004082:	61fb      	str	r3, [r7, #28]
	  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8004084:	f107 031c 	add.w	r3, r7, #28
 8004088:	4619      	mov	r1, r3
 800408a:	4829      	ldr	r0, [pc, #164]	@ (8004130 <_ZL12MX_ADC1_Initv+0x14c>)
 800408c:	f002 fdce 	bl	8006c2c <HAL_ADCEx_MultiModeConfigChannel>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	bf14      	ite	ne
 8004096:	2301      	movne	r3, #1
 8004098:	2300      	moveq	r3, #0
 800409a:	b2db      	uxtb	r3, r3
 800409c:	2b00      	cmp	r3, #0
 800409e:	d001      	beq.n	80040a4 <_ZL12MX_ADC1_Initv+0xc0>
	  {
	    Error_Handler();
 80040a0:	f000 fad0 	bl	8004644 <Error_Handler>
	  }

	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_1;
 80040a4:	4b24      	ldr	r3, [pc, #144]	@ (8004138 <_ZL12MX_ADC1_Initv+0x154>)
 80040a6:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 80040a8:	2306      	movs	r3, #6
 80040aa:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 80040ac:	2303      	movs	r3, #3
 80040ae:	60fb      	str	r3, [r7, #12]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80040b0:	237f      	movs	r3, #127	@ 0x7f
 80040b2:	613b      	str	r3, [r7, #16]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80040b4:	2304      	movs	r3, #4
 80040b6:	617b      	str	r3, [r7, #20]
	  sConfig.Offset = 0;
 80040b8:	2300      	movs	r3, #0
 80040ba:	61bb      	str	r3, [r7, #24]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80040bc:	1d3b      	adds	r3, r7, #4
 80040be:	4619      	mov	r1, r3
 80040c0:	481b      	ldr	r0, [pc, #108]	@ (8004130 <_ZL12MX_ADC1_Initv+0x14c>)
 80040c2:	f002 f835 	bl	8006130 <HAL_ADC_ConfigChannel>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	bf14      	ite	ne
 80040cc:	2301      	movne	r3, #1
 80040ce:	2300      	moveq	r3, #0
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d001      	beq.n	80040da <_ZL12MX_ADC1_Initv+0xf6>
	  {
	    Error_Handler();
 80040d6:	f000 fab5 	bl	8004644 <Error_Handler>
	  }

	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_2;
 80040da:	4b18      	ldr	r3, [pc, #96]	@ (800413c <_ZL12MX_ADC1_Initv+0x158>)
 80040dc:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_2;
 80040de:	230c      	movs	r3, #12
 80040e0:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80040e2:	1d3b      	adds	r3, r7, #4
 80040e4:	4619      	mov	r1, r3
 80040e6:	4812      	ldr	r0, [pc, #72]	@ (8004130 <_ZL12MX_ADC1_Initv+0x14c>)
 80040e8:	f002 f822 	bl	8006130 <HAL_ADC_ConfigChannel>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	bf14      	ite	ne
 80040f2:	2301      	movne	r3, #1
 80040f4:	2300      	moveq	r3, #0
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d001      	beq.n	8004100 <_ZL12MX_ADC1_Initv+0x11c>
	  {
	    Error_Handler();
 80040fc:	f000 faa2 	bl	8004644 <Error_Handler>
	  }

	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_3;
 8004100:	4b0f      	ldr	r3, [pc, #60]	@ (8004140 <_ZL12MX_ADC1_Initv+0x15c>)
 8004102:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_3;
 8004104:	2312      	movs	r3, #18
 8004106:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004108:	1d3b      	adds	r3, r7, #4
 800410a:	4619      	mov	r1, r3
 800410c:	4808      	ldr	r0, [pc, #32]	@ (8004130 <_ZL12MX_ADC1_Initv+0x14c>)
 800410e:	f002 f80f 	bl	8006130 <HAL_ADC_ConfigChannel>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	bf14      	ite	ne
 8004118:	2301      	movne	r3, #1
 800411a:	2300      	moveq	r3, #0
 800411c:	b2db      	uxtb	r3, r3
 800411e:	2b00      	cmp	r3, #0
 8004120:	d001      	beq.n	8004126 <_ZL12MX_ADC1_Initv+0x142>
	  {
	    Error_Handler();
 8004122:	f000 fa8f 	bl	8004644 <Error_Handler>
	  }
	  /* USER CODE BEGIN ADC1_Init 2 */

	  /* USER CODE END ADC1_Init 2 */
}
 8004126:	bf00      	nop
 8004128:	3728      	adds	r7, #40	@ 0x28
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	20000614 	.word	0x20000614
 8004134:	50040000 	.word	0x50040000
 8004138:	04300002 	.word	0x04300002
 800413c:	08600004 	.word	0x08600004
 8004140:	0c900008 	.word	0x0c900008

08004144 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004148:	4b22      	ldr	r3, [pc, #136]	@ (80041d4 <_ZL12MX_I2C1_Initv+0x90>)
 800414a:	4a23      	ldr	r2, [pc, #140]	@ (80041d8 <_ZL12MX_I2C1_Initv+0x94>)
 800414c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800414e:	4b21      	ldr	r3, [pc, #132]	@ (80041d4 <_ZL12MX_I2C1_Initv+0x90>)
 8004150:	4a22      	ldr	r2, [pc, #136]	@ (80041dc <_ZL12MX_I2C1_Initv+0x98>)
 8004152:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004154:	4b1f      	ldr	r3, [pc, #124]	@ (80041d4 <_ZL12MX_I2C1_Initv+0x90>)
 8004156:	2200      	movs	r2, #0
 8004158:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800415a:	4b1e      	ldr	r3, [pc, #120]	@ (80041d4 <_ZL12MX_I2C1_Initv+0x90>)
 800415c:	2201      	movs	r2, #1
 800415e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004160:	4b1c      	ldr	r3, [pc, #112]	@ (80041d4 <_ZL12MX_I2C1_Initv+0x90>)
 8004162:	2200      	movs	r2, #0
 8004164:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004166:	4b1b      	ldr	r3, [pc, #108]	@ (80041d4 <_ZL12MX_I2C1_Initv+0x90>)
 8004168:	2200      	movs	r2, #0
 800416a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800416c:	4b19      	ldr	r3, [pc, #100]	@ (80041d4 <_ZL12MX_I2C1_Initv+0x90>)
 800416e:	2200      	movs	r2, #0
 8004170:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004172:	4b18      	ldr	r3, [pc, #96]	@ (80041d4 <_ZL12MX_I2C1_Initv+0x90>)
 8004174:	2200      	movs	r2, #0
 8004176:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004178:	4b16      	ldr	r3, [pc, #88]	@ (80041d4 <_ZL12MX_I2C1_Initv+0x90>)
 800417a:	2200      	movs	r2, #0
 800417c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800417e:	4815      	ldr	r0, [pc, #84]	@ (80041d4 <_ZL12MX_I2C1_Initv+0x90>)
 8004180:	f003 fd12 	bl	8007ba8 <HAL_I2C_Init>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	bf14      	ite	ne
 800418a:	2301      	movne	r3, #1
 800418c:	2300      	moveq	r3, #0
 800418e:	b2db      	uxtb	r3, r3
 8004190:	2b00      	cmp	r3, #0
 8004192:	d001      	beq.n	8004198 <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 8004194:	f000 fa56 	bl	8004644 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004198:	2100      	movs	r1, #0
 800419a:	480e      	ldr	r0, [pc, #56]	@ (80041d4 <_ZL12MX_I2C1_Initv+0x90>)
 800419c:	f005 ff02 	bl	8009fa4 <HAL_I2CEx_ConfigAnalogFilter>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	bf14      	ite	ne
 80041a6:	2301      	movne	r3, #1
 80041a8:	2300      	moveq	r3, #0
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d001      	beq.n	80041b4 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 80041b0:	f000 fa48 	bl	8004644 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80041b4:	2100      	movs	r1, #0
 80041b6:	4807      	ldr	r0, [pc, #28]	@ (80041d4 <_ZL12MX_I2C1_Initv+0x90>)
 80041b8:	f005 ff3f 	bl	800a03a <HAL_I2CEx_ConfigDigitalFilter>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	bf14      	ite	ne
 80041c2:	2301      	movne	r3, #1
 80041c4:	2300      	moveq	r3, #0
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d001      	beq.n	80041d0 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 80041cc:	f000 fa3a 	bl	8004644 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80041d0:	bf00      	nop
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	200006c4 	.word	0x200006c4
 80041d8:	40005400 	.word	0x40005400
 80041dc:	2000090e 	.word	0x2000090e

080041e0 <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041e6:	1d3b      	adds	r3, r7, #4
 80041e8:	2200      	movs	r2, #0
 80041ea:	601a      	str	r2, [r3, #0]
 80041ec:	605a      	str	r2, [r3, #4]
 80041ee:	609a      	str	r2, [r3, #8]

	  /* USER CODE BEGIN TIM6_Init 1 */

	  /* USER CODE END TIM6_Init 1 */
	  htim6.Instance = TIM6;
 80041f0:	4b19      	ldr	r3, [pc, #100]	@ (8004258 <_ZL12MX_TIM6_Initv+0x78>)
 80041f2:	4a1a      	ldr	r2, [pc, #104]	@ (800425c <_ZL12MX_TIM6_Initv+0x7c>)
 80041f4:	601a      	str	r2, [r3, #0]
	  htim6.Init.Prescaler = 1;
 80041f6:	4b18      	ldr	r3, [pc, #96]	@ (8004258 <_ZL12MX_TIM6_Initv+0x78>)
 80041f8:	2201      	movs	r2, #1
 80041fa:	605a      	str	r2, [r3, #4]
	  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041fc:	4b16      	ldr	r3, [pc, #88]	@ (8004258 <_ZL12MX_TIM6_Initv+0x78>)
 80041fe:	2200      	movs	r2, #0
 8004200:	609a      	str	r2, [r3, #8]
	  htim6.Init.Period = 7999;
 8004202:	4b15      	ldr	r3, [pc, #84]	@ (8004258 <_ZL12MX_TIM6_Initv+0x78>)
 8004204:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8004208:	60da      	str	r2, [r3, #12]
	  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800420a:	4b13      	ldr	r3, [pc, #76]	@ (8004258 <_ZL12MX_TIM6_Initv+0x78>)
 800420c:	2200      	movs	r2, #0
 800420e:	619a      	str	r2, [r3, #24]
	  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004210:	4811      	ldr	r0, [pc, #68]	@ (8004258 <_ZL12MX_TIM6_Initv+0x78>)
 8004212:	f007 fb9d 	bl	800b950 <HAL_TIM_Base_Init>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	bf14      	ite	ne
 800421c:	2301      	movne	r3, #1
 800421e:	2300      	moveq	r3, #0
 8004220:	b2db      	uxtb	r3, r3
 8004222:	2b00      	cmp	r3, #0
 8004224:	d001      	beq.n	800422a <_ZL12MX_TIM6_Initv+0x4a>
	  {
	    Error_Handler();
 8004226:	f000 fa0d 	bl	8004644 <Error_Handler>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800422a:	2300      	movs	r3, #0
 800422c:	607b      	str	r3, [r7, #4]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800422e:	2300      	movs	r3, #0
 8004230:	60fb      	str	r3, [r7, #12]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004232:	1d3b      	adds	r3, r7, #4
 8004234:	4619      	mov	r1, r3
 8004236:	4808      	ldr	r0, [pc, #32]	@ (8004258 <_ZL12MX_TIM6_Initv+0x78>)
 8004238:	f007 fe16 	bl	800be68 <HAL_TIMEx_MasterConfigSynchronization>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	bf14      	ite	ne
 8004242:	2301      	movne	r3, #1
 8004244:	2300      	moveq	r3, #0
 8004246:	b2db      	uxtb	r3, r3
 8004248:	2b00      	cmp	r3, #0
 800424a:	d001      	beq.n	8004250 <_ZL12MX_TIM6_Initv+0x70>
	  {
	    Error_Handler();
 800424c:	f000 f9fa 	bl	8004644 <Error_Handler>
	  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004250:	bf00      	nop
 8004252:	3710      	adds	r7, #16
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	200009d8 	.word	0x200009d8
 800425c:	40001000 	.word	0x40001000

08004260 <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8004264:	4b16      	ldr	r3, [pc, #88]	@ (80042c0 <_ZL13MX_UART4_Initv+0x60>)
 8004266:	4a17      	ldr	r2, [pc, #92]	@ (80042c4 <_ZL13MX_UART4_Initv+0x64>)
 8004268:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 57600;
 800426a:	4b15      	ldr	r3, [pc, #84]	@ (80042c0 <_ZL13MX_UART4_Initv+0x60>)
 800426c:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8004270:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8004272:	4b13      	ldr	r3, [pc, #76]	@ (80042c0 <_ZL13MX_UART4_Initv+0x60>)
 8004274:	2200      	movs	r2, #0
 8004276:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004278:	4b11      	ldr	r3, [pc, #68]	@ (80042c0 <_ZL13MX_UART4_Initv+0x60>)
 800427a:	2200      	movs	r2, #0
 800427c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800427e:	4b10      	ldr	r3, [pc, #64]	@ (80042c0 <_ZL13MX_UART4_Initv+0x60>)
 8004280:	2200      	movs	r2, #0
 8004282:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004284:	4b0e      	ldr	r3, [pc, #56]	@ (80042c0 <_ZL13MX_UART4_Initv+0x60>)
 8004286:	220c      	movs	r2, #12
 8004288:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800428a:	4b0d      	ldr	r3, [pc, #52]	@ (80042c0 <_ZL13MX_UART4_Initv+0x60>)
 800428c:	2200      	movs	r2, #0
 800428e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004290:	4b0b      	ldr	r3, [pc, #44]	@ (80042c0 <_ZL13MX_UART4_Initv+0x60>)
 8004292:	2200      	movs	r2, #0
 8004294:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004296:	4b0a      	ldr	r3, [pc, #40]	@ (80042c0 <_ZL13MX_UART4_Initv+0x60>)
 8004298:	2200      	movs	r2, #0
 800429a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800429c:	4b08      	ldr	r3, [pc, #32]	@ (80042c0 <_ZL13MX_UART4_Initv+0x60>)
 800429e:	2200      	movs	r2, #0
 80042a0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80042a2:	4807      	ldr	r0, [pc, #28]	@ (80042c0 <_ZL13MX_UART4_Initv+0x60>)
 80042a4:	f007 fe86 	bl	800bfb4 <HAL_UART_Init>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	bf14      	ite	ne
 80042ae:	2301      	movne	r3, #1
 80042b0:	2300      	moveq	r3, #0
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d001      	beq.n	80042bc <_ZL13MX_UART4_Initv+0x5c>
  {
    Error_Handler();
 80042b8:	f000 f9c4 	bl	8004644 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80042bc:	bf00      	nop
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	200007a8 	.word	0x200007a8
 80042c4:	40004c00 	.word	0x40004c00

080042c8 <_ZL13MX_UART5_Initv>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80042cc:	4b16      	ldr	r3, [pc, #88]	@ (8004328 <_ZL13MX_UART5_Initv+0x60>)
 80042ce:	4a17      	ldr	r2, [pc, #92]	@ (800432c <_ZL13MX_UART5_Initv+0x64>)
 80042d0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80042d2:	4b15      	ldr	r3, [pc, #84]	@ (8004328 <_ZL13MX_UART5_Initv+0x60>)
 80042d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80042d8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80042da:	4b13      	ldr	r3, [pc, #76]	@ (8004328 <_ZL13MX_UART5_Initv+0x60>)
 80042dc:	2200      	movs	r2, #0
 80042de:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80042e0:	4b11      	ldr	r3, [pc, #68]	@ (8004328 <_ZL13MX_UART5_Initv+0x60>)
 80042e2:	2200      	movs	r2, #0
 80042e4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity =  UART_PARITY_NONE;
 80042e6:	4b10      	ldr	r3, [pc, #64]	@ (8004328 <_ZL13MX_UART5_Initv+0x60>)
 80042e8:	2200      	movs	r2, #0
 80042ea:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80042ec:	4b0e      	ldr	r3, [pc, #56]	@ (8004328 <_ZL13MX_UART5_Initv+0x60>)
 80042ee:	220c      	movs	r2, #12
 80042f0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80042f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004328 <_ZL13MX_UART5_Initv+0x60>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80042f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004328 <_ZL13MX_UART5_Initv+0x60>)
 80042fa:	2200      	movs	r2, #0
 80042fc:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80042fe:	4b0a      	ldr	r3, [pc, #40]	@ (8004328 <_ZL13MX_UART5_Initv+0x60>)
 8004300:	2200      	movs	r2, #0
 8004302:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004304:	4b08      	ldr	r3, [pc, #32]	@ (8004328 <_ZL13MX_UART5_Initv+0x60>)
 8004306:	2200      	movs	r2, #0
 8004308:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800430a:	4807      	ldr	r0, [pc, #28]	@ (8004328 <_ZL13MX_UART5_Initv+0x60>)
 800430c:	f007 fe52 	bl	800bfb4 <HAL_UART_Init>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	bf14      	ite	ne
 8004316:	2301      	movne	r3, #1
 8004318:	2300      	moveq	r3, #0
 800431a:	b2db      	uxtb	r3, r3
 800431c:	2b00      	cmp	r3, #0
 800431e:	d001      	beq.n	8004324 <_ZL13MX_UART5_Initv+0x5c>
  {
    Error_Handler();
 8004320:	f000 f990 	bl	8004644 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8004324:	bf00      	nop
 8004326:	bd80      	pop	{r7, pc}
 8004328:	20000830 	.word	0x20000830
 800432c:	40005000 	.word	0x40005000

08004330 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004336:	4b2a      	ldr	r3, [pc, #168]	@ (80043e0 <_ZL11MX_DMA_Initv+0xb0>)
 8004338:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800433a:	4a29      	ldr	r2, [pc, #164]	@ (80043e0 <_ZL11MX_DMA_Initv+0xb0>)
 800433c:	f043 0302 	orr.w	r3, r3, #2
 8004340:	6493      	str	r3, [r2, #72]	@ 0x48
 8004342:	4b27      	ldr	r3, [pc, #156]	@ (80043e0 <_ZL11MX_DMA_Initv+0xb0>)
 8004344:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	607b      	str	r3, [r7, #4]
 800434c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800434e:	4b24      	ldr	r3, [pc, #144]	@ (80043e0 <_ZL11MX_DMA_Initv+0xb0>)
 8004350:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004352:	4a23      	ldr	r2, [pc, #140]	@ (80043e0 <_ZL11MX_DMA_Initv+0xb0>)
 8004354:	f043 0301 	orr.w	r3, r3, #1
 8004358:	6493      	str	r3, [r2, #72]	@ 0x48
 800435a:	4b21      	ldr	r3, [pc, #132]	@ (80043e0 <_ZL11MX_DMA_Initv+0xb0>)
 800435c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800435e:	f003 0301 	and.w	r3, r3, #1
 8004362:	603b      	str	r3, [r7, #0]
 8004364:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004366:	2200      	movs	r2, #0
 8004368:	2100      	movs	r1, #0
 800436a:	200b      	movs	r0, #11
 800436c:	f002 fe0d 	bl	8006f8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004370:	200b      	movs	r0, #11
 8004372:	f002 fe26 	bl	8006fc2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8004376:	2200      	movs	r2, #0
 8004378:	2100      	movs	r1, #0
 800437a:	2010      	movs	r0, #16
 800437c:	f002 fe05 	bl	8006f8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8004380:	2010      	movs	r0, #16
 8004382:	f002 fe1e 	bl	8006fc2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8004386:	2200      	movs	r2, #0
 8004388:	2100      	movs	r1, #0
 800438a:	2011      	movs	r0, #17
 800438c:	f002 fdfd 	bl	8006f8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8004390:	2011      	movs	r0, #17
 8004392:	f002 fe16 	bl	8006fc2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8004396:	2200      	movs	r2, #0
 8004398:	2100      	movs	r1, #0
 800439a:	2038      	movs	r0, #56	@ 0x38
 800439c:	f002 fdf5 	bl	8006f8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 80043a0:	2038      	movs	r0, #56	@ 0x38
 80043a2:	f002 fe0e 	bl	8006fc2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 80043a6:	2200      	movs	r2, #0
 80043a8:	2100      	movs	r1, #0
 80043aa:	2039      	movs	r0, #57	@ 0x39
 80043ac:	f002 fded 	bl	8006f8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 80043b0:	2039      	movs	r0, #57	@ 0x39
 80043b2:	f002 fe06 	bl	8006fc2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 80043b6:	2200      	movs	r2, #0
 80043b8:	2100      	movs	r1, #0
 80043ba:	203a      	movs	r0, #58	@ 0x3a
 80043bc:	f002 fde5 	bl	8006f8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 80043c0:	203a      	movs	r0, #58	@ 0x3a
 80043c2:	f002 fdfe 	bl	8006fc2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 80043c6:	2200      	movs	r2, #0
 80043c8:	2100      	movs	r1, #0
 80043ca:	203c      	movs	r0, #60	@ 0x3c
 80043cc:	f002 fddd 	bl	8006f8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 80043d0:	203c      	movs	r0, #60	@ 0x3c
 80043d2:	f002 fdf6 	bl	8006fc2 <HAL_NVIC_EnableIRQ>

}
 80043d6:	bf00      	nop
 80043d8:	3708      	adds	r7, #8
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	40021000 	.word	0x40021000

080043e4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b08c      	sub	sp, #48	@ 0x30
 80043e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043ea:	f107 031c 	add.w	r3, r7, #28
 80043ee:	2200      	movs	r2, #0
 80043f0:	601a      	str	r2, [r3, #0]
 80043f2:	605a      	str	r2, [r3, #4]
 80043f4:	609a      	str	r2, [r3, #8]
 80043f6:	60da      	str	r2, [r3, #12]
 80043f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80043fa:	4b4b      	ldr	r3, [pc, #300]	@ (8004528 <_ZL12MX_GPIO_Initv+0x144>)
 80043fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043fe:	4a4a      	ldr	r2, [pc, #296]	@ (8004528 <_ZL12MX_GPIO_Initv+0x144>)
 8004400:	f043 0310 	orr.w	r3, r3, #16
 8004404:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004406:	4b48      	ldr	r3, [pc, #288]	@ (8004528 <_ZL12MX_GPIO_Initv+0x144>)
 8004408:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800440a:	f003 0310 	and.w	r3, r3, #16
 800440e:	61bb      	str	r3, [r7, #24]
 8004410:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004412:	4b45      	ldr	r3, [pc, #276]	@ (8004528 <_ZL12MX_GPIO_Initv+0x144>)
 8004414:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004416:	4a44      	ldr	r2, [pc, #272]	@ (8004528 <_ZL12MX_GPIO_Initv+0x144>)
 8004418:	f043 0304 	orr.w	r3, r3, #4
 800441c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800441e:	4b42      	ldr	r3, [pc, #264]	@ (8004528 <_ZL12MX_GPIO_Initv+0x144>)
 8004420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004422:	f003 0304 	and.w	r3, r3, #4
 8004426:	617b      	str	r3, [r7, #20]
 8004428:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800442a:	4b3f      	ldr	r3, [pc, #252]	@ (8004528 <_ZL12MX_GPIO_Initv+0x144>)
 800442c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800442e:	4a3e      	ldr	r2, [pc, #248]	@ (8004528 <_ZL12MX_GPIO_Initv+0x144>)
 8004430:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004434:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004436:	4b3c      	ldr	r3, [pc, #240]	@ (8004528 <_ZL12MX_GPIO_Initv+0x144>)
 8004438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800443a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800443e:	613b      	str	r3, [r7, #16]
 8004440:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004442:	4b39      	ldr	r3, [pc, #228]	@ (8004528 <_ZL12MX_GPIO_Initv+0x144>)
 8004444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004446:	4a38      	ldr	r2, [pc, #224]	@ (8004528 <_ZL12MX_GPIO_Initv+0x144>)
 8004448:	f043 0301 	orr.w	r3, r3, #1
 800444c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800444e:	4b36      	ldr	r3, [pc, #216]	@ (8004528 <_ZL12MX_GPIO_Initv+0x144>)
 8004450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004452:	f003 0301 	and.w	r3, r3, #1
 8004456:	60fb      	str	r3, [r7, #12]
 8004458:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800445a:	4b33      	ldr	r3, [pc, #204]	@ (8004528 <_ZL12MX_GPIO_Initv+0x144>)
 800445c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800445e:	4a32      	ldr	r2, [pc, #200]	@ (8004528 <_ZL12MX_GPIO_Initv+0x144>)
 8004460:	f043 0308 	orr.w	r3, r3, #8
 8004464:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004466:	4b30      	ldr	r3, [pc, #192]	@ (8004528 <_ZL12MX_GPIO_Initv+0x144>)
 8004468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800446a:	f003 0308 	and.w	r3, r3, #8
 800446e:	60bb      	str	r3, [r7, #8]
 8004470:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004472:	4b2d      	ldr	r3, [pc, #180]	@ (8004528 <_ZL12MX_GPIO_Initv+0x144>)
 8004474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004476:	4a2c      	ldr	r2, [pc, #176]	@ (8004528 <_ZL12MX_GPIO_Initv+0x144>)
 8004478:	f043 0302 	orr.w	r3, r3, #2
 800447c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800447e:	4b2a      	ldr	r3, [pc, #168]	@ (8004528 <_ZL12MX_GPIO_Initv+0x144>)
 8004480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004482:	f003 0302 	and.w	r3, r3, #2
 8004486:	607b      	str	r3, [r7, #4]
 8004488:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 800448a:	2200      	movs	r2, #0
 800448c:	210f      	movs	r1, #15
 800448e:	4827      	ldr	r0, [pc, #156]	@ (800452c <_ZL12MX_GPIO_Initv+0x148>)
 8004490:	f003 fb72 	bl	8007b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8004494:	2200      	movs	r2, #0
 8004496:	2174      	movs	r1, #116	@ 0x74
 8004498:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800449c:	f003 fb6c 	bl	8007b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2 | GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80044a0:	2200      	movs	r2, #0
 80044a2:	f64f 7105 	movw	r1, #65285	@ 0xff05
 80044a6:	4822      	ldr	r0, [pc, #136]	@ (8004530 <_ZL12MX_GPIO_Initv+0x14c>)
 80044a8:	f003 fb66 	bl	8007b78 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE3 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_1;
 80044ac:	230f      	movs	r3, #15
 80044ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044b0:	2301      	movs	r3, #1
 80044b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044b4:	2300      	movs	r3, #0
 80044b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044b8:	2300      	movs	r3, #0
 80044ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80044bc:	f107 031c 	add.w	r3, r7, #28
 80044c0:	4619      	mov	r1, r3
 80044c2:	481a      	ldr	r0, [pc, #104]	@ (800452c <_ZL12MX_GPIO_Initv+0x148>)
 80044c4:	f003 f8bc 	bl	8007640 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80044c8:	2374      	movs	r3, #116	@ 0x74
 80044ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044cc:	2301      	movs	r3, #1
 80044ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044d0:	2300      	movs	r3, #0
 80044d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044d4:	2300      	movs	r3, #0
 80044d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044d8:	f107 031c 	add.w	r3, r7, #28
 80044dc:	4619      	mov	r1, r3
 80044de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80044e2:	f003 f8ad 	bl	8007640 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80044e6:	2308      	movs	r3, #8
 80044e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80044ea:	2300      	movs	r3, #0
 80044ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ee:	2300      	movs	r3, #0
 80044f0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044f2:	f107 031c 	add.w	r3, r7, #28
 80044f6:	4619      	mov	r1, r3
 80044f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80044fc:	f003 f8a0 	bl	8007640 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8004500:	f64f 7301 	movw	r3, #65281	@ 0xff01
 8004504:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004506:	2301      	movs	r3, #1
 8004508:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800450a:	2300      	movs	r3, #0
 800450c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800450e:	2300      	movs	r3, #0
 8004510:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004512:	f107 031c 	add.w	r3, r7, #28
 8004516:	4619      	mov	r1, r3
 8004518:	4805      	ldr	r0, [pc, #20]	@ (8004530 <_ZL12MX_GPIO_Initv+0x14c>)
 800451a:	f003 f891 	bl	8007640 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800451e:	bf00      	nop
 8004520:	3730      	adds	r7, #48	@ 0x30
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	40021000 	.word	0x40021000
 800452c:	48001000 	.word	0x48001000
 8004530:	48000c00 	.word	0x48000c00

08004534 <HAL_ADC_ConvCpltCallback>:


// when DMA conversion is completed, HAL_ADC_ConvCpltCallback function
// will interrupt the processor. You can find this function in
// Drivers>STM32F4xx_HAL_Drivers>stm32f4xx_hal_adc.c file as __weak attribute
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
	// I set adc_conv_complete_flag variable to 1 when,
	// HAL_ADC_ConvCpltCallback function is call.
	if ( hadc->Instance == ADC1 ){
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a05      	ldr	r2, [pc, #20]	@ (8004558 <HAL_ADC_ConvCpltCallback+0x24>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d102      	bne.n	800454c <HAL_ADC_ConvCpltCallback+0x18>
		flagAnalog = 1;
 8004546:	4b05      	ldr	r3, [pc, #20]	@ (800455c <HAL_ADC_ConvCpltCallback+0x28>)
 8004548:	2201      	movs	r2, #1
 800454a:	701a      	strb	r2, [r3, #0]
	}
	//HAL_ADC_Start_DMA(&hadc1, (uint32_t *) analog, 3);
}
 800454c:	bf00      	nop
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr
 8004558:	50040000 	.word	0x50040000
 800455c:	20001138 	.word	0x20001138

08004560 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8004560:	b580      	push	{r7, lr}
 8004562:	b082      	sub	sp, #8
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
	if(huart->Instance == UART4){
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a15      	ldr	r2, [pc, #84]	@ (80045c4 <HAL_UART_RxCpltCallback+0x64>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d10a      	bne.n	8004588 <HAL_UART_RxCpltCallback+0x28>
		loraIn.insertElement(rxLora[0]);
 8004572:	4b15      	ldr	r3, [pc, #84]	@ (80045c8 <HAL_UART_RxCpltCallback+0x68>)
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	4619      	mov	r1, r3
 8004578:	4814      	ldr	r0, [pc, #80]	@ (80045cc <HAL_UART_RxCpltCallback+0x6c>)
 800457a:	f7fc ff3b 	bl	80013f4 <_ZN8fifoUart13insertElementEh>
		HAL_UART_Receive_DMA(&huart4, rxLora, sizeof(rxLora));
 800457e:	2201      	movs	r2, #1
 8004580:	4911      	ldr	r1, [pc, #68]	@ (80045c8 <HAL_UART_RxCpltCallback+0x68>)
 8004582:	4813      	ldr	r0, [pc, #76]	@ (80045d0 <HAL_UART_RxCpltCallback+0x70>)
 8004584:	f007 fe1e 	bl	800c1c4 <HAL_UART_Receive_DMA>
	}

	if(huart->Instance == UART5){
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a11      	ldr	r2, [pc, #68]	@ (80045d4 <HAL_UART_RxCpltCallback+0x74>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d114      	bne.n	80045bc <HAL_UART_RxCpltCallback+0x5c>
		gpsIn.insertElement(rxGps[0]);
 8004592:	4b11      	ldr	r3, [pc, #68]	@ (80045d8 <HAL_UART_RxCpltCallback+0x78>)
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	4619      	mov	r1, r3
 8004598:	4810      	ldr	r0, [pc, #64]	@ (80045dc <HAL_UART_RxCpltCallback+0x7c>)
 800459a:	f7fc ff2b 	bl	80013f4 <_ZN8fifoUart13insertElementEh>
		gpsIn.insertElement(rxGps[1]);
 800459e:	4b0e      	ldr	r3, [pc, #56]	@ (80045d8 <HAL_UART_RxCpltCallback+0x78>)
 80045a0:	785b      	ldrb	r3, [r3, #1]
 80045a2:	4619      	mov	r1, r3
 80045a4:	480d      	ldr	r0, [pc, #52]	@ (80045dc <HAL_UART_RxCpltCallback+0x7c>)
 80045a6:	f7fc ff25 	bl	80013f4 <_ZN8fifoUart13insertElementEh>
		//HAL_UARTEx_ReceiveToIdle_DMA(&huart5, rxGps, sizeof(rxGps));
		//__HAL_UART_ENABLE_IT(&huart5, UART_IT_IDLE);
		HAL_UART_Receive_DMA(&huart5, rxGps, sizeof(rxGps));
 80045aa:	2202      	movs	r2, #2
 80045ac:	490a      	ldr	r1, [pc, #40]	@ (80045d8 <HAL_UART_RxCpltCallback+0x78>)
 80045ae:	480c      	ldr	r0, [pc, #48]	@ (80045e0 <HAL_UART_RxCpltCallback+0x80>)
 80045b0:	f007 fe08 	bl	800c1c4 <HAL_UART_Receive_DMA>
		__HAL_UART_CLEAR_IDLEFLAG(&huart5);
 80045b4:	4b0a      	ldr	r3, [pc, #40]	@ (80045e0 <HAL_UART_RxCpltCallback+0x80>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2210      	movs	r2, #16
 80045ba:	621a      	str	r2, [r3, #32]
		//__HAL_UART_ENABLE_IT(&huart5, UART_IT_IDLE);
	}
}
 80045bc:	bf00      	nop
 80045be:	3708      	adds	r7, #8
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	40004c00 	.word	0x40004c00
 80045c8:	20000ae0 	.word	0x20000ae0
 80045cc:	20000ae4 	.word	0x20000ae4
 80045d0:	200007a8 	.word	0x200007a8
 80045d4:	40005000 	.word	0x40005000
 80045d8:	20000ad0 	.word	0x20000ad0
 80045dc:	20000a90 	.word	0x20000a90
 80045e0:	20000830 	.word	0x20000830

080045e4 <HAL_TIM_PeriodElapsedCallback>:

/////////////////////////
// TIMER 6 - SUPERLOOP //
/////////////////////////

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6){
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a05      	ldr	r2, [pc, #20]	@ (8004608 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d102      	bne.n	80045fc <HAL_TIM_PeriodElapsedCallback+0x18>
		flagSuperloop	= 1;
 80045f6:	4b05      	ldr	r3, [pc, #20]	@ (800460c <HAL_TIM_PeriodElapsedCallback+0x28>)
 80045f8:	2201      	movs	r2, #1
 80045fa:	701a      	strb	r2, [r3, #0]
	}
}
 80045fc:	bf00      	nop
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr
 8004608:	40001000 	.word	0x40001000
 800460c:	20001128 	.word	0x20001128

08004610 <HAL_I2C_MasterTxCpltCallback>:
///////////////////////
// I2C INTERRUPTIONS //
///////////////////////

void HAL_I2C_MasterTxCpltCallback (I2C_HandleTypeDef *hi2c)
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
	flagI2C_DMA	= 1;;
 8004618:	4b04      	ldr	r3, [pc, #16]	@ (800462c <HAL_I2C_MasterTxCpltCallback+0x1c>)
 800461a:	2201      	movs	r2, #1
 800461c:	701a      	strb	r2, [r3, #0]
}
 800461e:	bf00      	nop
 8004620:	370c      	adds	r7, #12
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr
 800462a:	bf00      	nop
 800462c:	20001093 	.word	0x20001093

08004630 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback (I2C_HandleTypeDef * hi2c)
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]

}
 8004638:	bf00      	nop
 800463a:	370c      	adds	r7, #12
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004644:	b480      	push	{r7}
 8004646:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004648:	b672      	cpsid	i
}
 800464a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800464c:	bf00      	nop
 800464e:	e7fd      	b.n	800464c <Error_Handler+0x8>

08004650 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8004650:	b580      	push	{r7, lr}
 8004652:	b082      	sub	sp, #8
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2b01      	cmp	r3, #1
 800465e:	d115      	bne.n	800468c <_Z41__static_initialization_and_destruction_0ii+0x3c>
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004666:	4293      	cmp	r3, r2
 8004668:	d110      	bne.n	800468c <_Z41__static_initialization_and_destruction_0ii+0x3c>
gpsInput gpsInput;		// Instancia de gpsInput
 800466a:	480a      	ldr	r0, [pc, #40]	@ (8004694 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 800466c:	f7fc ff4a 	bl	8001504 <_ZN8gpsInputC1Ev>
fifoUart	gpsIn;		//
 8004670:	4809      	ldr	r0, [pc, #36]	@ (8004698 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8004672:	f7fc feaf 	bl	80013d4 <_ZN8fifoUartC1Ev>
fifoUart loraIn;			// FIFO que recibe los datos
 8004676:	4809      	ldr	r0, [pc, #36]	@ (800469c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8004678:	f7fc feac 	bl	80013d4 <_ZN8fifoUartC1Ev>
wdTimeout loraTimeWd(4000);
 800467c:	f44f 617a 	mov.w	r1, #4000	@ 0xfa0
 8004680:	4807      	ldr	r0, [pc, #28]	@ (80046a0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8004682:	f7ff f857 	bl	8003734 <_ZN9wdTimeoutC1El>
fifoCommands fifoContent;
 8004686:	4807      	ldr	r0, [pc, #28]	@ (80046a4 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8004688:	f7ff fb04 	bl	8003c94 <_ZN12fifoCommandsC1Ev>
}
 800468c:	bf00      	nop
 800468e:	3708      	adds	r7, #8
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}
 8004694:	20000a38 	.word	0x20000a38
 8004698:	20000a90 	.word	0x20000a90
 800469c:	20000ae4 	.word	0x20000ae4
 80046a0:	20001078 	.word	0x20001078
 80046a4:	20001094 	.word	0x20001094

080046a8 <_GLOBAL__sub_I_hadc1>:
 80046a8:	b580      	push	{r7, lr}
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80046b0:	2001      	movs	r0, #1
 80046b2:	f7ff ffcd 	bl	8004650 <_Z41__static_initialization_and_destruction_0ii>
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046be:	4b0f      	ldr	r3, [pc, #60]	@ (80046fc <HAL_MspInit+0x44>)
 80046c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046c2:	4a0e      	ldr	r2, [pc, #56]	@ (80046fc <HAL_MspInit+0x44>)
 80046c4:	f043 0301 	orr.w	r3, r3, #1
 80046c8:	6613      	str	r3, [r2, #96]	@ 0x60
 80046ca:	4b0c      	ldr	r3, [pc, #48]	@ (80046fc <HAL_MspInit+0x44>)
 80046cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046ce:	f003 0301 	and.w	r3, r3, #1
 80046d2:	607b      	str	r3, [r7, #4]
 80046d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80046d6:	4b09      	ldr	r3, [pc, #36]	@ (80046fc <HAL_MspInit+0x44>)
 80046d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046da:	4a08      	ldr	r2, [pc, #32]	@ (80046fc <HAL_MspInit+0x44>)
 80046dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80046e2:	4b06      	ldr	r3, [pc, #24]	@ (80046fc <HAL_MspInit+0x44>)
 80046e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046ea:	603b      	str	r3, [r7, #0]
 80046ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80046ee:	bf00      	nop
 80046f0:	370c      	adds	r7, #12
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr
 80046fa:	bf00      	nop
 80046fc:	40021000 	.word	0x40021000

08004700 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b0ac      	sub	sp, #176	@ 0xb0
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004708:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800470c:	2200      	movs	r2, #0
 800470e:	601a      	str	r2, [r3, #0]
 8004710:	605a      	str	r2, [r3, #4]
 8004712:	609a      	str	r2, [r3, #8]
 8004714:	60da      	str	r2, [r3, #12]
 8004716:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004718:	f107 0310 	add.w	r3, r7, #16
 800471c:	228c      	movs	r2, #140	@ 0x8c
 800471e:	2100      	movs	r1, #0
 8004720:	4618      	mov	r0, r3
 8004722:	f008 ffe6 	bl	800d6f2 <memset>
  if(hadc->Instance==ADC1)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a40      	ldr	r2, [pc, #256]	@ (800482c <HAL_ADC_MspInit+0x12c>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d179      	bne.n	8004824 <HAL_ADC_MspInit+0x124>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8004730:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004734:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8004736:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800473a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 800473e:	2303      	movs	r3, #3
 8004740:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8004742:	2301      	movs	r3, #1
 8004744:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8004746:	2308      	movs	r3, #8
 8004748:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800474a:	2302      	movs	r3, #2
 800474c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800474e:	2302      	movs	r3, #2
 8004750:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8004752:	2302      	movs	r3, #2
 8004754:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8004756:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800475a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800475c:	f107 0310 	add.w	r3, r7, #16
 8004760:	4618      	mov	r0, r3
 8004762:	f006 fc2b 	bl	800afbc <HAL_RCCEx_PeriphCLKConfig>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d001      	beq.n	8004770 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 800476c:	f7ff ff6a 	bl	8004644 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8004770:	4b2f      	ldr	r3, [pc, #188]	@ (8004830 <HAL_ADC_MspInit+0x130>)
 8004772:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004774:	4a2e      	ldr	r2, [pc, #184]	@ (8004830 <HAL_ADC_MspInit+0x130>)
 8004776:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800477a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800477c:	4b2c      	ldr	r3, [pc, #176]	@ (8004830 <HAL_ADC_MspInit+0x130>)
 800477e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004780:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004784:	60fb      	str	r3, [r7, #12]
 8004786:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004788:	4b29      	ldr	r3, [pc, #164]	@ (8004830 <HAL_ADC_MspInit+0x130>)
 800478a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800478c:	4a28      	ldr	r2, [pc, #160]	@ (8004830 <HAL_ADC_MspInit+0x130>)
 800478e:	f043 0304 	orr.w	r3, r3, #4
 8004792:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004794:	4b26      	ldr	r3, [pc, #152]	@ (8004830 <HAL_ADC_MspInit+0x130>)
 8004796:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004798:	f003 0304 	and.w	r3, r3, #4
 800479c:	60bb      	str	r3, [r7, #8]
 800479e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80047a0:	2307      	movs	r3, #7
 80047a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80047a6:	2303      	movs	r3, #3
 80047a8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047ac:	2300      	movs	r3, #0
 80047ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047b2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80047b6:	4619      	mov	r1, r3
 80047b8:	481e      	ldr	r0, [pc, #120]	@ (8004834 <HAL_ADC_MspInit+0x134>)
 80047ba:	f002 ff41 	bl	8007640 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80047be:	4b1e      	ldr	r3, [pc, #120]	@ (8004838 <HAL_ADC_MspInit+0x138>)
 80047c0:	4a1e      	ldr	r2, [pc, #120]	@ (800483c <HAL_ADC_MspInit+0x13c>)
 80047c2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80047c4:	4b1c      	ldr	r3, [pc, #112]	@ (8004838 <HAL_ADC_MspInit+0x138>)
 80047c6:	2200      	movs	r2, #0
 80047c8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80047ca:	4b1b      	ldr	r3, [pc, #108]	@ (8004838 <HAL_ADC_MspInit+0x138>)
 80047cc:	2200      	movs	r2, #0
 80047ce:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80047d0:	4b19      	ldr	r3, [pc, #100]	@ (8004838 <HAL_ADC_MspInit+0x138>)
 80047d2:	2200      	movs	r2, #0
 80047d4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80047d6:	4b18      	ldr	r3, [pc, #96]	@ (8004838 <HAL_ADC_MspInit+0x138>)
 80047d8:	2280      	movs	r2, #128	@ 0x80
 80047da:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80047dc:	4b16      	ldr	r3, [pc, #88]	@ (8004838 <HAL_ADC_MspInit+0x138>)
 80047de:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80047e2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80047e4:	4b14      	ldr	r3, [pc, #80]	@ (8004838 <HAL_ADC_MspInit+0x138>)
 80047e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80047ea:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80047ec:	4b12      	ldr	r3, [pc, #72]	@ (8004838 <HAL_ADC_MspInit+0x138>)
 80047ee:	2220      	movs	r2, #32
 80047f0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80047f2:	4b11      	ldr	r3, [pc, #68]	@ (8004838 <HAL_ADC_MspInit+0x138>)
 80047f4:	2200      	movs	r2, #0
 80047f6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80047f8:	480f      	ldr	r0, [pc, #60]	@ (8004838 <HAL_ADC_MspInit+0x138>)
 80047fa:	f002 fc0b 	bl	8007014 <HAL_DMA_Init>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d001      	beq.n	8004808 <HAL_ADC_MspInit+0x108>
    {
      Error_Handler();
 8004804:	f7ff ff1e 	bl	8004644 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4a0b      	ldr	r2, [pc, #44]	@ (8004838 <HAL_ADC_MspInit+0x138>)
 800480c:	651a      	str	r2, [r3, #80]	@ 0x50
 800480e:	4a0a      	ldr	r2, [pc, #40]	@ (8004838 <HAL_ADC_MspInit+0x138>)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8004814:	2200      	movs	r2, #0
 8004816:	2100      	movs	r1, #0
 8004818:	2012      	movs	r0, #18
 800481a:	f002 fbb6 	bl	8006f8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800481e:	2012      	movs	r0, #18
 8004820:	f002 fbcf 	bl	8006fc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004824:	bf00      	nop
 8004826:	37b0      	adds	r7, #176	@ 0xb0
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}
 800482c:	50040000 	.word	0x50040000
 8004830:	40021000 	.word	0x40021000
 8004834:	48000800 	.word	0x48000800
 8004838:	2000067c 	.word	0x2000067c
 800483c:	40020008 	.word	0x40020008

08004840 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b0ac      	sub	sp, #176	@ 0xb0
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004848:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800484c:	2200      	movs	r2, #0
 800484e:	601a      	str	r2, [r3, #0]
 8004850:	605a      	str	r2, [r3, #4]
 8004852:	609a      	str	r2, [r3, #8]
 8004854:	60da      	str	r2, [r3, #12]
 8004856:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004858:	f107 0310 	add.w	r3, r7, #16
 800485c:	228c      	movs	r2, #140	@ 0x8c
 800485e:	2100      	movs	r1, #0
 8004860:	4618      	mov	r0, r3
 8004862:	f008 ff46 	bl	800d6f2 <memset>
  if(hi2c->Instance==I2C1)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a52      	ldr	r2, [pc, #328]	@ (80049b4 <HAL_I2C_MspInit+0x174>)
 800486c:	4293      	cmp	r3, r2
 800486e:	f040 809d 	bne.w	80049ac <HAL_I2C_MspInit+0x16c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004872:	2340      	movs	r3, #64	@ 0x40
 8004874:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004876:	2300      	movs	r3, #0
 8004878:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800487a:	f107 0310 	add.w	r3, r7, #16
 800487e:	4618      	mov	r0, r3
 8004880:	f006 fb9c 	bl	800afbc <HAL_RCCEx_PeriphCLKConfig>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d001      	beq.n	800488e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800488a:	f7ff fedb 	bl	8004644 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800488e:	4b4a      	ldr	r3, [pc, #296]	@ (80049b8 <HAL_I2C_MspInit+0x178>)
 8004890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004892:	4a49      	ldr	r2, [pc, #292]	@ (80049b8 <HAL_I2C_MspInit+0x178>)
 8004894:	f043 0302 	orr.w	r3, r3, #2
 8004898:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800489a:	4b47      	ldr	r3, [pc, #284]	@ (80049b8 <HAL_I2C_MspInit+0x178>)
 800489c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800489e:	f003 0302 	and.w	r3, r3, #2
 80048a2:	60fb      	str	r3, [r7, #12]
 80048a4:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80048a6:	23c0      	movs	r3, #192	@ 0xc0
 80048a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80048ac:	2312      	movs	r3, #18
 80048ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048b2:	2300      	movs	r3, #0
 80048b4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048b8:	2303      	movs	r3, #3
 80048ba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80048be:	2304      	movs	r3, #4
 80048c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048c4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80048c8:	4619      	mov	r1, r3
 80048ca:	483c      	ldr	r0, [pc, #240]	@ (80049bc <HAL_I2C_MspInit+0x17c>)
 80048cc:	f002 feb8 	bl	8007640 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80048d0:	4b39      	ldr	r3, [pc, #228]	@ (80049b8 <HAL_I2C_MspInit+0x178>)
 80048d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048d4:	4a38      	ldr	r2, [pc, #224]	@ (80049b8 <HAL_I2C_MspInit+0x178>)
 80048d6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80048da:	6593      	str	r3, [r2, #88]	@ 0x58
 80048dc:	4b36      	ldr	r3, [pc, #216]	@ (80049b8 <HAL_I2C_MspInit+0x178>)
 80048de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80048e4:	60bb      	str	r3, [r7, #8]
 80048e6:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 80048e8:	4b35      	ldr	r3, [pc, #212]	@ (80049c0 <HAL_I2C_MspInit+0x180>)
 80048ea:	4a36      	ldr	r2, [pc, #216]	@ (80049c4 <HAL_I2C_MspInit+0x184>)
 80048ec:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_3;
 80048ee:	4b34      	ldr	r3, [pc, #208]	@ (80049c0 <HAL_I2C_MspInit+0x180>)
 80048f0:	2203      	movs	r2, #3
 80048f2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80048f4:	4b32      	ldr	r3, [pc, #200]	@ (80049c0 <HAL_I2C_MspInit+0x180>)
 80048f6:	2200      	movs	r2, #0
 80048f8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80048fa:	4b31      	ldr	r3, [pc, #196]	@ (80049c0 <HAL_I2C_MspInit+0x180>)
 80048fc:	2200      	movs	r2, #0
 80048fe:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004900:	4b2f      	ldr	r3, [pc, #188]	@ (80049c0 <HAL_I2C_MspInit+0x180>)
 8004902:	2280      	movs	r2, #128	@ 0x80
 8004904:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004906:	4b2e      	ldr	r3, [pc, #184]	@ (80049c0 <HAL_I2C_MspInit+0x180>)
 8004908:	2200      	movs	r2, #0
 800490a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800490c:	4b2c      	ldr	r3, [pc, #176]	@ (80049c0 <HAL_I2C_MspInit+0x180>)
 800490e:	2200      	movs	r2, #0
 8004910:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8004912:	4b2b      	ldr	r3, [pc, #172]	@ (80049c0 <HAL_I2C_MspInit+0x180>)
 8004914:	2200      	movs	r2, #0
 8004916:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004918:	4b29      	ldr	r3, [pc, #164]	@ (80049c0 <HAL_I2C_MspInit+0x180>)
 800491a:	2200      	movs	r2, #0
 800491c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800491e:	4828      	ldr	r0, [pc, #160]	@ (80049c0 <HAL_I2C_MspInit+0x180>)
 8004920:	f002 fb78 	bl	8007014 <HAL_DMA_Init>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d001      	beq.n	800492e <HAL_I2C_MspInit+0xee>
    {
      Error_Handler();
 800492a:	f7ff fe8b 	bl	8004644 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a23      	ldr	r2, [pc, #140]	@ (80049c0 <HAL_I2C_MspInit+0x180>)
 8004932:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004934:	4a22      	ldr	r2, [pc, #136]	@ (80049c0 <HAL_I2C_MspInit+0x180>)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 800493a:	4b23      	ldr	r3, [pc, #140]	@ (80049c8 <HAL_I2C_MspInit+0x188>)
 800493c:	4a23      	ldr	r2, [pc, #140]	@ (80049cc <HAL_I2C_MspInit+0x18c>)
 800493e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_3;
 8004940:	4b21      	ldr	r3, [pc, #132]	@ (80049c8 <HAL_I2C_MspInit+0x188>)
 8004942:	2203      	movs	r2, #3
 8004944:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004946:	4b20      	ldr	r3, [pc, #128]	@ (80049c8 <HAL_I2C_MspInit+0x188>)
 8004948:	2210      	movs	r2, #16
 800494a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800494c:	4b1e      	ldr	r3, [pc, #120]	@ (80049c8 <HAL_I2C_MspInit+0x188>)
 800494e:	2200      	movs	r2, #0
 8004950:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004952:	4b1d      	ldr	r3, [pc, #116]	@ (80049c8 <HAL_I2C_MspInit+0x188>)
 8004954:	2280      	movs	r2, #128	@ 0x80
 8004956:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004958:	4b1b      	ldr	r3, [pc, #108]	@ (80049c8 <HAL_I2C_MspInit+0x188>)
 800495a:	2200      	movs	r2, #0
 800495c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800495e:	4b1a      	ldr	r3, [pc, #104]	@ (80049c8 <HAL_I2C_MspInit+0x188>)
 8004960:	2200      	movs	r2, #0
 8004962:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8004964:	4b18      	ldr	r3, [pc, #96]	@ (80049c8 <HAL_I2C_MspInit+0x188>)
 8004966:	2200      	movs	r2, #0
 8004968:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800496a:	4b17      	ldr	r3, [pc, #92]	@ (80049c8 <HAL_I2C_MspInit+0x188>)
 800496c:	2200      	movs	r2, #0
 800496e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8004970:	4815      	ldr	r0, [pc, #84]	@ (80049c8 <HAL_I2C_MspInit+0x188>)
 8004972:	f002 fb4f 	bl	8007014 <HAL_DMA_Init>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d001      	beq.n	8004980 <HAL_I2C_MspInit+0x140>
    {
      Error_Handler();
 800497c:	f7ff fe62 	bl	8004644 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a11      	ldr	r2, [pc, #68]	@ (80049c8 <HAL_I2C_MspInit+0x188>)
 8004984:	639a      	str	r2, [r3, #56]	@ 0x38
 8004986:	4a10      	ldr	r2, [pc, #64]	@ (80049c8 <HAL_I2C_MspInit+0x188>)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800498c:	2200      	movs	r2, #0
 800498e:	2100      	movs	r1, #0
 8004990:	201f      	movs	r0, #31
 8004992:	f002 fafa 	bl	8006f8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004996:	201f      	movs	r0, #31
 8004998:	f002 fb13 	bl	8006fc2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800499c:	2200      	movs	r2, #0
 800499e:	2100      	movs	r1, #0
 80049a0:	2020      	movs	r0, #32
 80049a2:	f002 faf2 	bl	8006f8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80049a6:	2020      	movs	r0, #32
 80049a8:	f002 fb0b 	bl	8006fc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80049ac:	bf00      	nop
 80049ae:	37b0      	adds	r7, #176	@ 0xb0
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	40005400 	.word	0x40005400
 80049b8:	40021000 	.word	0x40021000
 80049bc:	48000400 	.word	0x48000400
 80049c0:	20000718 	.word	0x20000718
 80049c4:	40020080 	.word	0x40020080
 80049c8:	20000760 	.word	0x20000760
 80049cc:	4002006c 	.word	0x4002006c

080049d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a0d      	ldr	r2, [pc, #52]	@ (8004a14 <HAL_TIM_Base_MspInit+0x44>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d113      	bne.n	8004a0a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80049e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004a18 <HAL_TIM_Base_MspInit+0x48>)
 80049e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049e6:	4a0c      	ldr	r2, [pc, #48]	@ (8004a18 <HAL_TIM_Base_MspInit+0x48>)
 80049e8:	f043 0310 	orr.w	r3, r3, #16
 80049ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80049ee:	4b0a      	ldr	r3, [pc, #40]	@ (8004a18 <HAL_TIM_Base_MspInit+0x48>)
 80049f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049f2:	f003 0310 	and.w	r3, r3, #16
 80049f6:	60fb      	str	r3, [r7, #12]
 80049f8:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80049fa:	2200      	movs	r2, #0
 80049fc:	2100      	movs	r1, #0
 80049fe:	2036      	movs	r0, #54	@ 0x36
 8004a00:	f002 fac3 	bl	8006f8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004a04:	2036      	movs	r0, #54	@ 0x36
 8004a06:	f002 fadc 	bl	8006fc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8004a0a:	bf00      	nop
 8004a0c:	3710      	adds	r7, #16
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	40001000 	.word	0x40001000
 8004a18:	40021000 	.word	0x40021000

08004a1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b0b0      	sub	sp, #192	@ 0xc0
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a24:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8004a28:	2200      	movs	r2, #0
 8004a2a:	601a      	str	r2, [r3, #0]
 8004a2c:	605a      	str	r2, [r3, #4]
 8004a2e:	609a      	str	r2, [r3, #8]
 8004a30:	60da      	str	r2, [r3, #12]
 8004a32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004a34:	f107 0320 	add.w	r3, r7, #32
 8004a38:	228c      	movs	r2, #140	@ 0x8c
 8004a3a:	2100      	movs	r1, #0
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f008 fe58 	bl	800d6f2 <memset>
  if(huart->Instance==UART4)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a4d      	ldr	r2, [pc, #308]	@ (8004b7c <HAL_UART_MspInit+0x160>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	f040 80a3 	bne.w	8004b94 <HAL_UART_MspInit+0x178>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8004a4e:	2308      	movs	r3, #8
 8004a50:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8004a52:	2300      	movs	r3, #0
 8004a54:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004a56:	f107 0320 	add.w	r3, r7, #32
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f006 faae 	bl	800afbc <HAL_RCCEx_PeriphCLKConfig>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d001      	beq.n	8004a6a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004a66:	f7ff fded 	bl	8004644 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8004a6a:	4b45      	ldr	r3, [pc, #276]	@ (8004b80 <HAL_UART_MspInit+0x164>)
 8004a6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a6e:	4a44      	ldr	r2, [pc, #272]	@ (8004b80 <HAL_UART_MspInit+0x164>)
 8004a70:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004a74:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a76:	4b42      	ldr	r3, [pc, #264]	@ (8004b80 <HAL_UART_MspInit+0x164>)
 8004a78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a7a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a7e:	61fb      	str	r3, [r7, #28]
 8004a80:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a82:	4b3f      	ldr	r3, [pc, #252]	@ (8004b80 <HAL_UART_MspInit+0x164>)
 8004a84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a86:	4a3e      	ldr	r2, [pc, #248]	@ (8004b80 <HAL_UART_MspInit+0x164>)
 8004a88:	f043 0301 	orr.w	r3, r3, #1
 8004a8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004a8e:	4b3c      	ldr	r3, [pc, #240]	@ (8004b80 <HAL_UART_MspInit+0x164>)
 8004a90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a92:	f003 0301 	and.w	r3, r3, #1
 8004a96:	61bb      	str	r3, [r7, #24]
 8004a98:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004aac:	2303      	movs	r3, #3
 8004aae:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004ab2:	2308      	movs	r3, #8
 8004ab4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ab8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8004abc:	4619      	mov	r1, r3
 8004abe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004ac2:	f002 fdbd 	bl	8007640 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Channel5;
 8004ac6:	4b2f      	ldr	r3, [pc, #188]	@ (8004b84 <HAL_UART_MspInit+0x168>)
 8004ac8:	4a2f      	ldr	r2, [pc, #188]	@ (8004b88 <HAL_UART_MspInit+0x16c>)
 8004aca:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_2;
 8004acc:	4b2d      	ldr	r3, [pc, #180]	@ (8004b84 <HAL_UART_MspInit+0x168>)
 8004ace:	2202      	movs	r2, #2
 8004ad0:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004ad2:	4b2c      	ldr	r3, [pc, #176]	@ (8004b84 <HAL_UART_MspInit+0x168>)
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004ad8:	4b2a      	ldr	r3, [pc, #168]	@ (8004b84 <HAL_UART_MspInit+0x168>)
 8004ada:	2200      	movs	r2, #0
 8004adc:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004ade:	4b29      	ldr	r3, [pc, #164]	@ (8004b84 <HAL_UART_MspInit+0x168>)
 8004ae0:	2280      	movs	r2, #128	@ 0x80
 8004ae2:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004ae4:	4b27      	ldr	r3, [pc, #156]	@ (8004b84 <HAL_UART_MspInit+0x168>)
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004aea:	4b26      	ldr	r3, [pc, #152]	@ (8004b84 <HAL_UART_MspInit+0x168>)
 8004aec:	2200      	movs	r2, #0
 8004aee:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8004af0:	4b24      	ldr	r3, [pc, #144]	@ (8004b84 <HAL_UART_MspInit+0x168>)
 8004af2:	2200      	movs	r2, #0
 8004af4:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004af6:	4b23      	ldr	r3, [pc, #140]	@ (8004b84 <HAL_UART_MspInit+0x168>)
 8004af8:	2200      	movs	r2, #0
 8004afa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8004afc:	4821      	ldr	r0, [pc, #132]	@ (8004b84 <HAL_UART_MspInit+0x168>)
 8004afe:	f002 fa89 	bl	8007014 <HAL_DMA_Init>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d001      	beq.n	8004b0c <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 8004b08:	f7ff fd9c 	bl	8004644 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4a1d      	ldr	r2, [pc, #116]	@ (8004b84 <HAL_UART_MspInit+0x168>)
 8004b10:	675a      	str	r2, [r3, #116]	@ 0x74
 8004b12:	4a1c      	ldr	r2, [pc, #112]	@ (8004b84 <HAL_UART_MspInit+0x168>)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6293      	str	r3, [r2, #40]	@ 0x28

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA2_Channel3;
 8004b18:	4b1c      	ldr	r3, [pc, #112]	@ (8004b8c <HAL_UART_MspInit+0x170>)
 8004b1a:	4a1d      	ldr	r2, [pc, #116]	@ (8004b90 <HAL_UART_MspInit+0x174>)
 8004b1c:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_2;
 8004b1e:	4b1b      	ldr	r3, [pc, #108]	@ (8004b8c <HAL_UART_MspInit+0x170>)
 8004b20:	2202      	movs	r2, #2
 8004b22:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004b24:	4b19      	ldr	r3, [pc, #100]	@ (8004b8c <HAL_UART_MspInit+0x170>)
 8004b26:	2210      	movs	r2, #16
 8004b28:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b2a:	4b18      	ldr	r3, [pc, #96]	@ (8004b8c <HAL_UART_MspInit+0x170>)
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004b30:	4b16      	ldr	r3, [pc, #88]	@ (8004b8c <HAL_UART_MspInit+0x170>)
 8004b32:	2280      	movs	r2, #128	@ 0x80
 8004b34:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004b36:	4b15      	ldr	r3, [pc, #84]	@ (8004b8c <HAL_UART_MspInit+0x170>)
 8004b38:	2200      	movs	r2, #0
 8004b3a:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004b3c:	4b13      	ldr	r3, [pc, #76]	@ (8004b8c <HAL_UART_MspInit+0x170>)
 8004b3e:	2200      	movs	r2, #0
 8004b40:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8004b42:	4b12      	ldr	r3, [pc, #72]	@ (8004b8c <HAL_UART_MspInit+0x170>)
 8004b44:	2200      	movs	r2, #0
 8004b46:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004b48:	4b10      	ldr	r3, [pc, #64]	@ (8004b8c <HAL_UART_MspInit+0x170>)
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8004b4e:	480f      	ldr	r0, [pc, #60]	@ (8004b8c <HAL_UART_MspInit+0x170>)
 8004b50:	f002 fa60 	bl	8007014 <HAL_DMA_Init>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d001      	beq.n	8004b5e <HAL_UART_MspInit+0x142>
    {
      Error_Handler();
 8004b5a:	f7ff fd73 	bl	8004644 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a0a      	ldr	r2, [pc, #40]	@ (8004b8c <HAL_UART_MspInit+0x170>)
 8004b62:	671a      	str	r2, [r3, #112]	@ 0x70
 8004b64:	4a09      	ldr	r2, [pc, #36]	@ (8004b8c <HAL_UART_MspInit+0x170>)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6293      	str	r3, [r2, #40]	@ 0x28

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	2100      	movs	r1, #0
 8004b6e:	2034      	movs	r0, #52	@ 0x34
 8004b70:	f002 fa0b 	bl	8006f8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8004b74:	2034      	movs	r0, #52	@ 0x34
 8004b76:	f002 fa24 	bl	8006fc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8004b7a:	e0c9      	b.n	8004d10 <HAL_UART_MspInit+0x2f4>
 8004b7c:	40004c00 	.word	0x40004c00
 8004b80:	40021000 	.word	0x40021000
 8004b84:	200008b8 	.word	0x200008b8
 8004b88:	40020458 	.word	0x40020458
 8004b8c:	20000900 	.word	0x20000900
 8004b90:	40020430 	.word	0x40020430
  else if(huart->Instance==UART5)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a5f      	ldr	r2, [pc, #380]	@ (8004d18 <HAL_UART_MspInit+0x2fc>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	f040 80b8 	bne.w	8004d10 <HAL_UART_MspInit+0x2f4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8004ba0:	2310      	movs	r3, #16
 8004ba2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_HSI;
 8004ba4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004ba8:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004baa:	f107 0320 	add.w	r3, r7, #32
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f006 fa04 	bl	800afbc <HAL_RCCEx_PeriphCLKConfig>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d001      	beq.n	8004bbe <HAL_UART_MspInit+0x1a2>
      Error_Handler();
 8004bba:	f7ff fd43 	bl	8004644 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8004bbe:	4b57      	ldr	r3, [pc, #348]	@ (8004d1c <HAL_UART_MspInit+0x300>)
 8004bc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bc2:	4a56      	ldr	r2, [pc, #344]	@ (8004d1c <HAL_UART_MspInit+0x300>)
 8004bc4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004bc8:	6593      	str	r3, [r2, #88]	@ 0x58
 8004bca:	4b54      	ldr	r3, [pc, #336]	@ (8004d1c <HAL_UART_MspInit+0x300>)
 8004bcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004bd2:	617b      	str	r3, [r7, #20]
 8004bd4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004bd6:	4b51      	ldr	r3, [pc, #324]	@ (8004d1c <HAL_UART_MspInit+0x300>)
 8004bd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bda:	4a50      	ldr	r2, [pc, #320]	@ (8004d1c <HAL_UART_MspInit+0x300>)
 8004bdc:	f043 0304 	orr.w	r3, r3, #4
 8004be0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004be2:	4b4e      	ldr	r3, [pc, #312]	@ (8004d1c <HAL_UART_MspInit+0x300>)
 8004be4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004be6:	f003 0304 	and.w	r3, r3, #4
 8004bea:	613b      	str	r3, [r7, #16]
 8004bec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004bee:	4b4b      	ldr	r3, [pc, #300]	@ (8004d1c <HAL_UART_MspInit+0x300>)
 8004bf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bf2:	4a4a      	ldr	r2, [pc, #296]	@ (8004d1c <HAL_UART_MspInit+0x300>)
 8004bf4:	f043 0308 	orr.w	r3, r3, #8
 8004bf8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004bfa:	4b48      	ldr	r3, [pc, #288]	@ (8004d1c <HAL_UART_MspInit+0x300>)
 8004bfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bfe:	f003 0308 	and.w	r3, r3, #8
 8004c02:	60fb      	str	r3, [r7, #12]
 8004c04:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004c06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004c0a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c0e:	2302      	movs	r3, #2
 8004c10:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c14:	2300      	movs	r3, #0
 8004c16:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004c20:	2308      	movs	r3, #8
 8004c22:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c26:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	483c      	ldr	r0, [pc, #240]	@ (8004d20 <HAL_UART_MspInit+0x304>)
 8004c2e:	f002 fd07 	bl	8007640 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004c32:	2304      	movs	r3, #4
 8004c34:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c38:	2302      	movs	r3, #2
 8004c3a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c44:	2303      	movs	r3, #3
 8004c46:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004c4a:	2308      	movs	r3, #8
 8004c4c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004c50:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8004c54:	4619      	mov	r1, r3
 8004c56:	4833      	ldr	r0, [pc, #204]	@ (8004d24 <HAL_UART_MspInit+0x308>)
 8004c58:	f002 fcf2 	bl	8007640 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA2_Channel2;
 8004c5c:	4b32      	ldr	r3, [pc, #200]	@ (8004d28 <HAL_UART_MspInit+0x30c>)
 8004c5e:	4a33      	ldr	r2, [pc, #204]	@ (8004d2c <HAL_UART_MspInit+0x310>)
 8004c60:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_2;
 8004c62:	4b31      	ldr	r3, [pc, #196]	@ (8004d28 <HAL_UART_MspInit+0x30c>)
 8004c64:	2202      	movs	r2, #2
 8004c66:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004c68:	4b2f      	ldr	r3, [pc, #188]	@ (8004d28 <HAL_UART_MspInit+0x30c>)
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c6e:	4b2e      	ldr	r3, [pc, #184]	@ (8004d28 <HAL_UART_MspInit+0x30c>)
 8004c70:	2200      	movs	r2, #0
 8004c72:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004c74:	4b2c      	ldr	r3, [pc, #176]	@ (8004d28 <HAL_UART_MspInit+0x30c>)
 8004c76:	2280      	movs	r2, #128	@ 0x80
 8004c78:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004c7a:	4b2b      	ldr	r3, [pc, #172]	@ (8004d28 <HAL_UART_MspInit+0x30c>)
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004c80:	4b29      	ldr	r3, [pc, #164]	@ (8004d28 <HAL_UART_MspInit+0x30c>)
 8004c82:	2200      	movs	r2, #0
 8004c84:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8004c86:	4b28      	ldr	r3, [pc, #160]	@ (8004d28 <HAL_UART_MspInit+0x30c>)
 8004c88:	2200      	movs	r2, #0
 8004c8a:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004c8c:	4b26      	ldr	r3, [pc, #152]	@ (8004d28 <HAL_UART_MspInit+0x30c>)
 8004c8e:	2200      	movs	r2, #0
 8004c90:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8004c92:	4825      	ldr	r0, [pc, #148]	@ (8004d28 <HAL_UART_MspInit+0x30c>)
 8004c94:	f002 f9be 	bl	8007014 <HAL_DMA_Init>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d001      	beq.n	8004ca2 <HAL_UART_MspInit+0x286>
      Error_Handler();
 8004c9e:	f7ff fcd1 	bl	8004644 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a20      	ldr	r2, [pc, #128]	@ (8004d28 <HAL_UART_MspInit+0x30c>)
 8004ca6:	675a      	str	r2, [r3, #116]	@ 0x74
 8004ca8:	4a1f      	ldr	r2, [pc, #124]	@ (8004d28 <HAL_UART_MspInit+0x30c>)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_uart5_tx.Instance = DMA2_Channel1;
 8004cae:	4b20      	ldr	r3, [pc, #128]	@ (8004d30 <HAL_UART_MspInit+0x314>)
 8004cb0:	4a20      	ldr	r2, [pc, #128]	@ (8004d34 <HAL_UART_MspInit+0x318>)
 8004cb2:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Request = DMA_REQUEST_2;
 8004cb4:	4b1e      	ldr	r3, [pc, #120]	@ (8004d30 <HAL_UART_MspInit+0x314>)
 8004cb6:	2202      	movs	r2, #2
 8004cb8:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004cba:	4b1d      	ldr	r3, [pc, #116]	@ (8004d30 <HAL_UART_MspInit+0x314>)
 8004cbc:	2210      	movs	r2, #16
 8004cbe:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004cc0:	4b1b      	ldr	r3, [pc, #108]	@ (8004d30 <HAL_UART_MspInit+0x314>)
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004cc6:	4b1a      	ldr	r3, [pc, #104]	@ (8004d30 <HAL_UART_MspInit+0x314>)
 8004cc8:	2280      	movs	r2, #128	@ 0x80
 8004cca:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004ccc:	4b18      	ldr	r3, [pc, #96]	@ (8004d30 <HAL_UART_MspInit+0x314>)
 8004cce:	2200      	movs	r2, #0
 8004cd0:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004cd2:	4b17      	ldr	r3, [pc, #92]	@ (8004d30 <HAL_UART_MspInit+0x314>)
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8004cd8:	4b15      	ldr	r3, [pc, #84]	@ (8004d30 <HAL_UART_MspInit+0x314>)
 8004cda:	2200      	movs	r2, #0
 8004cdc:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004cde:	4b14      	ldr	r3, [pc, #80]	@ (8004d30 <HAL_UART_MspInit+0x314>)
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8004ce4:	4812      	ldr	r0, [pc, #72]	@ (8004d30 <HAL_UART_MspInit+0x314>)
 8004ce6:	f002 f995 	bl	8007014 <HAL_DMA_Init>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d001      	beq.n	8004cf4 <HAL_UART_MspInit+0x2d8>
      Error_Handler();
 8004cf0:	f7ff fca8 	bl	8004644 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a0e      	ldr	r2, [pc, #56]	@ (8004d30 <HAL_UART_MspInit+0x314>)
 8004cf8:	671a      	str	r2, [r3, #112]	@ 0x70
 8004cfa:	4a0d      	ldr	r2, [pc, #52]	@ (8004d30 <HAL_UART_MspInit+0x314>)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8004d00:	2200      	movs	r2, #0
 8004d02:	2100      	movs	r1, #0
 8004d04:	2035      	movs	r0, #53	@ 0x35
 8004d06:	f002 f940 	bl	8006f8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8004d0a:	2035      	movs	r0, #53	@ 0x35
 8004d0c:	f002 f959 	bl	8006fc2 <HAL_NVIC_EnableIRQ>
}
 8004d10:	bf00      	nop
 8004d12:	37c0      	adds	r7, #192	@ 0xc0
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	40005000 	.word	0x40005000
 8004d1c:	40021000 	.word	0x40021000
 8004d20:	48000800 	.word	0x48000800
 8004d24:	48000c00 	.word	0x48000c00
 8004d28:	20000948 	.word	0x20000948
 8004d2c:	4002041c 	.word	0x4002041c
 8004d30:	20000990 	.word	0x20000990
 8004d34:	40020408 	.word	0x40020408

08004d38 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==UART4)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a20      	ldr	r2, [pc, #128]	@ (8004dc8 <HAL_UART_MspDeInit+0x90>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d118      	bne.n	8004d7c <HAL_UART_MspDeInit+0x44>
  {
  /* USER CODE BEGIN UART4_MspDeInit 0 */

  /* USER CODE END UART4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART4_CLK_DISABLE();
 8004d4a:	4b20      	ldr	r3, [pc, #128]	@ (8004dcc <HAL_UART_MspDeInit+0x94>)
 8004d4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d4e:	4a1f      	ldr	r2, [pc, #124]	@ (8004dcc <HAL_UART_MspDeInit+0x94>)
 8004d50:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8004d54:	6593      	str	r3, [r2, #88]	@ 0x58

    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1);
 8004d56:	2103      	movs	r1, #3
 8004d58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004d5c:	f002 fe02 	bl	8007964 <HAL_GPIO_DeInit>

    /* UART4 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d64:	4618      	mov	r0, r3
 8004d66:	f002 fa0d 	bl	8007184 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f002 fa08 	bl	8007184 <HAL_DMA_DeInit>

    /* UART4 interrupt DeInit */
    HAL_NVIC_DisableIRQ(UART4_IRQn);
 8004d74:	2034      	movs	r0, #52	@ 0x34
 8004d76:	f002 f932 	bl	8006fde <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN UART5_MspDeInit 1 */

  /* USER CODE END UART5_MspDeInit 1 */
  }

}
 8004d7a:	e020      	b.n	8004dbe <HAL_UART_MspDeInit+0x86>
  else if(huart->Instance==UART5)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a13      	ldr	r2, [pc, #76]	@ (8004dd0 <HAL_UART_MspDeInit+0x98>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d11b      	bne.n	8004dbe <HAL_UART_MspDeInit+0x86>
    __HAL_RCC_UART5_CLK_DISABLE();
 8004d86:	4b11      	ldr	r3, [pc, #68]	@ (8004dcc <HAL_UART_MspDeInit+0x94>)
 8004d88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d8a:	4a10      	ldr	r2, [pc, #64]	@ (8004dcc <HAL_UART_MspDeInit+0x94>)
 8004d8c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004d90:	6593      	str	r3, [r2, #88]	@ 0x58
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_12);
 8004d92:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004d96:	480f      	ldr	r0, [pc, #60]	@ (8004dd4 <HAL_UART_MspDeInit+0x9c>)
 8004d98:	f002 fde4 	bl	8007964 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_2);
 8004d9c:	2104      	movs	r1, #4
 8004d9e:	480e      	ldr	r0, [pc, #56]	@ (8004dd8 <HAL_UART_MspDeInit+0xa0>)
 8004da0:	f002 fde0 	bl	8007964 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004da8:	4618      	mov	r0, r3
 8004daa:	f002 f9eb 	bl	8007184 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004db2:	4618      	mov	r0, r3
 8004db4:	f002 f9e6 	bl	8007184 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(UART5_IRQn);
 8004db8:	2035      	movs	r0, #53	@ 0x35
 8004dba:	f002 f910 	bl	8006fde <HAL_NVIC_DisableIRQ>
}
 8004dbe:	bf00      	nop
 8004dc0:	3708      	adds	r7, #8
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	40004c00 	.word	0x40004c00
 8004dcc:	40021000 	.word	0x40021000
 8004dd0:	40005000 	.word	0x40005000
 8004dd4:	48000800 	.word	0x48000800
 8004dd8:	48000c00 	.word	0x48000c00

08004ddc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004de0:	bf00      	nop
 8004de2:	e7fd      	b.n	8004de0 <NMI_Handler+0x4>

08004de4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004de4:	b480      	push	{r7}
 8004de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004de8:	bf00      	nop
 8004dea:	e7fd      	b.n	8004de8 <HardFault_Handler+0x4>

08004dec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004dec:	b480      	push	{r7}
 8004dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004df0:	bf00      	nop
 8004df2:	e7fd      	b.n	8004df0 <MemManage_Handler+0x4>

08004df4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004df4:	b480      	push	{r7}
 8004df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004df8:	bf00      	nop
 8004dfa:	e7fd      	b.n	8004df8 <BusFault_Handler+0x4>

08004dfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004e00:	bf00      	nop
 8004e02:	e7fd      	b.n	8004e00 <UsageFault_Handler+0x4>

08004e04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004e04:	b480      	push	{r7}
 8004e06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004e08:	bf00      	nop
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr

08004e12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004e12:	b480      	push	{r7}
 8004e14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004e16:	bf00      	nop
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004e20:	b480      	push	{r7}
 8004e22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004e24:	bf00      	nop
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr

08004e2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004e32:	f000 faeb 	bl	800540c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004e36:	bf00      	nop
 8004e38:	bd80      	pop	{r7, pc}
	...

08004e3c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004e40:	4802      	ldr	r0, [pc, #8]	@ (8004e4c <DMA1_Channel1_IRQHandler+0x10>)
 8004e42:	f002 fb10 	bl	8007466 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004e46:	bf00      	nop
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	2000067c 	.word	0x2000067c

08004e50 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8004e54:	4802      	ldr	r0, [pc, #8]	@ (8004e60 <DMA1_Channel6_IRQHandler+0x10>)
 8004e56:	f002 fb06 	bl	8007466 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8004e5a:	bf00      	nop
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	20000760 	.word	0x20000760

08004e64 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8004e68:	4802      	ldr	r0, [pc, #8]	@ (8004e74 <DMA1_Channel7_IRQHandler+0x10>)
 8004e6a:	f002 fafc 	bl	8007466 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8004e6e:	bf00      	nop
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	20000718 	.word	0x20000718

08004e78 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004e7c:	4802      	ldr	r0, [pc, #8]	@ (8004e88 <ADC1_2_IRQHandler+0x10>)
 8004e7e:	f000 ff1f 	bl	8005cc0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8004e82:	bf00      	nop
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	20000614 	.word	0x20000614

08004e8c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004e90:	4802      	ldr	r0, [pc, #8]	@ (8004e9c <I2C1_EV_IRQHandler+0x10>)
 8004e92:	f003 fa43 	bl	800831c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004e96:	bf00      	nop
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	200006c4 	.word	0x200006c4

08004ea0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004ea4:	4802      	ldr	r0, [pc, #8]	@ (8004eb0 <I2C1_ER_IRQHandler+0x10>)
 8004ea6:	f003 fa53 	bl	8008350 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8004eaa:	bf00      	nop
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	200006c4 	.word	0x200006c4

08004eb4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8004eb8:	4802      	ldr	r0, [pc, #8]	@ (8004ec4 <UART4_IRQHandler+0x10>)
 8004eba:	f007 f9cf 	bl	800c25c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8004ebe:	bf00      	nop
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	200007a8 	.word	0x200007a8

08004ec8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8004ecc:	4802      	ldr	r0, [pc, #8]	@ (8004ed8 <UART5_IRQHandler+0x10>)
 8004ece:	f007 f9c5 	bl	800c25c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8004ed2:	bf00      	nop
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	20000830 	.word	0x20000830

08004edc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004ee0:	4802      	ldr	r0, [pc, #8]	@ (8004eec <TIM6_DAC_IRQHandler+0x10>)
 8004ee2:	f006 fdfd 	bl	800bae0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004ee6:	bf00      	nop
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	200009d8 	.word	0x200009d8

08004ef0 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8004ef4:	4802      	ldr	r0, [pc, #8]	@ (8004f00 <DMA2_Channel1_IRQHandler+0x10>)
 8004ef6:	f002 fab6 	bl	8007466 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8004efa:	bf00      	nop
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	20000990 	.word	0x20000990

08004f04 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8004f08:	4802      	ldr	r0, [pc, #8]	@ (8004f14 <DMA2_Channel2_IRQHandler+0x10>)
 8004f0a:	f002 faac 	bl	8007466 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8004f0e:	bf00      	nop
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	20000948 	.word	0x20000948

08004f18 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8004f1c:	4802      	ldr	r0, [pc, #8]	@ (8004f28 <DMA2_Channel3_IRQHandler+0x10>)
 8004f1e:	f002 faa2 	bl	8007466 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8004f22:	bf00      	nop
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	20000900 	.word	0x20000900

08004f2c <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8004f30:	4802      	ldr	r0, [pc, #8]	@ (8004f3c <DMA2_Channel5_IRQHandler+0x10>)
 8004f32:	f002 fa98 	bl	8007466 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 8004f36:	bf00      	nop
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	200008b8 	.word	0x200008b8

08004f40 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004f40:	b480      	push	{r7}
 8004f42:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004f44:	4b06      	ldr	r3, [pc, #24]	@ (8004f60 <SystemInit+0x20>)
 8004f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f4a:	4a05      	ldr	r2, [pc, #20]	@ (8004f60 <SystemInit+0x20>)
 8004f4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004f50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8004f54:	bf00      	nop
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr
 8004f5e:	bf00      	nop
 8004f60:	e000ed00 	.word	0xe000ed00

08004f64 <_Z8tcpInputv>:
uint32_t limitTcpSys	= 21600000/superloop;	// Limite para fijar datos system
bool flagSetSys;							// Indica que se debe enviar system

/*****	INPUT	*****/

void tcpInput(){
 8004f64:	b580      	push	{r7, lr}
 8004f66:	af00      	add	r7, sp, #0
	tcpData();
 8004f68:	f000 f840 	bl	8004fec <_Z7tcpDatav>
	tcpSystem();
 8004f6c:	f000 f806 	bl	8004f7c <_Z9tcpSystemv>
	tcpGps();
 8004f70:	f000 f89a 	bl	80050a8 <_Z6tcpGpsv>
	tcpInLora();
 8004f74:	f000 f872 	bl	800505c <_Z9tcpInLorav>
}
 8004f78:	bf00      	nop
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <_Z9tcpSystemv>:
 *
 *	OUTPUT	:	flagSetSys | Indica que se debe enviar un paquete con datos del sistema
 *
 */

void tcpSystem(){
 8004f7c:	b480      	push	{r7}
 8004f7e:	af00      	add	r7, sp, #0
	switch( stateTcpSys ){
 8004f80:	4b16      	ldr	r3, [pc, #88]	@ (8004fdc <_Z9tcpSystemv+0x60>)
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d002      	beq.n	8004f8e <_Z9tcpSystemv+0x12>
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d013      	beq.n	8004fb4 <_Z9tcpSystemv+0x38>
 8004f8c:	e01c      	b.n	8004fc8 <_Z9tcpSystemv+0x4c>
	/////////////////////////
	// S0 - WAIT FOR LIMIT //
	/////////////////////////

	case 0:
		countTcpSys++;						// Suma 1 al contador
 8004f8e:	4b14      	ldr	r3, [pc, #80]	@ (8004fe0 <_Z9tcpSystemv+0x64>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	3301      	adds	r3, #1
 8004f94:	4a12      	ldr	r2, [pc, #72]	@ (8004fe0 <_Z9tcpSystemv+0x64>)
 8004f96:	6013      	str	r3, [r2, #0]

		if ( countTcpSys >= limitTcpSys ){	// Si pasa el limite
 8004f98:	4b11      	ldr	r3, [pc, #68]	@ (8004fe0 <_Z9tcpSystemv+0x64>)
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	4b11      	ldr	r3, [pc, #68]	@ (8004fe4 <_Z9tcpSystemv+0x68>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d303      	bcc.n	8004fac <_Z9tcpSystemv+0x30>
			stateTcpSys	= 1;				// Pasa a S1
 8004fa4:	4b0d      	ldr	r3, [pc, #52]	@ (8004fdc <_Z9tcpSystemv+0x60>)
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	701a      	strb	r2, [r3, #0]
		}
		else{								// Si no
			stateTcpSys	= 0;				// Espera en S0
		}
		break;
 8004faa:	e011      	b.n	8004fd0 <_Z9tcpSystemv+0x54>
			stateTcpSys	= 0;				// Espera en S0
 8004fac:	4b0b      	ldr	r3, [pc, #44]	@ (8004fdc <_Z9tcpSystemv+0x60>)
 8004fae:	2200      	movs	r2, #0
 8004fb0:	701a      	strb	r2, [r3, #0]
		break;
 8004fb2:	e00d      	b.n	8004fd0 <_Z9tcpSystemv+0x54>
	///////////////////
	// S1 - SET DATA //
	///////////////////

	case 1:
		flagSetSys	= 1;	// Indica que se debe enviar datos
 8004fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8004fe8 <_Z9tcpSystemv+0x6c>)
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	701a      	strb	r2, [r3, #0]
		countTcpSys	= 0;	// Reinicia contador
 8004fba:	4b09      	ldr	r3, [pc, #36]	@ (8004fe0 <_Z9tcpSystemv+0x64>)
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	601a      	str	r2, [r3, #0]
		stateTcpSys	= 0;	// Vuelve a S0
 8004fc0:	4b06      	ldr	r3, [pc, #24]	@ (8004fdc <_Z9tcpSystemv+0x60>)
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	701a      	strb	r2, [r3, #0]
		break;
 8004fc6:	e003      	b.n	8004fd0 <_Z9tcpSystemv+0x54>

	default:
		stateTcpSys	= 0;
 8004fc8:	4b04      	ldr	r3, [pc, #16]	@ (8004fdc <_Z9tcpSystemv+0x60>)
 8004fca:	2200      	movs	r2, #0
 8004fcc:	701a      	strb	r2, [r3, #0]
		break;
 8004fce:	bf00      	nop
	}
}
 8004fd0:	bf00      	nop
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	20001151 	.word	0x20001151
 8004fe0:	20001154 	.word	0x20001154
 8004fe4:	20001158 	.word	0x20001158
 8004fe8:	2000115c 	.word	0x2000115c

08004fec <_Z7tcpDatav>:
 *
 *	OUTPUT	:	flagSetData | Indica que se debe enviar
 *
 */

void tcpData(){
 8004fec:	b480      	push	{r7}
 8004fee:	af00      	add	r7, sp, #0
	switch( stateTcpData ){
 8004ff0:	4b16      	ldr	r3, [pc, #88]	@ (800504c <_Z7tcpDatav+0x60>)
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d002      	beq.n	8004ffe <_Z7tcpDatav+0x12>
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d013      	beq.n	8005024 <_Z7tcpDatav+0x38>
 8004ffc:	e01c      	b.n	8005038 <_Z7tcpDatav+0x4c>
	/////////////////////////
	// S0 - WAIT FOR LIMIT //
	/////////////////////////

	case 0:
		countTcpData++;							// Suma 1 al contador
 8004ffe:	4b14      	ldr	r3, [pc, #80]	@ (8005050 <_Z7tcpDatav+0x64>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	3301      	adds	r3, #1
 8005004:	4a12      	ldr	r2, [pc, #72]	@ (8005050 <_Z7tcpDatav+0x64>)
 8005006:	6013      	str	r3, [r2, #0]

		if ( countTcpData >= limitTcpData ){	// Si pasa el limite
 8005008:	4b11      	ldr	r3, [pc, #68]	@ (8005050 <_Z7tcpDatav+0x64>)
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	4b11      	ldr	r3, [pc, #68]	@ (8005054 <_Z7tcpDatav+0x68>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	429a      	cmp	r2, r3
 8005012:	d303      	bcc.n	800501c <_Z7tcpDatav+0x30>
			stateTcpData	= 1;				// Pasa a S1
 8005014:	4b0d      	ldr	r3, [pc, #52]	@ (800504c <_Z7tcpDatav+0x60>)
 8005016:	2201      	movs	r2, #1
 8005018:	701a      	strb	r2, [r3, #0]
		}
		else{									// Si no
			stateTcpData	= 0;				// Espera en S0
		}
		break;
 800501a:	e011      	b.n	8005040 <_Z7tcpDatav+0x54>
			stateTcpData	= 0;				// Espera en S0
 800501c:	4b0b      	ldr	r3, [pc, #44]	@ (800504c <_Z7tcpDatav+0x60>)
 800501e:	2200      	movs	r2, #0
 8005020:	701a      	strb	r2, [r3, #0]
		break;
 8005022:	e00d      	b.n	8005040 <_Z7tcpDatav+0x54>
	///////////////////
	// S1 - SET DATA //
	///////////////////

	case 1:
		flagSetData		= 1;	// Indica que se debe enviar datos
 8005024:	4b0c      	ldr	r3, [pc, #48]	@ (8005058 <_Z7tcpDatav+0x6c>)
 8005026:	2201      	movs	r2, #1
 8005028:	701a      	strb	r2, [r3, #0]
		countTcpData	= 0;	// Reinicia contador
 800502a:	4b09      	ldr	r3, [pc, #36]	@ (8005050 <_Z7tcpDatav+0x64>)
 800502c:	2200      	movs	r2, #0
 800502e:	601a      	str	r2, [r3, #0]

		stateTcpData	= 0;	// Vuelve a S0
 8005030:	4b06      	ldr	r3, [pc, #24]	@ (800504c <_Z7tcpDatav+0x60>)
 8005032:	2200      	movs	r2, #0
 8005034:	701a      	strb	r2, [r3, #0]
		break;
 8005036:	e003      	b.n	8005040 <_Z7tcpDatav+0x54>

	default:
		stateTcpData	= 0;
 8005038:	4b04      	ldr	r3, [pc, #16]	@ (800504c <_Z7tcpDatav+0x60>)
 800503a:	2200      	movs	r2, #0
 800503c:	701a      	strb	r2, [r3, #0]
		break;
 800503e:	bf00      	nop
	}
}
 8005040:	bf00      	nop
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	20001145 	.word	0x20001145
 8005050:	20001148 	.word	0x20001148
 8005054:	2000114c 	.word	0x2000114c
 8005058:	20001150 	.word	0x20001150

0800505c <_Z9tcpInLorav>:
 *
 *	OUTPUT	:	loraDecision.response()
 *				loraDecision.disable()
 */

void tcpInLora(){
 800505c:	b580      	push	{r7, lr}
 800505e:	af00      	add	r7, sp, #0
	if ( loraCheck.check() ){					// Si hay respuesta nueva
 8005060:	480d      	ldr	r0, [pc, #52]	@ (8005098 <_Z9tcpInLorav+0x3c>)
 8005062:	f7fe fc3a 	bl	80038da <_ZN9loraCheck5checkEv>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d00c      	beq.n	8005086 <_Z9tcpInLorav+0x2a>
		busTcpLora	= loraCheck.response();		// Copia el codigo de respuesta
 800506c:	480a      	ldr	r0, [pc, #40]	@ (8005098 <_Z9tcpInLorav+0x3c>)
 800506e:	f7fe fc45 	bl	80038fc <_ZN9loraCheck8responseEv>
 8005072:	4603      	mov	r3, r0
 8005074:	461a      	mov	r2, r3
 8005076:	4b09      	ldr	r3, [pc, #36]	@ (800509c <_Z9tcpInLorav+0x40>)
 8005078:	701a      	strb	r2, [r3, #0]
		loraDecision.response( busTcpLora );	// Inserta en lora Decision
 800507a:	4b08      	ldr	r3, [pc, #32]	@ (800509c <_Z9tcpInLorav+0x40>)
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	4619      	mov	r1, r3
 8005080:	4807      	ldr	r0, [pc, #28]	@ (80050a0 <_Z9tcpInLorav+0x44>)
 8005082:	f7fe fd46 	bl	8003b12 <_ZN12loraDecision8responseEh>
			busTcpLora	= 6;
		}*/

	}

	if ( flagWdLora ){			// Si hay WD
 8005086:	4b07      	ldr	r3, [pc, #28]	@ (80050a4 <_Z9tcpInLorav+0x48>)
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d002      	beq.n	8005094 <_Z9tcpInLorav+0x38>
		loraDecision.disable();	// Deshabilita tcp y app
 800508e:	4804      	ldr	r0, [pc, #16]	@ (80050a0 <_Z9tcpInLorav+0x44>)
 8005090:	f7fe fdcf 	bl	8003c32 <_ZN12loraDecision7disableEv>
	}
}
 8005094:	bf00      	nop
 8005096:	bd80      	pop	{r7, pc}
 8005098:	20000b64 	.word	0x20000b64
 800509c:	20001144 	.word	0x20001144
 80050a0:	20000b78 	.word	0x20000b78
 80050a4:	2000052c 	.word	0x2000052c

080050a8 <_Z6tcpGpsv>:
 *
 *	OUTPUT	:	flagGpsSaved
 *				startGps
 */

void tcpGps(){
 80050a8:	b480      	push	{r7}
 80050aa:	af00      	add	r7, sp, #0
	switch ( stateGpsTcp ){
 80050ac:	4b22      	ldr	r3, [pc, #136]	@ (8005138 <_Z6tcpGpsv+0x90>)
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	2b02      	cmp	r3, #2
 80050b2:	d021      	beq.n	80050f8 <_Z6tcpGpsv+0x50>
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	dc38      	bgt.n	800512a <_Z6tcpGpsv+0x82>
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d002      	beq.n	80050c2 <_Z6tcpGpsv+0x1a>
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d014      	beq.n	80050ea <_Z6tcpGpsv+0x42>
			stateGpsTcp	= 2;				// Se queda en S2
		}
		break;

	default:
		break;
 80050c0:	e033      	b.n	800512a <_Z6tcpGpsv+0x82>
		if ( savedGps ){		// Si se guardó un valor de GPS
 80050c2:	4b1e      	ldr	r3, [pc, #120]	@ (800513c <_Z6tcpGpsv+0x94>)
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d003      	beq.n	80050d2 <_Z6tcpGpsv+0x2a>
			stateGpsTcp	= 1;	// Pasa a S1
 80050ca:	4b1b      	ldr	r3, [pc, #108]	@ (8005138 <_Z6tcpGpsv+0x90>)
 80050cc:	2201      	movs	r2, #1
 80050ce:	701a      	strb	r2, [r3, #0]
		break;
 80050d0:	e02c      	b.n	800512c <_Z6tcpGpsv+0x84>
		else if( stopGps ){		// Si se paró la recepcion de datos
 80050d2:	4b1b      	ldr	r3, [pc, #108]	@ (8005140 <_Z6tcpGpsv+0x98>)
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d003      	beq.n	80050e2 <_Z6tcpGpsv+0x3a>
			stateGpsTcp	= 2;	// Pasa a S2
 80050da:	4b17      	ldr	r3, [pc, #92]	@ (8005138 <_Z6tcpGpsv+0x90>)
 80050dc:	2202      	movs	r2, #2
 80050de:	701a      	strb	r2, [r3, #0]
		break;
 80050e0:	e024      	b.n	800512c <_Z6tcpGpsv+0x84>
			stateGpsTcp	= 0;	// Espera en S0
 80050e2:	4b15      	ldr	r3, [pc, #84]	@ (8005138 <_Z6tcpGpsv+0x90>)
 80050e4:	2200      	movs	r2, #0
 80050e6:	701a      	strb	r2, [r3, #0]
		break;
 80050e8:	e020      	b.n	800512c <_Z6tcpGpsv+0x84>
		flagGpsSaved	= 1;	// Indica que se guardó un mensaje
 80050ea:	4b16      	ldr	r3, [pc, #88]	@ (8005144 <_Z6tcpGpsv+0x9c>)
 80050ec:	2201      	movs	r2, #1
 80050ee:	701a      	strb	r2, [r3, #0]
		stateGpsTcp		= 2;	// Pasa a S3
 80050f0:	4b11      	ldr	r3, [pc, #68]	@ (8005138 <_Z6tcpGpsv+0x90>)
 80050f2:	2202      	movs	r2, #2
 80050f4:	701a      	strb	r2, [r3, #0]
		break;
 80050f6:	e019      	b.n	800512c <_Z6tcpGpsv+0x84>
		countGpsTcp++;						// Suma 1 al contador
 80050f8:	4b13      	ldr	r3, [pc, #76]	@ (8005148 <_Z6tcpGpsv+0xa0>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	3301      	adds	r3, #1
 80050fe:	4a12      	ldr	r2, [pc, #72]	@ (8005148 <_Z6tcpGpsv+0xa0>)
 8005100:	6013      	str	r3, [r2, #0]
		if ( countGpsTcp >= limitGpsTcp ){	// Si pasa el limite
 8005102:	4b11      	ldr	r3, [pc, #68]	@ (8005148 <_Z6tcpGpsv+0xa0>)
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	4b11      	ldr	r3, [pc, #68]	@ (800514c <_Z6tcpGpsv+0xa4>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	429a      	cmp	r2, r3
 800510c:	d309      	bcc.n	8005122 <_Z6tcpGpsv+0x7a>
			startGps	= 1;				// Indica inicio de medicion gps
 800510e:	4b10      	ldr	r3, [pc, #64]	@ (8005150 <_Z6tcpGpsv+0xa8>)
 8005110:	2201      	movs	r2, #1
 8005112:	701a      	strb	r2, [r3, #0]
			countGpsTcp	= 0;				// Reinicia contador
 8005114:	4b0c      	ldr	r3, [pc, #48]	@ (8005148 <_Z6tcpGpsv+0xa0>)
 8005116:	2200      	movs	r2, #0
 8005118:	601a      	str	r2, [r3, #0]
			stateGpsTcp	= 0;				// Vuelve a S0
 800511a:	4b07      	ldr	r3, [pc, #28]	@ (8005138 <_Z6tcpGpsv+0x90>)
 800511c:	2200      	movs	r2, #0
 800511e:	701a      	strb	r2, [r3, #0]
		break;
 8005120:	e004      	b.n	800512c <_Z6tcpGpsv+0x84>
			stateGpsTcp	= 2;				// Se queda en S2
 8005122:	4b05      	ldr	r3, [pc, #20]	@ (8005138 <_Z6tcpGpsv+0x90>)
 8005124:	2202      	movs	r2, #2
 8005126:	701a      	strb	r2, [r3, #0]
		break;
 8005128:	e000      	b.n	800512c <_Z6tcpGpsv+0x84>
		break;
 800512a:	bf00      	nop
	}
}
 800512c:	bf00      	nop
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	20001139 	.word	0x20001139
 800513c:	20000ade 	.word	0x20000ade
 8005140:	20000add 	.word	0x20000add
 8005144:	2000113a 	.word	0x2000113a
 8005148:	2000113c 	.word	0x2000113c
 800514c:	20001140 	.word	0x20001140
 8005150:	20000393 	.word	0x20000393

08005154 <_Z41__static_initialization_and_destruction_0ii>:
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2b01      	cmp	r3, #1
 8005162:	d11f      	bne.n	80051a4 <_Z41__static_initialization_and_destruction_0ii+0x50>
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800516a:	4293      	cmp	r3, r2
 800516c:	d11a      	bne.n	80051a4 <_Z41__static_initialization_and_destruction_0ii+0x50>
uint32_t limitGpsTcp = 43200000/superloop;// Tiempo que esta apagado GPS
 800516e:	4b10      	ldr	r3, [pc, #64]	@ (80051b0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	461a      	mov	r2, r3
 8005174:	4b0f      	ldr	r3, [pc, #60]	@ (80051b4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8005176:	fb93 f3f2 	sdiv	r3, r3, r2
 800517a:	461a      	mov	r2, r3
 800517c:	4b0e      	ldr	r3, [pc, #56]	@ (80051b8 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 800517e:	601a      	str	r2, [r3, #0]
uint32_t limitTcpData	= 120000/superloop;	// Limite para fijar datos
 8005180:	4b0b      	ldr	r3, [pc, #44]	@ (80051b0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	461a      	mov	r2, r3
 8005186:	4b0d      	ldr	r3, [pc, #52]	@ (80051bc <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8005188:	fb93 f3f2 	sdiv	r3, r3, r2
 800518c:	461a      	mov	r2, r3
 800518e:	4b0c      	ldr	r3, [pc, #48]	@ (80051c0 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8005190:	601a      	str	r2, [r3, #0]
uint32_t limitTcpSys	= 21600000/superloop;	// Limite para fijar datos system
 8005192:	4b07      	ldr	r3, [pc, #28]	@ (80051b0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8005194:	781b      	ldrb	r3, [r3, #0]
 8005196:	461a      	mov	r2, r3
 8005198:	4b0a      	ldr	r3, [pc, #40]	@ (80051c4 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800519a:	fb93 f3f2 	sdiv	r3, r3, r2
 800519e:	461a      	mov	r2, r3
 80051a0:	4b09      	ldr	r3, [pc, #36]	@ (80051c8 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 80051a2:	601a      	str	r2, [r3, #0]
}
 80051a4:	bf00      	nop
 80051a6:	370c      	adds	r7, #12
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr
 80051b0:	20000395 	.word	0x20000395
 80051b4:	02932e00 	.word	0x02932e00
 80051b8:	20001140 	.word	0x20001140
 80051bc:	0001d4c0 	.word	0x0001d4c0
 80051c0:	2000114c 	.word	0x2000114c
 80051c4:	01499700 	.word	0x01499700
 80051c8:	20001158 	.word	0x20001158

080051cc <_GLOBAL__sub_I_stateGpsTcp>:
 80051cc:	b580      	push	{r7, lr}
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80051d4:	2001      	movs	r0, #1
 80051d6:	f7ff ffbd 	bl	8005154 <_Z41__static_initialization_and_destruction_0ii>
 80051da:	bd80      	pop	{r7, pc}

080051dc <_Z9tcpOutputv>:
uint16_t countTcpLoraOut;							// Contador para esperar
const uint16_t limitTcpLoraOut	= 1000/superloop;	// Limite para enviar comando

/*****	OUTPUT	*****/

void tcpOutput(){
 80051dc:	b580      	push	{r7, lr}
 80051de:	af00      	add	r7, sp, #0
	tcpOutLora();
 80051e0:	f000 f802 	bl	80051e8 <_Z10tcpOutLorav>
}
 80051e4:	bf00      	nop
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <_Z10tcpOutLorav>:

void tcpOutLora(){
 80051e8:	b580      	push	{r7, lr}
 80051ea:	af00      	add	r7, sp, #0
	switch( stateTpcLoraOut ){
 80051ec:	4b2a      	ldr	r3, [pc, #168]	@ (8005298 <_Z10tcpOutLorav+0xb0>)
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	2b02      	cmp	r3, #2
 80051f2:	d028      	beq.n	8005246 <_Z10tcpOutLorav+0x5e>
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	dc48      	bgt.n	800528a <_Z10tcpOutLorav+0xa2>
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d002      	beq.n	8005202 <_Z10tcpOutLorav+0x1a>
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d00e      	beq.n	800521e <_Z10tcpOutLorav+0x36>
 8005200:	e043      	b.n	800528a <_Z10tcpOutLorav+0xa2>
	///////////////////////
	// S0 - WAIT COMMAND //
	///////////////////////

	case 0:
		if ( loraSelect.newCommand() ){	// Si hay nuevo comando
 8005202:	4826      	ldr	r0, [pc, #152]	@ (800529c <_Z10tcpOutLorav+0xb4>)
 8005204:	f7fe fc41 	bl	8003a8a <_ZN10loraSelect10newCommandEv>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d003      	beq.n	8005216 <_Z10tcpOutLorav+0x2e>
 			stateTpcLoraOut	= 1;		// Pasa a S1
 800520e:	4b22      	ldr	r3, [pc, #136]	@ (8005298 <_Z10tcpOutLorav+0xb0>)
 8005210:	2201      	movs	r2, #1
 8005212:	701a      	strb	r2, [r3, #0]
		}
		else{							// Si no
			stateTpcLoraOut	= 0;		// Queda en S0
		}
		break;
 8005214:	e03d      	b.n	8005292 <_Z10tcpOutLorav+0xaa>
			stateTpcLoraOut	= 0;		// Queda en S0
 8005216:	4b20      	ldr	r3, [pc, #128]	@ (8005298 <_Z10tcpOutLorav+0xb0>)
 8005218:	2200      	movs	r2, #0
 800521a:	701a      	strb	r2, [r3, #0]
		break;
 800521c:	e039      	b.n	8005292 <_Z10tcpOutLorav+0xaa>
	////////////////////////
	// S1 - WAIT FOR SEND //
	////////////////////////

	case 1:
		countTcpLoraOut++;							// Suma 1 al contador
 800521e:	4b20      	ldr	r3, [pc, #128]	@ (80052a0 <_Z10tcpOutLorav+0xb8>)
 8005220:	881b      	ldrh	r3, [r3, #0]
 8005222:	3301      	adds	r3, #1
 8005224:	b29a      	uxth	r2, r3
 8005226:	4b1e      	ldr	r3, [pc, #120]	@ (80052a0 <_Z10tcpOutLorav+0xb8>)
 8005228:	801a      	strh	r2, [r3, #0]

		if ( countTcpLoraOut >= limitTcpLoraOut ){	// Si llega al limite
 800522a:	4b1d      	ldr	r3, [pc, #116]	@ (80052a0 <_Z10tcpOutLorav+0xb8>)
 800522c:	881a      	ldrh	r2, [r3, #0]
 800522e:	4b1d      	ldr	r3, [pc, #116]	@ (80052a4 <_Z10tcpOutLorav+0xbc>)
 8005230:	881b      	ldrh	r3, [r3, #0]
 8005232:	429a      	cmp	r2, r3
 8005234:	d303      	bcc.n	800523e <_Z10tcpOutLorav+0x56>
			stateTpcLoraOut	= 2;					// Pasa a S2
 8005236:	4b18      	ldr	r3, [pc, #96]	@ (8005298 <_Z10tcpOutLorav+0xb0>)
 8005238:	2202      	movs	r2, #2
 800523a:	701a      	strb	r2, [r3, #0]
		}
		else{										// Si no
			stateTpcLoraOut	= 1;					// Queda en S1
		}
		break;
 800523c:	e029      	b.n	8005292 <_Z10tcpOutLorav+0xaa>
			stateTpcLoraOut	= 1;					// Queda en S1
 800523e:	4b16      	ldr	r3, [pc, #88]	@ (8005298 <_Z10tcpOutLorav+0xb0>)
 8005240:	2201      	movs	r2, #1
 8005242:	701a      	strb	r2, [r3, #0]
		break;
 8005244:	e025      	b.n	8005292 <_Z10tcpOutLorav+0xaa>
	/////////////////////////////
	// S2 - CONFIG BY TRANSMIT //
	/////////////////////////////

	case 2:
		countTcpLoraOut	= 0;										// Reinicia contador
 8005246:	4b16      	ldr	r3, [pc, #88]	@ (80052a0 <_Z10tcpOutLorav+0xb8>)
 8005248:	2200      	movs	r2, #0
 800524a:	801a      	strh	r2, [r3, #0]

		loraTxCommand0 	= loraSelect.getCommand();					// Guarda comando
 800524c:	4813      	ldr	r0, [pc, #76]	@ (800529c <_Z10tcpOutLorav+0xb4>)
 800524e:	f7fe fc2d 	bl	8003aac <_ZN10loraSelect10getCommandEv>
 8005252:	4603      	mov	r3, r0
 8005254:	4a14      	ldr	r2, [pc, #80]	@ (80052a8 <_Z10tcpOutLorav+0xc0>)
 8005256:	6013      	str	r3, [r2, #0]
		sizeTxCommand0	= loraSelect.getCommandSize();				// Guarda tamaño de comando
 8005258:	4810      	ldr	r0, [pc, #64]	@ (800529c <_Z10tcpOutLorav+0xb4>)
 800525a:	f7fe fc33 	bl	8003ac4 <_ZN10loraSelect14getCommandSizeEv>
 800525e:	4603      	mov	r3, r0
 8005260:	461a      	mov	r2, r3
 8005262:	4b12      	ldr	r3, [pc, #72]	@ (80052ac <_Z10tcpOutLorav+0xc4>)
 8005264:	701a      	strb	r2, [r3, #0]

		loraCheck.setIdealResponses( loraSelect.qttyResponses() );	// Guarda largo de lista de respuestas
 8005266:	480d      	ldr	r0, [pc, #52]	@ (800529c <_Z10tcpOutLorav+0xb4>)
 8005268:	f7fe fc38 	bl	8003adc <_ZN10loraSelect13qttyResponsesEv>
 800526c:	4603      	mov	r3, r0
 800526e:	4619      	mov	r1, r3
 8005270:	480f      	ldr	r0, [pc, #60]	@ (80052b0 <_Z10tcpOutLorav+0xc8>)
 8005272:	f7fe fad6 	bl	8003822 <_ZN9loraCheck17setIdealResponsesEh>
		loraDecision.reset();										// Reinicia TCP
 8005276:	480f      	ldr	r0, [pc, #60]	@ (80052b4 <_Z10tcpOutLorav+0xcc>)
 8005278:	f7fe fcc5 	bl	8003c06 <_ZN12loraDecision5resetEv>
		flagTxLora	= 1;											// Transmite
 800527c:	4b0e      	ldr	r3, [pc, #56]	@ (80052b8 <_Z10tcpOutLorav+0xd0>)
 800527e:	2201      	movs	r2, #1
 8005280:	701a      	strb	r2, [r3, #0]
		stateTpcLoraOut	= 0;										// Vuelve a S0
 8005282:	4b05      	ldr	r3, [pc, #20]	@ (8005298 <_Z10tcpOutLorav+0xb0>)
 8005284:	2200      	movs	r2, #0
 8005286:	701a      	strb	r2, [r3, #0]
		break;
 8005288:	e003      	b.n	8005292 <_Z10tcpOutLorav+0xaa>

	default:
		stateTpcLoraOut	= 0;
 800528a:	4b03      	ldr	r3, [pc, #12]	@ (8005298 <_Z10tcpOutLorav+0xb0>)
 800528c:	2200      	movs	r2, #0
 800528e:	701a      	strb	r2, [r3, #0]
		break;
 8005290:	bf00      	nop
	}

}
 8005292:	bf00      	nop
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	20001165 	.word	0x20001165
 800529c:	20000b80 	.word	0x20000b80
 80052a0:	20001166 	.word	0x20001166
 80052a4:	20001168 	.word	0x20001168
 80052a8:	20001160 	.word	0x20001160
 80052ac:	20001164 	.word	0x20001164
 80052b0:	20000b64 	.word	0x20000b64
 80052b4:	20000b78 	.word	0x20000b78
 80052b8:	200004e5 	.word	0x200004e5

080052bc <_Z41__static_initialization_and_destruction_0ii>:
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d10e      	bne.n	80052ea <_Z41__static_initialization_and_destruction_0ii+0x2e>
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d109      	bne.n	80052ea <_Z41__static_initialization_and_destruction_0ii+0x2e>
const uint16_t limitTcpLoraOut	= 1000/superloop;	// Limite para enviar comando
 80052d6:	4b08      	ldr	r3, [pc, #32]	@ (80052f8 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	461a      	mov	r2, r3
 80052dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80052e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80052e4:	b29a      	uxth	r2, r3
 80052e6:	4b05      	ldr	r3, [pc, #20]	@ (80052fc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80052e8:	801a      	strh	r2, [r3, #0]
}
 80052ea:	bf00      	nop
 80052ec:	370c      	adds	r7, #12
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr
 80052f6:	bf00      	nop
 80052f8:	20000395 	.word	0x20000395
 80052fc:	20001168 	.word	0x20001168

08005300 <_GLOBAL__sub_I_loraTxCommand0>:
 8005300:	b580      	push	{r7, lr}
 8005302:	af00      	add	r7, sp, #0
 8005304:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8005308:	2001      	movs	r0, #1
 800530a:	f7ff ffd7 	bl	80052bc <_Z41__static_initialization_and_destruction_0ii>
 800530e:	bd80      	pop	{r7, pc}

08005310 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8005310:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005348 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005314:	f7ff fe14 	bl	8004f40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005318:	480c      	ldr	r0, [pc, #48]	@ (800534c <LoopForever+0x6>)
  ldr r1, =_edata
 800531a:	490d      	ldr	r1, [pc, #52]	@ (8005350 <LoopForever+0xa>)
  ldr r2, =_sidata
 800531c:	4a0d      	ldr	r2, [pc, #52]	@ (8005354 <LoopForever+0xe>)
  movs r3, #0
 800531e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005320:	e002      	b.n	8005328 <LoopCopyDataInit>

08005322 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005322:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005324:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005326:	3304      	adds	r3, #4

08005328 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005328:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800532a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800532c:	d3f9      	bcc.n	8005322 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800532e:	4a0a      	ldr	r2, [pc, #40]	@ (8005358 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005330:	4c0a      	ldr	r4, [pc, #40]	@ (800535c <LoopForever+0x16>)
  movs r3, #0
 8005332:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005334:	e001      	b.n	800533a <LoopFillZerobss>

08005336 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005336:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005338:	3204      	adds	r2, #4

0800533a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800533a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800533c:	d3fb      	bcc.n	8005336 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800533e:	f008 f9e1 	bl	800d704 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005342:	f7fe fce5 	bl	8003d10 <main>

08005346 <LoopForever>:

LoopForever:
    b LoopForever
 8005346:	e7fe      	b.n	8005346 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8005348:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800534c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005350:	200003a4 	.word	0x200003a4
  ldr r2, =_sidata
 8005354:	0800d7e0 	.word	0x0800d7e0
  ldr r2, =_sbss
 8005358:	200003a4 	.word	0x200003a4
  ldr r4, =_ebss
 800535c:	20001170 	.word	0x20001170

08005360 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005360:	e7fe      	b.n	8005360 <ADC3_IRQHandler>

08005362 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005362:	b580      	push	{r7, lr}
 8005364:	b082      	sub	sp, #8
 8005366:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005368:	2300      	movs	r3, #0
 800536a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800536c:	2003      	movs	r0, #3
 800536e:	f001 fe01 	bl	8006f74 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005372:	200f      	movs	r0, #15
 8005374:	f000 f80e 	bl	8005394 <HAL_InitTick>
 8005378:	4603      	mov	r3, r0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d002      	beq.n	8005384 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	71fb      	strb	r3, [r7, #7]
 8005382:	e001      	b.n	8005388 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005384:	f7ff f998 	bl	80046b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005388:	79fb      	ldrb	r3, [r7, #7]
}
 800538a:	4618      	mov	r0, r3
 800538c:	3708      	adds	r7, #8
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
	...

08005394 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800539c:	2300      	movs	r3, #0
 800539e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80053a0:	4b17      	ldr	r3, [pc, #92]	@ (8005400 <HAL_InitTick+0x6c>)
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d023      	beq.n	80053f0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80053a8:	4b16      	ldr	r3, [pc, #88]	@ (8005404 <HAL_InitTick+0x70>)
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	4b14      	ldr	r3, [pc, #80]	@ (8005400 <HAL_InitTick+0x6c>)
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	4619      	mov	r1, r3
 80053b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80053b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80053ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80053be:	4618      	mov	r0, r3
 80053c0:	f001 fe1b 	bl	8006ffa <HAL_SYSTICK_Config>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d10f      	bne.n	80053ea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2b0f      	cmp	r3, #15
 80053ce:	d809      	bhi.n	80053e4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80053d0:	2200      	movs	r2, #0
 80053d2:	6879      	ldr	r1, [r7, #4]
 80053d4:	f04f 30ff 	mov.w	r0, #4294967295
 80053d8:	f001 fdd7 	bl	8006f8a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80053dc:	4a0a      	ldr	r2, [pc, #40]	@ (8005408 <HAL_InitTick+0x74>)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6013      	str	r3, [r2, #0]
 80053e2:	e007      	b.n	80053f4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	73fb      	strb	r3, [r7, #15]
 80053e8:	e004      	b.n	80053f4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	73fb      	strb	r3, [r7, #15]
 80053ee:	e001      	b.n	80053f4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80053f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3710      	adds	r7, #16
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	200003a0 	.word	0x200003a0
 8005404:	20000398 	.word	0x20000398
 8005408:	2000039c 	.word	0x2000039c

0800540c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800540c:	b480      	push	{r7}
 800540e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005410:	4b06      	ldr	r3, [pc, #24]	@ (800542c <HAL_IncTick+0x20>)
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	461a      	mov	r2, r3
 8005416:	4b06      	ldr	r3, [pc, #24]	@ (8005430 <HAL_IncTick+0x24>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4413      	add	r3, r2
 800541c:	4a04      	ldr	r2, [pc, #16]	@ (8005430 <HAL_IncTick+0x24>)
 800541e:	6013      	str	r3, [r2, #0]
}
 8005420:	bf00      	nop
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop
 800542c:	200003a0 	.word	0x200003a0
 8005430:	2000116c 	.word	0x2000116c

08005434 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005434:	b480      	push	{r7}
 8005436:	af00      	add	r7, sp, #0
  return uwTick;
 8005438:	4b03      	ldr	r3, [pc, #12]	@ (8005448 <HAL_GetTick+0x14>)
 800543a:	681b      	ldr	r3, [r3, #0]
}
 800543c:	4618      	mov	r0, r3
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	2000116c 	.word	0x2000116c

0800544c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800544c:	b480      	push	{r7}
 800544e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8005450:	4b05      	ldr	r3, [pc, #20]	@ (8005468 <HAL_SuspendTick+0x1c>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a04      	ldr	r2, [pc, #16]	@ (8005468 <HAL_SuspendTick+0x1c>)
 8005456:	f023 0302 	bic.w	r3, r3, #2
 800545a:	6013      	str	r3, [r2, #0]
}
 800545c:	bf00      	nop
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr
 8005466:	bf00      	nop
 8005468:	e000e010 	.word	0xe000e010

0800546c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800546c:	b480      	push	{r7}
 800546e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8005470:	4b05      	ldr	r3, [pc, #20]	@ (8005488 <HAL_ResumeTick+0x1c>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a04      	ldr	r2, [pc, #16]	@ (8005488 <HAL_ResumeTick+0x1c>)
 8005476:	f043 0302 	orr.w	r3, r3, #2
 800547a:	6013      	str	r3, [r2, #0]
}
 800547c:	bf00      	nop
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr
 8005486:	bf00      	nop
 8005488:	e000e010 	.word	0xe000e010

0800548c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	431a      	orrs	r2, r3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	609a      	str	r2, [r3, #8]
}
 80054a6:	bf00      	nop
 80054a8:	370c      	adds	r7, #12
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr

080054b2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80054b2:	b480      	push	{r7}
 80054b4:	b083      	sub	sp, #12
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
 80054ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	431a      	orrs	r2, r3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	609a      	str	r2, [r3, #8]
}
 80054cc:	bf00      	nop
 80054ce:	370c      	adds	r7, #12
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	370c      	adds	r7, #12
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b087      	sub	sp, #28
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	607a      	str	r2, [r7, #4]
 8005500:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	3360      	adds	r3, #96	@ 0x60
 8005506:	461a      	mov	r2, r3
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	4413      	add	r3, r2
 800550e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	4b08      	ldr	r3, [pc, #32]	@ (8005538 <LL_ADC_SetOffset+0x44>)
 8005516:	4013      	ands	r3, r2
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800551e:	683a      	ldr	r2, [r7, #0]
 8005520:	430a      	orrs	r2, r1
 8005522:	4313      	orrs	r3, r2
 8005524:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800552c:	bf00      	nop
 800552e:	371c      	adds	r7, #28
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr
 8005538:	03fff000 	.word	0x03fff000

0800553c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800553c:	b480      	push	{r7}
 800553e:	b085      	sub	sp, #20
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	3360      	adds	r3, #96	@ 0x60
 800554a:	461a      	mov	r2, r3
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	4413      	add	r3, r2
 8005552:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800555c:	4618      	mov	r0, r3
 800555e:	3714      	adds	r7, #20
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005568:	b480      	push	{r7}
 800556a:	b087      	sub	sp, #28
 800556c:	af00      	add	r7, sp, #0
 800556e:	60f8      	str	r0, [r7, #12]
 8005570:	60b9      	str	r1, [r7, #8]
 8005572:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	3360      	adds	r3, #96	@ 0x60
 8005578:	461a      	mov	r2, r3
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	4413      	add	r3, r2
 8005580:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	431a      	orrs	r2, r3
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8005592:	bf00      	nop
 8005594:	371c      	adds	r7, #28
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr

0800559e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800559e:	b480      	push	{r7}
 80055a0:	b083      	sub	sp, #12
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
 80055a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	695b      	ldr	r3, [r3, #20]
 80055ac:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	431a      	orrs	r2, r3
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	615a      	str	r2, [r3, #20]
}
 80055b8:	bf00      	nop
 80055ba:	370c      	adds	r7, #12
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b083      	sub	sp, #12
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d101      	bne.n	80055dc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80055d8:	2301      	movs	r3, #1
 80055da:	e000      	b.n	80055de <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	370c      	adds	r7, #12
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr

080055ea <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80055ea:	b480      	push	{r7}
 80055ec:	b087      	sub	sp, #28
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	60f8      	str	r0, [r7, #12]
 80055f2:	60b9      	str	r1, [r7, #8]
 80055f4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	3330      	adds	r3, #48	@ 0x30
 80055fa:	461a      	mov	r2, r3
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	0a1b      	lsrs	r3, r3, #8
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	f003 030c 	and.w	r3, r3, #12
 8005606:	4413      	add	r3, r2
 8005608:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	f003 031f 	and.w	r3, r3, #31
 8005614:	211f      	movs	r1, #31
 8005616:	fa01 f303 	lsl.w	r3, r1, r3
 800561a:	43db      	mvns	r3, r3
 800561c:	401a      	ands	r2, r3
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	0e9b      	lsrs	r3, r3, #26
 8005622:	f003 011f 	and.w	r1, r3, #31
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	f003 031f 	and.w	r3, r3, #31
 800562c:	fa01 f303 	lsl.w	r3, r1, r3
 8005630:	431a      	orrs	r2, r3
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005636:	bf00      	nop
 8005638:	371c      	adds	r7, #28
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr

08005642 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005642:	b480      	push	{r7}
 8005644:	b083      	sub	sp, #12
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800564e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d101      	bne.n	800565a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8005656:	2301      	movs	r3, #1
 8005658:	e000      	b.n	800565c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800565a:	2300      	movs	r3, #0
}
 800565c:	4618      	mov	r0, r3
 800565e:	370c      	adds	r7, #12
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr

08005668 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005668:	b480      	push	{r7}
 800566a:	b087      	sub	sp, #28
 800566c:	af00      	add	r7, sp, #0
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	3314      	adds	r3, #20
 8005678:	461a      	mov	r2, r3
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	0e5b      	lsrs	r3, r3, #25
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	f003 0304 	and.w	r3, r3, #4
 8005684:	4413      	add	r3, r2
 8005686:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	0d1b      	lsrs	r3, r3, #20
 8005690:	f003 031f 	and.w	r3, r3, #31
 8005694:	2107      	movs	r1, #7
 8005696:	fa01 f303 	lsl.w	r3, r1, r3
 800569a:	43db      	mvns	r3, r3
 800569c:	401a      	ands	r2, r3
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	0d1b      	lsrs	r3, r3, #20
 80056a2:	f003 031f 	and.w	r3, r3, #31
 80056a6:	6879      	ldr	r1, [r7, #4]
 80056a8:	fa01 f303 	lsl.w	r3, r1, r3
 80056ac:	431a      	orrs	r2, r3
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80056b2:	bf00      	nop
 80056b4:	371c      	adds	r7, #28
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr
	...

080056c0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b085      	sub	sp, #20
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	60b9      	str	r1, [r7, #8]
 80056ca:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056d8:	43db      	mvns	r3, r3
 80056da:	401a      	ands	r2, r3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f003 0318 	and.w	r3, r3, #24
 80056e2:	4908      	ldr	r1, [pc, #32]	@ (8005704 <LL_ADC_SetChannelSingleDiff+0x44>)
 80056e4:	40d9      	lsrs	r1, r3
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	400b      	ands	r3, r1
 80056ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056ee:	431a      	orrs	r2, r3
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80056f6:	bf00      	nop
 80056f8:	3714      	adds	r7, #20
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr
 8005702:	bf00      	nop
 8005704:	0007ffff 	.word	0x0007ffff

08005708 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005708:	b480      	push	{r7}
 800570a:	b083      	sub	sp, #12
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	f003 031f 	and.w	r3, r3, #31
}
 8005718:	4618      	mov	r0, r3
 800571a:	370c      	adds	r7, #12
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005724:	b480      	push	{r7}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8005734:	4618      	mov	r0, r3
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8005750:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	6093      	str	r3, [r2, #8]
}
 8005758:	bf00      	nop
 800575a:	370c      	adds	r7, #12
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005774:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005778:	d101      	bne.n	800577e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800577a:	2301      	movs	r3, #1
 800577c:	e000      	b.n	8005780 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800577e:	2300      	movs	r3, #0
}
 8005780:	4618      	mov	r0, r3
 8005782:	370c      	adds	r7, #12
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800579c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80057a0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80057a8:	bf00      	nop
 80057aa:	370c      	adds	r7, #12
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr

080057b4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80057c8:	d101      	bne.n	80057ce <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80057ca:	2301      	movs	r3, #1
 80057cc:	e000      	b.n	80057d0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80057ce:	2300      	movs	r3, #0
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	370c      	adds	r7, #12
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr

080057dc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80057ec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80057f0:	f043 0201 	orr.w	r2, r3, #1
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80057f8:	bf00      	nop
 80057fa:	370c      	adds	r7, #12
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr

08005804 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8005804:	b480      	push	{r7}
 8005806:	b083      	sub	sp, #12
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	f003 0301 	and.w	r3, r3, #1
 8005814:	2b01      	cmp	r3, #1
 8005816:	d101      	bne.n	800581c <LL_ADC_IsEnabled+0x18>
 8005818:	2301      	movs	r3, #1
 800581a:	e000      	b.n	800581e <LL_ADC_IsEnabled+0x1a>
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	370c      	adds	r7, #12
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr

0800582a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800582a:	b480      	push	{r7}
 800582c:	b083      	sub	sp, #12
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800583a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800583e:	f043 0204 	orr.w	r2, r3, #4
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005846:	bf00      	nop
 8005848:	370c      	adds	r7, #12
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr

08005852 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005852:	b480      	push	{r7}
 8005854:	b083      	sub	sp, #12
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	f003 0304 	and.w	r3, r3, #4
 8005862:	2b04      	cmp	r3, #4
 8005864:	d101      	bne.n	800586a <LL_ADC_REG_IsConversionOngoing+0x18>
 8005866:	2301      	movs	r3, #1
 8005868:	e000      	b.n	800586c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800586a:	2300      	movs	r3, #0
}
 800586c:	4618      	mov	r0, r3
 800586e:	370c      	adds	r7, #12
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	f003 0308 	and.w	r3, r3, #8
 8005888:	2b08      	cmp	r3, #8
 800588a:	d101      	bne.n	8005890 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800588c:	2301      	movs	r3, #1
 800588e:	e000      	b.n	8005892 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005890:	2300      	movs	r3, #0
}
 8005892:	4618      	mov	r0, r3
 8005894:	370c      	adds	r7, #12
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr
	...

080058a0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80058a0:	b590      	push	{r4, r7, lr}
 80058a2:	b089      	sub	sp, #36	@ 0x24
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80058a8:	2300      	movs	r3, #0
 80058aa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80058ac:	2300      	movs	r3, #0
 80058ae:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d101      	bne.n	80058ba <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e133      	b.n	8005b22 <HAL_ADC_Init+0x282>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d109      	bne.n	80058dc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f7fe ff19 	bl	8004700 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4618      	mov	r0, r3
 80058e2:	f7ff ff3f 	bl	8005764 <LL_ADC_IsDeepPowerDownEnabled>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d004      	beq.n	80058f6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4618      	mov	r0, r3
 80058f2:	f7ff ff25 	bl	8005740 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4618      	mov	r0, r3
 80058fc:	f7ff ff5a 	bl	80057b4 <LL_ADC_IsInternalRegulatorEnabled>
 8005900:	4603      	mov	r3, r0
 8005902:	2b00      	cmp	r3, #0
 8005904:	d115      	bne.n	8005932 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4618      	mov	r0, r3
 800590c:	f7ff ff3e 	bl	800578c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005910:	4b86      	ldr	r3, [pc, #536]	@ (8005b2c <HAL_ADC_Init+0x28c>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	099b      	lsrs	r3, r3, #6
 8005916:	4a86      	ldr	r2, [pc, #536]	@ (8005b30 <HAL_ADC_Init+0x290>)
 8005918:	fba2 2303 	umull	r2, r3, r2, r3
 800591c:	099b      	lsrs	r3, r3, #6
 800591e:	3301      	adds	r3, #1
 8005920:	005b      	lsls	r3, r3, #1
 8005922:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005924:	e002      	b.n	800592c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	3b01      	subs	r3, #1
 800592a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d1f9      	bne.n	8005926 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4618      	mov	r0, r3
 8005938:	f7ff ff3c 	bl	80057b4 <LL_ADC_IsInternalRegulatorEnabled>
 800593c:	4603      	mov	r3, r0
 800593e:	2b00      	cmp	r3, #0
 8005940:	d10d      	bne.n	800595e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005946:	f043 0210 	orr.w	r2, r3, #16
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005952:	f043 0201 	orr.w	r2, r3, #1
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4618      	mov	r0, r3
 8005964:	f7ff ff75 	bl	8005852 <LL_ADC_REG_IsConversionOngoing>
 8005968:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800596e:	f003 0310 	and.w	r3, r3, #16
 8005972:	2b00      	cmp	r3, #0
 8005974:	f040 80cc 	bne.w	8005b10 <HAL_ADC_Init+0x270>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	2b00      	cmp	r3, #0
 800597c:	f040 80c8 	bne.w	8005b10 <HAL_ADC_Init+0x270>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005984:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8005988:	f043 0202 	orr.w	r2, r3, #2
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4618      	mov	r0, r3
 8005996:	f7ff ff35 	bl	8005804 <LL_ADC_IsEnabled>
 800599a:	4603      	mov	r3, r0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d115      	bne.n	80059cc <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80059a0:	4864      	ldr	r0, [pc, #400]	@ (8005b34 <HAL_ADC_Init+0x294>)
 80059a2:	f7ff ff2f 	bl	8005804 <LL_ADC_IsEnabled>
 80059a6:	4604      	mov	r4, r0
 80059a8:	4863      	ldr	r0, [pc, #396]	@ (8005b38 <HAL_ADC_Init+0x298>)
 80059aa:	f7ff ff2b 	bl	8005804 <LL_ADC_IsEnabled>
 80059ae:	4603      	mov	r3, r0
 80059b0:	431c      	orrs	r4, r3
 80059b2:	4862      	ldr	r0, [pc, #392]	@ (8005b3c <HAL_ADC_Init+0x29c>)
 80059b4:	f7ff ff26 	bl	8005804 <LL_ADC_IsEnabled>
 80059b8:	4603      	mov	r3, r0
 80059ba:	4323      	orrs	r3, r4
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d105      	bne.n	80059cc <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	4619      	mov	r1, r3
 80059c6:	485e      	ldr	r0, [pc, #376]	@ (8005b40 <HAL_ADC_Init+0x2a0>)
 80059c8:	f7ff fd60 	bl	800548c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	7e5b      	ldrb	r3, [r3, #25]
 80059d0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80059d6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80059dc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80059e2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80059ea:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80059ec:	4313      	orrs	r3, r2
 80059ee:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d106      	bne.n	8005a08 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059fe:	3b01      	subs	r3, #1
 8005a00:	045b      	lsls	r3, r3, #17
 8005a02:	69ba      	ldr	r2, [r7, #24]
 8005a04:	4313      	orrs	r3, r2
 8005a06:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d009      	beq.n	8005a24 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a14:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a1c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005a1e:	69ba      	ldr	r2, [r7, #24]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	68da      	ldr	r2, [r3, #12]
 8005a2a:	4b46      	ldr	r3, [pc, #280]	@ (8005b44 <HAL_ADC_Init+0x2a4>)
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	6812      	ldr	r2, [r2, #0]
 8005a32:	69b9      	ldr	r1, [r7, #24]
 8005a34:	430b      	orrs	r3, r1
 8005a36:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f7ff ff1b 	bl	8005878 <LL_ADC_INJ_IsConversionOngoing>
 8005a42:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d140      	bne.n	8005acc <HAL_ADC_Init+0x22c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d13d      	bne.n	8005acc <HAL_ADC_Init+0x22c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	7e1b      	ldrb	r3, [r3, #24]
 8005a58:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005a5a:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005a62:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005a64:	4313      	orrs	r3, r2
 8005a66:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a72:	f023 0306 	bic.w	r3, r3, #6
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	6812      	ldr	r2, [r2, #0]
 8005a7a:	69b9      	ldr	r1, [r7, #24]
 8005a7c:	430b      	orrs	r3, r1
 8005a7e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d118      	bne.n	8005abc <HAL_ADC_Init+0x21c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	691b      	ldr	r3, [r3, #16]
 8005a90:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005a94:	f023 0304 	bic.w	r3, r3, #4
 8005a98:	687a      	ldr	r2, [r7, #4]
 8005a9a:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005aa0:	4311      	orrs	r1, r2
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005aa6:	4311      	orrs	r1, r2
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005aac:	430a      	orrs	r2, r1
 8005aae:	431a      	orrs	r2, r3
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f042 0201 	orr.w	r2, r2, #1
 8005ab8:	611a      	str	r2, [r3, #16]
 8005aba:	e007      	b.n	8005acc <HAL_ADC_Init+0x22c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	691a      	ldr	r2, [r3, #16]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f022 0201 	bic.w	r2, r2, #1
 8005aca:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d10c      	bne.n	8005aee <HAL_ADC_Init+0x24e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ada:	f023 010f 	bic.w	r1, r3, #15
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	69db      	ldr	r3, [r3, #28]
 8005ae2:	1e5a      	subs	r2, r3, #1
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	430a      	orrs	r2, r1
 8005aea:	631a      	str	r2, [r3, #48]	@ 0x30
 8005aec:	e007      	b.n	8005afe <HAL_ADC_Init+0x25e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f022 020f 	bic.w	r2, r2, #15
 8005afc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b02:	f023 0303 	bic.w	r3, r3, #3
 8005b06:	f043 0201 	orr.w	r2, r3, #1
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	659a      	str	r2, [r3, #88]	@ 0x58
 8005b0e:	e007      	b.n	8005b20 <HAL_ADC_Init+0x280>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b14:	f043 0210 	orr.w	r2, r3, #16
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005b20:	7ffb      	ldrb	r3, [r7, #31]
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3724      	adds	r7, #36	@ 0x24
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd90      	pop	{r4, r7, pc}
 8005b2a:	bf00      	nop
 8005b2c:	20000398 	.word	0x20000398
 8005b30:	053e2d63 	.word	0x053e2d63
 8005b34:	50040000 	.word	0x50040000
 8005b38:	50040100 	.word	0x50040100
 8005b3c:	50040200 	.word	0x50040200
 8005b40:	50040300 	.word	0x50040300
 8005b44:	fff0c007 	.word	0xfff0c007

08005b48 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b086      	sub	sp, #24
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	60b9      	str	r1, [r7, #8]
 8005b52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005b54:	4853      	ldr	r0, [pc, #332]	@ (8005ca4 <HAL_ADC_Start_DMA+0x15c>)
 8005b56:	f7ff fdd7 	bl	8005708 <LL_ADC_GetMultimode>
 8005b5a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4618      	mov	r0, r3
 8005b62:	f7ff fe76 	bl	8005852 <LL_ADC_REG_IsConversionOngoing>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	f040 8093 	bne.w	8005c94 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d101      	bne.n	8005b7c <HAL_ADC_Start_DMA+0x34>
 8005b78:	2302      	movs	r3, #2
 8005b7a:	e08e      	b.n	8005c9a <HAL_ADC_Start_DMA+0x152>
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a47      	ldr	r2, [pc, #284]	@ (8005ca8 <HAL_ADC_Start_DMA+0x160>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d008      	beq.n	8005ba0 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d005      	beq.n	8005ba0 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	2b05      	cmp	r3, #5
 8005b98:	d002      	beq.n	8005ba0 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	2b09      	cmp	r3, #9
 8005b9e:	d172      	bne.n	8005c86 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005ba0:	68f8      	ldr	r0, [r7, #12]
 8005ba2:	f000 fed1 	bl	8006948 <ADC_Enable>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005baa:	7dfb      	ldrb	r3, [r7, #23]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d165      	bne.n	8005c7c <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bb4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005bb8:	f023 0301 	bic.w	r3, r3, #1
 8005bbc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	659a      	str	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a38      	ldr	r2, [pc, #224]	@ (8005cac <HAL_ADC_Start_DMA+0x164>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d002      	beq.n	8005bd4 <HAL_ADC_Start_DMA+0x8c>
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	e000      	b.n	8005bd6 <HAL_ADC_Start_DMA+0x8e>
 8005bd4:	4b36      	ldr	r3, [pc, #216]	@ (8005cb0 <HAL_ADC_Start_DMA+0x168>)
 8005bd6:	68fa      	ldr	r2, [r7, #12]
 8005bd8:	6812      	ldr	r2, [r2, #0]
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d002      	beq.n	8005be4 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d105      	bne.n	8005bf0 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005be8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bf4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d006      	beq.n	8005c0a <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c00:	f023 0206 	bic.w	r2, r3, #6
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005c08:	e002      	b.n	8005c10 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c14:	4a27      	ldr	r2, [pc, #156]	@ (8005cb4 <HAL_ADC_Start_DMA+0x16c>)
 8005c16:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c1c:	4a26      	ldr	r2, [pc, #152]	@ (8005cb8 <HAL_ADC_Start_DMA+0x170>)
 8005c1e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c24:	4a25      	ldr	r2, [pc, #148]	@ (8005cbc <HAL_ADC_Start_DMA+0x174>)
 8005c26:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	221c      	movs	r2, #28
 8005c2e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	685a      	ldr	r2, [r3, #4]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f042 0210 	orr.w	r2, r2, #16
 8005c46:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	68da      	ldr	r2, [r3, #12]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f042 0201 	orr.w	r2, r2, #1
 8005c56:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	3340      	adds	r3, #64	@ 0x40
 8005c62:	4619      	mov	r1, r3
 8005c64:	68ba      	ldr	r2, [r7, #8]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f001 fb1e 	bl	80072a8 <HAL_DMA_Start_IT>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4618      	mov	r0, r3
 8005c76:	f7ff fdd8 	bl	800582a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8005c7a:	e00d      	b.n	8005c98 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      if (tmp_hal_status == HAL_OK)
 8005c84:	e008      	b.n	8005c98 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8005c92:	e001      	b.n	8005c98 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005c94:	2302      	movs	r3, #2
 8005c96:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005c98:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3718      	adds	r7, #24
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}
 8005ca2:	bf00      	nop
 8005ca4:	50040300 	.word	0x50040300
 8005ca8:	50040200 	.word	0x50040200
 8005cac:	50040100 	.word	0x50040100
 8005cb0:	50040000 	.word	0x50040000
 8005cb4:	08006a55 	.word	0x08006a55
 8005cb8:	08006b2d 	.word	0x08006b2d
 8005cbc:	08006b49 	.word	0x08006b49

08005cc0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b08a      	sub	sp, #40	@ 0x28
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8005cc8:	2300      	movs	r3, #0
 8005cca:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005cdc:	4882      	ldr	r0, [pc, #520]	@ (8005ee8 <HAL_ADC_IRQHandler+0x228>)
 8005cde:	f7ff fd13 	bl	8005708 <LL_ADC_GetMultimode>
 8005ce2:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	f003 0302 	and.w	r3, r3, #2
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d017      	beq.n	8005d1e <HAL_ADC_IRQHandler+0x5e>
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	f003 0302 	and.w	r3, r3, #2
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d012      	beq.n	8005d1e <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cfc:	f003 0310 	and.w	r3, r3, #16
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d105      	bne.n	8005d10 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d08:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 ff81 	bl	8006c18 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2202      	movs	r2, #2
 8005d1c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	f003 0304 	and.w	r3, r3, #4
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d004      	beq.n	8005d32 <HAL_ADC_IRQHandler+0x72>
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	f003 0304 	and.w	r3, r3, #4
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d10a      	bne.n	8005d48 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	f000 8083 	beq.w	8005e44 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005d3e:	69bb      	ldr	r3, [r7, #24]
 8005d40:	f003 0308 	and.w	r3, r3, #8
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d07d      	beq.n	8005e44 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d4c:	f003 0310 	and.w	r3, r3, #16
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d105      	bne.n	8005d60 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d58:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4618      	mov	r0, r3
 8005d66:	f7ff fc2d 	bl	80055c4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d062      	beq.n	8005e36 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a5d      	ldr	r2, [pc, #372]	@ (8005eec <HAL_ADC_IRQHandler+0x22c>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d002      	beq.n	8005d80 <HAL_ADC_IRQHandler+0xc0>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	e000      	b.n	8005d82 <HAL_ADC_IRQHandler+0xc2>
 8005d80:	4b5b      	ldr	r3, [pc, #364]	@ (8005ef0 <HAL_ADC_IRQHandler+0x230>)
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	6812      	ldr	r2, [r2, #0]
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d008      	beq.n	8005d9c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d005      	beq.n	8005d9c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	2b05      	cmp	r3, #5
 8005d94:	d002      	beq.n	8005d9c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	2b09      	cmp	r3, #9
 8005d9a:	d104      	bne.n	8005da6 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	623b      	str	r3, [r7, #32]
 8005da4:	e00c      	b.n	8005dc0 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a50      	ldr	r2, [pc, #320]	@ (8005eec <HAL_ADC_IRQHandler+0x22c>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d002      	beq.n	8005db6 <HAL_ADC_IRQHandler+0xf6>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	e000      	b.n	8005db8 <HAL_ADC_IRQHandler+0xf8>
 8005db6:	4b4e      	ldr	r3, [pc, #312]	@ (8005ef0 <HAL_ADC_IRQHandler+0x230>)
 8005db8:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	68db      	ldr	r3, [r3, #12]
 8005dbe:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8005dc0:	6a3b      	ldr	r3, [r7, #32]
 8005dc2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d135      	bne.n	8005e36 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 0308 	and.w	r3, r3, #8
 8005dd4:	2b08      	cmp	r3, #8
 8005dd6:	d12e      	bne.n	8005e36 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f7ff fd38 	bl	8005852 <LL_ADC_REG_IsConversionOngoing>
 8005de2:	4603      	mov	r3, r0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d11a      	bne.n	8005e1e <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	685a      	ldr	r2, [r3, #4]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f022 020c 	bic.w	r2, r2, #12
 8005df6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dfc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	659a      	str	r2, [r3, #88]	@ 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e08:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d112      	bne.n	8005e36 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e14:	f043 0201 	orr.w	r2, r3, #1
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	659a      	str	r2, [r3, #88]	@ 0x58
 8005e1c:	e00b      	b.n	8005e36 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e22:	f043 0210 	orr.w	r2, r3, #16
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e2e:	f043 0201 	orr.w	r2, r3, #1
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f7fe fb7c 	bl	8004534 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	220c      	movs	r2, #12
 8005e42:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	f003 0320 	and.w	r3, r3, #32
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d004      	beq.n	8005e58 <HAL_ADC_IRQHandler+0x198>
 8005e4e:	69bb      	ldr	r3, [r7, #24]
 8005e50:	f003 0320 	and.w	r3, r3, #32
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d10b      	bne.n	8005e70 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	f000 809f 	beq.w	8005fa2 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005e64:	69bb      	ldr	r3, [r7, #24]
 8005e66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	f000 8099 	beq.w	8005fa2 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e74:	f003 0310 	and.w	r3, r3, #16
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d105      	bne.n	8005e88 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e80:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f7ff fbd8 	bl	8005642 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8005e92:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f7ff fb93 	bl	80055c4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005e9e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a11      	ldr	r2, [pc, #68]	@ (8005eec <HAL_ADC_IRQHandler+0x22c>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d002      	beq.n	8005eb0 <HAL_ADC_IRQHandler+0x1f0>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	e000      	b.n	8005eb2 <HAL_ADC_IRQHandler+0x1f2>
 8005eb0:	4b0f      	ldr	r3, [pc, #60]	@ (8005ef0 <HAL_ADC_IRQHandler+0x230>)
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	6812      	ldr	r2, [r2, #0]
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d008      	beq.n	8005ecc <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d005      	beq.n	8005ecc <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	2b06      	cmp	r3, #6
 8005ec4:	d002      	beq.n	8005ecc <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	2b07      	cmp	r3, #7
 8005eca:	d104      	bne.n	8005ed6 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	623b      	str	r3, [r7, #32]
 8005ed4:	e013      	b.n	8005efe <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a04      	ldr	r2, [pc, #16]	@ (8005eec <HAL_ADC_IRQHandler+0x22c>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d009      	beq.n	8005ef4 <HAL_ADC_IRQHandler+0x234>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	e007      	b.n	8005ef6 <HAL_ADC_IRQHandler+0x236>
 8005ee6:	bf00      	nop
 8005ee8:	50040300 	.word	0x50040300
 8005eec:	50040100 	.word	0x50040100
 8005ef0:	50040000 	.word	0x50040000
 8005ef4:	4b7d      	ldr	r3, [pc, #500]	@ (80060ec <HAL_ADC_IRQHandler+0x42c>)
 8005ef6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d047      	beq.n	8005f94 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8005f04:	6a3b      	ldr	r3, [r7, #32]
 8005f06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d007      	beq.n	8005f1e <HAL_ADC_IRQHandler+0x25e>
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d03f      	beq.n	8005f94 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8005f14:	6a3b      	ldr	r3, [r7, #32]
 8005f16:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d13a      	bne.n	8005f94 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f28:	2b40      	cmp	r3, #64	@ 0x40
 8005f2a:	d133      	bne.n	8005f94 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8005f2c:	6a3b      	ldr	r3, [r7, #32]
 8005f2e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d12e      	bne.n	8005f94 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f7ff fc9c 	bl	8005878 <LL_ADC_INJ_IsConversionOngoing>
 8005f40:	4603      	mov	r3, r0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d11a      	bne.n	8005f7c <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	685a      	ldr	r2, [r3, #4]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005f54:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f5a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	659a      	str	r2, [r3, #88]	@ 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d112      	bne.n	8005f94 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f72:	f043 0201 	orr.w	r2, r3, #1
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	659a      	str	r2, [r3, #88]	@ 0x58
 8005f7a:	e00b      	b.n	8005f94 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f80:	f043 0210 	orr.w	r2, r3, #16
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	659a      	str	r2, [r3, #88]	@ 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f8c:	f043 0201 	orr.w	r2, r3, #1
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	65da      	str	r2, [r3, #92]	@ 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f000 fe17 	bl	8006bc8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	2260      	movs	r2, #96	@ 0x60
 8005fa0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d011      	beq.n	8005fd0 <HAL_ADC_IRQHandler+0x310>
 8005fac:	69bb      	ldr	r3, [r7, #24]
 8005fae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d00c      	beq.n	8005fd0 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fba:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 f8a0 	bl	8006108 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	2280      	movs	r2, #128	@ 0x80
 8005fce:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005fd0:	69fb      	ldr	r3, [r7, #28]
 8005fd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d012      	beq.n	8006000 <HAL_ADC_IRQHandler+0x340>
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d00d      	beq.n	8006000 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fe8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f000 fdfd 	bl	8006bf0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005ffe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8006000:	69fb      	ldr	r3, [r7, #28]
 8006002:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006006:	2b00      	cmp	r3, #0
 8006008:	d012      	beq.n	8006030 <HAL_ADC_IRQHandler+0x370>
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006010:	2b00      	cmp	r3, #0
 8006012:	d00d      	beq.n	8006030 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006018:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f000 fdef 	bl	8006c04 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800602e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8006030:	69fb      	ldr	r3, [r7, #28]
 8006032:	f003 0310 	and.w	r3, r3, #16
 8006036:	2b00      	cmp	r3, #0
 8006038:	d036      	beq.n	80060a8 <HAL_ADC_IRQHandler+0x3e8>
 800603a:	69bb      	ldr	r3, [r7, #24]
 800603c:	f003 0310 	and.w	r3, r3, #16
 8006040:	2b00      	cmp	r3, #0
 8006042:	d031      	beq.n	80060a8 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006048:	2b00      	cmp	r3, #0
 800604a:	d102      	bne.n	8006052 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 800604c:	2301      	movs	r3, #1
 800604e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006050:	e014      	b.n	800607c <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d008      	beq.n	800606a <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8006058:	4825      	ldr	r0, [pc, #148]	@ (80060f0 <HAL_ADC_IRQHandler+0x430>)
 800605a:	f7ff fb63 	bl	8005724 <LL_ADC_GetMultiDMATransfer>
 800605e:	4603      	mov	r3, r0
 8006060:	2b00      	cmp	r3, #0
 8006062:	d00b      	beq.n	800607c <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8006064:	2301      	movs	r3, #1
 8006066:	627b      	str	r3, [r7, #36]	@ 0x24
 8006068:	e008      	b.n	800607c <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	f003 0301 	and.w	r3, r3, #1
 8006074:	2b00      	cmp	r3, #0
 8006076:	d001      	beq.n	800607c <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8006078:	2301      	movs	r3, #1
 800607a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800607c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800607e:	2b01      	cmp	r3, #1
 8006080:	d10e      	bne.n	80060a0 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006086:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006092:	f043 0202 	orr.w	r2, r3, #2
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 f83e 	bl	800611c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	2210      	movs	r2, #16
 80060a6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d018      	beq.n	80060e4 <HAL_ADC_IRQHandler+0x424>
 80060b2:	69bb      	ldr	r3, [r7, #24]
 80060b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d013      	beq.n	80060e4 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060c0:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060cc:	f043 0208 	orr.w	r2, r3, #8
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80060dc:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 fd7c 	bl	8006bdc <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80060e4:	bf00      	nop
 80060e6:	3728      	adds	r7, #40	@ 0x28
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}
 80060ec:	50040000 	.word	0x50040000
 80060f0:	50040300 	.word	0x50040300

080060f4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80060fc:	bf00      	nop
 80060fe:	370c      	adds	r7, #12
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8006110:	bf00      	nop
 8006112:	370c      	adds	r7, #12
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006124:	bf00      	nop
 8006126:	370c      	adds	r7, #12
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b0b6      	sub	sp, #216	@ 0xd8
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800613a:	2300      	movs	r3, #0
 800613c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006140:	2300      	movs	r3, #0
 8006142:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800614a:	2b01      	cmp	r3, #1
 800614c:	d101      	bne.n	8006152 <HAL_ADC_ConfigChannel+0x22>
 800614e:	2302      	movs	r3, #2
 8006150:	e3e3      	b.n	800691a <HAL_ADC_ConfigChannel+0x7ea>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2201      	movs	r2, #1
 8006156:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4618      	mov	r0, r3
 8006160:	f7ff fb77 	bl	8005852 <LL_ADC_REG_IsConversionOngoing>
 8006164:	4603      	mov	r3, r0
 8006166:	2b00      	cmp	r3, #0
 8006168:	f040 83c4 	bne.w	80068f4 <HAL_ADC_ConfigChannel+0x7c4>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	2b05      	cmp	r3, #5
 800617a:	d824      	bhi.n	80061c6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	3b02      	subs	r3, #2
 8006182:	2b03      	cmp	r3, #3
 8006184:	d81b      	bhi.n	80061be <HAL_ADC_ConfigChannel+0x8e>
 8006186:	a201      	add	r2, pc, #4	@ (adr r2, 800618c <HAL_ADC_ConfigChannel+0x5c>)
 8006188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800618c:	0800619d 	.word	0x0800619d
 8006190:	080061a5 	.word	0x080061a5
 8006194:	080061ad 	.word	0x080061ad
 8006198:	080061b5 	.word	0x080061b5
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800619c:	230c      	movs	r3, #12
 800619e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80061a2:	e010      	b.n	80061c6 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80061a4:	2312      	movs	r3, #18
 80061a6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80061aa:	e00c      	b.n	80061c6 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80061ac:	2318      	movs	r3, #24
 80061ae:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80061b2:	e008      	b.n	80061c6 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80061b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80061b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80061bc:	e003      	b.n	80061c6 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80061be:	2306      	movs	r3, #6
 80061c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80061c4:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6818      	ldr	r0, [r3, #0]
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	461a      	mov	r2, r3
 80061d0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80061d4:	f7ff fa09 	bl	80055ea <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4618      	mov	r0, r3
 80061de:	f7ff fb38 	bl	8005852 <LL_ADC_REG_IsConversionOngoing>
 80061e2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4618      	mov	r0, r3
 80061ec:	f7ff fb44 	bl	8005878 <LL_ADC_INJ_IsConversionOngoing>
 80061f0:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80061f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	f040 81bf 	bne.w	800657c <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80061fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006202:	2b00      	cmp	r3, #0
 8006204:	f040 81ba 	bne.w	800657c <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006210:	d10f      	bne.n	8006232 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6818      	ldr	r0, [r3, #0]
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	2200      	movs	r2, #0
 800621c:	4619      	mov	r1, r3
 800621e:	f7ff fa23 	bl	8005668 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800622a:	4618      	mov	r0, r3
 800622c:	f7ff f9b7 	bl	800559e <LL_ADC_SetSamplingTimeCommonConfig>
 8006230:	e00e      	b.n	8006250 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6818      	ldr	r0, [r3, #0]
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	6819      	ldr	r1, [r3, #0]
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	461a      	mov	r2, r3
 8006240:	f7ff fa12 	bl	8005668 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	2100      	movs	r1, #0
 800624a:	4618      	mov	r0, r3
 800624c:	f7ff f9a7 	bl	800559e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	695a      	ldr	r2, [r3, #20]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	08db      	lsrs	r3, r3, #3
 800625c:	f003 0303 	and.w	r3, r3, #3
 8006260:	005b      	lsls	r3, r3, #1
 8006262:	fa02 f303 	lsl.w	r3, r2, r3
 8006266:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	691b      	ldr	r3, [r3, #16]
 800626e:	2b04      	cmp	r3, #4
 8006270:	d00a      	beq.n	8006288 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6818      	ldr	r0, [r3, #0]
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	6919      	ldr	r1, [r3, #16]
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006282:	f7ff f937 	bl	80054f4 <LL_ADC_SetOffset>
 8006286:	e179      	b.n	800657c <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	2100      	movs	r1, #0
 800628e:	4618      	mov	r0, r3
 8006290:	f7ff f954 	bl	800553c <LL_ADC_GetOffsetChannel>
 8006294:	4603      	mov	r3, r0
 8006296:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800629a:	2b00      	cmp	r3, #0
 800629c:	d10a      	bne.n	80062b4 <HAL_ADC_ConfigChannel+0x184>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	2100      	movs	r1, #0
 80062a4:	4618      	mov	r0, r3
 80062a6:	f7ff f949 	bl	800553c <LL_ADC_GetOffsetChannel>
 80062aa:	4603      	mov	r3, r0
 80062ac:	0e9b      	lsrs	r3, r3, #26
 80062ae:	f003 021f 	and.w	r2, r3, #31
 80062b2:	e01e      	b.n	80062f2 <HAL_ADC_ConfigChannel+0x1c2>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2100      	movs	r1, #0
 80062ba:	4618      	mov	r0, r3
 80062bc:	f7ff f93e 	bl	800553c <LL_ADC_GetOffsetChannel>
 80062c0:	4603      	mov	r3, r0
 80062c2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80062ca:	fa93 f3a3 	rbit	r3, r3
 80062ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80062d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80062d6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80062da:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d101      	bne.n	80062e6 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 80062e2:	2320      	movs	r3, #32
 80062e4:	e004      	b.n	80062f0 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 80062e6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80062ea:	fab3 f383 	clz	r3, r3
 80062ee:	b2db      	uxtb	r3, r3
 80062f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d105      	bne.n	800630a <HAL_ADC_ConfigChannel+0x1da>
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	0e9b      	lsrs	r3, r3, #26
 8006304:	f003 031f 	and.w	r3, r3, #31
 8006308:	e018      	b.n	800633c <HAL_ADC_ConfigChannel+0x20c>
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006312:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006316:	fa93 f3a3 	rbit	r3, r3
 800631a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800631e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006322:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8006326:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800632a:	2b00      	cmp	r3, #0
 800632c:	d101      	bne.n	8006332 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 800632e:	2320      	movs	r3, #32
 8006330:	e004      	b.n	800633c <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8006332:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006336:	fab3 f383 	clz	r3, r3
 800633a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800633c:	429a      	cmp	r2, r3
 800633e:	d106      	bne.n	800634e <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	2200      	movs	r2, #0
 8006346:	2100      	movs	r1, #0
 8006348:	4618      	mov	r0, r3
 800634a:	f7ff f90d 	bl	8005568 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	2101      	movs	r1, #1
 8006354:	4618      	mov	r0, r3
 8006356:	f7ff f8f1 	bl	800553c <LL_ADC_GetOffsetChannel>
 800635a:	4603      	mov	r3, r0
 800635c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006360:	2b00      	cmp	r3, #0
 8006362:	d10a      	bne.n	800637a <HAL_ADC_ConfigChannel+0x24a>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	2101      	movs	r1, #1
 800636a:	4618      	mov	r0, r3
 800636c:	f7ff f8e6 	bl	800553c <LL_ADC_GetOffsetChannel>
 8006370:	4603      	mov	r3, r0
 8006372:	0e9b      	lsrs	r3, r3, #26
 8006374:	f003 021f 	and.w	r2, r3, #31
 8006378:	e01e      	b.n	80063b8 <HAL_ADC_ConfigChannel+0x288>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	2101      	movs	r1, #1
 8006380:	4618      	mov	r0, r3
 8006382:	f7ff f8db 	bl	800553c <LL_ADC_GetOffsetChannel>
 8006386:	4603      	mov	r3, r0
 8006388:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800638c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006390:	fa93 f3a3 	rbit	r3, r3
 8006394:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8006398:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800639c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80063a0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d101      	bne.n	80063ac <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 80063a8:	2320      	movs	r3, #32
 80063aa:	e004      	b.n	80063b6 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 80063ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80063b0:	fab3 f383 	clz	r3, r3
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d105      	bne.n	80063d0 <HAL_ADC_ConfigChannel+0x2a0>
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	0e9b      	lsrs	r3, r3, #26
 80063ca:	f003 031f 	and.w	r3, r3, #31
 80063ce:	e018      	b.n	8006402 <HAL_ADC_ConfigChannel+0x2d2>
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80063dc:	fa93 f3a3 	rbit	r3, r3
 80063e0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80063e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80063e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80063ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d101      	bne.n	80063f8 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 80063f4:	2320      	movs	r3, #32
 80063f6:	e004      	b.n	8006402 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 80063f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80063fc:	fab3 f383 	clz	r3, r3
 8006400:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006402:	429a      	cmp	r2, r3
 8006404:	d106      	bne.n	8006414 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	2200      	movs	r2, #0
 800640c:	2101      	movs	r1, #1
 800640e:	4618      	mov	r0, r3
 8006410:	f7ff f8aa 	bl	8005568 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	2102      	movs	r1, #2
 800641a:	4618      	mov	r0, r3
 800641c:	f7ff f88e 	bl	800553c <LL_ADC_GetOffsetChannel>
 8006420:	4603      	mov	r3, r0
 8006422:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006426:	2b00      	cmp	r3, #0
 8006428:	d10a      	bne.n	8006440 <HAL_ADC_ConfigChannel+0x310>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	2102      	movs	r1, #2
 8006430:	4618      	mov	r0, r3
 8006432:	f7ff f883 	bl	800553c <LL_ADC_GetOffsetChannel>
 8006436:	4603      	mov	r3, r0
 8006438:	0e9b      	lsrs	r3, r3, #26
 800643a:	f003 021f 	and.w	r2, r3, #31
 800643e:	e01e      	b.n	800647e <HAL_ADC_ConfigChannel+0x34e>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2102      	movs	r1, #2
 8006446:	4618      	mov	r0, r3
 8006448:	f7ff f878 	bl	800553c <LL_ADC_GetOffsetChannel>
 800644c:	4603      	mov	r3, r0
 800644e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006452:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006456:	fa93 f3a3 	rbit	r3, r3
 800645a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800645e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006462:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8006466:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800646a:	2b00      	cmp	r3, #0
 800646c:	d101      	bne.n	8006472 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 800646e:	2320      	movs	r3, #32
 8006470:	e004      	b.n	800647c <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8006472:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006476:	fab3 f383 	clz	r3, r3
 800647a:	b2db      	uxtb	r3, r3
 800647c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006486:	2b00      	cmp	r3, #0
 8006488:	d105      	bne.n	8006496 <HAL_ADC_ConfigChannel+0x366>
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	0e9b      	lsrs	r3, r3, #26
 8006490:	f003 031f 	and.w	r3, r3, #31
 8006494:	e014      	b.n	80064c0 <HAL_ADC_ConfigChannel+0x390>
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800649c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800649e:	fa93 f3a3 	rbit	r3, r3
 80064a2:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80064a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80064a6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80064aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d101      	bne.n	80064b6 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 80064b2:	2320      	movs	r3, #32
 80064b4:	e004      	b.n	80064c0 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 80064b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80064ba:	fab3 f383 	clz	r3, r3
 80064be:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d106      	bne.n	80064d2 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	2200      	movs	r2, #0
 80064ca:	2102      	movs	r1, #2
 80064cc:	4618      	mov	r0, r3
 80064ce:	f7ff f84b 	bl	8005568 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	2103      	movs	r1, #3
 80064d8:	4618      	mov	r0, r3
 80064da:	f7ff f82f 	bl	800553c <LL_ADC_GetOffsetChannel>
 80064de:	4603      	mov	r3, r0
 80064e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d10a      	bne.n	80064fe <HAL_ADC_ConfigChannel+0x3ce>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	2103      	movs	r1, #3
 80064ee:	4618      	mov	r0, r3
 80064f0:	f7ff f824 	bl	800553c <LL_ADC_GetOffsetChannel>
 80064f4:	4603      	mov	r3, r0
 80064f6:	0e9b      	lsrs	r3, r3, #26
 80064f8:	f003 021f 	and.w	r2, r3, #31
 80064fc:	e017      	b.n	800652e <HAL_ADC_ConfigChannel+0x3fe>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	2103      	movs	r1, #3
 8006504:	4618      	mov	r0, r3
 8006506:	f7ff f819 	bl	800553c <LL_ADC_GetOffsetChannel>
 800650a:	4603      	mov	r3, r0
 800650c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800650e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006510:	fa93 f3a3 	rbit	r3, r3
 8006514:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8006516:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006518:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800651a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800651c:	2b00      	cmp	r3, #0
 800651e:	d101      	bne.n	8006524 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8006520:	2320      	movs	r3, #32
 8006522:	e003      	b.n	800652c <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8006524:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006526:	fab3 f383 	clz	r3, r3
 800652a:	b2db      	uxtb	r3, r3
 800652c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006536:	2b00      	cmp	r3, #0
 8006538:	d105      	bne.n	8006546 <HAL_ADC_ConfigChannel+0x416>
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	0e9b      	lsrs	r3, r3, #26
 8006540:	f003 031f 	and.w	r3, r3, #31
 8006544:	e011      	b.n	800656a <HAL_ADC_ConfigChannel+0x43a>
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800654c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800654e:	fa93 f3a3 	rbit	r3, r3
 8006552:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8006554:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006556:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8006558:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800655a:	2b00      	cmp	r3, #0
 800655c:	d101      	bne.n	8006562 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 800655e:	2320      	movs	r3, #32
 8006560:	e003      	b.n	800656a <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8006562:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006564:	fab3 f383 	clz	r3, r3
 8006568:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800656a:	429a      	cmp	r2, r3
 800656c:	d106      	bne.n	800657c <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	2200      	movs	r2, #0
 8006574:	2103      	movs	r1, #3
 8006576:	4618      	mov	r0, r3
 8006578:	f7fe fff6 	bl	8005568 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4618      	mov	r0, r3
 8006582:	f7ff f93f 	bl	8005804 <LL_ADC_IsEnabled>
 8006586:	4603      	mov	r3, r0
 8006588:	2b00      	cmp	r3, #0
 800658a:	f040 813f 	bne.w	800680c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6818      	ldr	r0, [r3, #0]
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	6819      	ldr	r1, [r3, #0]
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	68db      	ldr	r3, [r3, #12]
 800659a:	461a      	mov	r2, r3
 800659c:	f7ff f890 	bl	80056c0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	4a8e      	ldr	r2, [pc, #568]	@ (80067e0 <HAL_ADC_ConfigChannel+0x6b0>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	f040 8130 	bne.w	800680c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d10b      	bne.n	80065d4 <HAL_ADC_ConfigChannel+0x4a4>
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	0e9b      	lsrs	r3, r3, #26
 80065c2:	3301      	adds	r3, #1
 80065c4:	f003 031f 	and.w	r3, r3, #31
 80065c8:	2b09      	cmp	r3, #9
 80065ca:	bf94      	ite	ls
 80065cc:	2301      	movls	r3, #1
 80065ce:	2300      	movhi	r3, #0
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	e019      	b.n	8006608 <HAL_ADC_ConfigChannel+0x4d8>
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80065dc:	fa93 f3a3 	rbit	r3, r3
 80065e0:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80065e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80065e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80065e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d101      	bne.n	80065f0 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 80065ec:	2320      	movs	r3, #32
 80065ee:	e003      	b.n	80065f8 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 80065f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80065f2:	fab3 f383 	clz	r3, r3
 80065f6:	b2db      	uxtb	r3, r3
 80065f8:	3301      	adds	r3, #1
 80065fa:	f003 031f 	and.w	r3, r3, #31
 80065fe:	2b09      	cmp	r3, #9
 8006600:	bf94      	ite	ls
 8006602:	2301      	movls	r3, #1
 8006604:	2300      	movhi	r3, #0
 8006606:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006608:	2b00      	cmp	r3, #0
 800660a:	d079      	beq.n	8006700 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006614:	2b00      	cmp	r3, #0
 8006616:	d107      	bne.n	8006628 <HAL_ADC_ConfigChannel+0x4f8>
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	0e9b      	lsrs	r3, r3, #26
 800661e:	3301      	adds	r3, #1
 8006620:	069b      	lsls	r3, r3, #26
 8006622:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006626:	e015      	b.n	8006654 <HAL_ADC_ConfigChannel+0x524>
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800662e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006630:	fa93 f3a3 	rbit	r3, r3
 8006634:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8006636:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006638:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800663a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800663c:	2b00      	cmp	r3, #0
 800663e:	d101      	bne.n	8006644 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8006640:	2320      	movs	r3, #32
 8006642:	e003      	b.n	800664c <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8006644:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006646:	fab3 f383 	clz	r3, r3
 800664a:	b2db      	uxtb	r3, r3
 800664c:	3301      	adds	r3, #1
 800664e:	069b      	lsls	r3, r3, #26
 8006650:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800665c:	2b00      	cmp	r3, #0
 800665e:	d109      	bne.n	8006674 <HAL_ADC_ConfigChannel+0x544>
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	0e9b      	lsrs	r3, r3, #26
 8006666:	3301      	adds	r3, #1
 8006668:	f003 031f 	and.w	r3, r3, #31
 800666c:	2101      	movs	r1, #1
 800666e:	fa01 f303 	lsl.w	r3, r1, r3
 8006672:	e017      	b.n	80066a4 <HAL_ADC_ConfigChannel+0x574>
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800667a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800667c:	fa93 f3a3 	rbit	r3, r3
 8006680:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8006682:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006684:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8006686:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006688:	2b00      	cmp	r3, #0
 800668a:	d101      	bne.n	8006690 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 800668c:	2320      	movs	r3, #32
 800668e:	e003      	b.n	8006698 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8006690:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006692:	fab3 f383 	clz	r3, r3
 8006696:	b2db      	uxtb	r3, r3
 8006698:	3301      	adds	r3, #1
 800669a:	f003 031f 	and.w	r3, r3, #31
 800669e:	2101      	movs	r1, #1
 80066a0:	fa01 f303 	lsl.w	r3, r1, r3
 80066a4:	ea42 0103 	orr.w	r1, r2, r3
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d10a      	bne.n	80066ca <HAL_ADC_ConfigChannel+0x59a>
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	0e9b      	lsrs	r3, r3, #26
 80066ba:	3301      	adds	r3, #1
 80066bc:	f003 021f 	and.w	r2, r3, #31
 80066c0:	4613      	mov	r3, r2
 80066c2:	005b      	lsls	r3, r3, #1
 80066c4:	4413      	add	r3, r2
 80066c6:	051b      	lsls	r3, r3, #20
 80066c8:	e018      	b.n	80066fc <HAL_ADC_ConfigChannel+0x5cc>
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066d2:	fa93 f3a3 	rbit	r3, r3
 80066d6:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80066d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066da:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80066dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d101      	bne.n	80066e6 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 80066e2:	2320      	movs	r3, #32
 80066e4:	e003      	b.n	80066ee <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 80066e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066e8:	fab3 f383 	clz	r3, r3
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	3301      	adds	r3, #1
 80066f0:	f003 021f 	and.w	r2, r3, #31
 80066f4:	4613      	mov	r3, r2
 80066f6:	005b      	lsls	r3, r3, #1
 80066f8:	4413      	add	r3, r2
 80066fa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80066fc:	430b      	orrs	r3, r1
 80066fe:	e080      	b.n	8006802 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006708:	2b00      	cmp	r3, #0
 800670a:	d107      	bne.n	800671c <HAL_ADC_ConfigChannel+0x5ec>
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	0e9b      	lsrs	r3, r3, #26
 8006712:	3301      	adds	r3, #1
 8006714:	069b      	lsls	r3, r3, #26
 8006716:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800671a:	e015      	b.n	8006748 <HAL_ADC_ConfigChannel+0x618>
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006724:	fa93 f3a3 	rbit	r3, r3
 8006728:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800672a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800672c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800672e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006730:	2b00      	cmp	r3, #0
 8006732:	d101      	bne.n	8006738 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8006734:	2320      	movs	r3, #32
 8006736:	e003      	b.n	8006740 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8006738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800673a:	fab3 f383 	clz	r3, r3
 800673e:	b2db      	uxtb	r3, r3
 8006740:	3301      	adds	r3, #1
 8006742:	069b      	lsls	r3, r3, #26
 8006744:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006750:	2b00      	cmp	r3, #0
 8006752:	d109      	bne.n	8006768 <HAL_ADC_ConfigChannel+0x638>
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	0e9b      	lsrs	r3, r3, #26
 800675a:	3301      	adds	r3, #1
 800675c:	f003 031f 	and.w	r3, r3, #31
 8006760:	2101      	movs	r1, #1
 8006762:	fa01 f303 	lsl.w	r3, r1, r3
 8006766:	e017      	b.n	8006798 <HAL_ADC_ConfigChannel+0x668>
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800676e:	69fb      	ldr	r3, [r7, #28]
 8006770:	fa93 f3a3 	rbit	r3, r3
 8006774:	61bb      	str	r3, [r7, #24]
  return result;
 8006776:	69bb      	ldr	r3, [r7, #24]
 8006778:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800677a:	6a3b      	ldr	r3, [r7, #32]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d101      	bne.n	8006784 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8006780:	2320      	movs	r3, #32
 8006782:	e003      	b.n	800678c <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8006784:	6a3b      	ldr	r3, [r7, #32]
 8006786:	fab3 f383 	clz	r3, r3
 800678a:	b2db      	uxtb	r3, r3
 800678c:	3301      	adds	r3, #1
 800678e:	f003 031f 	and.w	r3, r3, #31
 8006792:	2101      	movs	r1, #1
 8006794:	fa01 f303 	lsl.w	r3, r1, r3
 8006798:	ea42 0103 	orr.w	r1, r2, r3
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d10d      	bne.n	80067c4 <HAL_ADC_ConfigChannel+0x694>
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	0e9b      	lsrs	r3, r3, #26
 80067ae:	3301      	adds	r3, #1
 80067b0:	f003 021f 	and.w	r2, r3, #31
 80067b4:	4613      	mov	r3, r2
 80067b6:	005b      	lsls	r3, r3, #1
 80067b8:	4413      	add	r3, r2
 80067ba:	3b1e      	subs	r3, #30
 80067bc:	051b      	lsls	r3, r3, #20
 80067be:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80067c2:	e01d      	b.n	8006800 <HAL_ADC_ConfigChannel+0x6d0>
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	fa93 f3a3 	rbit	r3, r3
 80067d0:	60fb      	str	r3, [r7, #12]
  return result;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d103      	bne.n	80067e4 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80067dc:	2320      	movs	r3, #32
 80067de:	e005      	b.n	80067ec <HAL_ADC_ConfigChannel+0x6bc>
 80067e0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	fab3 f383 	clz	r3, r3
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	3301      	adds	r3, #1
 80067ee:	f003 021f 	and.w	r2, r3, #31
 80067f2:	4613      	mov	r3, r2
 80067f4:	005b      	lsls	r3, r3, #1
 80067f6:	4413      	add	r3, r2
 80067f8:	3b1e      	subs	r3, #30
 80067fa:	051b      	lsls	r3, r3, #20
 80067fc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006800:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8006802:	683a      	ldr	r2, [r7, #0]
 8006804:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006806:	4619      	mov	r1, r3
 8006808:	f7fe ff2e 	bl	8005668 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	4b44      	ldr	r3, [pc, #272]	@ (8006924 <HAL_ADC_ConfigChannel+0x7f4>)
 8006812:	4013      	ands	r3, r2
 8006814:	2b00      	cmp	r3, #0
 8006816:	d07a      	beq.n	800690e <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006818:	4843      	ldr	r0, [pc, #268]	@ (8006928 <HAL_ADC_ConfigChannel+0x7f8>)
 800681a:	f7fe fe5d 	bl	80054d8 <LL_ADC_GetCommonPathInternalCh>
 800681e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a41      	ldr	r2, [pc, #260]	@ (800692c <HAL_ADC_ConfigChannel+0x7fc>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d12c      	bne.n	8006886 <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800682c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006830:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006834:	2b00      	cmp	r3, #0
 8006836:	d126      	bne.n	8006886 <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a3c      	ldr	r2, [pc, #240]	@ (8006930 <HAL_ADC_ConfigChannel+0x800>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d004      	beq.n	800684c <HAL_ADC_ConfigChannel+0x71c>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a3b      	ldr	r2, [pc, #236]	@ (8006934 <HAL_ADC_ConfigChannel+0x804>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d15d      	bne.n	8006908 <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800684c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006850:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006854:	4619      	mov	r1, r3
 8006856:	4834      	ldr	r0, [pc, #208]	@ (8006928 <HAL_ADC_ConfigChannel+0x7f8>)
 8006858:	f7fe fe2b 	bl	80054b2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800685c:	4b36      	ldr	r3, [pc, #216]	@ (8006938 <HAL_ADC_ConfigChannel+0x808>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	099b      	lsrs	r3, r3, #6
 8006862:	4a36      	ldr	r2, [pc, #216]	@ (800693c <HAL_ADC_ConfigChannel+0x80c>)
 8006864:	fba2 2303 	umull	r2, r3, r2, r3
 8006868:	099b      	lsrs	r3, r3, #6
 800686a:	1c5a      	adds	r2, r3, #1
 800686c:	4613      	mov	r3, r2
 800686e:	005b      	lsls	r3, r3, #1
 8006870:	4413      	add	r3, r2
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8006876:	e002      	b.n	800687e <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	3b01      	subs	r3, #1
 800687c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d1f9      	bne.n	8006878 <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006884:	e040      	b.n	8006908 <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a2d      	ldr	r2, [pc, #180]	@ (8006940 <HAL_ADC_ConfigChannel+0x810>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d118      	bne.n	80068c2 <HAL_ADC_ConfigChannel+0x792>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006890:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006894:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006898:	2b00      	cmp	r3, #0
 800689a:	d112      	bne.n	80068c2 <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a23      	ldr	r2, [pc, #140]	@ (8006930 <HAL_ADC_ConfigChannel+0x800>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d004      	beq.n	80068b0 <HAL_ADC_ConfigChannel+0x780>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a22      	ldr	r2, [pc, #136]	@ (8006934 <HAL_ADC_ConfigChannel+0x804>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d12d      	bne.n	800690c <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80068b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80068b4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80068b8:	4619      	mov	r1, r3
 80068ba:	481b      	ldr	r0, [pc, #108]	@ (8006928 <HAL_ADC_ConfigChannel+0x7f8>)
 80068bc:	f7fe fdf9 	bl	80054b2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80068c0:	e024      	b.n	800690c <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a1f      	ldr	r2, [pc, #124]	@ (8006944 <HAL_ADC_ConfigChannel+0x814>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d120      	bne.n	800690e <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80068cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80068d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d11a      	bne.n	800690e <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a14      	ldr	r2, [pc, #80]	@ (8006930 <HAL_ADC_ConfigChannel+0x800>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d115      	bne.n	800690e <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80068e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80068e6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80068ea:	4619      	mov	r1, r3
 80068ec:	480e      	ldr	r0, [pc, #56]	@ (8006928 <HAL_ADC_ConfigChannel+0x7f8>)
 80068ee:	f7fe fde0 	bl	80054b2 <LL_ADC_SetCommonPathInternalCh>
 80068f2:	e00c      	b.n	800690e <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068f8:	f043 0220 	orr.w	r2, r3, #32
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8006906:	e002      	b.n	800690e <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006908:	bf00      	nop
 800690a:	e000      	b.n	800690e <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800690c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2200      	movs	r2, #0
 8006912:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8006916:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800691a:	4618      	mov	r0, r3
 800691c:	37d8      	adds	r7, #216	@ 0xd8
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
 8006922:	bf00      	nop
 8006924:	80080000 	.word	0x80080000
 8006928:	50040300 	.word	0x50040300
 800692c:	c7520000 	.word	0xc7520000
 8006930:	50040000 	.word	0x50040000
 8006934:	50040200 	.word	0x50040200
 8006938:	20000398 	.word	0x20000398
 800693c:	053e2d63 	.word	0x053e2d63
 8006940:	cb840000 	.word	0xcb840000
 8006944:	80000001 	.word	0x80000001

08006948 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b084      	sub	sp, #16
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8006950:	2300      	movs	r3, #0
 8006952:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4618      	mov	r0, r3
 800695a:	f7fe ff53 	bl	8005804 <LL_ADC_IsEnabled>
 800695e:	4603      	mov	r3, r0
 8006960:	2b00      	cmp	r3, #0
 8006962:	d169      	bne.n	8006a38 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	689a      	ldr	r2, [r3, #8]
 800696a:	4b36      	ldr	r3, [pc, #216]	@ (8006a44 <ADC_Enable+0xfc>)
 800696c:	4013      	ands	r3, r2
 800696e:	2b00      	cmp	r3, #0
 8006970:	d00d      	beq.n	800698e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006976:	f043 0210 	orr.w	r2, r3, #16
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006982:	f043 0201 	orr.w	r2, r3, #1
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	e055      	b.n	8006a3a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4618      	mov	r0, r3
 8006994:	f7fe ff22 	bl	80057dc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8006998:	482b      	ldr	r0, [pc, #172]	@ (8006a48 <ADC_Enable+0x100>)
 800699a:	f7fe fd9d 	bl	80054d8 <LL_ADC_GetCommonPathInternalCh>
 800699e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80069a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d013      	beq.n	80069d0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80069a8:	4b28      	ldr	r3, [pc, #160]	@ (8006a4c <ADC_Enable+0x104>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	099b      	lsrs	r3, r3, #6
 80069ae:	4a28      	ldr	r2, [pc, #160]	@ (8006a50 <ADC_Enable+0x108>)
 80069b0:	fba2 2303 	umull	r2, r3, r2, r3
 80069b4:	099b      	lsrs	r3, r3, #6
 80069b6:	1c5a      	adds	r2, r3, #1
 80069b8:	4613      	mov	r3, r2
 80069ba:	005b      	lsls	r3, r3, #1
 80069bc:	4413      	add	r3, r2
 80069be:	009b      	lsls	r3, r3, #2
 80069c0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80069c2:	e002      	b.n	80069ca <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	3b01      	subs	r3, #1
 80069c8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d1f9      	bne.n	80069c4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80069d0:	f7fe fd30 	bl	8005434 <HAL_GetTick>
 80069d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80069d6:	e028      	b.n	8006a2a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4618      	mov	r0, r3
 80069de:	f7fe ff11 	bl	8005804 <LL_ADC_IsEnabled>
 80069e2:	4603      	mov	r3, r0
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d104      	bne.n	80069f2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4618      	mov	r0, r3
 80069ee:	f7fe fef5 	bl	80057dc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80069f2:	f7fe fd1f 	bl	8005434 <HAL_GetTick>
 80069f6:	4602      	mov	r2, r0
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	1ad3      	subs	r3, r2, r3
 80069fc:	2b02      	cmp	r3, #2
 80069fe:	d914      	bls.n	8006a2a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f003 0301 	and.w	r3, r3, #1
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	d00d      	beq.n	8006a2a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a12:	f043 0210 	orr.w	r2, r3, #16
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a1e:	f043 0201 	orr.w	r2, r3, #1
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	e007      	b.n	8006a3a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f003 0301 	and.w	r3, r3, #1
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d1cf      	bne.n	80069d8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006a38:	2300      	movs	r3, #0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3710      	adds	r7, #16
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	bf00      	nop
 8006a44:	8000003f 	.word	0x8000003f
 8006a48:	50040300 	.word	0x50040300
 8006a4c:	20000398 	.word	0x20000398
 8006a50:	053e2d63 	.word	0x053e2d63

08006a54 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b084      	sub	sp, #16
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a60:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a66:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d14b      	bne.n	8006b06 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a72:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f003 0308 	and.w	r3, r3, #8
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d021      	beq.n	8006acc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f7fe fd99 	bl	80055c4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006a92:	4603      	mov	r3, r0
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d032      	beq.n	8006afe <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	68db      	ldr	r3, [r3, #12]
 8006a9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d12b      	bne.n	8006afe <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006aaa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	659a      	str	r2, [r3, #88]	@ 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ab6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d11f      	bne.n	8006afe <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ac2:	f043 0201 	orr.w	r2, r3, #1
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	659a      	str	r2, [r3, #88]	@ 0x58
 8006aca:	e018      	b.n	8006afe <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	68db      	ldr	r3, [r3, #12]
 8006ad2:	f003 0302 	and.w	r3, r3, #2
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d111      	bne.n	8006afe <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ade:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006aea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d105      	bne.n	8006afe <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006af6:	f043 0201 	orr.w	r2, r3, #1
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006afe:	68f8      	ldr	r0, [r7, #12]
 8006b00:	f7fd fd18 	bl	8004534 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006b04:	e00e      	b.n	8006b24 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b0a:	f003 0310 	and.w	r3, r3, #16
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d003      	beq.n	8006b1a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006b12:	68f8      	ldr	r0, [r7, #12]
 8006b14:	f7ff fb02 	bl	800611c <HAL_ADC_ErrorCallback>
}
 8006b18:	e004      	b.n	8006b24 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	4798      	blx	r3
}
 8006b24:	bf00      	nop
 8006b26:	3710      	adds	r7, #16
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b38:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006b3a:	68f8      	ldr	r0, [r7, #12]
 8006b3c:	f7ff fada 	bl	80060f4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006b40:	bf00      	nop
 8006b42:	3710      	adds	r7, #16
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}

08006b48 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b084      	sub	sp, #16
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b54:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b5a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b66:	f043 0204 	orr.w	r2, r3, #4
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006b6e:	68f8      	ldr	r0, [r7, #12]
 8006b70:	f7ff fad4 	bl	800611c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006b74:	bf00      	nop
 8006b76:	3710      	adds	r7, #16
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}

08006b7c <LL_ADC_IsEnabled>:
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b083      	sub	sp, #12
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	f003 0301 	and.w	r3, r3, #1
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d101      	bne.n	8006b94 <LL_ADC_IsEnabled+0x18>
 8006b90:	2301      	movs	r3, #1
 8006b92:	e000      	b.n	8006b96 <LL_ADC_IsEnabled+0x1a>
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	370c      	adds	r7, #12
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr

08006ba2 <LL_ADC_REG_IsConversionOngoing>:
{
 8006ba2:	b480      	push	{r7}
 8006ba4:	b083      	sub	sp, #12
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	f003 0304 	and.w	r3, r3, #4
 8006bb2:	2b04      	cmp	r3, #4
 8006bb4:	d101      	bne.n	8006bba <LL_ADC_REG_IsConversionOngoing+0x18>
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e000      	b.n	8006bbc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006bba:	2300      	movs	r3, #0
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	370c      	adds	r7, #12
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr

08006bc8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b083      	sub	sp, #12
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8006bd0:	bf00      	nop
 8006bd2:	370c      	adds	r7, #12
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr

08006bdc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b083      	sub	sp, #12
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8006be4:	bf00      	nop
 8006be6:	370c      	adds	r7, #12
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr

08006bf0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b083      	sub	sp, #12
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8006bf8:	bf00      	nop
 8006bfa:	370c      	adds	r7, #12
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr

08006c04 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8006c0c:	bf00      	nop
 8006c0e:	370c      	adds	r7, #12
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b083      	sub	sp, #12
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8006c20:	bf00      	nop
 8006c22:	370c      	adds	r7, #12
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr

08006c2c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8006c2c:	b590      	push	{r4, r7, lr}
 8006c2e:	b0a1      	sub	sp, #132	@ 0x84
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006c36:	2300      	movs	r3, #0
 8006c38:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	d101      	bne.n	8006c4a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006c46:	2302      	movs	r3, #2
 8006c48:	e093      	b.n	8006d72 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8006c52:	2300      	movs	r3, #0
 8006c54:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8006c56:	2300      	movs	r3, #0
 8006c58:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a47      	ldr	r2, [pc, #284]	@ (8006d7c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d102      	bne.n	8006c6a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006c64:	4b46      	ldr	r3, [pc, #280]	@ (8006d80 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8006c66:	60fb      	str	r3, [r7, #12]
 8006c68:	e001      	b.n	8006c6e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d10b      	bne.n	8006c8c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c78:	f043 0220 	orr.w	r2, r3, #32
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_ERROR;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	e072      	b.n	8006d72 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f7ff ff87 	bl	8006ba2 <LL_ADC_REG_IsConversionOngoing>
 8006c94:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f7ff ff81 	bl	8006ba2 <LL_ADC_REG_IsConversionOngoing>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d154      	bne.n	8006d50 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8006ca6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d151      	bne.n	8006d50 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006cac:	4b35      	ldr	r3, [pc, #212]	@ (8006d84 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8006cae:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d02c      	beq.n	8006d12 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006cb8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006cba:	689b      	ldr	r3, [r3, #8]
 8006cbc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	6859      	ldr	r1, [r3, #4]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006cca:	035b      	lsls	r3, r3, #13
 8006ccc:	430b      	orrs	r3, r1
 8006cce:	431a      	orrs	r2, r3
 8006cd0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006cd2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006cd4:	4829      	ldr	r0, [pc, #164]	@ (8006d7c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8006cd6:	f7ff ff51 	bl	8006b7c <LL_ADC_IsEnabled>
 8006cda:	4604      	mov	r4, r0
 8006cdc:	4828      	ldr	r0, [pc, #160]	@ (8006d80 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8006cde:	f7ff ff4d 	bl	8006b7c <LL_ADC_IsEnabled>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	431c      	orrs	r4, r3
 8006ce6:	4828      	ldr	r0, [pc, #160]	@ (8006d88 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8006ce8:	f7ff ff48 	bl	8006b7c <LL_ADC_IsEnabled>
 8006cec:	4603      	mov	r3, r0
 8006cee:	4323      	orrs	r3, r4
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d137      	bne.n	8006d64 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006cf4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8006cfc:	f023 030f 	bic.w	r3, r3, #15
 8006d00:	683a      	ldr	r2, [r7, #0]
 8006d02:	6811      	ldr	r1, [r2, #0]
 8006d04:	683a      	ldr	r2, [r7, #0]
 8006d06:	6892      	ldr	r2, [r2, #8]
 8006d08:	430a      	orrs	r2, r1
 8006d0a:	431a      	orrs	r2, r3
 8006d0c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006d0e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006d10:	e028      	b.n	8006d64 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006d12:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006d1a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006d1c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006d1e:	4817      	ldr	r0, [pc, #92]	@ (8006d7c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8006d20:	f7ff ff2c 	bl	8006b7c <LL_ADC_IsEnabled>
 8006d24:	4604      	mov	r4, r0
 8006d26:	4816      	ldr	r0, [pc, #88]	@ (8006d80 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8006d28:	f7ff ff28 	bl	8006b7c <LL_ADC_IsEnabled>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	431c      	orrs	r4, r3
 8006d30:	4815      	ldr	r0, [pc, #84]	@ (8006d88 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8006d32:	f7ff ff23 	bl	8006b7c <LL_ADC_IsEnabled>
 8006d36:	4603      	mov	r3, r0
 8006d38:	4323      	orrs	r3, r4
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d112      	bne.n	8006d64 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006d3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8006d46:	f023 030f 	bic.w	r3, r3, #15
 8006d4a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8006d4c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006d4e:	e009      	b.n	8006d64 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d54:	f043 0220 	orr.w	r2, r3, #32
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8006d62:	e000      	b.n	8006d66 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006d64:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8006d6e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3784      	adds	r7, #132	@ 0x84
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd90      	pop	{r4, r7, pc}
 8006d7a:	bf00      	nop
 8006d7c:	50040000 	.word	0x50040000
 8006d80:	50040100 	.word	0x50040100
 8006d84:	50040300 	.word	0x50040300
 8006d88:	50040200 	.word	0x50040200

08006d8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b085      	sub	sp, #20
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f003 0307 	and.w	r3, r3, #7
 8006d9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8006dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8006d9e:	68db      	ldr	r3, [r3, #12]
 8006da0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006da2:	68ba      	ldr	r2, [r7, #8]
 8006da4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006da8:	4013      	ands	r3, r2
 8006daa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006db4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006db8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006dbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006dbe:	4a04      	ldr	r2, [pc, #16]	@ (8006dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	60d3      	str	r3, [r2, #12]
}
 8006dc4:	bf00      	nop
 8006dc6:	3714      	adds	r7, #20
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr
 8006dd0:	e000ed00 	.word	0xe000ed00

08006dd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006dd8:	4b04      	ldr	r3, [pc, #16]	@ (8006dec <__NVIC_GetPriorityGrouping+0x18>)
 8006dda:	68db      	ldr	r3, [r3, #12]
 8006ddc:	0a1b      	lsrs	r3, r3, #8
 8006dde:	f003 0307 	and.w	r3, r3, #7
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr
 8006dec:	e000ed00 	.word	0xe000ed00

08006df0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b083      	sub	sp, #12
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	4603      	mov	r3, r0
 8006df8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	db0b      	blt.n	8006e1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006e02:	79fb      	ldrb	r3, [r7, #7]
 8006e04:	f003 021f 	and.w	r2, r3, #31
 8006e08:	4907      	ldr	r1, [pc, #28]	@ (8006e28 <__NVIC_EnableIRQ+0x38>)
 8006e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e0e:	095b      	lsrs	r3, r3, #5
 8006e10:	2001      	movs	r0, #1
 8006e12:	fa00 f202 	lsl.w	r2, r0, r2
 8006e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006e1a:	bf00      	nop
 8006e1c:	370c      	adds	r7, #12
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e24:	4770      	bx	lr
 8006e26:	bf00      	nop
 8006e28:	e000e100 	.word	0xe000e100

08006e2c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b083      	sub	sp, #12
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	4603      	mov	r3, r0
 8006e34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	db12      	blt.n	8006e64 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006e3e:	79fb      	ldrb	r3, [r7, #7]
 8006e40:	f003 021f 	and.w	r2, r3, #31
 8006e44:	490a      	ldr	r1, [pc, #40]	@ (8006e70 <__NVIC_DisableIRQ+0x44>)
 8006e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e4a:	095b      	lsrs	r3, r3, #5
 8006e4c:	2001      	movs	r0, #1
 8006e4e:	fa00 f202 	lsl.w	r2, r0, r2
 8006e52:	3320      	adds	r3, #32
 8006e54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8006e58:	f3bf 8f4f 	dsb	sy
}
 8006e5c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006e5e:	f3bf 8f6f 	isb	sy
}
 8006e62:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8006e64:	bf00      	nop
 8006e66:	370c      	adds	r7, #12
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr
 8006e70:	e000e100 	.word	0xe000e100

08006e74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b083      	sub	sp, #12
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	6039      	str	r1, [r7, #0]
 8006e7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	db0a      	blt.n	8006e9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	b2da      	uxtb	r2, r3
 8006e8c:	490c      	ldr	r1, [pc, #48]	@ (8006ec0 <__NVIC_SetPriority+0x4c>)
 8006e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e92:	0112      	lsls	r2, r2, #4
 8006e94:	b2d2      	uxtb	r2, r2
 8006e96:	440b      	add	r3, r1
 8006e98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006e9c:	e00a      	b.n	8006eb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	b2da      	uxtb	r2, r3
 8006ea2:	4908      	ldr	r1, [pc, #32]	@ (8006ec4 <__NVIC_SetPriority+0x50>)
 8006ea4:	79fb      	ldrb	r3, [r7, #7]
 8006ea6:	f003 030f 	and.w	r3, r3, #15
 8006eaa:	3b04      	subs	r3, #4
 8006eac:	0112      	lsls	r2, r2, #4
 8006eae:	b2d2      	uxtb	r2, r2
 8006eb0:	440b      	add	r3, r1
 8006eb2:	761a      	strb	r2, [r3, #24]
}
 8006eb4:	bf00      	nop
 8006eb6:	370c      	adds	r7, #12
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr
 8006ec0:	e000e100 	.word	0xe000e100
 8006ec4:	e000ed00 	.word	0xe000ed00

08006ec8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b089      	sub	sp, #36	@ 0x24
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	60f8      	str	r0, [r7, #12]
 8006ed0:	60b9      	str	r1, [r7, #8]
 8006ed2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f003 0307 	and.w	r3, r3, #7
 8006eda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006edc:	69fb      	ldr	r3, [r7, #28]
 8006ede:	f1c3 0307 	rsb	r3, r3, #7
 8006ee2:	2b04      	cmp	r3, #4
 8006ee4:	bf28      	it	cs
 8006ee6:	2304      	movcs	r3, #4
 8006ee8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006eea:	69fb      	ldr	r3, [r7, #28]
 8006eec:	3304      	adds	r3, #4
 8006eee:	2b06      	cmp	r3, #6
 8006ef0:	d902      	bls.n	8006ef8 <NVIC_EncodePriority+0x30>
 8006ef2:	69fb      	ldr	r3, [r7, #28]
 8006ef4:	3b03      	subs	r3, #3
 8006ef6:	e000      	b.n	8006efa <NVIC_EncodePriority+0x32>
 8006ef8:	2300      	movs	r3, #0
 8006efa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006efc:	f04f 32ff 	mov.w	r2, #4294967295
 8006f00:	69bb      	ldr	r3, [r7, #24]
 8006f02:	fa02 f303 	lsl.w	r3, r2, r3
 8006f06:	43da      	mvns	r2, r3
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	401a      	ands	r2, r3
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006f10:	f04f 31ff 	mov.w	r1, #4294967295
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	fa01 f303 	lsl.w	r3, r1, r3
 8006f1a:	43d9      	mvns	r1, r3
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f20:	4313      	orrs	r3, r2
         );
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3724      	adds	r7, #36	@ 0x24
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr
	...

08006f30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b082      	sub	sp, #8
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	3b01      	subs	r3, #1
 8006f3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006f40:	d301      	bcc.n	8006f46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006f42:	2301      	movs	r3, #1
 8006f44:	e00f      	b.n	8006f66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006f46:	4a0a      	ldr	r2, [pc, #40]	@ (8006f70 <SysTick_Config+0x40>)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	3b01      	subs	r3, #1
 8006f4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006f4e:	210f      	movs	r1, #15
 8006f50:	f04f 30ff 	mov.w	r0, #4294967295
 8006f54:	f7ff ff8e 	bl	8006e74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006f58:	4b05      	ldr	r3, [pc, #20]	@ (8006f70 <SysTick_Config+0x40>)
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006f5e:	4b04      	ldr	r3, [pc, #16]	@ (8006f70 <SysTick_Config+0x40>)
 8006f60:	2207      	movs	r2, #7
 8006f62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006f64:	2300      	movs	r3, #0
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3708      	adds	r7, #8
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	e000e010 	.word	0xe000e010

08006f74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b082      	sub	sp, #8
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f7ff ff05 	bl	8006d8c <__NVIC_SetPriorityGrouping>
}
 8006f82:	bf00      	nop
 8006f84:	3708      	adds	r7, #8
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}

08006f8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006f8a:	b580      	push	{r7, lr}
 8006f8c:	b086      	sub	sp, #24
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	4603      	mov	r3, r0
 8006f92:	60b9      	str	r1, [r7, #8]
 8006f94:	607a      	str	r2, [r7, #4]
 8006f96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006f9c:	f7ff ff1a 	bl	8006dd4 <__NVIC_GetPriorityGrouping>
 8006fa0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	68b9      	ldr	r1, [r7, #8]
 8006fa6:	6978      	ldr	r0, [r7, #20]
 8006fa8:	f7ff ff8e 	bl	8006ec8 <NVIC_EncodePriority>
 8006fac:	4602      	mov	r2, r0
 8006fae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006fb2:	4611      	mov	r1, r2
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f7ff ff5d 	bl	8006e74 <__NVIC_SetPriority>
}
 8006fba:	bf00      	nop
 8006fbc:	3718      	adds	r7, #24
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}

08006fc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006fc2:	b580      	push	{r7, lr}
 8006fc4:	b082      	sub	sp, #8
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	4603      	mov	r3, r0
 8006fca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f7ff ff0d 	bl	8006df0 <__NVIC_EnableIRQ>
}
 8006fd6:	bf00      	nop
 8006fd8:	3708      	adds	r7, #8
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}

08006fde <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006fde:	b580      	push	{r7, lr}
 8006fe0:	b082      	sub	sp, #8
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fec:	4618      	mov	r0, r3
 8006fee:	f7ff ff1d 	bl	8006e2c <__NVIC_DisableIRQ>
}
 8006ff2:	bf00      	nop
 8006ff4:	3708      	adds	r7, #8
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}

08006ffa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006ffa:	b580      	push	{r7, lr}
 8006ffc:	b082      	sub	sp, #8
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f7ff ff94 	bl	8006f30 <SysTick_Config>
 8007008:	4603      	mov	r3, r0
}
 800700a:	4618      	mov	r0, r3
 800700c:	3708      	adds	r7, #8
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
	...

08007014 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007014:	b480      	push	{r7}
 8007016:	b085      	sub	sp, #20
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d101      	bne.n	8007026 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007022:	2301      	movs	r3, #1
 8007024:	e098      	b.n	8007158 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	461a      	mov	r2, r3
 800702c:	4b4d      	ldr	r3, [pc, #308]	@ (8007164 <HAL_DMA_Init+0x150>)
 800702e:	429a      	cmp	r2, r3
 8007030:	d80f      	bhi.n	8007052 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	461a      	mov	r2, r3
 8007038:	4b4b      	ldr	r3, [pc, #300]	@ (8007168 <HAL_DMA_Init+0x154>)
 800703a:	4413      	add	r3, r2
 800703c:	4a4b      	ldr	r2, [pc, #300]	@ (800716c <HAL_DMA_Init+0x158>)
 800703e:	fba2 2303 	umull	r2, r3, r2, r3
 8007042:	091b      	lsrs	r3, r3, #4
 8007044:	009a      	lsls	r2, r3, #2
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	4a48      	ldr	r2, [pc, #288]	@ (8007170 <HAL_DMA_Init+0x15c>)
 800704e:	641a      	str	r2, [r3, #64]	@ 0x40
 8007050:	e00e      	b.n	8007070 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	461a      	mov	r2, r3
 8007058:	4b46      	ldr	r3, [pc, #280]	@ (8007174 <HAL_DMA_Init+0x160>)
 800705a:	4413      	add	r3, r2
 800705c:	4a43      	ldr	r2, [pc, #268]	@ (800716c <HAL_DMA_Init+0x158>)
 800705e:	fba2 2303 	umull	r2, r3, r2, r3
 8007062:	091b      	lsrs	r3, r3, #4
 8007064:	009a      	lsls	r2, r3, #2
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	4a42      	ldr	r2, [pc, #264]	@ (8007178 <HAL_DMA_Init+0x164>)
 800706e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2202      	movs	r2, #2
 8007074:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8007086:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800708a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007094:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	691b      	ldr	r3, [r3, #16]
 800709a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80070a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	699b      	ldr	r3, [r3, #24]
 80070a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80070ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6a1b      	ldr	r3, [r3, #32]
 80070b2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80070b4:	68fa      	ldr	r2, [r7, #12]
 80070b6:	4313      	orrs	r3, r2
 80070b8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	68fa      	ldr	r2, [r7, #12]
 80070c0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80070ca:	d039      	beq.n	8007140 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070d0:	4a27      	ldr	r2, [pc, #156]	@ (8007170 <HAL_DMA_Init+0x15c>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d11a      	bne.n	800710c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80070d6:	4b29      	ldr	r3, [pc, #164]	@ (800717c <HAL_DMA_Init+0x168>)
 80070d8:	681a      	ldr	r2, [r3, #0]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070de:	f003 031c 	and.w	r3, r3, #28
 80070e2:	210f      	movs	r1, #15
 80070e4:	fa01 f303 	lsl.w	r3, r1, r3
 80070e8:	43db      	mvns	r3, r3
 80070ea:	4924      	ldr	r1, [pc, #144]	@ (800717c <HAL_DMA_Init+0x168>)
 80070ec:	4013      	ands	r3, r2
 80070ee:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80070f0:	4b22      	ldr	r3, [pc, #136]	@ (800717c <HAL_DMA_Init+0x168>)
 80070f2:	681a      	ldr	r2, [r3, #0]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6859      	ldr	r1, [r3, #4]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070fc:	f003 031c 	and.w	r3, r3, #28
 8007100:	fa01 f303 	lsl.w	r3, r1, r3
 8007104:	491d      	ldr	r1, [pc, #116]	@ (800717c <HAL_DMA_Init+0x168>)
 8007106:	4313      	orrs	r3, r2
 8007108:	600b      	str	r3, [r1, #0]
 800710a:	e019      	b.n	8007140 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800710c:	4b1c      	ldr	r3, [pc, #112]	@ (8007180 <HAL_DMA_Init+0x16c>)
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007114:	f003 031c 	and.w	r3, r3, #28
 8007118:	210f      	movs	r1, #15
 800711a:	fa01 f303 	lsl.w	r3, r1, r3
 800711e:	43db      	mvns	r3, r3
 8007120:	4917      	ldr	r1, [pc, #92]	@ (8007180 <HAL_DMA_Init+0x16c>)
 8007122:	4013      	ands	r3, r2
 8007124:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8007126:	4b16      	ldr	r3, [pc, #88]	@ (8007180 <HAL_DMA_Init+0x16c>)
 8007128:	681a      	ldr	r2, [r3, #0]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6859      	ldr	r1, [r3, #4]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007132:	f003 031c 	and.w	r3, r3, #28
 8007136:	fa01 f303 	lsl.w	r3, r1, r3
 800713a:	4911      	ldr	r1, [pc, #68]	@ (8007180 <HAL_DMA_Init+0x16c>)
 800713c:	4313      	orrs	r3, r2
 800713e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2200      	movs	r2, #0
 8007144:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2201      	movs	r2, #1
 800714a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2200      	movs	r2, #0
 8007152:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007156:	2300      	movs	r3, #0
}
 8007158:	4618      	mov	r0, r3
 800715a:	3714      	adds	r7, #20
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr
 8007164:	40020407 	.word	0x40020407
 8007168:	bffdfff8 	.word	0xbffdfff8
 800716c:	cccccccd 	.word	0xcccccccd
 8007170:	40020000 	.word	0x40020000
 8007174:	bffdfbf8 	.word	0xbffdfbf8
 8007178:	40020400 	.word	0x40020400
 800717c:	400200a8 	.word	0x400200a8
 8007180:	400204a8 	.word	0x400204a8

08007184 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d101      	bne.n	8007196 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8007192:	2301      	movs	r3, #1
 8007194:	e072      	b.n	800727c <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f022 0201 	bic.w	r2, r2, #1
 80071a4:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	461a      	mov	r2, r3
 80071ac:	4b36      	ldr	r3, [pc, #216]	@ (8007288 <HAL_DMA_DeInit+0x104>)
 80071ae:	429a      	cmp	r2, r3
 80071b0:	d80f      	bhi.n	80071d2 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	461a      	mov	r2, r3
 80071b8:	4b34      	ldr	r3, [pc, #208]	@ (800728c <HAL_DMA_DeInit+0x108>)
 80071ba:	4413      	add	r3, r2
 80071bc:	4a34      	ldr	r2, [pc, #208]	@ (8007290 <HAL_DMA_DeInit+0x10c>)
 80071be:	fba2 2303 	umull	r2, r3, r2, r3
 80071c2:	091b      	lsrs	r3, r3, #4
 80071c4:	009a      	lsls	r2, r3, #2
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	4a31      	ldr	r2, [pc, #196]	@ (8007294 <HAL_DMA_DeInit+0x110>)
 80071ce:	641a      	str	r2, [r3, #64]	@ 0x40
 80071d0:	e00e      	b.n	80071f0 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	461a      	mov	r2, r3
 80071d8:	4b2f      	ldr	r3, [pc, #188]	@ (8007298 <HAL_DMA_DeInit+0x114>)
 80071da:	4413      	add	r3, r2
 80071dc:	4a2c      	ldr	r2, [pc, #176]	@ (8007290 <HAL_DMA_DeInit+0x10c>)
 80071de:	fba2 2303 	umull	r2, r3, r2, r3
 80071e2:	091b      	lsrs	r3, r3, #4
 80071e4:	009a      	lsls	r2, r3, #2
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4a2b      	ldr	r2, [pc, #172]	@ (800729c <HAL_DMA_DeInit+0x118>)
 80071ee:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	2200      	movs	r2, #0
 80071f6:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071fc:	f003 021c 	and.w	r2, r3, #28
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007204:	2101      	movs	r1, #1
 8007206:	fa01 f202 	lsl.w	r2, r1, r2
 800720a:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007210:	4a20      	ldr	r2, [pc, #128]	@ (8007294 <HAL_DMA_DeInit+0x110>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d10d      	bne.n	8007232 <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8007216:	4b22      	ldr	r3, [pc, #136]	@ (80072a0 <HAL_DMA_DeInit+0x11c>)
 8007218:	681a      	ldr	r2, [r3, #0]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800721e:	f003 031c 	and.w	r3, r3, #28
 8007222:	210f      	movs	r1, #15
 8007224:	fa01 f303 	lsl.w	r3, r1, r3
 8007228:	43db      	mvns	r3, r3
 800722a:	491d      	ldr	r1, [pc, #116]	@ (80072a0 <HAL_DMA_DeInit+0x11c>)
 800722c:	4013      	ands	r3, r2
 800722e:	600b      	str	r3, [r1, #0]
 8007230:	e00c      	b.n	800724c <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8007232:	4b1c      	ldr	r3, [pc, #112]	@ (80072a4 <HAL_DMA_DeInit+0x120>)
 8007234:	681a      	ldr	r2, [r3, #0]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800723a:	f003 031c 	and.w	r3, r3, #28
 800723e:	210f      	movs	r1, #15
 8007240:	fa01 f303 	lsl.w	r3, r1, r3
 8007244:	43db      	mvns	r3, r3
 8007246:	4917      	ldr	r1, [pc, #92]	@ (80072a4 <HAL_DMA_DeInit+0x120>)
 8007248:	4013      	ands	r3, r2
 800724a:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2200      	movs	r2, #0
 8007250:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2200      	movs	r2, #0
 800726e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2200      	movs	r2, #0
 8007276:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800727a:	2300      	movs	r3, #0
}
 800727c:	4618      	mov	r0, r3
 800727e:	370c      	adds	r7, #12
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr
 8007288:	40020407 	.word	0x40020407
 800728c:	bffdfff8 	.word	0xbffdfff8
 8007290:	cccccccd 	.word	0xcccccccd
 8007294:	40020000 	.word	0x40020000
 8007298:	bffdfbf8 	.word	0xbffdfbf8
 800729c:	40020400 	.word	0x40020400
 80072a0:	400200a8 	.word	0x400200a8
 80072a4:	400204a8 	.word	0x400204a8

080072a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b086      	sub	sp, #24
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	60f8      	str	r0, [r7, #12]
 80072b0:	60b9      	str	r1, [r7, #8]
 80072b2:	607a      	str	r2, [r7, #4]
 80072b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80072b6:	2300      	movs	r3, #0
 80072b8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80072c0:	2b01      	cmp	r3, #1
 80072c2:	d101      	bne.n	80072c8 <HAL_DMA_Start_IT+0x20>
 80072c4:	2302      	movs	r3, #2
 80072c6:	e04b      	b.n	8007360 <HAL_DMA_Start_IT+0xb8>
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2201      	movs	r2, #1
 80072cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80072d6:	b2db      	uxtb	r3, r3
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d13a      	bne.n	8007352 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2202      	movs	r2, #2
 80072e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2200      	movs	r2, #0
 80072e8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	681a      	ldr	r2, [r3, #0]
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f022 0201 	bic.w	r2, r2, #1
 80072f8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	687a      	ldr	r2, [r7, #4]
 80072fe:	68b9      	ldr	r1, [r7, #8]
 8007300:	68f8      	ldr	r0, [r7, #12]
 8007302:	f000 f96d 	bl	80075e0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800730a:	2b00      	cmp	r3, #0
 800730c:	d008      	beq.n	8007320 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f042 020e 	orr.w	r2, r2, #14
 800731c:	601a      	str	r2, [r3, #0]
 800731e:	e00f      	b.n	8007340 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f022 0204 	bic.w	r2, r2, #4
 800732e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f042 020a 	orr.w	r2, r2, #10
 800733e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	681a      	ldr	r2, [r3, #0]
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f042 0201 	orr.w	r2, r2, #1
 800734e:	601a      	str	r2, [r3, #0]
 8007350:	e005      	b.n	800735e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2200      	movs	r2, #0
 8007356:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800735a:	2302      	movs	r3, #2
 800735c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800735e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007360:	4618      	mov	r0, r3
 8007362:	3718      	adds	r7, #24
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007368:	b480      	push	{r7}
 800736a:	b085      	sub	sp, #20
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007370:	2300      	movs	r3, #0
 8007372:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800737a:	b2db      	uxtb	r3, r3
 800737c:	2b02      	cmp	r3, #2
 800737e:	d008      	beq.n	8007392 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2204      	movs	r2, #4
 8007384:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2200      	movs	r2, #0
 800738a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800738e:	2301      	movs	r3, #1
 8007390:	e022      	b.n	80073d8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f022 020e 	bic.w	r2, r2, #14
 80073a0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	681a      	ldr	r2, [r3, #0]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f022 0201 	bic.w	r2, r2, #1
 80073b0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073b6:	f003 021c 	and.w	r2, r3, #28
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073be:	2101      	movs	r1, #1
 80073c0:	fa01 f202 	lsl.w	r2, r1, r2
 80073c4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2201      	movs	r2, #1
 80073ca:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80073d6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3714      	adds	r7, #20
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr

080073e4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b084      	sub	sp, #16
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073ec:	2300      	movs	r3, #0
 80073ee:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80073f6:	b2db      	uxtb	r3, r3
 80073f8:	2b02      	cmp	r3, #2
 80073fa:	d005      	beq.n	8007408 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2204      	movs	r2, #4
 8007400:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8007402:	2301      	movs	r3, #1
 8007404:	73fb      	strb	r3, [r7, #15]
 8007406:	e029      	b.n	800745c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	681a      	ldr	r2, [r3, #0]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f022 020e 	bic.w	r2, r2, #14
 8007416:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	681a      	ldr	r2, [r3, #0]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f022 0201 	bic.w	r2, r2, #1
 8007426:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800742c:	f003 021c 	and.w	r2, r3, #28
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007434:	2101      	movs	r1, #1
 8007436:	fa01 f202 	lsl.w	r2, r1, r2
 800743a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2201      	movs	r2, #1
 8007440:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2200      	movs	r2, #0
 8007448:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007450:	2b00      	cmp	r3, #0
 8007452:	d003      	beq.n	800745c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	4798      	blx	r3
    }
  }
  return status;
 800745c:	7bfb      	ldrb	r3, [r7, #15]
}
 800745e:	4618      	mov	r0, r3
 8007460:	3710      	adds	r7, #16
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}

08007466 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007466:	b580      	push	{r7, lr}
 8007468:	b084      	sub	sp, #16
 800746a:	af00      	add	r7, sp, #0
 800746c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007482:	f003 031c 	and.w	r3, r3, #28
 8007486:	2204      	movs	r2, #4
 8007488:	409a      	lsls	r2, r3
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	4013      	ands	r3, r2
 800748e:	2b00      	cmp	r3, #0
 8007490:	d026      	beq.n	80074e0 <HAL_DMA_IRQHandler+0x7a>
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	f003 0304 	and.w	r3, r3, #4
 8007498:	2b00      	cmp	r3, #0
 800749a:	d021      	beq.n	80074e0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f003 0320 	and.w	r3, r3, #32
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d107      	bne.n	80074ba <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	681a      	ldr	r2, [r3, #0]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f022 0204 	bic.w	r2, r2, #4
 80074b8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074be:	f003 021c 	and.w	r2, r3, #28
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074c6:	2104      	movs	r1, #4
 80074c8:	fa01 f202 	lsl.w	r2, r1, r2
 80074cc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d071      	beq.n	80075ba <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80074de:	e06c      	b.n	80075ba <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074e4:	f003 031c 	and.w	r3, r3, #28
 80074e8:	2202      	movs	r2, #2
 80074ea:	409a      	lsls	r2, r3
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	4013      	ands	r3, r2
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d02e      	beq.n	8007552 <HAL_DMA_IRQHandler+0xec>
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	f003 0302 	and.w	r3, r3, #2
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d029      	beq.n	8007552 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f003 0320 	and.w	r3, r3, #32
 8007508:	2b00      	cmp	r3, #0
 800750a:	d10b      	bne.n	8007524 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	681a      	ldr	r2, [r3, #0]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f022 020a 	bic.w	r2, r2, #10
 800751a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2201      	movs	r2, #1
 8007520:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007528:	f003 021c 	and.w	r2, r3, #28
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007530:	2102      	movs	r1, #2
 8007532:	fa01 f202 	lsl.w	r2, r1, r2
 8007536:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2200      	movs	r2, #0
 800753c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007544:	2b00      	cmp	r3, #0
 8007546:	d038      	beq.n	80075ba <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8007550:	e033      	b.n	80075ba <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007556:	f003 031c 	and.w	r3, r3, #28
 800755a:	2208      	movs	r2, #8
 800755c:	409a      	lsls	r2, r3
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	4013      	ands	r3, r2
 8007562:	2b00      	cmp	r3, #0
 8007564:	d02a      	beq.n	80075bc <HAL_DMA_IRQHandler+0x156>
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	f003 0308 	and.w	r3, r3, #8
 800756c:	2b00      	cmp	r3, #0
 800756e:	d025      	beq.n	80075bc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	681a      	ldr	r2, [r3, #0]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f022 020e 	bic.w	r2, r2, #14
 800757e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007584:	f003 021c 	and.w	r2, r3, #28
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800758c:	2101      	movs	r1, #1
 800758e:	fa01 f202 	lsl.w	r2, r1, r2
 8007592:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2201      	movs	r2, #1
 8007598:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2201      	movs	r2, #1
 800759e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2200      	movs	r2, #0
 80075a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d004      	beq.n	80075bc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80075ba:	bf00      	nop
 80075bc:	bf00      	nop
}
 80075be:	3710      	adds	r7, #16
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80075d2:	b2db      	uxtb	r3, r3
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	370c      	adds	r7, #12
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr

080075e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b085      	sub	sp, #20
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	60f8      	str	r0, [r7, #12]
 80075e8:	60b9      	str	r1, [r7, #8]
 80075ea:	607a      	str	r2, [r7, #4]
 80075ec:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075f2:	f003 021c 	and.w	r2, r3, #28
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075fa:	2101      	movs	r1, #1
 80075fc:	fa01 f202 	lsl.w	r2, r1, r2
 8007600:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	683a      	ldr	r2, [r7, #0]
 8007608:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	2b10      	cmp	r3, #16
 8007610:	d108      	bne.n	8007624 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	687a      	ldr	r2, [r7, #4]
 8007618:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	68ba      	ldr	r2, [r7, #8]
 8007620:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007622:	e007      	b.n	8007634 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	68ba      	ldr	r2, [r7, #8]
 800762a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	60da      	str	r2, [r3, #12]
}
 8007634:	bf00      	nop
 8007636:	3714      	adds	r7, #20
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr

08007640 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007640:	b480      	push	{r7}
 8007642:	b087      	sub	sp, #28
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800764a:	2300      	movs	r3, #0
 800764c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800764e:	e166      	b.n	800791e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	2101      	movs	r1, #1
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	fa01 f303 	lsl.w	r3, r1, r3
 800765c:	4013      	ands	r3, r2
 800765e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2b00      	cmp	r3, #0
 8007664:	f000 8158 	beq.w	8007918 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	f003 0303 	and.w	r3, r3, #3
 8007670:	2b01      	cmp	r3, #1
 8007672:	d005      	beq.n	8007680 <HAL_GPIO_Init+0x40>
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	f003 0303 	and.w	r3, r3, #3
 800767c:	2b02      	cmp	r3, #2
 800767e:	d130      	bne.n	80076e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	689b      	ldr	r3, [r3, #8]
 8007684:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	005b      	lsls	r3, r3, #1
 800768a:	2203      	movs	r2, #3
 800768c:	fa02 f303 	lsl.w	r3, r2, r3
 8007690:	43db      	mvns	r3, r3
 8007692:	693a      	ldr	r2, [r7, #16]
 8007694:	4013      	ands	r3, r2
 8007696:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	68da      	ldr	r2, [r3, #12]
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	005b      	lsls	r3, r3, #1
 80076a0:	fa02 f303 	lsl.w	r3, r2, r3
 80076a4:	693a      	ldr	r2, [r7, #16]
 80076a6:	4313      	orrs	r3, r2
 80076a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	693a      	ldr	r2, [r7, #16]
 80076ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80076b6:	2201      	movs	r2, #1
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	fa02 f303 	lsl.w	r3, r2, r3
 80076be:	43db      	mvns	r3, r3
 80076c0:	693a      	ldr	r2, [r7, #16]
 80076c2:	4013      	ands	r3, r2
 80076c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	091b      	lsrs	r3, r3, #4
 80076cc:	f003 0201 	and.w	r2, r3, #1
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	fa02 f303 	lsl.w	r3, r2, r3
 80076d6:	693a      	ldr	r2, [r7, #16]
 80076d8:	4313      	orrs	r3, r2
 80076da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	693a      	ldr	r2, [r7, #16]
 80076e0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	f003 0303 	and.w	r3, r3, #3
 80076ea:	2b03      	cmp	r3, #3
 80076ec:	d017      	beq.n	800771e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	005b      	lsls	r3, r3, #1
 80076f8:	2203      	movs	r2, #3
 80076fa:	fa02 f303 	lsl.w	r3, r2, r3
 80076fe:	43db      	mvns	r3, r3
 8007700:	693a      	ldr	r2, [r7, #16]
 8007702:	4013      	ands	r3, r2
 8007704:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	689a      	ldr	r2, [r3, #8]
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	005b      	lsls	r3, r3, #1
 800770e:	fa02 f303 	lsl.w	r3, r2, r3
 8007712:	693a      	ldr	r2, [r7, #16]
 8007714:	4313      	orrs	r3, r2
 8007716:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	693a      	ldr	r2, [r7, #16]
 800771c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	f003 0303 	and.w	r3, r3, #3
 8007726:	2b02      	cmp	r3, #2
 8007728:	d123      	bne.n	8007772 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	08da      	lsrs	r2, r3, #3
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	3208      	adds	r2, #8
 8007732:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007736:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	f003 0307 	and.w	r3, r3, #7
 800773e:	009b      	lsls	r3, r3, #2
 8007740:	220f      	movs	r2, #15
 8007742:	fa02 f303 	lsl.w	r3, r2, r3
 8007746:	43db      	mvns	r3, r3
 8007748:	693a      	ldr	r2, [r7, #16]
 800774a:	4013      	ands	r3, r2
 800774c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	691a      	ldr	r2, [r3, #16]
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	f003 0307 	and.w	r3, r3, #7
 8007758:	009b      	lsls	r3, r3, #2
 800775a:	fa02 f303 	lsl.w	r3, r2, r3
 800775e:	693a      	ldr	r2, [r7, #16]
 8007760:	4313      	orrs	r3, r2
 8007762:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	08da      	lsrs	r2, r3, #3
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	3208      	adds	r2, #8
 800776c:	6939      	ldr	r1, [r7, #16]
 800776e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	005b      	lsls	r3, r3, #1
 800777c:	2203      	movs	r2, #3
 800777e:	fa02 f303 	lsl.w	r3, r2, r3
 8007782:	43db      	mvns	r3, r3
 8007784:	693a      	ldr	r2, [r7, #16]
 8007786:	4013      	ands	r3, r2
 8007788:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	f003 0203 	and.w	r2, r3, #3
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	005b      	lsls	r3, r3, #1
 8007796:	fa02 f303 	lsl.w	r3, r2, r3
 800779a:	693a      	ldr	r2, [r7, #16]
 800779c:	4313      	orrs	r3, r2
 800779e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	693a      	ldr	r2, [r7, #16]
 80077a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	f000 80b2 	beq.w	8007918 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80077b4:	4b61      	ldr	r3, [pc, #388]	@ (800793c <HAL_GPIO_Init+0x2fc>)
 80077b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077b8:	4a60      	ldr	r2, [pc, #384]	@ (800793c <HAL_GPIO_Init+0x2fc>)
 80077ba:	f043 0301 	orr.w	r3, r3, #1
 80077be:	6613      	str	r3, [r2, #96]	@ 0x60
 80077c0:	4b5e      	ldr	r3, [pc, #376]	@ (800793c <HAL_GPIO_Init+0x2fc>)
 80077c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077c4:	f003 0301 	and.w	r3, r3, #1
 80077c8:	60bb      	str	r3, [r7, #8]
 80077ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80077cc:	4a5c      	ldr	r2, [pc, #368]	@ (8007940 <HAL_GPIO_Init+0x300>)
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	089b      	lsrs	r3, r3, #2
 80077d2:	3302      	adds	r3, #2
 80077d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	f003 0303 	and.w	r3, r3, #3
 80077e0:	009b      	lsls	r3, r3, #2
 80077e2:	220f      	movs	r2, #15
 80077e4:	fa02 f303 	lsl.w	r3, r2, r3
 80077e8:	43db      	mvns	r3, r3
 80077ea:	693a      	ldr	r2, [r7, #16]
 80077ec:	4013      	ands	r3, r2
 80077ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80077f6:	d02b      	beq.n	8007850 <HAL_GPIO_Init+0x210>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	4a52      	ldr	r2, [pc, #328]	@ (8007944 <HAL_GPIO_Init+0x304>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d025      	beq.n	800784c <HAL_GPIO_Init+0x20c>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	4a51      	ldr	r2, [pc, #324]	@ (8007948 <HAL_GPIO_Init+0x308>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d01f      	beq.n	8007848 <HAL_GPIO_Init+0x208>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	4a50      	ldr	r2, [pc, #320]	@ (800794c <HAL_GPIO_Init+0x30c>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d019      	beq.n	8007844 <HAL_GPIO_Init+0x204>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	4a4f      	ldr	r2, [pc, #316]	@ (8007950 <HAL_GPIO_Init+0x310>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d013      	beq.n	8007840 <HAL_GPIO_Init+0x200>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	4a4e      	ldr	r2, [pc, #312]	@ (8007954 <HAL_GPIO_Init+0x314>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d00d      	beq.n	800783c <HAL_GPIO_Init+0x1fc>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	4a4d      	ldr	r2, [pc, #308]	@ (8007958 <HAL_GPIO_Init+0x318>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d007      	beq.n	8007838 <HAL_GPIO_Init+0x1f8>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	4a4c      	ldr	r2, [pc, #304]	@ (800795c <HAL_GPIO_Init+0x31c>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d101      	bne.n	8007834 <HAL_GPIO_Init+0x1f4>
 8007830:	2307      	movs	r3, #7
 8007832:	e00e      	b.n	8007852 <HAL_GPIO_Init+0x212>
 8007834:	2308      	movs	r3, #8
 8007836:	e00c      	b.n	8007852 <HAL_GPIO_Init+0x212>
 8007838:	2306      	movs	r3, #6
 800783a:	e00a      	b.n	8007852 <HAL_GPIO_Init+0x212>
 800783c:	2305      	movs	r3, #5
 800783e:	e008      	b.n	8007852 <HAL_GPIO_Init+0x212>
 8007840:	2304      	movs	r3, #4
 8007842:	e006      	b.n	8007852 <HAL_GPIO_Init+0x212>
 8007844:	2303      	movs	r3, #3
 8007846:	e004      	b.n	8007852 <HAL_GPIO_Init+0x212>
 8007848:	2302      	movs	r3, #2
 800784a:	e002      	b.n	8007852 <HAL_GPIO_Init+0x212>
 800784c:	2301      	movs	r3, #1
 800784e:	e000      	b.n	8007852 <HAL_GPIO_Init+0x212>
 8007850:	2300      	movs	r3, #0
 8007852:	697a      	ldr	r2, [r7, #20]
 8007854:	f002 0203 	and.w	r2, r2, #3
 8007858:	0092      	lsls	r2, r2, #2
 800785a:	4093      	lsls	r3, r2
 800785c:	693a      	ldr	r2, [r7, #16]
 800785e:	4313      	orrs	r3, r2
 8007860:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007862:	4937      	ldr	r1, [pc, #220]	@ (8007940 <HAL_GPIO_Init+0x300>)
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	089b      	lsrs	r3, r3, #2
 8007868:	3302      	adds	r3, #2
 800786a:	693a      	ldr	r2, [r7, #16]
 800786c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007870:	4b3b      	ldr	r3, [pc, #236]	@ (8007960 <HAL_GPIO_Init+0x320>)
 8007872:	689b      	ldr	r3, [r3, #8]
 8007874:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	43db      	mvns	r3, r3
 800787a:	693a      	ldr	r2, [r7, #16]
 800787c:	4013      	ands	r3, r2
 800787e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007888:	2b00      	cmp	r3, #0
 800788a:	d003      	beq.n	8007894 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800788c:	693a      	ldr	r2, [r7, #16]
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	4313      	orrs	r3, r2
 8007892:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007894:	4a32      	ldr	r2, [pc, #200]	@ (8007960 <HAL_GPIO_Init+0x320>)
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800789a:	4b31      	ldr	r3, [pc, #196]	@ (8007960 <HAL_GPIO_Init+0x320>)
 800789c:	68db      	ldr	r3, [r3, #12]
 800789e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	43db      	mvns	r3, r3
 80078a4:	693a      	ldr	r2, [r7, #16]
 80078a6:	4013      	ands	r3, r2
 80078a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d003      	beq.n	80078be <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80078b6:	693a      	ldr	r2, [r7, #16]
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	4313      	orrs	r3, r2
 80078bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80078be:	4a28      	ldr	r2, [pc, #160]	@ (8007960 <HAL_GPIO_Init+0x320>)
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80078c4:	4b26      	ldr	r3, [pc, #152]	@ (8007960 <HAL_GPIO_Init+0x320>)
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	43db      	mvns	r3, r3
 80078ce:	693a      	ldr	r2, [r7, #16]
 80078d0:	4013      	ands	r3, r2
 80078d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d003      	beq.n	80078e8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80078e0:	693a      	ldr	r2, [r7, #16]
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	4313      	orrs	r3, r2
 80078e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80078e8:	4a1d      	ldr	r2, [pc, #116]	@ (8007960 <HAL_GPIO_Init+0x320>)
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80078ee:	4b1c      	ldr	r3, [pc, #112]	@ (8007960 <HAL_GPIO_Init+0x320>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	43db      	mvns	r3, r3
 80078f8:	693a      	ldr	r2, [r7, #16]
 80078fa:	4013      	ands	r3, r2
 80078fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007906:	2b00      	cmp	r3, #0
 8007908:	d003      	beq.n	8007912 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800790a:	693a      	ldr	r2, [r7, #16]
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	4313      	orrs	r3, r2
 8007910:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007912:	4a13      	ldr	r2, [pc, #76]	@ (8007960 <HAL_GPIO_Init+0x320>)
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	3301      	adds	r3, #1
 800791c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	fa22 f303 	lsr.w	r3, r2, r3
 8007928:	2b00      	cmp	r3, #0
 800792a:	f47f ae91 	bne.w	8007650 <HAL_GPIO_Init+0x10>
  }
}
 800792e:	bf00      	nop
 8007930:	bf00      	nop
 8007932:	371c      	adds	r7, #28
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr
 800793c:	40021000 	.word	0x40021000
 8007940:	40010000 	.word	0x40010000
 8007944:	48000400 	.word	0x48000400
 8007948:	48000800 	.word	0x48000800
 800794c:	48000c00 	.word	0x48000c00
 8007950:	48001000 	.word	0x48001000
 8007954:	48001400 	.word	0x48001400
 8007958:	48001800 	.word	0x48001800
 800795c:	48001c00 	.word	0x48001c00
 8007960:	40010400 	.word	0x40010400

08007964 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007964:	b480      	push	{r7}
 8007966:	b087      	sub	sp, #28
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800796e:	2300      	movs	r3, #0
 8007970:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8007972:	e0c9      	b.n	8007b08 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8007974:	2201      	movs	r2, #1
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	fa02 f303 	lsl.w	r3, r2, r3
 800797c:	683a      	ldr	r2, [r7, #0]
 800797e:	4013      	ands	r3, r2
 8007980:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	2b00      	cmp	r3, #0
 8007986:	f000 80bc 	beq.w	8007b02 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800798a:	4a66      	ldr	r2, [pc, #408]	@ (8007b24 <HAL_GPIO_DeInit+0x1c0>)
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	089b      	lsrs	r3, r3, #2
 8007990:	3302      	adds	r3, #2
 8007992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007996:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	f003 0303 	and.w	r3, r3, #3
 800799e:	009b      	lsls	r3, r3, #2
 80079a0:	220f      	movs	r2, #15
 80079a2:	fa02 f303 	lsl.w	r3, r2, r3
 80079a6:	68fa      	ldr	r2, [r7, #12]
 80079a8:	4013      	ands	r3, r2
 80079aa:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80079b2:	d02b      	beq.n	8007a0c <HAL_GPIO_DeInit+0xa8>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	4a5c      	ldr	r2, [pc, #368]	@ (8007b28 <HAL_GPIO_DeInit+0x1c4>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d025      	beq.n	8007a08 <HAL_GPIO_DeInit+0xa4>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	4a5b      	ldr	r2, [pc, #364]	@ (8007b2c <HAL_GPIO_DeInit+0x1c8>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d01f      	beq.n	8007a04 <HAL_GPIO_DeInit+0xa0>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	4a5a      	ldr	r2, [pc, #360]	@ (8007b30 <HAL_GPIO_DeInit+0x1cc>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d019      	beq.n	8007a00 <HAL_GPIO_DeInit+0x9c>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	4a59      	ldr	r2, [pc, #356]	@ (8007b34 <HAL_GPIO_DeInit+0x1d0>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d013      	beq.n	80079fc <HAL_GPIO_DeInit+0x98>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	4a58      	ldr	r2, [pc, #352]	@ (8007b38 <HAL_GPIO_DeInit+0x1d4>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d00d      	beq.n	80079f8 <HAL_GPIO_DeInit+0x94>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	4a57      	ldr	r2, [pc, #348]	@ (8007b3c <HAL_GPIO_DeInit+0x1d8>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d007      	beq.n	80079f4 <HAL_GPIO_DeInit+0x90>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	4a56      	ldr	r2, [pc, #344]	@ (8007b40 <HAL_GPIO_DeInit+0x1dc>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d101      	bne.n	80079f0 <HAL_GPIO_DeInit+0x8c>
 80079ec:	2307      	movs	r3, #7
 80079ee:	e00e      	b.n	8007a0e <HAL_GPIO_DeInit+0xaa>
 80079f0:	2308      	movs	r3, #8
 80079f2:	e00c      	b.n	8007a0e <HAL_GPIO_DeInit+0xaa>
 80079f4:	2306      	movs	r3, #6
 80079f6:	e00a      	b.n	8007a0e <HAL_GPIO_DeInit+0xaa>
 80079f8:	2305      	movs	r3, #5
 80079fa:	e008      	b.n	8007a0e <HAL_GPIO_DeInit+0xaa>
 80079fc:	2304      	movs	r3, #4
 80079fe:	e006      	b.n	8007a0e <HAL_GPIO_DeInit+0xaa>
 8007a00:	2303      	movs	r3, #3
 8007a02:	e004      	b.n	8007a0e <HAL_GPIO_DeInit+0xaa>
 8007a04:	2302      	movs	r3, #2
 8007a06:	e002      	b.n	8007a0e <HAL_GPIO_DeInit+0xaa>
 8007a08:	2301      	movs	r3, #1
 8007a0a:	e000      	b.n	8007a0e <HAL_GPIO_DeInit+0xaa>
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	697a      	ldr	r2, [r7, #20]
 8007a10:	f002 0203 	and.w	r2, r2, #3
 8007a14:	0092      	lsls	r2, r2, #2
 8007a16:	4093      	lsls	r3, r2
 8007a18:	68fa      	ldr	r2, [r7, #12]
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	d132      	bne.n	8007a84 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8007a1e:	4b49      	ldr	r3, [pc, #292]	@ (8007b44 <HAL_GPIO_DeInit+0x1e0>)
 8007a20:	681a      	ldr	r2, [r3, #0]
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	43db      	mvns	r3, r3
 8007a26:	4947      	ldr	r1, [pc, #284]	@ (8007b44 <HAL_GPIO_DeInit+0x1e0>)
 8007a28:	4013      	ands	r3, r2
 8007a2a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8007a2c:	4b45      	ldr	r3, [pc, #276]	@ (8007b44 <HAL_GPIO_DeInit+0x1e0>)
 8007a2e:	685a      	ldr	r2, [r3, #4]
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	43db      	mvns	r3, r3
 8007a34:	4943      	ldr	r1, [pc, #268]	@ (8007b44 <HAL_GPIO_DeInit+0x1e0>)
 8007a36:	4013      	ands	r3, r2
 8007a38:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8007a3a:	4b42      	ldr	r3, [pc, #264]	@ (8007b44 <HAL_GPIO_DeInit+0x1e0>)
 8007a3c:	68da      	ldr	r2, [r3, #12]
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	43db      	mvns	r3, r3
 8007a42:	4940      	ldr	r1, [pc, #256]	@ (8007b44 <HAL_GPIO_DeInit+0x1e0>)
 8007a44:	4013      	ands	r3, r2
 8007a46:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8007a48:	4b3e      	ldr	r3, [pc, #248]	@ (8007b44 <HAL_GPIO_DeInit+0x1e0>)
 8007a4a:	689a      	ldr	r2, [r3, #8]
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	43db      	mvns	r3, r3
 8007a50:	493c      	ldr	r1, [pc, #240]	@ (8007b44 <HAL_GPIO_DeInit+0x1e0>)
 8007a52:	4013      	ands	r3, r2
 8007a54:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	f003 0303 	and.w	r3, r3, #3
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	220f      	movs	r2, #15
 8007a60:	fa02 f303 	lsl.w	r3, r2, r3
 8007a64:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8007a66:	4a2f      	ldr	r2, [pc, #188]	@ (8007b24 <HAL_GPIO_DeInit+0x1c0>)
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	089b      	lsrs	r3, r3, #2
 8007a6c:	3302      	adds	r3, #2
 8007a6e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	43da      	mvns	r2, r3
 8007a76:	482b      	ldr	r0, [pc, #172]	@ (8007b24 <HAL_GPIO_DeInit+0x1c0>)
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	089b      	lsrs	r3, r3, #2
 8007a7c:	400a      	ands	r2, r1
 8007a7e:	3302      	adds	r3, #2
 8007a80:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681a      	ldr	r2, [r3, #0]
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	005b      	lsls	r3, r3, #1
 8007a8c:	2103      	movs	r1, #3
 8007a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8007a92:	431a      	orrs	r2, r3
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	08da      	lsrs	r2, r3, #3
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	3208      	adds	r2, #8
 8007aa0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	f003 0307 	and.w	r3, r3, #7
 8007aaa:	009b      	lsls	r3, r3, #2
 8007aac:	220f      	movs	r2, #15
 8007aae:	fa02 f303 	lsl.w	r3, r2, r3
 8007ab2:	43db      	mvns	r3, r3
 8007ab4:	697a      	ldr	r2, [r7, #20]
 8007ab6:	08d2      	lsrs	r2, r2, #3
 8007ab8:	4019      	ands	r1, r3
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	3208      	adds	r2, #8
 8007abe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	689a      	ldr	r2, [r3, #8]
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	005b      	lsls	r3, r3, #1
 8007aca:	2103      	movs	r1, #3
 8007acc:	fa01 f303 	lsl.w	r3, r1, r3
 8007ad0:	43db      	mvns	r3, r3
 8007ad2:	401a      	ands	r2, r3
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	685a      	ldr	r2, [r3, #4]
 8007adc:	2101      	movs	r1, #1
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8007ae4:	43db      	mvns	r3, r3
 8007ae6:	401a      	ands	r2, r3
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	68da      	ldr	r2, [r3, #12]
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	005b      	lsls	r3, r3, #1
 8007af4:	2103      	movs	r1, #3
 8007af6:	fa01 f303 	lsl.w	r3, r1, r3
 8007afa:	43db      	mvns	r3, r3
 8007afc:	401a      	ands	r2, r3
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	3301      	adds	r3, #1
 8007b06:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8007b08:	683a      	ldr	r2, [r7, #0]
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	f47f af2f 	bne.w	8007974 <HAL_GPIO_DeInit+0x10>
  }
}
 8007b16:	bf00      	nop
 8007b18:	bf00      	nop
 8007b1a:	371c      	adds	r7, #28
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr
 8007b24:	40010000 	.word	0x40010000
 8007b28:	48000400 	.word	0x48000400
 8007b2c:	48000800 	.word	0x48000800
 8007b30:	48000c00 	.word	0x48000c00
 8007b34:	48001000 	.word	0x48001000
 8007b38:	48001400 	.word	0x48001400
 8007b3c:	48001800 	.word	0x48001800
 8007b40:	48001c00 	.word	0x48001c00
 8007b44:	40010400 	.word	0x40010400

08007b48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b085      	sub	sp, #20
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	460b      	mov	r3, r1
 8007b52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	691a      	ldr	r2, [r3, #16]
 8007b58:	887b      	ldrh	r3, [r7, #2]
 8007b5a:	4013      	ands	r3, r2
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d002      	beq.n	8007b66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007b60:	2301      	movs	r3, #1
 8007b62:	73fb      	strb	r3, [r7, #15]
 8007b64:	e001      	b.n	8007b6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007b66:	2300      	movs	r3, #0
 8007b68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3714      	adds	r7, #20
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr

08007b78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b083      	sub	sp, #12
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
 8007b80:	460b      	mov	r3, r1
 8007b82:	807b      	strh	r3, [r7, #2]
 8007b84:	4613      	mov	r3, r2
 8007b86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007b88:	787b      	ldrb	r3, [r7, #1]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d003      	beq.n	8007b96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007b8e:	887a      	ldrh	r2, [r7, #2]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007b94:	e002      	b.n	8007b9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007b96:	887a      	ldrh	r2, [r7, #2]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007b9c:	bf00      	nop
 8007b9e:	370c      	adds	r7, #12
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr

08007ba8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b082      	sub	sp, #8
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d101      	bne.n	8007bba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	e08d      	b.n	8007cd6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007bc0:	b2db      	uxtb	r3, r3
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d106      	bne.n	8007bd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f7fc fe36 	bl	8004840 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2224      	movs	r2, #36	@ 0x24
 8007bd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	681a      	ldr	r2, [r3, #0]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f022 0201 	bic.w	r2, r2, #1
 8007bea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	685a      	ldr	r2, [r3, #4]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007bf8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	689a      	ldr	r2, [r3, #8]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007c08:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	68db      	ldr	r3, [r3, #12]
 8007c0e:	2b01      	cmp	r3, #1
 8007c10:	d107      	bne.n	8007c22 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	689a      	ldr	r2, [r3, #8]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007c1e:	609a      	str	r2, [r3, #8]
 8007c20:	e006      	b.n	8007c30 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	689a      	ldr	r2, [r3, #8]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8007c2e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	68db      	ldr	r3, [r3, #12]
 8007c34:	2b02      	cmp	r3, #2
 8007c36:	d108      	bne.n	8007c4a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	685a      	ldr	r2, [r3, #4]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007c46:	605a      	str	r2, [r3, #4]
 8007c48:	e007      	b.n	8007c5a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	685a      	ldr	r2, [r3, #4]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007c58:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	6812      	ldr	r2, [r2, #0]
 8007c64:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007c68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c6c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	68da      	ldr	r2, [r3, #12]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007c7c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	691a      	ldr	r2, [r3, #16]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	695b      	ldr	r3, [r3, #20]
 8007c86:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	699b      	ldr	r3, [r3, #24]
 8007c8e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	430a      	orrs	r2, r1
 8007c96:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	69d9      	ldr	r1, [r3, #28]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6a1a      	ldr	r2, [r3, #32]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	430a      	orrs	r2, r1
 8007ca6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	681a      	ldr	r2, [r3, #0]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f042 0201 	orr.w	r2, r2, #1
 8007cb6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2220      	movs	r2, #32
 8007cc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8007cd4:	2300      	movs	r3, #0
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3708      	adds	r7, #8
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}
	...

08007ce0 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b08a      	sub	sp, #40	@ 0x28
 8007ce4:	af02      	add	r7, sp, #8
 8007ce6:	60f8      	str	r0, [r7, #12]
 8007ce8:	607a      	str	r2, [r7, #4]
 8007cea:	461a      	mov	r2, r3
 8007cec:	460b      	mov	r3, r1
 8007cee:	817b      	strh	r3, [r7, #10]
 8007cf0:	4613      	mov	r3, r2
 8007cf2:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007cfe:	b2db      	uxtb	r3, r3
 8007d00:	2b20      	cmp	r3, #32
 8007d02:	f040 80ef 	bne.w	8007ee4 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	699b      	ldr	r3, [r3, #24]
 8007d0c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007d10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d14:	d101      	bne.n	8007d1a <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 8007d16:	2302      	movs	r3, #2
 8007d18:	e0e5      	b.n	8007ee6 <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007d20:	2b01      	cmp	r3, #1
 8007d22:	d101      	bne.n	8007d28 <HAL_I2C_Master_Transmit_DMA+0x48>
 8007d24:	2302      	movs	r3, #2
 8007d26:	e0de      	b.n	8007ee6 <HAL_I2C_Master_Transmit_DMA+0x206>
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	2221      	movs	r2, #33	@ 0x21
 8007d34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2210      	movs	r2, #16
 8007d3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2200      	movs	r2, #0
 8007d44:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	687a      	ldr	r2, [r7, #4]
 8007d4a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	893a      	ldrh	r2, [r7, #8]
 8007d50:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	4a66      	ldr	r2, [pc, #408]	@ (8007ef0 <HAL_I2C_Master_Transmit_DMA+0x210>)
 8007d56:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	4a66      	ldr	r2, [pc, #408]	@ (8007ef4 <HAL_I2C_Master_Transmit_DMA+0x214>)
 8007d5c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d62:	b29b      	uxth	r3, r3
 8007d64:	2bff      	cmp	r3, #255	@ 0xff
 8007d66:	d906      	bls.n	8007d76 <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	22ff      	movs	r2, #255	@ 0xff
 8007d6c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8007d6e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007d72:	61fb      	str	r3, [r7, #28]
 8007d74:	e007      	b.n	8007d86 <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d7a:	b29a      	uxth	r2, r3
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007d80:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007d84:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d01a      	beq.n	8007dc4 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d92:	781a      	ldrb	r2, [r3, #0]
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d9e:	1c5a      	adds	r2, r3, #1
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007da8:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	3b01      	subs	r3, #1
 8007db2:	b29a      	uxth	r2, r3
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007dbc:	3b01      	subs	r3, #1
 8007dbe:	b29a      	uxth	r2, r3
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d074      	beq.n	8007eb6 <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d022      	beq.n	8007e1a <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dd8:	4a47      	ldr	r2, [pc, #284]	@ (8007ef8 <HAL_I2C_Master_Transmit_DMA+0x218>)
 8007dda:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007de0:	4a46      	ldr	r2, [pc, #280]	@ (8007efc <HAL_I2C_Master_Transmit_DMA+0x21c>)
 8007de2:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007de8:	2200      	movs	r2, #0
 8007dea:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007df0:	2200      	movs	r2, #0
 8007df2:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dfc:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8007e04:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8007e0a:	f7ff fa4d 	bl	80072a8 <HAL_DMA_Start_IT>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8007e12:	7dfb      	ldrb	r3, [r7, #23]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d13a      	bne.n	8007e8e <HAL_I2C_Master_Transmit_DMA+0x1ae>
 8007e18:	e013      	b.n	8007e42 <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	2220      	movs	r2, #32
 8007e1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2200      	movs	r2, #0
 8007e26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e2e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	e051      	b.n	8007ee6 <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e46:	b2db      	uxtb	r3, r3
 8007e48:	3301      	adds	r3, #1
 8007e4a:	b2da      	uxtb	r2, r3
 8007e4c:	8979      	ldrh	r1, [r7, #10]
 8007e4e:	4b2c      	ldr	r3, [pc, #176]	@ (8007f00 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8007e50:	9300      	str	r3, [sp, #0]
 8007e52:	69fb      	ldr	r3, [r7, #28]
 8007e54:	68f8      	ldr	r0, [r7, #12]
 8007e56:	f001 ff91 	bl	8009d7c <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e5e:	b29a      	uxth	r2, r3
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e64:	1ad3      	subs	r3, r2, r3
 8007e66:	b29a      	uxth	r2, r3
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8007e74:	2110      	movs	r1, #16
 8007e76:	68f8      	ldr	r0, [r7, #12]
 8007e78:	f001 ffb2 	bl	8009de0 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007e8a:	601a      	str	r2, [r3, #0]
 8007e8c:	e028      	b.n	8007ee0 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2220      	movs	r2, #32
 8007e92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ea2:	f043 0210 	orr.w	r2, r3, #16
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2200      	movs	r2, #0
 8007eae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	e017      	b.n	8007ee6 <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	4a12      	ldr	r2, [pc, #72]	@ (8007f04 <HAL_I2C_Master_Transmit_DMA+0x224>)
 8007eba:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 8007ebc:	69bb      	ldr	r3, [r7, #24]
 8007ebe:	b2da      	uxtb	r2, r3
 8007ec0:	8979      	ldrh	r1, [r7, #10]
 8007ec2:	4b0f      	ldr	r3, [pc, #60]	@ (8007f00 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8007ec4:	9300      	str	r3, [sp, #0]
 8007ec6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007eca:	68f8      	ldr	r0, [r7, #12]
 8007ecc:	f001 ff56 	bl	8009d7c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007ed8:	2101      	movs	r1, #1
 8007eda:	68f8      	ldr	r0, [r7, #12]
 8007edc:	f001 ff80 	bl	8009de0 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	e000      	b.n	8007ee6 <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 8007ee4:	2302      	movs	r3, #2
  }
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3720      	adds	r7, #32
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}
 8007eee:	bf00      	nop
 8007ef0:	ffff0000 	.word	0xffff0000
 8007ef4:	080088ed 	.word	0x080088ed
 8007ef8:	08009873 	.word	0x08009873
 8007efc:	0800999f 	.word	0x0800999f
 8007f00:	80002000 	.word	0x80002000
 8007f04:	080084af 	.word	0x080084af

08007f08 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b088      	sub	sp, #32
 8007f0c:	af02      	add	r7, sp, #8
 8007f0e:	60f8      	str	r0, [r7, #12]
 8007f10:	607a      	str	r2, [r7, #4]
 8007f12:	461a      	mov	r2, r3
 8007f14:	460b      	mov	r3, r1
 8007f16:	817b      	strh	r3, [r7, #10]
 8007f18:	4613      	mov	r3, r2
 8007f1a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f22:	b2db      	uxtb	r3, r3
 8007f24:	2b20      	cmp	r3, #32
 8007f26:	f040 80cd 	bne.w	80080c4 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	699b      	ldr	r3, [r3, #24]
 8007f30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007f34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f38:	d101      	bne.n	8007f3e <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 8007f3a:	2302      	movs	r3, #2
 8007f3c:	e0c3      	b.n	80080c6 <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007f44:	2b01      	cmp	r3, #1
 8007f46:	d101      	bne.n	8007f4c <HAL_I2C_Master_Receive_DMA+0x44>
 8007f48:	2302      	movs	r3, #2
 8007f4a:	e0bc      	b.n	80080c6 <HAL_I2C_Master_Receive_DMA+0x1be>
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2222      	movs	r2, #34	@ 0x22
 8007f58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2210      	movs	r2, #16
 8007f60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	2200      	movs	r2, #0
 8007f68:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	687a      	ldr	r2, [r7, #4]
 8007f6e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	893a      	ldrh	r2, [r7, #8]
 8007f74:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	4a55      	ldr	r2, [pc, #340]	@ (80080d0 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 8007f7a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	4a55      	ldr	r2, [pc, #340]	@ (80080d4 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 8007f80:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	2bff      	cmp	r3, #255	@ 0xff
 8007f8a:	d906      	bls.n	8007f9a <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	22ff      	movs	r2, #255	@ 0xff
 8007f90:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8007f92:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007f96:	617b      	str	r3, [r7, #20]
 8007f98:	e007      	b.n	8007faa <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f9e:	b29a      	uxth	r2, r3
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007fa4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007fa8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d070      	beq.n	8008094 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d020      	beq.n	8007ffc <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fbe:	4a46      	ldr	r2, [pc, #280]	@ (80080d8 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 8007fc0:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fc6:	4a45      	ldr	r2, [pc, #276]	@ (80080dc <HAL_I2C_Master_Receive_DMA+0x1d4>)
 8007fc8:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fce:	2200      	movs	r2, #0
 8007fd0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	3324      	adds	r3, #36	@ 0x24
 8007fe4:	4619      	mov	r1, r3
 8007fe6:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8007fec:	f7ff f95c 	bl	80072a8 <HAL_DMA_Start_IT>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8007ff4:	7cfb      	ldrb	r3, [r7, #19]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d138      	bne.n	800806c <HAL_I2C_Master_Receive_DMA+0x164>
 8007ffa:	e013      	b.n	8008024 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	2220      	movs	r2, #32
 8008000:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2200      	movs	r2, #0
 8008008:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008010:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	2200      	movs	r2, #0
 800801c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8008020:	2301      	movs	r3, #1
 8008022:	e050      	b.n	80080c6 <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008028:	b2da      	uxtb	r2, r3
 800802a:	8979      	ldrh	r1, [r7, #10]
 800802c:	4b2c      	ldr	r3, [pc, #176]	@ (80080e0 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800802e:	9300      	str	r3, [sp, #0]
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	68f8      	ldr	r0, [r7, #12]
 8008034:	f001 fea2 	bl	8009d7c <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800803c:	b29a      	uxth	r2, r3
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008042:	1ad3      	subs	r3, r2, r3
 8008044:	b29a      	uxth	r2, r3
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2200      	movs	r2, #0
 800804e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8008052:	2110      	movs	r1, #16
 8008054:	68f8      	ldr	r0, [r7, #12]
 8008056:	f001 fec3 	bl	8009de0 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	681a      	ldr	r2, [r3, #0]
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008068:	601a      	str	r2, [r3, #0]
 800806a:	e029      	b.n	80080c0 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2220      	movs	r2, #32
 8008070:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	2200      	movs	r2, #0
 8008078:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008080:	f043 0210 	orr.w	r2, r3, #16
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2200      	movs	r2, #0
 800808c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8008090:	2301      	movs	r3, #1
 8008092:	e018      	b.n	80080c6 <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	4a13      	ldr	r2, [pc, #76]	@ (80080e4 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 8008098:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800809e:	b2da      	uxtb	r2, r3
 80080a0:	8979      	ldrh	r1, [r7, #10]
 80080a2:	4b0f      	ldr	r3, [pc, #60]	@ (80080e0 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 80080a4:	9300      	str	r3, [sp, #0]
 80080a6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80080aa:	68f8      	ldr	r0, [r7, #12]
 80080ac:	f001 fe66 	bl	8009d7c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	2200      	movs	r2, #0
 80080b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 80080b8:	2102      	movs	r1, #2
 80080ba:	68f8      	ldr	r0, [r7, #12]
 80080bc:	f001 fe90 	bl	8009de0 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80080c0:	2300      	movs	r3, #0
 80080c2:	e000      	b.n	80080c6 <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 80080c4:	2302      	movs	r3, #2
  }
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3718      	adds	r7, #24
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
 80080ce:	bf00      	nop
 80080d0:	ffff0000 	.word	0xffff0000
 80080d4:	080088ed 	.word	0x080088ed
 80080d8:	08009909 	.word	0x08009909
 80080dc:	0800999f 	.word	0x0800999f
 80080e0:	80002400 	.word	0x80002400
 80080e4:	080084af 	.word	0x080084af

080080e8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b088      	sub	sp, #32
 80080ec:	af02      	add	r7, sp, #8
 80080ee:	60f8      	str	r0, [r7, #12]
 80080f0:	4608      	mov	r0, r1
 80080f2:	4611      	mov	r1, r2
 80080f4:	461a      	mov	r2, r3
 80080f6:	4603      	mov	r3, r0
 80080f8:	817b      	strh	r3, [r7, #10]
 80080fa:	460b      	mov	r3, r1
 80080fc:	813b      	strh	r3, [r7, #8]
 80080fe:	4613      	mov	r3, r2
 8008100:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008108:	b2db      	uxtb	r3, r3
 800810a:	2b20      	cmp	r3, #32
 800810c:	f040 80fd 	bne.w	800830a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8008110:	6a3b      	ldr	r3, [r7, #32]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d002      	beq.n	800811c <HAL_I2C_Mem_Read+0x34>
 8008116:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008118:	2b00      	cmp	r3, #0
 800811a:	d105      	bne.n	8008128 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008122:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8008124:	2301      	movs	r3, #1
 8008126:	e0f1      	b.n	800830c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800812e:	2b01      	cmp	r3, #1
 8008130:	d101      	bne.n	8008136 <HAL_I2C_Mem_Read+0x4e>
 8008132:	2302      	movs	r3, #2
 8008134:	e0ea      	b.n	800830c <HAL_I2C_Mem_Read+0x224>
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2201      	movs	r2, #1
 800813a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800813e:	f7fd f979 	bl	8005434 <HAL_GetTick>
 8008142:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	9300      	str	r3, [sp, #0]
 8008148:	2319      	movs	r3, #25
 800814a:	2201      	movs	r2, #1
 800814c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008150:	68f8      	ldr	r0, [r7, #12]
 8008152:	f001 fc59 	bl	8009a08 <I2C_WaitOnFlagUntilTimeout>
 8008156:	4603      	mov	r3, r0
 8008158:	2b00      	cmp	r3, #0
 800815a:	d001      	beq.n	8008160 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800815c:	2301      	movs	r3, #1
 800815e:	e0d5      	b.n	800830c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	2222      	movs	r2, #34	@ 0x22
 8008164:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	2240      	movs	r2, #64	@ 0x40
 800816c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	2200      	movs	r2, #0
 8008174:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	6a3a      	ldr	r2, [r7, #32]
 800817a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008180:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2200      	movs	r2, #0
 8008186:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008188:	88f8      	ldrh	r0, [r7, #6]
 800818a:	893a      	ldrh	r2, [r7, #8]
 800818c:	8979      	ldrh	r1, [r7, #10]
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	9301      	str	r3, [sp, #4]
 8008192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008194:	9300      	str	r3, [sp, #0]
 8008196:	4603      	mov	r3, r0
 8008198:	68f8      	ldr	r0, [r7, #12]
 800819a:	f000 fe8f 	bl	8008ebc <I2C_RequestMemoryRead>
 800819e:	4603      	mov	r3, r0
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d005      	beq.n	80081b0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2200      	movs	r2, #0
 80081a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80081ac:	2301      	movs	r3, #1
 80081ae:	e0ad      	b.n	800830c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80081b4:	b29b      	uxth	r3, r3
 80081b6:	2bff      	cmp	r3, #255	@ 0xff
 80081b8:	d90e      	bls.n	80081d8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	22ff      	movs	r2, #255	@ 0xff
 80081be:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80081c4:	b2da      	uxtb	r2, r3
 80081c6:	8979      	ldrh	r1, [r7, #10]
 80081c8:	4b52      	ldr	r3, [pc, #328]	@ (8008314 <HAL_I2C_Mem_Read+0x22c>)
 80081ca:	9300      	str	r3, [sp, #0]
 80081cc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80081d0:	68f8      	ldr	r0, [r7, #12]
 80081d2:	f001 fdd3 	bl	8009d7c <I2C_TransferConfig>
 80081d6:	e00f      	b.n	80081f8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80081dc:	b29a      	uxth	r2, r3
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80081e6:	b2da      	uxtb	r2, r3
 80081e8:	8979      	ldrh	r1, [r7, #10]
 80081ea:	4b4a      	ldr	r3, [pc, #296]	@ (8008314 <HAL_I2C_Mem_Read+0x22c>)
 80081ec:	9300      	str	r3, [sp, #0]
 80081ee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80081f2:	68f8      	ldr	r0, [r7, #12]
 80081f4:	f001 fdc2 	bl	8009d7c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	9300      	str	r3, [sp, #0]
 80081fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081fe:	2200      	movs	r2, #0
 8008200:	2104      	movs	r1, #4
 8008202:	68f8      	ldr	r0, [r7, #12]
 8008204:	f001 fc00 	bl	8009a08 <I2C_WaitOnFlagUntilTimeout>
 8008208:	4603      	mov	r3, r0
 800820a:	2b00      	cmp	r3, #0
 800820c:	d001      	beq.n	8008212 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800820e:	2301      	movs	r3, #1
 8008210:	e07c      	b.n	800830c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800821c:	b2d2      	uxtb	r2, r2
 800821e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008224:	1c5a      	adds	r2, r3, #1
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800822e:	3b01      	subs	r3, #1
 8008230:	b29a      	uxth	r2, r3
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800823a:	b29b      	uxth	r3, r3
 800823c:	3b01      	subs	r3, #1
 800823e:	b29a      	uxth	r2, r3
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008248:	b29b      	uxth	r3, r3
 800824a:	2b00      	cmp	r3, #0
 800824c:	d034      	beq.n	80082b8 <HAL_I2C_Mem_Read+0x1d0>
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008252:	2b00      	cmp	r3, #0
 8008254:	d130      	bne.n	80082b8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	9300      	str	r3, [sp, #0]
 800825a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800825c:	2200      	movs	r2, #0
 800825e:	2180      	movs	r1, #128	@ 0x80
 8008260:	68f8      	ldr	r0, [r7, #12]
 8008262:	f001 fbd1 	bl	8009a08 <I2C_WaitOnFlagUntilTimeout>
 8008266:	4603      	mov	r3, r0
 8008268:	2b00      	cmp	r3, #0
 800826a:	d001      	beq.n	8008270 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800826c:	2301      	movs	r3, #1
 800826e:	e04d      	b.n	800830c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008274:	b29b      	uxth	r3, r3
 8008276:	2bff      	cmp	r3, #255	@ 0xff
 8008278:	d90e      	bls.n	8008298 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	22ff      	movs	r2, #255	@ 0xff
 800827e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008284:	b2da      	uxtb	r2, r3
 8008286:	8979      	ldrh	r1, [r7, #10]
 8008288:	2300      	movs	r3, #0
 800828a:	9300      	str	r3, [sp, #0]
 800828c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008290:	68f8      	ldr	r0, [r7, #12]
 8008292:	f001 fd73 	bl	8009d7c <I2C_TransferConfig>
 8008296:	e00f      	b.n	80082b8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800829c:	b29a      	uxth	r2, r3
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80082a6:	b2da      	uxtb	r2, r3
 80082a8:	8979      	ldrh	r1, [r7, #10]
 80082aa:	2300      	movs	r3, #0
 80082ac:	9300      	str	r3, [sp, #0]
 80082ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80082b2:	68f8      	ldr	r0, [r7, #12]
 80082b4:	f001 fd62 	bl	8009d7c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80082bc:	b29b      	uxth	r3, r3
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d19a      	bne.n	80081f8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80082c2:	697a      	ldr	r2, [r7, #20]
 80082c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80082c6:	68f8      	ldr	r0, [r7, #12]
 80082c8:	f001 fc34 	bl	8009b34 <I2C_WaitOnSTOPFlagUntilTimeout>
 80082cc:	4603      	mov	r3, r0
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d001      	beq.n	80082d6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80082d2:	2301      	movs	r3, #1
 80082d4:	e01a      	b.n	800830c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	2220      	movs	r2, #32
 80082dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	6859      	ldr	r1, [r3, #4]
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681a      	ldr	r2, [r3, #0]
 80082e8:	4b0b      	ldr	r3, [pc, #44]	@ (8008318 <HAL_I2C_Mem_Read+0x230>)
 80082ea:	400b      	ands	r3, r1
 80082ec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	2220      	movs	r2, #32
 80082f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	2200      	movs	r2, #0
 80082fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	2200      	movs	r2, #0
 8008302:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008306:	2300      	movs	r3, #0
 8008308:	e000      	b.n	800830c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800830a:	2302      	movs	r3, #2
  }
}
 800830c:	4618      	mov	r0, r3
 800830e:	3718      	adds	r7, #24
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}
 8008314:	80002400 	.word	0x80002400
 8008318:	fe00e800 	.word	0xfe00e800

0800831c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b084      	sub	sp, #16
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	699b      	ldr	r3, [r3, #24]
 800832a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008338:	2b00      	cmp	r3, #0
 800833a:	d005      	beq.n	8008348 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008340:	68ba      	ldr	r2, [r7, #8]
 8008342:	68f9      	ldr	r1, [r7, #12]
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	4798      	blx	r3
  }
}
 8008348:	bf00      	nop
 800834a:	3710      	adds	r7, #16
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b086      	sub	sp, #24
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	699b      	ldr	r3, [r3, #24]
 800835e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800836e:	2b00      	cmp	r3, #0
 8008370:	d00f      	beq.n	8008392 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8008378:	2b00      	cmp	r3, #0
 800837a:	d00a      	beq.n	8008392 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008380:	f043 0201 	orr.w	r2, r3, #1
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008390:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008398:	2b00      	cmp	r3, #0
 800839a:	d00f      	beq.n	80083bc <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d00a      	beq.n	80083bc <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083aa:	f043 0208 	orr.w	r2, r3, #8
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80083ba:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d00f      	beq.n	80083e6 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d00a      	beq.n	80083e6 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083d4:	f043 0202 	orr.w	r2, r3, #2
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80083e4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083ea:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	f003 030b 	and.w	r3, r3, #11
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d003      	beq.n	80083fe <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80083f6:	68f9      	ldr	r1, [r7, #12]
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f001 f8ff 	bl	80095fc <I2C_ITError>
  }
}
 80083fe:	bf00      	nop
 8008400:	3718      	adds	r7, #24
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}

08008406 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008406:	b480      	push	{r7}
 8008408:	b083      	sub	sp, #12
 800840a:	af00      	add	r7, sp, #0
 800840c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800840e:	bf00      	nop
 8008410:	370c      	adds	r7, #12
 8008412:	46bd      	mov	sp, r7
 8008414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008418:	4770      	bx	lr

0800841a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800841a:	b480      	push	{r7}
 800841c:	b083      	sub	sp, #12
 800841e:	af00      	add	r7, sp, #0
 8008420:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8008422:	bf00      	nop
 8008424:	370c      	adds	r7, #12
 8008426:	46bd      	mov	sp, r7
 8008428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842c:	4770      	bx	lr

0800842e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800842e:	b480      	push	{r7}
 8008430:	b083      	sub	sp, #12
 8008432:	af00      	add	r7, sp, #0
 8008434:	6078      	str	r0, [r7, #4]
 8008436:	460b      	mov	r3, r1
 8008438:	70fb      	strb	r3, [r7, #3]
 800843a:	4613      	mov	r3, r2
 800843c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800843e:	bf00      	nop
 8008440:	370c      	adds	r7, #12
 8008442:	46bd      	mov	sp, r7
 8008444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008448:	4770      	bx	lr

0800844a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800844a:	b480      	push	{r7}
 800844c:	b083      	sub	sp, #12
 800844e:	af00      	add	r7, sp, #0
 8008450:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8008452:	bf00      	nop
 8008454:	370c      	adds	r7, #12
 8008456:	46bd      	mov	sp, r7
 8008458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845c:	4770      	bx	lr

0800845e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800845e:	b480      	push	{r7}
 8008460:	b083      	sub	sp, #12
 8008462:	af00      	add	r7, sp, #0
 8008464:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8008466:	bf00      	nop
 8008468:	370c      	adds	r7, #12
 800846a:	46bd      	mov	sp, r7
 800846c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008470:	4770      	bx	lr

08008472 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008472:	b480      	push	{r7}
 8008474:	b083      	sub	sp, #12
 8008476:	af00      	add	r7, sp, #0
 8008478:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800847a:	bf00      	nop
 800847c:	370c      	adds	r7, #12
 800847e:	46bd      	mov	sp, r7
 8008480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008484:	4770      	bx	lr

08008486 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008486:	b480      	push	{r7}
 8008488:	b083      	sub	sp, #12
 800848a:	af00      	add	r7, sp, #0
 800848c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800848e:	bf00      	nop
 8008490:	370c      	adds	r7, #12
 8008492:	46bd      	mov	sp, r7
 8008494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008498:	4770      	bx	lr

0800849a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800849a:	b480      	push	{r7}
 800849c:	b083      	sub	sp, #12
 800849e:	af00      	add	r7, sp, #0
 80084a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80084a2:	bf00      	nop
 80084a4:	370c      	adds	r7, #12
 80084a6:	46bd      	mov	sp, r7
 80084a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ac:	4770      	bx	lr

080084ae <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80084ae:	b580      	push	{r7, lr}
 80084b0:	b088      	sub	sp, #32
 80084b2:	af02      	add	r7, sp, #8
 80084b4:	60f8      	str	r0, [r7, #12]
 80084b6:	60b9      	str	r1, [r7, #8]
 80084b8:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d101      	bne.n	80084cc <I2C_Master_ISR_IT+0x1e>
 80084c8:	2302      	movs	r3, #2
 80084ca:	e113      	b.n	80086f4 <I2C_Master_ISR_IT+0x246>
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2201      	movs	r2, #1
 80084d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	f003 0310 	and.w	r3, r3, #16
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d012      	beq.n	8008504 <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d00d      	beq.n	8008504 <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	2210      	movs	r2, #16
 80084ee:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084f4:	f043 0204 	orr.w	r2, r3, #4
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80084fc:	68f8      	ldr	r0, [r7, #12]
 80084fe:	f001 f994 	bl	800982a <I2C_Flush_TXDR>
 8008502:	e0e4      	b.n	80086ce <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	f003 0304 	and.w	r3, r3, #4
 800850a:	2b00      	cmp	r3, #0
 800850c:	d022      	beq.n	8008554 <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8008514:	2b00      	cmp	r3, #0
 8008516:	d01d      	beq.n	8008554 <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8008518:	697b      	ldr	r3, [r7, #20]
 800851a:	f023 0304 	bic.w	r3, r3, #4
 800851e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800852a:	b2d2      	uxtb	r2, r2
 800852c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008532:	1c5a      	adds	r2, r3, #1
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800853c:	3b01      	subs	r3, #1
 800853e:	b29a      	uxth	r2, r3
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008548:	b29b      	uxth	r3, r3
 800854a:	3b01      	subs	r3, #1
 800854c:	b29a      	uxth	r2, r3
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008552:	e0bc      	b.n	80086ce <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800855a:	2b00      	cmp	r3, #0
 800855c:	d128      	bne.n	80085b0 <I2C_Master_ISR_IT+0x102>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8008564:	2b00      	cmp	r3, #0
 8008566:	d023      	beq.n	80085b0 <I2C_Master_ISR_IT+0x102>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f003 0302 	and.w	r3, r3, #2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800856e:	2b00      	cmp	r3, #0
 8008570:	d01e      	beq.n	80085b0 <I2C_Master_ISR_IT+0x102>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008576:	b29b      	uxth	r3, r3
 8008578:	2b00      	cmp	r3, #0
 800857a:	f000 80a8 	beq.w	80086ce <I2C_Master_ISR_IT+0x220>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008582:	781a      	ldrb	r2, [r3, #0]
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800858e:	1c5a      	adds	r2, r3, #1
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008598:	3b01      	subs	r3, #1
 800859a:	b29a      	uxth	r2, r3
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80085a4:	b29b      	uxth	r3, r3
 80085a6:	3b01      	subs	r3, #1
 80085a8:	b29a      	uxth	r2, r3
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 80085ae:	e08e      	b.n	80086ce <I2C_Master_ISR_IT+0x220>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d05c      	beq.n	8008674 <I2C_Master_ISR_IT+0x1c6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d057      	beq.n	8008674 <I2C_Master_ISR_IT+0x1c6>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80085c8:	b29b      	uxth	r3, r3
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d040      	beq.n	8008650 <I2C_Master_ISR_IT+0x1a2>
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d13c      	bne.n	8008650 <I2C_Master_ISR_IT+0x1a2>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	685b      	ldr	r3, [r3, #4]
 80085dc:	b29b      	uxth	r3, r3
 80085de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80085e2:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80085e8:	b29b      	uxth	r3, r3
 80085ea:	2bff      	cmp	r3, #255	@ 0xff
 80085ec:	d90e      	bls.n	800860c <I2C_Master_ISR_IT+0x15e>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	22ff      	movs	r2, #255	@ 0xff
 80085f2:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80085f8:	b2da      	uxtb	r2, r3
 80085fa:	8a79      	ldrh	r1, [r7, #18]
 80085fc:	2300      	movs	r3, #0
 80085fe:	9300      	str	r3, [sp, #0]
 8008600:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008604:	68f8      	ldr	r0, [r7, #12]
 8008606:	f001 fbb9 	bl	8009d7c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800860a:	e032      	b.n	8008672 <I2C_Master_ISR_IT+0x1c4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008610:	b29a      	uxth	r2, r3
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800861a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800861e:	d00b      	beq.n	8008638 <I2C_Master_ISR_IT+0x18a>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008624:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800862a:	8a79      	ldrh	r1, [r7, #18]
 800862c:	2000      	movs	r0, #0
 800862e:	9000      	str	r0, [sp, #0]
 8008630:	68f8      	ldr	r0, [r7, #12]
 8008632:	f001 fba3 	bl	8009d7c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008636:	e01c      	b.n	8008672 <I2C_Master_ISR_IT+0x1c4>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800863c:	b2da      	uxtb	r2, r3
 800863e:	8a79      	ldrh	r1, [r7, #18]
 8008640:	2300      	movs	r3, #0
 8008642:	9300      	str	r3, [sp, #0]
 8008644:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008648:	68f8      	ldr	r0, [r7, #12]
 800864a:	f001 fb97 	bl	8009d7c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800864e:	e010      	b.n	8008672 <I2C_Master_ISR_IT+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800865a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800865e:	d003      	beq.n	8008668 <I2C_Master_ISR_IT+0x1ba>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8008660:	68f8      	ldr	r0, [r7, #12]
 8008662:	f000 fd03 	bl	800906c <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008666:	e032      	b.n	80086ce <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008668:	2140      	movs	r1, #64	@ 0x40
 800866a:	68f8      	ldr	r0, [r7, #12]
 800866c:	f000 ffc6 	bl	80095fc <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008670:	e02d      	b.n	80086ce <I2C_Master_ISR_IT+0x220>
 8008672:	e02c      	b.n	80086ce <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800867a:	2b00      	cmp	r3, #0
 800867c:	d027      	beq.n	80086ce <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8008684:	2b00      	cmp	r3, #0
 8008686:	d022      	beq.n	80086ce <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800868c:	b29b      	uxth	r3, r3
 800868e:	2b00      	cmp	r3, #0
 8008690:	d119      	bne.n	80086c6 <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800869c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80086a0:	d015      	beq.n	80086ce <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086a6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80086aa:	d108      	bne.n	80086be <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	685a      	ldr	r2, [r3, #4]
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80086ba:	605a      	str	r2, [r3, #4]
 80086bc:	e007      	b.n	80086ce <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80086be:	68f8      	ldr	r0, [r7, #12]
 80086c0:	f000 fcd4 	bl	800906c <I2C_ITMasterSeqCplt>
 80086c4:	e003      	b.n	80086ce <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80086c6:	2140      	movs	r1, #64	@ 0x40
 80086c8:	68f8      	ldr	r0, [r7, #12]
 80086ca:	f000 ff97 	bl	80095fc <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	f003 0320 	and.w	r3, r3, #32
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d008      	beq.n	80086ea <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d003      	beq.n	80086ea <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80086e2:	6979      	ldr	r1, [r7, #20]
 80086e4:	68f8      	ldr	r0, [r7, #12]
 80086e6:	f000 fd5b 	bl	80091a0 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2200      	movs	r2, #0
 80086ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80086f2:	2300      	movs	r3, #0
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3718      	adds	r7, #24
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}

080086fc <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b086      	sub	sp, #24
 8008700:	af00      	add	r7, sp, #0
 8008702:	60f8      	str	r0, [r7, #12]
 8008704:	60b9      	str	r1, [r7, #8]
 8008706:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800870c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008718:	2b01      	cmp	r3, #1
 800871a:	d101      	bne.n	8008720 <I2C_Slave_ISR_IT+0x24>
 800871c:	2302      	movs	r3, #2
 800871e:	e0e1      	b.n	80088e4 <I2C_Slave_ISR_IT+0x1e8>
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	2201      	movs	r2, #1
 8008724:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	f003 0320 	and.w	r3, r3, #32
 800872e:	2b00      	cmp	r3, #0
 8008730:	d008      	beq.n	8008744 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008738:	2b00      	cmp	r3, #0
 800873a:	d003      	beq.n	8008744 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800873c:	6939      	ldr	r1, [r7, #16]
 800873e:	68f8      	ldr	r0, [r7, #12]
 8008740:	f000 fdf6 	bl	8009330 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	f003 0310 	and.w	r3, r3, #16
 800874a:	2b00      	cmp	r3, #0
 800874c:	d04b      	beq.n	80087e6 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008754:	2b00      	cmp	r3, #0
 8008756:	d046      	beq.n	80087e6 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800875c:	b29b      	uxth	r3, r3
 800875e:	2b00      	cmp	r3, #0
 8008760:	d128      	bne.n	80087b4 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008768:	b2db      	uxtb	r3, r3
 800876a:	2b28      	cmp	r3, #40	@ 0x28
 800876c:	d108      	bne.n	8008780 <I2C_Slave_ISR_IT+0x84>
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008774:	d104      	bne.n	8008780 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8008776:	6939      	ldr	r1, [r7, #16]
 8008778:	68f8      	ldr	r0, [r7, #12]
 800877a:	f000 feeb 	bl	8009554 <I2C_ITListenCplt>
 800877e:	e031      	b.n	80087e4 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008786:	b2db      	uxtb	r3, r3
 8008788:	2b29      	cmp	r3, #41	@ 0x29
 800878a:	d10e      	bne.n	80087aa <I2C_Slave_ISR_IT+0xae>
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008792:	d00a      	beq.n	80087aa <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	2210      	movs	r2, #16
 800879a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800879c:	68f8      	ldr	r0, [r7, #12]
 800879e:	f001 f844 	bl	800982a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80087a2:	68f8      	ldr	r0, [r7, #12]
 80087a4:	f000 fc9f 	bl	80090e6 <I2C_ITSlaveSeqCplt>
 80087a8:	e01c      	b.n	80087e4 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	2210      	movs	r2, #16
 80087b0:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80087b2:	e08f      	b.n	80088d4 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	2210      	movs	r2, #16
 80087ba:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087c0:	f043 0204 	orr.w	r2, r3, #4
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d003      	beq.n	80087d6 <I2C_Slave_ISR_IT+0xda>
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80087d4:	d17e      	bne.n	80088d4 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087da:	4619      	mov	r1, r3
 80087dc:	68f8      	ldr	r0, [r7, #12]
 80087de:	f000 ff0d 	bl	80095fc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80087e2:	e077      	b.n	80088d4 <I2C_Slave_ISR_IT+0x1d8>
 80087e4:	e076      	b.n	80088d4 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	f003 0304 	and.w	r3, r3, #4
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d02f      	beq.n	8008850 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d02a      	beq.n	8008850 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80087fe:	b29b      	uxth	r3, r3
 8008800:	2b00      	cmp	r3, #0
 8008802:	d018      	beq.n	8008836 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800880e:	b2d2      	uxtb	r2, r2
 8008810:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008816:	1c5a      	adds	r2, r3, #1
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008820:	3b01      	subs	r3, #1
 8008822:	b29a      	uxth	r2, r3
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800882c:	b29b      	uxth	r3, r3
 800882e:	3b01      	subs	r3, #1
 8008830:	b29a      	uxth	r2, r3
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800883a:	b29b      	uxth	r3, r3
 800883c:	2b00      	cmp	r3, #0
 800883e:	d14b      	bne.n	80088d8 <I2C_Slave_ISR_IT+0x1dc>
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008846:	d047      	beq.n	80088d8 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8008848:	68f8      	ldr	r0, [r7, #12]
 800884a:	f000 fc4c 	bl	80090e6 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800884e:	e043      	b.n	80088d8 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	f003 0308 	and.w	r3, r3, #8
 8008856:	2b00      	cmp	r3, #0
 8008858:	d009      	beq.n	800886e <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008860:	2b00      	cmp	r3, #0
 8008862:	d004      	beq.n	800886e <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8008864:	6939      	ldr	r1, [r7, #16]
 8008866:	68f8      	ldr	r0, [r7, #12]
 8008868:	f000 fb7c 	bl	8008f64 <I2C_ITAddrCplt>
 800886c:	e035      	b.n	80088da <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	f003 0302 	and.w	r3, r3, #2
 8008874:	2b00      	cmp	r3, #0
 8008876:	d030      	beq.n	80088da <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800887e:	2b00      	cmp	r3, #0
 8008880:	d02b      	beq.n	80088da <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008886:	b29b      	uxth	r3, r3
 8008888:	2b00      	cmp	r3, #0
 800888a:	d018      	beq.n	80088be <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008890:	781a      	ldrb	r2, [r3, #0]
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800889c:	1c5a      	adds	r2, r3, #1
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	3b01      	subs	r3, #1
 80088aa:	b29a      	uxth	r2, r3
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80088b4:	3b01      	subs	r3, #1
 80088b6:	b29a      	uxth	r2, r3
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	851a      	strh	r2, [r3, #40]	@ 0x28
 80088bc:	e00d      	b.n	80088da <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80088c4:	d002      	beq.n	80088cc <I2C_Slave_ISR_IT+0x1d0>
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d106      	bne.n	80088da <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80088cc:	68f8      	ldr	r0, [r7, #12]
 80088ce:	f000 fc0a 	bl	80090e6 <I2C_ITSlaveSeqCplt>
 80088d2:	e002      	b.n	80088da <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 80088d4:	bf00      	nop
 80088d6:	e000      	b.n	80088da <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 80088d8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2200      	movs	r2, #0
 80088de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80088e2:	2300      	movs	r3, #0
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	3718      	adds	r7, #24
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}

080088ec <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b088      	sub	sp, #32
 80088f0:	af02      	add	r7, sp, #8
 80088f2:	60f8      	str	r0, [r7, #12]
 80088f4:	60b9      	str	r1, [r7, #8]
 80088f6:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80088fe:	2b01      	cmp	r3, #1
 8008900:	d101      	bne.n	8008906 <I2C_Master_ISR_DMA+0x1a>
 8008902:	2302      	movs	r3, #2
 8008904:	e0d9      	b.n	8008aba <I2C_Master_ISR_DMA+0x1ce>
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	2201      	movs	r2, #1
 800890a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	f003 0310 	and.w	r3, r3, #16
 8008914:	2b00      	cmp	r3, #0
 8008916:	d016      	beq.n	8008946 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800891e:	2b00      	cmp	r3, #0
 8008920:	d011      	beq.n	8008946 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	2210      	movs	r2, #16
 8008928:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800892e:	f043 0204 	orr.w	r2, r3, #4
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8008936:	2120      	movs	r1, #32
 8008938:	68f8      	ldr	r0, [r7, #12]
 800893a:	f001 fa51 	bl	8009de0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800893e:	68f8      	ldr	r0, [r7, #12]
 8008940:	f000 ff73 	bl	800982a <I2C_Flush_TXDR>
 8008944:	e0b4      	b.n	8008ab0 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800894c:	2b00      	cmp	r3, #0
 800894e:	d071      	beq.n	8008a34 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8008956:	2b00      	cmp	r3, #0
 8008958:	d06c      	beq.n	8008a34 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	681a      	ldr	r2, [r3, #0]
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008968:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800896e:	b29b      	uxth	r3, r3
 8008970:	2b00      	cmp	r3, #0
 8008972:	d04e      	beq.n	8008a12 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	685b      	ldr	r3, [r3, #4]
 800897a:	b29b      	uxth	r3, r3
 800897c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008980:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008986:	b29b      	uxth	r3, r3
 8008988:	2bff      	cmp	r3, #255	@ 0xff
 800898a:	d906      	bls.n	800899a <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	22ff      	movs	r2, #255	@ 0xff
 8008990:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8008992:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008996:	617b      	str	r3, [r7, #20]
 8008998:	e010      	b.n	80089bc <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800899e:	b29a      	uxth	r2, r3
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089a8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80089ac:	d003      	beq.n	80089b6 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089b2:	617b      	str	r3, [r7, #20]
 80089b4:	e002      	b.n	80089bc <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80089b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80089ba:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80089c0:	b2da      	uxtb	r2, r3
 80089c2:	8a79      	ldrh	r1, [r7, #18]
 80089c4:	2300      	movs	r3, #0
 80089c6:	9300      	str	r3, [sp, #0]
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	68f8      	ldr	r0, [r7, #12]
 80089cc:	f001 f9d6 	bl	8009d7c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089d4:	b29a      	uxth	r2, r3
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80089da:	1ad3      	subs	r3, r2, r3
 80089dc:	b29a      	uxth	r2, r3
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80089e8:	b2db      	uxtb	r3, r3
 80089ea:	2b22      	cmp	r3, #34	@ 0x22
 80089ec:	d108      	bne.n	8008a00 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	681a      	ldr	r2, [r3, #0]
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80089fc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80089fe:	e057      	b.n	8008ab0 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	681a      	ldr	r2, [r3, #0]
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008a0e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8008a10:	e04e      	b.n	8008ab0 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a1c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008a20:	d003      	beq.n	8008a2a <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8008a22:	68f8      	ldr	r0, [r7, #12]
 8008a24:	f000 fb22 	bl	800906c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8008a28:	e042      	b.n	8008ab0 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008a2a:	2140      	movs	r1, #64	@ 0x40
 8008a2c:	68f8      	ldr	r0, [r7, #12]
 8008a2e:	f000 fde5 	bl	80095fc <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8008a32:	e03d      	b.n	8008ab0 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d028      	beq.n	8008a90 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d023      	beq.n	8008a90 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a4c:	b29b      	uxth	r3, r3
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d119      	bne.n	8008a86 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a5c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008a60:	d025      	beq.n	8008aae <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a66:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008a6a:	d108      	bne.n	8008a7e <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	685a      	ldr	r2, [r3, #4]
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008a7a:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8008a7c:	e017      	b.n	8008aae <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8008a7e:	68f8      	ldr	r0, [r7, #12]
 8008a80:	f000 faf4 	bl	800906c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8008a84:	e013      	b.n	8008aae <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008a86:	2140      	movs	r1, #64	@ 0x40
 8008a88:	68f8      	ldr	r0, [r7, #12]
 8008a8a:	f000 fdb7 	bl	80095fc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8008a8e:	e00e      	b.n	8008aae <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	f003 0320 	and.w	r3, r3, #32
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d00a      	beq.n	8008ab0 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d005      	beq.n	8008ab0 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8008aa4:	68b9      	ldr	r1, [r7, #8]
 8008aa6:	68f8      	ldr	r0, [r7, #12]
 8008aa8:	f000 fb7a 	bl	80091a0 <I2C_ITMasterCplt>
 8008aac:	e000      	b.n	8008ab0 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8008aae:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008ab8:	2300      	movs	r3, #0
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3718      	adds	r7, #24
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}
	...

08008ac4 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b088      	sub	sp, #32
 8008ac8:	af02      	add	r7, sp, #8
 8008aca:	60f8      	str	r0, [r7, #12]
 8008acc:	60b9      	str	r1, [r7, #8]
 8008ace:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8008ad0:	4b8d      	ldr	r3, [pc, #564]	@ (8008d08 <I2C_Mem_ISR_DMA+0x244>)
 8008ad2:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008ada:	2b01      	cmp	r3, #1
 8008adc:	d101      	bne.n	8008ae2 <I2C_Mem_ISR_DMA+0x1e>
 8008ade:	2302      	movs	r3, #2
 8008ae0:	e10e      	b.n	8008d00 <I2C_Mem_ISR_DMA+0x23c>
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	2201      	movs	r2, #1
 8008ae6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	f003 0310 	and.w	r3, r3, #16
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d016      	beq.n	8008b22 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d011      	beq.n	8008b22 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	2210      	movs	r2, #16
 8008b04:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b0a:	f043 0204 	orr.w	r2, r3, #4
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8008b12:	2120      	movs	r1, #32
 8008b14:	68f8      	ldr	r0, [r7, #12]
 8008b16:	f001 f963 	bl	8009de0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008b1a:	68f8      	ldr	r0, [r7, #12]
 8008b1c:	f000 fe85 	bl	800982a <I2C_Flush_TXDR>
 8008b20:	e0e9      	b.n	8008cf6 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	f003 0302 	and.w	r3, r3, #2
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d00e      	beq.n	8008b4a <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d009      	beq.n	8008b4a <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	68fa      	ldr	r2, [r7, #12]
 8008b3c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008b3e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	f04f 32ff 	mov.w	r2, #4294967295
 8008b46:	651a      	str	r2, [r3, #80]	@ 0x50
 8008b48:	e0d5      	b.n	8008cf6 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d05f      	beq.n	8008c14 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d05a      	beq.n	8008c14 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008b5e:	2101      	movs	r1, #1
 8008b60:	68f8      	ldr	r0, [r7, #12]
 8008b62:	f001 f9c1 	bl	8009ee8 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8008b66:	2110      	movs	r1, #16
 8008b68:	68f8      	ldr	r0, [r7, #12]
 8008b6a:	f001 f939 	bl	8009de0 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b72:	b29b      	uxth	r3, r3
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d048      	beq.n	8008c0a <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b7c:	b29b      	uxth	r3, r3
 8008b7e:	2bff      	cmp	r3, #255	@ 0xff
 8008b80:	d910      	bls.n	8008ba4 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	22ff      	movs	r2, #255	@ 0xff
 8008b86:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b8c:	b299      	uxth	r1, r3
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b92:	b2da      	uxtb	r2, r3
 8008b94:	2300      	movs	r3, #0
 8008b96:	9300      	str	r3, [sp, #0]
 8008b98:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008b9c:	68f8      	ldr	r0, [r7, #12]
 8008b9e:	f001 f8ed 	bl	8009d7c <I2C_TransferConfig>
 8008ba2:	e011      	b.n	8008bc8 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ba8:	b29a      	uxth	r2, r3
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008bb2:	b299      	uxth	r1, r3
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008bb8:	b2da      	uxtb	r2, r3
 8008bba:	2300      	movs	r3, #0
 8008bbc:	9300      	str	r3, [sp, #0]
 8008bbe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008bc2:	68f8      	ldr	r0, [r7, #12]
 8008bc4:	f001 f8da 	bl	8009d7c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008bcc:	b29a      	uxth	r2, r3
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008bd2:	1ad3      	subs	r3, r2, r3
 8008bd4:	b29a      	uxth	r2, r3
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008be0:	b2db      	uxtb	r3, r3
 8008be2:	2b22      	cmp	r3, #34	@ 0x22
 8008be4:	d108      	bne.n	8008bf8 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	681a      	ldr	r2, [r3, #0]
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008bf4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8008bf6:	e07e      	b.n	8008cf6 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	681a      	ldr	r2, [r3, #0]
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008c06:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8008c08:	e075      	b.n	8008cf6 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008c0a:	2140      	movs	r1, #64	@ 0x40
 8008c0c:	68f8      	ldr	r0, [r7, #12]
 8008c0e:	f000 fcf5 	bl	80095fc <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8008c12:	e070      	b.n	8008cf6 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d05d      	beq.n	8008cda <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d058      	beq.n	8008cda <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008c28:	2101      	movs	r1, #1
 8008c2a:	68f8      	ldr	r0, [r7, #12]
 8008c2c:	f001 f95c 	bl	8009ee8 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8008c30:	2110      	movs	r1, #16
 8008c32:	68f8      	ldr	r0, [r7, #12]
 8008c34:	f001 f8d4 	bl	8009de0 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c3e:	b2db      	uxtb	r3, r3
 8008c40:	2b22      	cmp	r3, #34	@ 0x22
 8008c42:	d101      	bne.n	8008c48 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8008c44:	4b31      	ldr	r3, [pc, #196]	@ (8008d0c <I2C_Mem_ISR_DMA+0x248>)
 8008c46:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c4c:	b29b      	uxth	r3, r3
 8008c4e:	2bff      	cmp	r3, #255	@ 0xff
 8008c50:	d910      	bls.n	8008c74 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	22ff      	movs	r2, #255	@ 0xff
 8008c56:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c5c:	b299      	uxth	r1, r3
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c62:	b2da      	uxtb	r2, r3
 8008c64:	697b      	ldr	r3, [r7, #20]
 8008c66:	9300      	str	r3, [sp, #0]
 8008c68:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008c6c:	68f8      	ldr	r0, [r7, #12]
 8008c6e:	f001 f885 	bl	8009d7c <I2C_TransferConfig>
 8008c72:	e011      	b.n	8008c98 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c78:	b29a      	uxth	r2, r3
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c82:	b299      	uxth	r1, r3
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c88:	b2da      	uxtb	r2, r3
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	9300      	str	r3, [sp, #0]
 8008c8e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008c92:	68f8      	ldr	r0, [r7, #12]
 8008c94:	f001 f872 	bl	8009d7c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c9c:	b29a      	uxth	r2, r3
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ca2:	1ad3      	subs	r3, r2, r3
 8008ca4:	b29a      	uxth	r2, r3
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008cb0:	b2db      	uxtb	r3, r3
 8008cb2:	2b22      	cmp	r3, #34	@ 0x22
 8008cb4:	d108      	bne.n	8008cc8 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	681a      	ldr	r2, [r3, #0]
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008cc4:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008cc6:	e016      	b.n	8008cf6 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	681a      	ldr	r2, [r3, #0]
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008cd6:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008cd8:	e00d      	b.n	8008cf6 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	f003 0320 	and.w	r3, r3, #32
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d008      	beq.n	8008cf6 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d003      	beq.n	8008cf6 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8008cee:	68b9      	ldr	r1, [r7, #8]
 8008cf0:	68f8      	ldr	r0, [r7, #12]
 8008cf2:	f000 fa55 	bl	80091a0 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008cfe:	2300      	movs	r3, #0
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3718      	adds	r7, #24
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}
 8008d08:	80002000 	.word	0x80002000
 8008d0c:	80002400 	.word	0x80002400

08008d10 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b088      	sub	sp, #32
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	60f8      	str	r0, [r7, #12]
 8008d18:	60b9      	str	r1, [r7, #8]
 8008d1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d20:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8008d22:	2300      	movs	r3, #0
 8008d24:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008d2c:	2b01      	cmp	r3, #1
 8008d2e:	d101      	bne.n	8008d34 <I2C_Slave_ISR_DMA+0x24>
 8008d30:	2302      	movs	r3, #2
 8008d32:	e0bf      	b.n	8008eb4 <I2C_Slave_ISR_DMA+0x1a4>
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	2201      	movs	r2, #1
 8008d38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	f003 0320 	and.w	r3, r3, #32
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d008      	beq.n	8008d58 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d003      	beq.n	8008d58 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8008d50:	68b9      	ldr	r1, [r7, #8]
 8008d52:	68f8      	ldr	r0, [r7, #12]
 8008d54:	f000 faec 	bl	8009330 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	f003 0310 	and.w	r3, r3, #16
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	f000 8095 	beq.w	8008e8e <I2C_Slave_ISR_DMA+0x17e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	f000 808f 	beq.w	8008e8e <I2C_Slave_ISR_DMA+0x17e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d104      	bne.n	8008d84 <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d07d      	beq.n	8008e80 <I2C_Slave_ISR_DMA+0x170>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d00c      	beq.n	8008da6 <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d007      	beq.n	8008da6 <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	685b      	ldr	r3, [r3, #4]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d101      	bne.n	8008da6 <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 8008da2:	2301      	movs	r3, #1
 8008da4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d00c      	beq.n	8008dc8 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d007      	beq.n	8008dc8 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d101      	bne.n	8008dc8 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8008dc8:	69fb      	ldr	r3, [r7, #28]
 8008dca:	2b01      	cmp	r3, #1
 8008dcc:	d128      	bne.n	8008e20 <I2C_Slave_ISR_DMA+0x110>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008dd4:	b2db      	uxtb	r3, r3
 8008dd6:	2b28      	cmp	r3, #40	@ 0x28
 8008dd8:	d108      	bne.n	8008dec <I2C_Slave_ISR_DMA+0xdc>
 8008dda:	69bb      	ldr	r3, [r7, #24]
 8008ddc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008de0:	d104      	bne.n	8008dec <I2C_Slave_ISR_DMA+0xdc>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8008de2:	68b9      	ldr	r1, [r7, #8]
 8008de4:	68f8      	ldr	r0, [r7, #12]
 8008de6:	f000 fbb5 	bl	8009554 <I2C_ITListenCplt>
 8008dea:	e048      	b.n	8008e7e <I2C_Slave_ISR_DMA+0x16e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008df2:	b2db      	uxtb	r3, r3
 8008df4:	2b29      	cmp	r3, #41	@ 0x29
 8008df6:	d10e      	bne.n	8008e16 <I2C_Slave_ISR_DMA+0x106>
 8008df8:	69bb      	ldr	r3, [r7, #24]
 8008dfa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008dfe:	d00a      	beq.n	8008e16 <I2C_Slave_ISR_DMA+0x106>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	2210      	movs	r2, #16
 8008e06:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8008e08:	68f8      	ldr	r0, [r7, #12]
 8008e0a:	f000 fd0e 	bl	800982a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8008e0e:	68f8      	ldr	r0, [r7, #12]
 8008e10:	f000 f969 	bl	80090e6 <I2C_ITSlaveSeqCplt>
 8008e14:	e033      	b.n	8008e7e <I2C_Slave_ISR_DMA+0x16e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	2210      	movs	r2, #16
 8008e1c:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8008e1e:	e034      	b.n	8008e8a <I2C_Slave_ISR_DMA+0x17a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	2210      	movs	r2, #16
 8008e26:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e2c:	f043 0204 	orr.w	r2, r3, #4
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008e3a:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008e3c:	69bb      	ldr	r3, [r7, #24]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d003      	beq.n	8008e4a <I2C_Slave_ISR_DMA+0x13a>
 8008e42:	69bb      	ldr	r3, [r7, #24]
 8008e44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008e48:	d11f      	bne.n	8008e8a <I2C_Slave_ISR_DMA+0x17a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008e4a:	7dfb      	ldrb	r3, [r7, #23]
 8008e4c:	2b21      	cmp	r3, #33	@ 0x21
 8008e4e:	d002      	beq.n	8008e56 <I2C_Slave_ISR_DMA+0x146>
 8008e50:	7dfb      	ldrb	r3, [r7, #23]
 8008e52:	2b29      	cmp	r3, #41	@ 0x29
 8008e54:	d103      	bne.n	8008e5e <I2C_Slave_ISR_DMA+0x14e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	2221      	movs	r2, #33	@ 0x21
 8008e5a:	631a      	str	r2, [r3, #48]	@ 0x30
 8008e5c:	e008      	b.n	8008e70 <I2C_Slave_ISR_DMA+0x160>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008e5e:	7dfb      	ldrb	r3, [r7, #23]
 8008e60:	2b22      	cmp	r3, #34	@ 0x22
 8008e62:	d002      	beq.n	8008e6a <I2C_Slave_ISR_DMA+0x15a>
 8008e64:	7dfb      	ldrb	r3, [r7, #23]
 8008e66:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e68:	d102      	bne.n	8008e70 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	2222      	movs	r2, #34	@ 0x22
 8008e6e:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e74:	4619      	mov	r1, r3
 8008e76:	68f8      	ldr	r0, [r7, #12]
 8008e78:	f000 fbc0 	bl	80095fc <I2C_ITError>
      if (treatdmanack == 1U)
 8008e7c:	e005      	b.n	8008e8a <I2C_Slave_ISR_DMA+0x17a>
 8008e7e:	e004      	b.n	8008e8a <I2C_Slave_ISR_DMA+0x17a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	2210      	movs	r2, #16
 8008e86:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008e88:	e00f      	b.n	8008eaa <I2C_Slave_ISR_DMA+0x19a>
      if (treatdmanack == 1U)
 8008e8a:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008e8c:	e00d      	b.n	8008eaa <I2C_Slave_ISR_DMA+0x19a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	f003 0308 	and.w	r3, r3, #8
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d008      	beq.n	8008eaa <I2C_Slave_ISR_DMA+0x19a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d003      	beq.n	8008eaa <I2C_Slave_ISR_DMA+0x19a>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8008ea2:	68b9      	ldr	r1, [r7, #8]
 8008ea4:	68f8      	ldr	r0, [r7, #12]
 8008ea6:	f000 f85d 	bl	8008f64 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	2200      	movs	r2, #0
 8008eae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008eb2:	2300      	movs	r3, #0
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3720      	adds	r7, #32
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}

08008ebc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b086      	sub	sp, #24
 8008ec0:	af02      	add	r7, sp, #8
 8008ec2:	60f8      	str	r0, [r7, #12]
 8008ec4:	4608      	mov	r0, r1
 8008ec6:	4611      	mov	r1, r2
 8008ec8:	461a      	mov	r2, r3
 8008eca:	4603      	mov	r3, r0
 8008ecc:	817b      	strh	r3, [r7, #10]
 8008ece:	460b      	mov	r3, r1
 8008ed0:	813b      	strh	r3, [r7, #8]
 8008ed2:	4613      	mov	r3, r2
 8008ed4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008ed6:	88fb      	ldrh	r3, [r7, #6]
 8008ed8:	b2da      	uxtb	r2, r3
 8008eda:	8979      	ldrh	r1, [r7, #10]
 8008edc:	4b20      	ldr	r3, [pc, #128]	@ (8008f60 <I2C_RequestMemoryRead+0xa4>)
 8008ede:	9300      	str	r3, [sp, #0]
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	68f8      	ldr	r0, [r7, #12]
 8008ee4:	f000 ff4a 	bl	8009d7c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ee8:	69fa      	ldr	r2, [r7, #28]
 8008eea:	69b9      	ldr	r1, [r7, #24]
 8008eec:	68f8      	ldr	r0, [r7, #12]
 8008eee:	f000 fdda 	bl	8009aa6 <I2C_WaitOnTXISFlagUntilTimeout>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d001      	beq.n	8008efc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008ef8:	2301      	movs	r3, #1
 8008efa:	e02c      	b.n	8008f56 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008efc:	88fb      	ldrh	r3, [r7, #6]
 8008efe:	2b01      	cmp	r3, #1
 8008f00:	d105      	bne.n	8008f0e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008f02:	893b      	ldrh	r3, [r7, #8]
 8008f04:	b2da      	uxtb	r2, r3
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	629a      	str	r2, [r3, #40]	@ 0x28
 8008f0c:	e015      	b.n	8008f3a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008f0e:	893b      	ldrh	r3, [r7, #8]
 8008f10:	0a1b      	lsrs	r3, r3, #8
 8008f12:	b29b      	uxth	r3, r3
 8008f14:	b2da      	uxtb	r2, r3
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008f1c:	69fa      	ldr	r2, [r7, #28]
 8008f1e:	69b9      	ldr	r1, [r7, #24]
 8008f20:	68f8      	ldr	r0, [r7, #12]
 8008f22:	f000 fdc0 	bl	8009aa6 <I2C_WaitOnTXISFlagUntilTimeout>
 8008f26:	4603      	mov	r3, r0
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d001      	beq.n	8008f30 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	e012      	b.n	8008f56 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008f30:	893b      	ldrh	r3, [r7, #8]
 8008f32:	b2da      	uxtb	r2, r3
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008f3a:	69fb      	ldr	r3, [r7, #28]
 8008f3c:	9300      	str	r3, [sp, #0]
 8008f3e:	69bb      	ldr	r3, [r7, #24]
 8008f40:	2200      	movs	r2, #0
 8008f42:	2140      	movs	r1, #64	@ 0x40
 8008f44:	68f8      	ldr	r0, [r7, #12]
 8008f46:	f000 fd5f 	bl	8009a08 <I2C_WaitOnFlagUntilTimeout>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d001      	beq.n	8008f54 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8008f50:	2301      	movs	r3, #1
 8008f52:	e000      	b.n	8008f56 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008f54:	2300      	movs	r3, #0
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	3710      	adds	r7, #16
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}
 8008f5e:	bf00      	nop
 8008f60:	80002000 	.word	0x80002000

08008f64 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b084      	sub	sp, #16
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
 8008f6c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008f74:	b2db      	uxtb	r3, r3
 8008f76:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008f7a:	2b28      	cmp	r3, #40	@ 0x28
 8008f7c:	d16a      	bne.n	8009054 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	699b      	ldr	r3, [r3, #24]
 8008f84:	0c1b      	lsrs	r3, r3, #16
 8008f86:	b2db      	uxtb	r3, r3
 8008f88:	f003 0301 	and.w	r3, r3, #1
 8008f8c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	699b      	ldr	r3, [r3, #24]
 8008f94:	0c1b      	lsrs	r3, r3, #16
 8008f96:	b29b      	uxth	r3, r3
 8008f98:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8008f9c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	689b      	ldr	r3, [r3, #8]
 8008fa4:	b29b      	uxth	r3, r3
 8008fa6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008faa:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	68db      	ldr	r3, [r3, #12]
 8008fb2:	b29b      	uxth	r3, r3
 8008fb4:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8008fb8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	68db      	ldr	r3, [r3, #12]
 8008fbe:	2b02      	cmp	r3, #2
 8008fc0:	d138      	bne.n	8009034 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8008fc2:	897b      	ldrh	r3, [r7, #10]
 8008fc4:	09db      	lsrs	r3, r3, #7
 8008fc6:	b29a      	uxth	r2, r3
 8008fc8:	89bb      	ldrh	r3, [r7, #12]
 8008fca:	4053      	eors	r3, r2
 8008fcc:	b29b      	uxth	r3, r3
 8008fce:	f003 0306 	and.w	r3, r3, #6
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d11c      	bne.n	8009010 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8008fd6:	897b      	ldrh	r3, [r7, #10]
 8008fd8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008fde:	1c5a      	adds	r2, r3, #1
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008fe8:	2b02      	cmp	r3, #2
 8008fea:	d13b      	bne.n	8009064 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	2208      	movs	r2, #8
 8008ff8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8009002:	89ba      	ldrh	r2, [r7, #12]
 8009004:	7bfb      	ldrb	r3, [r7, #15]
 8009006:	4619      	mov	r1, r3
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f7ff fa10 	bl	800842e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800900e:	e029      	b.n	8009064 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8009010:	893b      	ldrh	r3, [r7, #8]
 8009012:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8009014:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f000 ff65 	bl	8009ee8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2200      	movs	r2, #0
 8009022:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8009026:	89ba      	ldrh	r2, [r7, #12]
 8009028:	7bfb      	ldrb	r3, [r7, #15]
 800902a:	4619      	mov	r1, r3
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f7ff f9fe 	bl	800842e <HAL_I2C_AddrCallback>
}
 8009032:	e017      	b.n	8009064 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8009034:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f000 ff55 	bl	8009ee8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2200      	movs	r2, #0
 8009042:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8009046:	89ba      	ldrh	r2, [r7, #12]
 8009048:	7bfb      	ldrb	r3, [r7, #15]
 800904a:	4619      	mov	r1, r3
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f7ff f9ee 	bl	800842e <HAL_I2C_AddrCallback>
}
 8009052:	e007      	b.n	8009064 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	2208      	movs	r2, #8
 800905a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2200      	movs	r2, #0
 8009060:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8009064:	bf00      	nop
 8009066:	3710      	adds	r7, #16
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}

0800906c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b082      	sub	sp, #8
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2200      	movs	r2, #0
 8009078:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009082:	b2db      	uxtb	r3, r3
 8009084:	2b21      	cmp	r3, #33	@ 0x21
 8009086:	d115      	bne.n	80090b4 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2220      	movs	r2, #32
 800908c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2211      	movs	r2, #17
 8009094:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2200      	movs	r2, #0
 800909a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800909c:	2101      	movs	r1, #1
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f000 ff22 	bl	8009ee8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2200      	movs	r2, #0
 80090a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f7fb faaf 	bl	8004610 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80090b2:	e014      	b.n	80090de <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2220      	movs	r2, #32
 80090b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2212      	movs	r2, #18
 80090c0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2200      	movs	r2, #0
 80090c6:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80090c8:	2102      	movs	r1, #2
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f000 ff0c 	bl	8009ee8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2200      	movs	r2, #0
 80090d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f7fb faa9 	bl	8004630 <HAL_I2C_MasterRxCpltCallback>
}
 80090de:	bf00      	nop
 80090e0:	3708      	adds	r7, #8
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}

080090e6 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80090e6:	b580      	push	{r7, lr}
 80090e8:	b084      	sub	sp, #16
 80090ea:	af00      	add	r7, sp, #0
 80090ec:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2200      	movs	r2, #0
 80090fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009104:	2b00      	cmp	r3, #0
 8009106:	d008      	beq.n	800911a <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	681a      	ldr	r2, [r3, #0]
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009116:	601a      	str	r2, [r3, #0]
 8009118:	e00c      	b.n	8009134 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009120:	2b00      	cmp	r3, #0
 8009122:	d007      	beq.n	8009134 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	681a      	ldr	r2, [r3, #0]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009132:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800913a:	b2db      	uxtb	r3, r3
 800913c:	2b29      	cmp	r3, #41	@ 0x29
 800913e:	d112      	bne.n	8009166 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2228      	movs	r2, #40	@ 0x28
 8009144:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2221      	movs	r2, #33	@ 0x21
 800914c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800914e:	2101      	movs	r1, #1
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f000 fec9 	bl	8009ee8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2200      	movs	r2, #0
 800915a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f7ff f951 	bl	8008406 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009164:	e017      	b.n	8009196 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800916c:	b2db      	uxtb	r3, r3
 800916e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009170:	d111      	bne.n	8009196 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2228      	movs	r2, #40	@ 0x28
 8009176:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2222      	movs	r2, #34	@ 0x22
 800917e:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8009180:	2102      	movs	r1, #2
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f000 feb0 	bl	8009ee8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2200      	movs	r2, #0
 800918c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f7ff f942 	bl	800841a <HAL_I2C_SlaveRxCpltCallback>
}
 8009196:	bf00      	nop
 8009198:	3710      	adds	r7, #16
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}
	...

080091a0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b086      	sub	sp, #24
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	2220      	movs	r2, #32
 80091b4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80091bc:	b2db      	uxtb	r3, r3
 80091be:	2b21      	cmp	r3, #33	@ 0x21
 80091c0:	d107      	bne.n	80091d2 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80091c2:	2101      	movs	r1, #1
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f000 fe8f 	bl	8009ee8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2211      	movs	r2, #17
 80091ce:	631a      	str	r2, [r3, #48]	@ 0x30
 80091d0:	e00c      	b.n	80091ec <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80091d8:	b2db      	uxtb	r3, r3
 80091da:	2b22      	cmp	r3, #34	@ 0x22
 80091dc:	d106      	bne.n	80091ec <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80091de:	2102      	movs	r1, #2
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f000 fe81 	bl	8009ee8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2212      	movs	r2, #18
 80091ea:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	6859      	ldr	r1, [r3, #4]
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681a      	ldr	r2, [r3, #0]
 80091f6:	4b4c      	ldr	r3, [pc, #304]	@ (8009328 <I2C_ITMasterCplt+0x188>)
 80091f8:	400b      	ands	r3, r1
 80091fa:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2200      	movs	r2, #0
 8009200:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	4a49      	ldr	r2, [pc, #292]	@ (800932c <I2C_ITMasterCplt+0x18c>)
 8009206:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8009208:	697b      	ldr	r3, [r7, #20]
 800920a:	f003 0310 	and.w	r3, r3, #16
 800920e:	2b00      	cmp	r3, #0
 8009210:	d009      	beq.n	8009226 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	2210      	movs	r2, #16
 8009218:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800921e:	f043 0204 	orr.w	r2, r3, #4
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800922c:	b2db      	uxtb	r3, r3
 800922e:	2b60      	cmp	r3, #96	@ 0x60
 8009230:	d10a      	bne.n	8009248 <I2C_ITMasterCplt+0xa8>
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	f003 0304 	and.w	r3, r3, #4
 8009238:	2b00      	cmp	r3, #0
 800923a:	d005      	beq.n	8009248 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009242:	b2db      	uxtb	r3, r3
 8009244:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8009246:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f000 faee 	bl	800982a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009252:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800925a:	b2db      	uxtb	r3, r3
 800925c:	2b60      	cmp	r3, #96	@ 0x60
 800925e:	d002      	beq.n	8009266 <I2C_ITMasterCplt+0xc6>
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d006      	beq.n	8009274 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800926a:	4619      	mov	r1, r3
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f000 f9c5 	bl	80095fc <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009272:	e054      	b.n	800931e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800927a:	b2db      	uxtb	r3, r3
 800927c:	2b21      	cmp	r3, #33	@ 0x21
 800927e:	d124      	bne.n	80092ca <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2220      	movs	r2, #32
 8009284:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2200      	movs	r2, #0
 800928c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009294:	b2db      	uxtb	r3, r3
 8009296:	2b40      	cmp	r3, #64	@ 0x40
 8009298:	d10b      	bne.n	80092b2 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2200      	movs	r2, #0
 800929e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2200      	movs	r2, #0
 80092a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f7ff f8d7 	bl	800845e <HAL_I2C_MemTxCpltCallback>
}
 80092b0:	e035      	b.n	800931e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2200      	movs	r2, #0
 80092b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2200      	movs	r2, #0
 80092be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f7fb f9a4 	bl	8004610 <HAL_I2C_MasterTxCpltCallback>
}
 80092c8:	e029      	b.n	800931e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80092d0:	b2db      	uxtb	r3, r3
 80092d2:	2b22      	cmp	r3, #34	@ 0x22
 80092d4:	d123      	bne.n	800931e <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2220      	movs	r2, #32
 80092da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2200      	movs	r2, #0
 80092e2:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80092ea:	b2db      	uxtb	r3, r3
 80092ec:	2b40      	cmp	r3, #64	@ 0x40
 80092ee:	d10b      	bne.n	8009308 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2200      	movs	r2, #0
 80092f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2200      	movs	r2, #0
 80092fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f7ff f8b6 	bl	8008472 <HAL_I2C_MemRxCpltCallback>
}
 8009306:	e00a      	b.n	800931e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2200      	movs	r2, #0
 800930c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2200      	movs	r2, #0
 8009314:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f7fb f989 	bl	8004630 <HAL_I2C_MasterRxCpltCallback>
}
 800931e:	bf00      	nop
 8009320:	3718      	adds	r7, #24
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}
 8009326:	bf00      	nop
 8009328:	fe00e800 	.word	0xfe00e800
 800932c:	ffff0000 	.word	0xffff0000

08009330 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b086      	sub	sp, #24
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
 8009338:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800934c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	2220      	movs	r2, #32
 8009354:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009356:	7bfb      	ldrb	r3, [r7, #15]
 8009358:	2b21      	cmp	r3, #33	@ 0x21
 800935a:	d002      	beq.n	8009362 <I2C_ITSlaveCplt+0x32>
 800935c:	7bfb      	ldrb	r3, [r7, #15]
 800935e:	2b29      	cmp	r3, #41	@ 0x29
 8009360:	d108      	bne.n	8009374 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8009362:	f248 0101 	movw	r1, #32769	@ 0x8001
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f000 fdbe 	bl	8009ee8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2221      	movs	r2, #33	@ 0x21
 8009370:	631a      	str	r2, [r3, #48]	@ 0x30
 8009372:	e019      	b.n	80093a8 <I2C_ITSlaveCplt+0x78>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009374:	7bfb      	ldrb	r3, [r7, #15]
 8009376:	2b22      	cmp	r3, #34	@ 0x22
 8009378:	d002      	beq.n	8009380 <I2C_ITSlaveCplt+0x50>
 800937a:	7bfb      	ldrb	r3, [r7, #15]
 800937c:	2b2a      	cmp	r3, #42	@ 0x2a
 800937e:	d108      	bne.n	8009392 <I2C_ITSlaveCplt+0x62>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8009380:	f248 0102 	movw	r1, #32770	@ 0x8002
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f000 fdaf 	bl	8009ee8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2222      	movs	r2, #34	@ 0x22
 800938e:	631a      	str	r2, [r3, #48]	@ 0x30
 8009390:	e00a      	b.n	80093a8 <I2C_ITSlaveCplt+0x78>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8009392:	7bfb      	ldrb	r3, [r7, #15]
 8009394:	2b28      	cmp	r3, #40	@ 0x28
 8009396:	d107      	bne.n	80093a8 <I2C_ITSlaveCplt+0x78>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8009398:	f248 0103 	movw	r1, #32771	@ 0x8003
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f000 fda3 	bl	8009ee8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2200      	movs	r2, #0
 80093a6:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	685a      	ldr	r2, [r3, #4]
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80093b6:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	6859      	ldr	r1, [r3, #4]
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681a      	ldr	r2, [r3, #0]
 80093c2:	4b62      	ldr	r3, [pc, #392]	@ (800954c <I2C_ITSlaveCplt+0x21c>)
 80093c4:	400b      	ands	r3, r1
 80093c6:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f000 fa2e 	bl	800982a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d013      	beq.n	8009400 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	681a      	ldr	r2, [r3, #0]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80093e6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d01f      	beq.n	8009430 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	685b      	ldr	r3, [r3, #4]
 80093f8:	b29a      	uxth	r2, r3
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80093fe:	e017      	b.n	8009430 <I2C_ITSlaveCplt+0x100>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009406:	2b00      	cmp	r3, #0
 8009408:	d012      	beq.n	8009430 <I2C_ITSlaveCplt+0x100>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	681a      	ldr	r2, [r3, #0]
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009418:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800941e:	2b00      	cmp	r3, #0
 8009420:	d006      	beq.n	8009430 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	685b      	ldr	r3, [r3, #4]
 800942a:	b29a      	uxth	r2, r3
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	f003 0304 	and.w	r3, r3, #4
 8009436:	2b00      	cmp	r3, #0
 8009438:	d020      	beq.n	800947c <I2C_ITSlaveCplt+0x14c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	f023 0304 	bic.w	r3, r3, #4
 8009440:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800944c:	b2d2      	uxtb	r2, r2
 800944e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009454:	1c5a      	adds	r2, r3, #1
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800945e:	2b00      	cmp	r3, #0
 8009460:	d00c      	beq.n	800947c <I2C_ITSlaveCplt+0x14c>
    {
      hi2c->XferSize--;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009466:	3b01      	subs	r3, #1
 8009468:	b29a      	uxth	r2, r3
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009472:	b29b      	uxth	r3, r3
 8009474:	3b01      	subs	r3, #1
 8009476:	b29a      	uxth	r2, r3
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009480:	b29b      	uxth	r3, r3
 8009482:	2b00      	cmp	r3, #0
 8009484:	d005      	beq.n	8009492 <I2C_ITSlaveCplt+0x162>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800948a:	f043 0204 	orr.w	r2, r3, #4
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2200      	movs	r2, #0
 8009496:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2200      	movs	r2, #0
 800949e:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d010      	beq.n	80094ca <I2C_ITSlaveCplt+0x19a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094ac:	4619      	mov	r1, r3
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f000 f8a4 	bl	80095fc <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80094ba:	b2db      	uxtb	r3, r3
 80094bc:	2b28      	cmp	r3, #40	@ 0x28
 80094be:	d141      	bne.n	8009544 <I2C_ITSlaveCplt+0x214>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80094c0:	6979      	ldr	r1, [r7, #20]
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f000 f846 	bl	8009554 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80094c8:	e03c      	b.n	8009544 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094ce:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80094d2:	d014      	beq.n	80094fe <I2C_ITSlaveCplt+0x1ce>
    I2C_ITSlaveSeqCplt(hi2c);
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f7ff fe06 	bl	80090e6 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	4a1c      	ldr	r2, [pc, #112]	@ (8009550 <I2C_ITSlaveCplt+0x220>)
 80094de:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2220      	movs	r2, #32
 80094e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2200      	movs	r2, #0
 80094ec:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2200      	movs	r2, #0
 80094f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f7fe ffa7 	bl	800844a <HAL_I2C_ListenCpltCallback>
}
 80094fc:	e022      	b.n	8009544 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009504:	b2db      	uxtb	r3, r3
 8009506:	2b22      	cmp	r3, #34	@ 0x22
 8009508:	d10e      	bne.n	8009528 <I2C_ITSlaveCplt+0x1f8>
    hi2c->State = HAL_I2C_STATE_READY;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2220      	movs	r2, #32
 800950e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2200      	movs	r2, #0
 8009516:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2200      	movs	r2, #0
 800951c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f7fe ff7a 	bl	800841a <HAL_I2C_SlaveRxCpltCallback>
}
 8009526:	e00d      	b.n	8009544 <I2C_ITSlaveCplt+0x214>
    hi2c->State = HAL_I2C_STATE_READY;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2220      	movs	r2, #32
 800952c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2200      	movs	r2, #0
 8009534:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2200      	movs	r2, #0
 800953a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f7fe ff61 	bl	8008406 <HAL_I2C_SlaveTxCpltCallback>
}
 8009544:	bf00      	nop
 8009546:	3718      	adds	r7, #24
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}
 800954c:	fe00e800 	.word	0xfe00e800
 8009550:	ffff0000 	.word	0xffff0000

08009554 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b082      	sub	sp, #8
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
 800955c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	4a25      	ldr	r2, [pc, #148]	@ (80095f8 <I2C_ITListenCplt+0xa4>)
 8009562:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2200      	movs	r2, #0
 8009568:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2220      	movs	r2, #32
 800956e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2200      	movs	r2, #0
 8009576:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2200      	movs	r2, #0
 800957e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	f003 0304 	and.w	r3, r3, #4
 8009586:	2b00      	cmp	r3, #0
 8009588:	d022      	beq.n	80095d0 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009594:	b2d2      	uxtb	r2, r2
 8009596:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800959c:	1c5a      	adds	r2, r3, #1
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d012      	beq.n	80095d0 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80095ae:	3b01      	subs	r3, #1
 80095b0:	b29a      	uxth	r2, r3
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80095ba:	b29b      	uxth	r3, r3
 80095bc:	3b01      	subs	r3, #1
 80095be:	b29a      	uxth	r2, r3
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095c8:	f043 0204 	orr.w	r2, r3, #4
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80095d0:	f248 0103 	movw	r1, #32771	@ 0x8003
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f000 fc87 	bl	8009ee8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	2210      	movs	r2, #16
 80095e0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2200      	movs	r2, #0
 80095e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f7fe ff2d 	bl	800844a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80095f0:	bf00      	nop
 80095f2:	3708      	adds	r7, #8
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}
 80095f8:	ffff0000 	.word	0xffff0000

080095fc <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b084      	sub	sp, #16
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
 8009604:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800960c:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2200      	movs	r2, #0
 8009612:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	4a6d      	ldr	r2, [pc, #436]	@ (80097d0 <I2C_ITError+0x1d4>)
 800961a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2200      	movs	r2, #0
 8009620:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	431a      	orrs	r2, r3
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800962e:	7bfb      	ldrb	r3, [r7, #15]
 8009630:	2b28      	cmp	r3, #40	@ 0x28
 8009632:	d005      	beq.n	8009640 <I2C_ITError+0x44>
 8009634:	7bfb      	ldrb	r3, [r7, #15]
 8009636:	2b29      	cmp	r3, #41	@ 0x29
 8009638:	d002      	beq.n	8009640 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800963a:	7bfb      	ldrb	r3, [r7, #15]
 800963c:	2b2a      	cmp	r3, #42	@ 0x2a
 800963e:	d10b      	bne.n	8009658 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009640:	2103      	movs	r1, #3
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f000 fc50 	bl	8009ee8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2228      	movs	r2, #40	@ 0x28
 800964c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	4a60      	ldr	r2, [pc, #384]	@ (80097d4 <I2C_ITError+0x1d8>)
 8009654:	635a      	str	r2, [r3, #52]	@ 0x34
 8009656:	e030      	b.n	80096ba <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009658:	f248 0103 	movw	r1, #32771	@ 0x8003
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f000 fc43 	bl	8009ee8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f000 f8e1 	bl	800982a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800966e:	b2db      	uxtb	r3, r3
 8009670:	2b60      	cmp	r3, #96	@ 0x60
 8009672:	d01f      	beq.n	80096b4 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2220      	movs	r2, #32
 8009678:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	699b      	ldr	r3, [r3, #24]
 8009682:	f003 0320 	and.w	r3, r3, #32
 8009686:	2b20      	cmp	r3, #32
 8009688:	d114      	bne.n	80096b4 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	699b      	ldr	r3, [r3, #24]
 8009690:	f003 0310 	and.w	r3, r3, #16
 8009694:	2b10      	cmp	r3, #16
 8009696:	d109      	bne.n	80096ac <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	2210      	movs	r2, #16
 800969e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096a4:	f043 0204 	orr.w	r2, r3, #4
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	2220      	movs	r2, #32
 80096b2:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2200      	movs	r2, #0
 80096b8:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096be:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d039      	beq.n	800973c <I2C_ITError+0x140>
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	2b11      	cmp	r3, #17
 80096cc:	d002      	beq.n	80096d4 <I2C_ITError+0xd8>
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	2b21      	cmp	r3, #33	@ 0x21
 80096d2:	d133      	bne.n	800973c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80096de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80096e2:	d107      	bne.n	80096f4 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	681a      	ldr	r2, [r3, #0]
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80096f2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096f8:	4618      	mov	r0, r3
 80096fa:	f7fd ff63 	bl	80075c4 <HAL_DMA_GetState>
 80096fe:	4603      	mov	r3, r0
 8009700:	2b01      	cmp	r3, #1
 8009702:	d017      	beq.n	8009734 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009708:	4a33      	ldr	r2, [pc, #204]	@ (80097d8 <I2C_ITError+0x1dc>)
 800970a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2200      	movs	r2, #0
 8009710:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009718:	4618      	mov	r0, r3
 800971a:	f7fd fe63 	bl	80073e4 <HAL_DMA_Abort_IT>
 800971e:	4603      	mov	r3, r0
 8009720:	2b00      	cmp	r3, #0
 8009722:	d04d      	beq.n	80097c0 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009728:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800972a:	687a      	ldr	r2, [r7, #4]
 800972c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800972e:	4610      	mov	r0, r2
 8009730:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009732:	e045      	b.n	80097c0 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f000 f851 	bl	80097dc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800973a:	e041      	b.n	80097c0 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009740:	2b00      	cmp	r3, #0
 8009742:	d039      	beq.n	80097b8 <I2C_ITError+0x1bc>
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	2b12      	cmp	r3, #18
 8009748:	d002      	beq.n	8009750 <I2C_ITError+0x154>
 800974a:	68bb      	ldr	r3, [r7, #8]
 800974c:	2b22      	cmp	r3, #34	@ 0x22
 800974e:	d133      	bne.n	80097b8 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800975a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800975e:	d107      	bne.n	8009770 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	681a      	ldr	r2, [r3, #0]
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800976e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009774:	4618      	mov	r0, r3
 8009776:	f7fd ff25 	bl	80075c4 <HAL_DMA_GetState>
 800977a:	4603      	mov	r3, r0
 800977c:	2b01      	cmp	r3, #1
 800977e:	d017      	beq.n	80097b0 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009784:	4a14      	ldr	r2, [pc, #80]	@ (80097d8 <I2C_ITError+0x1dc>)
 8009786:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2200      	movs	r2, #0
 800978c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009794:	4618      	mov	r0, r3
 8009796:	f7fd fe25 	bl	80073e4 <HAL_DMA_Abort_IT>
 800979a:	4603      	mov	r3, r0
 800979c:	2b00      	cmp	r3, #0
 800979e:	d011      	beq.n	80097c4 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097a6:	687a      	ldr	r2, [r7, #4]
 80097a8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80097aa:	4610      	mov	r0, r2
 80097ac:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80097ae:	e009      	b.n	80097c4 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	f000 f813 	bl	80097dc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80097b6:	e005      	b.n	80097c4 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	f000 f80f 	bl	80097dc <I2C_TreatErrorCallback>
  }
}
 80097be:	e002      	b.n	80097c6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80097c0:	bf00      	nop
 80097c2:	e000      	b.n	80097c6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80097c4:	bf00      	nop
}
 80097c6:	bf00      	nop
 80097c8:	3710      	adds	r7, #16
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}
 80097ce:	bf00      	nop
 80097d0:	ffff0000 	.word	0xffff0000
 80097d4:	080086fd 	.word	0x080086fd
 80097d8:	080099cd 	.word	0x080099cd

080097dc <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b082      	sub	sp, #8
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80097ea:	b2db      	uxtb	r3, r3
 80097ec:	2b60      	cmp	r3, #96	@ 0x60
 80097ee:	d10e      	bne.n	800980e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2220      	movs	r2, #32
 80097f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2200      	movs	r2, #0
 80097fc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2200      	movs	r2, #0
 8009802:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	f7fe fe47 	bl	800849a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800980c:	e009      	b.n	8009822 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2200      	movs	r2, #0
 8009812:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2200      	movs	r2, #0
 8009818:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f7fe fe32 	bl	8008486 <HAL_I2C_ErrorCallback>
}
 8009822:	bf00      	nop
 8009824:	3708      	adds	r7, #8
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}

0800982a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800982a:	b480      	push	{r7}
 800982c:	b083      	sub	sp, #12
 800982e:	af00      	add	r7, sp, #0
 8009830:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	699b      	ldr	r3, [r3, #24]
 8009838:	f003 0302 	and.w	r3, r3, #2
 800983c:	2b02      	cmp	r3, #2
 800983e:	d103      	bne.n	8009848 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	2200      	movs	r2, #0
 8009846:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	699b      	ldr	r3, [r3, #24]
 800984e:	f003 0301 	and.w	r3, r3, #1
 8009852:	2b01      	cmp	r3, #1
 8009854:	d007      	beq.n	8009866 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	699a      	ldr	r2, [r3, #24]
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f042 0201 	orr.w	r2, r2, #1
 8009864:	619a      	str	r2, [r3, #24]
  }
}
 8009866:	bf00      	nop
 8009868:	370c      	adds	r7, #12
 800986a:	46bd      	mov	sp, r7
 800986c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009870:	4770      	bx	lr

08009872 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009872:	b580      	push	{r7, lr}
 8009874:	b084      	sub	sp, #16
 8009876:	af00      	add	r7, sp, #0
 8009878:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800987e:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	681a      	ldr	r2, [r3, #0]
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800988e:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009894:	b29b      	uxth	r3, r3
 8009896:	2b00      	cmp	r3, #0
 8009898:	d104      	bne.n	80098a4 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800989a:	2120      	movs	r1, #32
 800989c:	68f8      	ldr	r0, [r7, #12]
 800989e:	f000 fa9f 	bl	8009de0 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80098a2:	e02d      	b.n	8009900 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098a8:	68fa      	ldr	r2, [r7, #12]
 80098aa:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80098ac:	441a      	add	r2, r3
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80098b6:	b29b      	uxth	r3, r3
 80098b8:	2bff      	cmp	r3, #255	@ 0xff
 80098ba:	d903      	bls.n	80098c4 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	22ff      	movs	r2, #255	@ 0xff
 80098c0:	851a      	strh	r2, [r3, #40]	@ 0x28
 80098c2:	e004      	b.n	80098ce <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80098c8:	b29a      	uxth	r2, r3
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098d6:	4619      	mov	r1, r3
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	3328      	adds	r3, #40	@ 0x28
 80098de:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80098e4:	f7fd fce0 	bl	80072a8 <HAL_DMA_Start_IT>
 80098e8:	4603      	mov	r3, r0
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d004      	beq.n	80098f8 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80098ee:	2110      	movs	r1, #16
 80098f0:	68f8      	ldr	r0, [r7, #12]
 80098f2:	f7ff fe83 	bl	80095fc <I2C_ITError>
}
 80098f6:	e003      	b.n	8009900 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80098f8:	2140      	movs	r1, #64	@ 0x40
 80098fa:	68f8      	ldr	r0, [r7, #12]
 80098fc:	f000 fa70 	bl	8009de0 <I2C_Enable_IRQ>
}
 8009900:	bf00      	nop
 8009902:	3710      	adds	r7, #16
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}

08009908 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b084      	sub	sp, #16
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009914:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	681a      	ldr	r2, [r3, #0]
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009924:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800992a:	b29b      	uxth	r3, r3
 800992c:	2b00      	cmp	r3, #0
 800992e:	d104      	bne.n	800993a <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8009930:	2120      	movs	r1, #32
 8009932:	68f8      	ldr	r0, [r7, #12]
 8009934:	f000 fa54 	bl	8009de0 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8009938:	e02d      	b.n	8009996 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800993e:	68fa      	ldr	r2, [r7, #12]
 8009940:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8009942:	441a      	add	r2, r3
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800994c:	b29b      	uxth	r3, r3
 800994e:	2bff      	cmp	r3, #255	@ 0xff
 8009950:	d903      	bls.n	800995a <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	22ff      	movs	r2, #255	@ 0xff
 8009956:	851a      	strh	r2, [r3, #40]	@ 0x28
 8009958:	e004      	b.n	8009964 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800995e:	b29a      	uxth	r2, r3
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	3324      	adds	r3, #36	@ 0x24
 800996e:	4619      	mov	r1, r3
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009974:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800997a:	f7fd fc95 	bl	80072a8 <HAL_DMA_Start_IT>
 800997e:	4603      	mov	r3, r0
 8009980:	2b00      	cmp	r3, #0
 8009982:	d004      	beq.n	800998e <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8009984:	2110      	movs	r1, #16
 8009986:	68f8      	ldr	r0, [r7, #12]
 8009988:	f7ff fe38 	bl	80095fc <I2C_ITError>
}
 800998c:	e003      	b.n	8009996 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800998e:	2140      	movs	r1, #64	@ 0x40
 8009990:	68f8      	ldr	r0, [r7, #12]
 8009992:	f000 fa25 	bl	8009de0 <I2C_Enable_IRQ>
}
 8009996:	bf00      	nop
 8009998:	3710      	adds	r7, #16
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}

0800999e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800999e:	b580      	push	{r7, lr}
 80099a0:	b084      	sub	sp, #16
 80099a2:	af00      	add	r7, sp, #0
 80099a4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099aa:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	685a      	ldr	r2, [r3, #4]
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80099ba:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80099bc:	2110      	movs	r1, #16
 80099be:	68f8      	ldr	r0, [r7, #12]
 80099c0:	f7ff fe1c 	bl	80095fc <I2C_ITError>
}
 80099c4:	bf00      	nop
 80099c6:	3710      	adds	r7, #16
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}

080099cc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b084      	sub	sp, #16
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099d8:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d003      	beq.n	80099ea <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099e6:	2200      	movs	r2, #0
 80099e8:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d003      	beq.n	80099fa <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099f6:	2200      	movs	r2, #0
 80099f8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80099fa:	68f8      	ldr	r0, [r7, #12]
 80099fc:	f7ff feee 	bl	80097dc <I2C_TreatErrorCallback>
}
 8009a00:	bf00      	nop
 8009a02:	3710      	adds	r7, #16
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}

08009a08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b084      	sub	sp, #16
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	60f8      	str	r0, [r7, #12]
 8009a10:	60b9      	str	r1, [r7, #8]
 8009a12:	603b      	str	r3, [r7, #0]
 8009a14:	4613      	mov	r3, r2
 8009a16:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009a18:	e031      	b.n	8009a7e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a20:	d02d      	beq.n	8009a7e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a22:	f7fb fd07 	bl	8005434 <HAL_GetTick>
 8009a26:	4602      	mov	r2, r0
 8009a28:	69bb      	ldr	r3, [r7, #24]
 8009a2a:	1ad3      	subs	r3, r2, r3
 8009a2c:	683a      	ldr	r2, [r7, #0]
 8009a2e:	429a      	cmp	r2, r3
 8009a30:	d302      	bcc.n	8009a38 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d122      	bne.n	8009a7e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	699a      	ldr	r2, [r3, #24]
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	4013      	ands	r3, r2
 8009a42:	68ba      	ldr	r2, [r7, #8]
 8009a44:	429a      	cmp	r2, r3
 8009a46:	bf0c      	ite	eq
 8009a48:	2301      	moveq	r3, #1
 8009a4a:	2300      	movne	r3, #0
 8009a4c:	b2db      	uxtb	r3, r3
 8009a4e:	461a      	mov	r2, r3
 8009a50:	79fb      	ldrb	r3, [r7, #7]
 8009a52:	429a      	cmp	r2, r3
 8009a54:	d113      	bne.n	8009a7e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a5a:	f043 0220 	orr.w	r2, r3, #32
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	2220      	movs	r2, #32
 8009a66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	2200      	movs	r2, #0
 8009a76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	e00f      	b.n	8009a9e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	699a      	ldr	r2, [r3, #24]
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	4013      	ands	r3, r2
 8009a88:	68ba      	ldr	r2, [r7, #8]
 8009a8a:	429a      	cmp	r2, r3
 8009a8c:	bf0c      	ite	eq
 8009a8e:	2301      	moveq	r3, #1
 8009a90:	2300      	movne	r3, #0
 8009a92:	b2db      	uxtb	r3, r3
 8009a94:	461a      	mov	r2, r3
 8009a96:	79fb      	ldrb	r3, [r7, #7]
 8009a98:	429a      	cmp	r2, r3
 8009a9a:	d0be      	beq.n	8009a1a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009a9c:	2300      	movs	r3, #0
}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	3710      	adds	r7, #16
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bd80      	pop	{r7, pc}

08009aa6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009aa6:	b580      	push	{r7, lr}
 8009aa8:	b084      	sub	sp, #16
 8009aaa:	af00      	add	r7, sp, #0
 8009aac:	60f8      	str	r0, [r7, #12]
 8009aae:	60b9      	str	r1, [r7, #8]
 8009ab0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009ab2:	e033      	b.n	8009b1c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009ab4:	687a      	ldr	r2, [r7, #4]
 8009ab6:	68b9      	ldr	r1, [r7, #8]
 8009ab8:	68f8      	ldr	r0, [r7, #12]
 8009aba:	f000 f87f 	bl	8009bbc <I2C_IsErrorOccurred>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d001      	beq.n	8009ac8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	e031      	b.n	8009b2c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ace:	d025      	beq.n	8009b1c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ad0:	f7fb fcb0 	bl	8005434 <HAL_GetTick>
 8009ad4:	4602      	mov	r2, r0
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	1ad3      	subs	r3, r2, r3
 8009ada:	68ba      	ldr	r2, [r7, #8]
 8009adc:	429a      	cmp	r2, r3
 8009ade:	d302      	bcc.n	8009ae6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d11a      	bne.n	8009b1c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	699b      	ldr	r3, [r3, #24]
 8009aec:	f003 0302 	and.w	r3, r3, #2
 8009af0:	2b02      	cmp	r3, #2
 8009af2:	d013      	beq.n	8009b1c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009af8:	f043 0220 	orr.w	r2, r3, #32
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	2220      	movs	r2, #32
 8009b04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	2200      	movs	r2, #0
 8009b14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009b18:	2301      	movs	r3, #1
 8009b1a:	e007      	b.n	8009b2c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	699b      	ldr	r3, [r3, #24]
 8009b22:	f003 0302 	and.w	r3, r3, #2
 8009b26:	2b02      	cmp	r3, #2
 8009b28:	d1c4      	bne.n	8009ab4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009b2a:	2300      	movs	r3, #0
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	3710      	adds	r7, #16
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}

08009b34 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b084      	sub	sp, #16
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	60f8      	str	r0, [r7, #12]
 8009b3c:	60b9      	str	r1, [r7, #8]
 8009b3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009b40:	e02f      	b.n	8009ba2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009b42:	687a      	ldr	r2, [r7, #4]
 8009b44:	68b9      	ldr	r1, [r7, #8]
 8009b46:	68f8      	ldr	r0, [r7, #12]
 8009b48:	f000 f838 	bl	8009bbc <I2C_IsErrorOccurred>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d001      	beq.n	8009b56 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009b52:	2301      	movs	r3, #1
 8009b54:	e02d      	b.n	8009bb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b56:	f7fb fc6d 	bl	8005434 <HAL_GetTick>
 8009b5a:	4602      	mov	r2, r0
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	1ad3      	subs	r3, r2, r3
 8009b60:	68ba      	ldr	r2, [r7, #8]
 8009b62:	429a      	cmp	r2, r3
 8009b64:	d302      	bcc.n	8009b6c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d11a      	bne.n	8009ba2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	699b      	ldr	r3, [r3, #24]
 8009b72:	f003 0320 	and.w	r3, r3, #32
 8009b76:	2b20      	cmp	r3, #32
 8009b78:	d013      	beq.n	8009ba2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b7e:	f043 0220 	orr.w	r2, r3, #32
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	2220      	movs	r2, #32
 8009b8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	2200      	movs	r2, #0
 8009b92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	e007      	b.n	8009bb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	699b      	ldr	r3, [r3, #24]
 8009ba8:	f003 0320 	and.w	r3, r3, #32
 8009bac:	2b20      	cmp	r3, #32
 8009bae:	d1c8      	bne.n	8009b42 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009bb0:	2300      	movs	r3, #0
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	3710      	adds	r7, #16
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}
	...

08009bbc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b08a      	sub	sp, #40	@ 0x28
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	60f8      	str	r0, [r7, #12]
 8009bc4:	60b9      	str	r1, [r7, #8]
 8009bc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	699b      	ldr	r3, [r3, #24]
 8009bd4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009bde:	69bb      	ldr	r3, [r7, #24]
 8009be0:	f003 0310 	and.w	r3, r3, #16
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d068      	beq.n	8009cba <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	2210      	movs	r2, #16
 8009bee:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009bf0:	e049      	b.n	8009c86 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bf8:	d045      	beq.n	8009c86 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009bfa:	f7fb fc1b 	bl	8005434 <HAL_GetTick>
 8009bfe:	4602      	mov	r2, r0
 8009c00:	69fb      	ldr	r3, [r7, #28]
 8009c02:	1ad3      	subs	r3, r2, r3
 8009c04:	68ba      	ldr	r2, [r7, #8]
 8009c06:	429a      	cmp	r2, r3
 8009c08:	d302      	bcc.n	8009c10 <I2C_IsErrorOccurred+0x54>
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d13a      	bne.n	8009c86 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	685b      	ldr	r3, [r3, #4]
 8009c16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009c1a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009c22:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	699b      	ldr	r3, [r3, #24]
 8009c2a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009c2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009c32:	d121      	bne.n	8009c78 <I2C_IsErrorOccurred+0xbc>
 8009c34:	697b      	ldr	r3, [r7, #20]
 8009c36:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009c3a:	d01d      	beq.n	8009c78 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009c3c:	7cfb      	ldrb	r3, [r7, #19]
 8009c3e:	2b20      	cmp	r3, #32
 8009c40:	d01a      	beq.n	8009c78 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	685a      	ldr	r2, [r3, #4]
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009c50:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009c52:	f7fb fbef 	bl	8005434 <HAL_GetTick>
 8009c56:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009c58:	e00e      	b.n	8009c78 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009c5a:	f7fb fbeb 	bl	8005434 <HAL_GetTick>
 8009c5e:	4602      	mov	r2, r0
 8009c60:	69fb      	ldr	r3, [r7, #28]
 8009c62:	1ad3      	subs	r3, r2, r3
 8009c64:	2b19      	cmp	r3, #25
 8009c66:	d907      	bls.n	8009c78 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009c68:	6a3b      	ldr	r3, [r7, #32]
 8009c6a:	f043 0320 	orr.w	r3, r3, #32
 8009c6e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009c70:	2301      	movs	r3, #1
 8009c72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8009c76:	e006      	b.n	8009c86 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	699b      	ldr	r3, [r3, #24]
 8009c7e:	f003 0320 	and.w	r3, r3, #32
 8009c82:	2b20      	cmp	r3, #32
 8009c84:	d1e9      	bne.n	8009c5a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	699b      	ldr	r3, [r3, #24]
 8009c8c:	f003 0320 	and.w	r3, r3, #32
 8009c90:	2b20      	cmp	r3, #32
 8009c92:	d003      	beq.n	8009c9c <I2C_IsErrorOccurred+0xe0>
 8009c94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d0aa      	beq.n	8009bf2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009c9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d103      	bne.n	8009cac <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	2220      	movs	r2, #32
 8009caa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009cac:	6a3b      	ldr	r3, [r7, #32]
 8009cae:	f043 0304 	orr.w	r3, r3, #4
 8009cb2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	699b      	ldr	r3, [r3, #24]
 8009cc0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009cc2:	69bb      	ldr	r3, [r7, #24]
 8009cc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d00b      	beq.n	8009ce4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009ccc:	6a3b      	ldr	r3, [r7, #32]
 8009cce:	f043 0301 	orr.w	r3, r3, #1
 8009cd2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009cdc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009cde:	2301      	movs	r3, #1
 8009ce0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009ce4:	69bb      	ldr	r3, [r7, #24]
 8009ce6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d00b      	beq.n	8009d06 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009cee:	6a3b      	ldr	r3, [r7, #32]
 8009cf0:	f043 0308 	orr.w	r3, r3, #8
 8009cf4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009cfe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009d00:	2301      	movs	r3, #1
 8009d02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009d06:	69bb      	ldr	r3, [r7, #24]
 8009d08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d00b      	beq.n	8009d28 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009d10:	6a3b      	ldr	r3, [r7, #32]
 8009d12:	f043 0302 	orr.w	r3, r3, #2
 8009d16:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009d20:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009d22:	2301      	movs	r3, #1
 8009d24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8009d28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d01c      	beq.n	8009d6a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009d30:	68f8      	ldr	r0, [r7, #12]
 8009d32:	f7ff fd7a 	bl	800982a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	6859      	ldr	r1, [r3, #4]
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	681a      	ldr	r2, [r3, #0]
 8009d40:	4b0d      	ldr	r3, [pc, #52]	@ (8009d78 <I2C_IsErrorOccurred+0x1bc>)
 8009d42:	400b      	ands	r3, r1
 8009d44:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009d4a:	6a3b      	ldr	r3, [r7, #32]
 8009d4c:	431a      	orrs	r2, r3
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	2220      	movs	r2, #32
 8009d56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	2200      	movs	r2, #0
 8009d66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8009d6a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	3728      	adds	r7, #40	@ 0x28
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}
 8009d76:	bf00      	nop
 8009d78:	fe00e800 	.word	0xfe00e800

08009d7c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009d7c:	b480      	push	{r7}
 8009d7e:	b087      	sub	sp, #28
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	60f8      	str	r0, [r7, #12]
 8009d84:	607b      	str	r3, [r7, #4]
 8009d86:	460b      	mov	r3, r1
 8009d88:	817b      	strh	r3, [r7, #10]
 8009d8a:	4613      	mov	r3, r2
 8009d8c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009d8e:	897b      	ldrh	r3, [r7, #10]
 8009d90:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009d94:	7a7b      	ldrb	r3, [r7, #9]
 8009d96:	041b      	lsls	r3, r3, #16
 8009d98:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009d9c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009da2:	6a3b      	ldr	r3, [r7, #32]
 8009da4:	4313      	orrs	r3, r2
 8009da6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009daa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	685a      	ldr	r2, [r3, #4]
 8009db2:	6a3b      	ldr	r3, [r7, #32]
 8009db4:	0d5b      	lsrs	r3, r3, #21
 8009db6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8009dba:	4b08      	ldr	r3, [pc, #32]	@ (8009ddc <I2C_TransferConfig+0x60>)
 8009dbc:	430b      	orrs	r3, r1
 8009dbe:	43db      	mvns	r3, r3
 8009dc0:	ea02 0103 	and.w	r1, r2, r3
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	697a      	ldr	r2, [r7, #20]
 8009dca:	430a      	orrs	r2, r1
 8009dcc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009dce:	bf00      	nop
 8009dd0:	371c      	adds	r7, #28
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd8:	4770      	bx	lr
 8009dda:	bf00      	nop
 8009ddc:	03ff63ff 	.word	0x03ff63ff

08009de0 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009de0:	b480      	push	{r7}
 8009de2:	b085      	sub	sp, #20
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
 8009de8:	460b      	mov	r3, r1
 8009dea:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8009dec:	2300      	movs	r3, #0
 8009dee:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009df4:	4a39      	ldr	r2, [pc, #228]	@ (8009edc <I2C_Enable_IRQ+0xfc>)
 8009df6:	4293      	cmp	r3, r2
 8009df8:	d032      	beq.n	8009e60 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8009dfe:	4a38      	ldr	r2, [pc, #224]	@ (8009ee0 <I2C_Enable_IRQ+0x100>)
 8009e00:	4293      	cmp	r3, r2
 8009e02:	d02d      	beq.n	8009e60 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8009e08:	4a36      	ldr	r2, [pc, #216]	@ (8009ee4 <I2C_Enable_IRQ+0x104>)
 8009e0a:	4293      	cmp	r3, r2
 8009e0c:	d028      	beq.n	8009e60 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009e0e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	da03      	bge.n	8009e1e <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8009e1c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009e1e:	887b      	ldrh	r3, [r7, #2]
 8009e20:	f003 0301 	and.w	r3, r3, #1
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d003      	beq.n	8009e30 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8009e2e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009e30:	887b      	ldrh	r3, [r7, #2]
 8009e32:	f003 0302 	and.w	r3, r3, #2
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d003      	beq.n	8009e42 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8009e40:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009e42:	887b      	ldrh	r3, [r7, #2]
 8009e44:	2b10      	cmp	r3, #16
 8009e46:	d103      	bne.n	8009e50 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8009e4e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009e50:	887b      	ldrh	r3, [r7, #2]
 8009e52:	2b20      	cmp	r3, #32
 8009e54:	d133      	bne.n	8009ebe <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	f043 0320 	orr.w	r3, r3, #32
 8009e5c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009e5e:	e02e      	b.n	8009ebe <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009e60:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	da03      	bge.n	8009e70 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8009e6e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009e70:	887b      	ldrh	r3, [r7, #2]
 8009e72:	f003 0301 	and.w	r3, r3, #1
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d003      	beq.n	8009e82 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8009e80:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009e82:	887b      	ldrh	r3, [r7, #2]
 8009e84:	f003 0302 	and.w	r3, r3, #2
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d003      	beq.n	8009e94 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8009e92:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009e94:	887b      	ldrh	r3, [r7, #2]
 8009e96:	2b10      	cmp	r3, #16
 8009e98:	d103      	bne.n	8009ea2 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8009ea0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009ea2:	887b      	ldrh	r3, [r7, #2]
 8009ea4:	2b20      	cmp	r3, #32
 8009ea6:	d103      	bne.n	8009eb0 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8009eae:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009eb0:	887b      	ldrh	r3, [r7, #2]
 8009eb2:	2b40      	cmp	r3, #64	@ 0x40
 8009eb4:	d103      	bne.n	8009ebe <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ebc:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	6819      	ldr	r1, [r3, #0]
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	68fa      	ldr	r2, [r7, #12]
 8009eca:	430a      	orrs	r2, r1
 8009ecc:	601a      	str	r2, [r3, #0]
}
 8009ece:	bf00      	nop
 8009ed0:	3714      	adds	r7, #20
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed8:	4770      	bx	lr
 8009eda:	bf00      	nop
 8009edc:	080088ed 	.word	0x080088ed
 8009ee0:	08008d11 	.word	0x08008d11
 8009ee4:	08008ac5 	.word	0x08008ac5

08009ee8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009ee8:	b480      	push	{r7}
 8009eea:	b085      	sub	sp, #20
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
 8009ef0:	460b      	mov	r3, r1
 8009ef2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009ef8:	887b      	ldrh	r3, [r7, #2]
 8009efa:	f003 0301 	and.w	r3, r3, #1
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d00f      	beq.n	8009f22 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8009f08:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009f10:	b2db      	uxtb	r3, r3
 8009f12:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009f16:	2b28      	cmp	r3, #40	@ 0x28
 8009f18:	d003      	beq.n	8009f22 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8009f20:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009f22:	887b      	ldrh	r3, [r7, #2]
 8009f24:	f003 0302 	and.w	r3, r3, #2
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d00f      	beq.n	8009f4c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8009f32:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009f3a:	b2db      	uxtb	r3, r3
 8009f3c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009f40:	2b28      	cmp	r3, #40	@ 0x28
 8009f42:	d003      	beq.n	8009f4c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8009f4a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009f4c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	da03      	bge.n	8009f5c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8009f5a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009f5c:	887b      	ldrh	r3, [r7, #2]
 8009f5e:	2b10      	cmp	r3, #16
 8009f60:	d103      	bne.n	8009f6a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8009f68:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009f6a:	887b      	ldrh	r3, [r7, #2]
 8009f6c:	2b20      	cmp	r3, #32
 8009f6e:	d103      	bne.n	8009f78 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	f043 0320 	orr.w	r3, r3, #32
 8009f76:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009f78:	887b      	ldrh	r3, [r7, #2]
 8009f7a:	2b40      	cmp	r3, #64	@ 0x40
 8009f7c:	d103      	bne.n	8009f86 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f84:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	6819      	ldr	r1, [r3, #0]
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	43da      	mvns	r2, r3
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	400a      	ands	r2, r1
 8009f96:	601a      	str	r2, [r3, #0]
}
 8009f98:	bf00      	nop
 8009f9a:	3714      	adds	r7, #20
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa2:	4770      	bx	lr

08009fa4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	b083      	sub	sp, #12
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
 8009fac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009fb4:	b2db      	uxtb	r3, r3
 8009fb6:	2b20      	cmp	r3, #32
 8009fb8:	d138      	bne.n	800a02c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009fc0:	2b01      	cmp	r3, #1
 8009fc2:	d101      	bne.n	8009fc8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009fc4:	2302      	movs	r3, #2
 8009fc6:	e032      	b.n	800a02e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2201      	movs	r2, #1
 8009fcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2224      	movs	r2, #36	@ 0x24
 8009fd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	681a      	ldr	r2, [r3, #0]
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	f022 0201 	bic.w	r2, r2, #1
 8009fe6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	681a      	ldr	r2, [r3, #0]
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009ff6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	6819      	ldr	r1, [r3, #0]
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	683a      	ldr	r2, [r7, #0]
 800a004:	430a      	orrs	r2, r1
 800a006:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	681a      	ldr	r2, [r3, #0]
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	f042 0201 	orr.w	r2, r2, #1
 800a016:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2220      	movs	r2, #32
 800a01c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2200      	movs	r2, #0
 800a024:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a028:	2300      	movs	r3, #0
 800a02a:	e000      	b.n	800a02e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a02c:	2302      	movs	r3, #2
  }
}
 800a02e:	4618      	mov	r0, r3
 800a030:	370c      	adds	r7, #12
 800a032:	46bd      	mov	sp, r7
 800a034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a038:	4770      	bx	lr

0800a03a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a03a:	b480      	push	{r7}
 800a03c:	b085      	sub	sp, #20
 800a03e:	af00      	add	r7, sp, #0
 800a040:	6078      	str	r0, [r7, #4]
 800a042:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a04a:	b2db      	uxtb	r3, r3
 800a04c:	2b20      	cmp	r3, #32
 800a04e:	d139      	bne.n	800a0c4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a056:	2b01      	cmp	r3, #1
 800a058:	d101      	bne.n	800a05e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a05a:	2302      	movs	r3, #2
 800a05c:	e033      	b.n	800a0c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2201      	movs	r2, #1
 800a062:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2224      	movs	r2, #36	@ 0x24
 800a06a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	681a      	ldr	r2, [r3, #0]
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	f022 0201 	bic.w	r2, r2, #1
 800a07c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800a08c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	021b      	lsls	r3, r3, #8
 800a092:	68fa      	ldr	r2, [r7, #12]
 800a094:	4313      	orrs	r3, r2
 800a096:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	68fa      	ldr	r2, [r7, #12]
 800a09e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	681a      	ldr	r2, [r3, #0]
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f042 0201 	orr.w	r2, r2, #1
 800a0ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2220      	movs	r2, #32
 800a0b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	e000      	b.n	800a0c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a0c4:	2302      	movs	r3, #2
  }
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	3714      	adds	r7, #20
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d0:	4770      	bx	lr

0800a0d2 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800a0d2:	b580      	push	{r7, lr}
 800a0d4:	b084      	sub	sp, #16
 800a0d6:	af00      	add	r7, sp, #0
 800a0d8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if(hiwdg == NULL)
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d101      	bne.n	800a0e4 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	e038      	b.n	800a156 <HAL_IWDG_Init+0x84>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 800a0ec:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	f245 5255 	movw	r2, #21845	@ 0x5555
 800a0f6:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	687a      	ldr	r2, [r7, #4]
 800a0fe:	6852      	ldr	r2, [r2, #4]
 800a100:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	687a      	ldr	r2, [r7, #4]
 800a108:	6892      	ldr	r2, [r2, #8]
 800a10a:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800a10c:	f7fb f992 	bl	8005434 <HAL_GetTick>
 800a110:	60f8      	str	r0, [r7, #12]

   /* Wait for register to be updated */
  while(hiwdg->Instance->SR != RESET)
 800a112:	e008      	b.n	800a126 <HAL_IWDG_Init+0x54>
  {
    if((HAL_GetTick() - tickstart ) > HAL_IWDG_DEFAULT_TIMEOUT)
 800a114:	f7fb f98e 	bl	8005434 <HAL_GetTick>
 800a118:	4602      	mov	r2, r0
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	1ad3      	subs	r3, r2, r3
 800a11e:	2b30      	cmp	r3, #48	@ 0x30
 800a120:	d901      	bls.n	800a126 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 800a122:	2303      	movs	r3, #3
 800a124:	e017      	b.n	800a156 <HAL_IWDG_Init+0x84>
  while(hiwdg->Instance->SR != RESET)
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	68db      	ldr	r3, [r3, #12]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d1f1      	bne.n	800a114 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if(hiwdg->Instance->WINR != hiwdg->Init.Window)
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	691a      	ldr	r2, [r3, #16]
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	68db      	ldr	r3, [r3, #12]
 800a13a:	429a      	cmp	r2, r3
 800a13c:	d005      	beq.n	800a14a <HAL_IWDG_Init+0x78>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	687a      	ldr	r2, [r7, #4]
 800a144:	68d2      	ldr	r2, [r2, #12]
 800a146:	611a      	str	r2, [r3, #16]
 800a148:	e004      	b.n	800a154 <HAL_IWDG_Init+0x82>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 800a152:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a154:	2300      	movs	r3, #0
}
 800a156:	4618      	mov	r0, r3
 800a158:	3710      	adds	r7, #16
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}

0800a15e <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800a15e:	b480      	push	{r7}
 800a160:	b083      	sub	sp, #12
 800a162:	af00      	add	r7, sp, #0
 800a164:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 800a16e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a170:	2300      	movs	r3, #0
}
 800a172:	4618      	mov	r0, r3
 800a174:	370c      	adds	r7, #12
 800a176:	46bd      	mov	sp, r7
 800a178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17c:	4770      	bx	lr
	...

0800a180 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b082      	sub	sp, #8
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
 800a188:	460b      	mov	r3, r1
 800a18a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d10c      	bne.n	800a1ac <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 800a192:	4b13      	ldr	r3, [pc, #76]	@ (800a1e0 <HAL_PWR_EnterSLEEPMode+0x60>)
 800a194:	695b      	ldr	r3, [r3, #20]
 800a196:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a19a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a19e:	d10e      	bne.n	800a1be <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 800a1a0:	f000 f896 	bl	800a2d0 <HAL_PWREx_DisableLowPowerRunMode>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d009      	beq.n	800a1be <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 800a1aa:	e016      	b.n	800a1da <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 800a1ac:	4b0c      	ldr	r3, [pc, #48]	@ (800a1e0 <HAL_PWR_EnterSLEEPMode+0x60>)
 800a1ae:	695b      	ldr	r3, [r3, #20]
 800a1b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a1b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a1b8:	d001      	beq.n	800a1be <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 800a1ba:	f000 f879 	bl	800a2b0 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800a1be:	4b09      	ldr	r3, [pc, #36]	@ (800a1e4 <HAL_PWR_EnterSLEEPMode+0x64>)
 800a1c0:	691b      	ldr	r3, [r3, #16]
 800a1c2:	4a08      	ldr	r2, [pc, #32]	@ (800a1e4 <HAL_PWR_EnterSLEEPMode+0x64>)
 800a1c4:	f023 0304 	bic.w	r3, r3, #4
 800a1c8:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800a1ca:	78fb      	ldrb	r3, [r7, #3]
 800a1cc:	2b01      	cmp	r3, #1
 800a1ce:	d101      	bne.n	800a1d4 <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800a1d0:	bf30      	wfi
 800a1d2:	e002      	b.n	800a1da <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800a1d4:	bf40      	sev
    __WFE();
 800a1d6:	bf20      	wfe
    __WFE();
 800a1d8:	bf20      	wfe
  }

}
 800a1da:	3708      	adds	r7, #8
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bd80      	pop	{r7, pc}
 800a1e0:	40007000 	.word	0x40007000
 800a1e4:	e000ed00 	.word	0xe000ed00

0800a1e8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800a1ec:	4b04      	ldr	r3, [pc, #16]	@ (800a200 <HAL_PWREx_GetVoltageRange+0x18>)
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fc:	4770      	bx	lr
 800a1fe:	bf00      	nop
 800a200:	40007000 	.word	0x40007000

0800a204 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a204:	b480      	push	{r7}
 800a206:	b085      	sub	sp, #20
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a212:	d130      	bne.n	800a276 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800a214:	4b23      	ldr	r3, [pc, #140]	@ (800a2a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a21c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a220:	d038      	beq.n	800a294 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a222:	4b20      	ldr	r3, [pc, #128]	@ (800a2a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800a22a:	4a1e      	ldr	r2, [pc, #120]	@ (800a2a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a22c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800a230:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a232:	4b1d      	ldr	r3, [pc, #116]	@ (800a2a8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	2232      	movs	r2, #50	@ 0x32
 800a238:	fb02 f303 	mul.w	r3, r2, r3
 800a23c:	4a1b      	ldr	r2, [pc, #108]	@ (800a2ac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800a23e:	fba2 2303 	umull	r2, r3, r2, r3
 800a242:	0c9b      	lsrs	r3, r3, #18
 800a244:	3301      	adds	r3, #1
 800a246:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a248:	e002      	b.n	800a250 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	3b01      	subs	r3, #1
 800a24e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a250:	4b14      	ldr	r3, [pc, #80]	@ (800a2a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a252:	695b      	ldr	r3, [r3, #20]
 800a254:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a258:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a25c:	d102      	bne.n	800a264 <HAL_PWREx_ControlVoltageScaling+0x60>
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d1f2      	bne.n	800a24a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a264:	4b0f      	ldr	r3, [pc, #60]	@ (800a2a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a266:	695b      	ldr	r3, [r3, #20]
 800a268:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a26c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a270:	d110      	bne.n	800a294 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800a272:	2303      	movs	r3, #3
 800a274:	e00f      	b.n	800a296 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800a276:	4b0b      	ldr	r3, [pc, #44]	@ (800a2a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a27e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a282:	d007      	beq.n	800a294 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800a284:	4b07      	ldr	r3, [pc, #28]	@ (800a2a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800a28c:	4a05      	ldr	r2, [pc, #20]	@ (800a2a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a28e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800a292:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800a294:	2300      	movs	r3, #0
}
 800a296:	4618      	mov	r0, r3
 800a298:	3714      	adds	r7, #20
 800a29a:	46bd      	mov	sp, r7
 800a29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a0:	4770      	bx	lr
 800a2a2:	bf00      	nop
 800a2a4:	40007000 	.word	0x40007000
 800a2a8:	20000398 	.word	0x20000398
 800a2ac:	431bde83 	.word	0x431bde83

0800a2b0 <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 800a2b0:	b480      	push	{r7}
 800a2b2:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 800a2b4:	4b05      	ldr	r3, [pc, #20]	@ (800a2cc <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	4a04      	ldr	r2, [pc, #16]	@ (800a2cc <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 800a2ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a2be:	6013      	str	r3, [r2, #0]
}
 800a2c0:	bf00      	nop
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c8:	4770      	bx	lr
 800a2ca:	bf00      	nop
 800a2cc:	40007000 	.word	0x40007000

0800a2d0 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 800a2d0:	b480      	push	{r7}
 800a2d2:	b083      	sub	sp, #12
 800a2d4:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800a2d6:	4b17      	ldr	r3, [pc, #92]	@ (800a334 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	4a16      	ldr	r2, [pc, #88]	@ (800a334 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800a2dc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a2e0:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a2e2:	4b15      	ldr	r3, [pc, #84]	@ (800a338 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	2232      	movs	r2, #50	@ 0x32
 800a2e8:	fb02 f303 	mul.w	r3, r2, r3
 800a2ec:	4a13      	ldr	r2, [pc, #76]	@ (800a33c <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 800a2ee:	fba2 2303 	umull	r2, r3, r2, r3
 800a2f2:	0c9b      	lsrs	r3, r3, #18
 800a2f4:	3301      	adds	r3, #1
 800a2f6:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800a2f8:	e002      	b.n	800a300 <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	3b01      	subs	r3, #1
 800a2fe:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800a300:	4b0c      	ldr	r3, [pc, #48]	@ (800a334 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800a302:	695b      	ldr	r3, [r3, #20]
 800a304:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a308:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a30c:	d102      	bne.n	800a314 <HAL_PWREx_DisableLowPowerRunMode+0x44>
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d1f2      	bne.n	800a2fa <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 800a314:	4b07      	ldr	r3, [pc, #28]	@ (800a334 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800a316:	695b      	ldr	r3, [r3, #20]
 800a318:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a31c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a320:	d101      	bne.n	800a326 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 800a322:	2303      	movs	r3, #3
 800a324:	e000      	b.n	800a328 <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 800a326:	2300      	movs	r3, #0
}
 800a328:	4618      	mov	r0, r3
 800a32a:	370c      	adds	r7, #12
 800a32c:	46bd      	mov	sp, r7
 800a32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a332:	4770      	bx	lr
 800a334:	40007000 	.word	0x40007000
 800a338:	20000398 	.word	0x20000398
 800a33c:	431bde83 	.word	0x431bde83

0800a340 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b088      	sub	sp, #32
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d102      	bne.n	800a354 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a34e:	2301      	movs	r3, #1
 800a350:	f000 bc08 	b.w	800ab64 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a354:	4b96      	ldr	r3, [pc, #600]	@ (800a5b0 <HAL_RCC_OscConfig+0x270>)
 800a356:	689b      	ldr	r3, [r3, #8]
 800a358:	f003 030c 	and.w	r3, r3, #12
 800a35c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a35e:	4b94      	ldr	r3, [pc, #592]	@ (800a5b0 <HAL_RCC_OscConfig+0x270>)
 800a360:	68db      	ldr	r3, [r3, #12]
 800a362:	f003 0303 	and.w	r3, r3, #3
 800a366:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f003 0310 	and.w	r3, r3, #16
 800a370:	2b00      	cmp	r3, #0
 800a372:	f000 80e4 	beq.w	800a53e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800a376:	69bb      	ldr	r3, [r7, #24]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d007      	beq.n	800a38c <HAL_RCC_OscConfig+0x4c>
 800a37c:	69bb      	ldr	r3, [r7, #24]
 800a37e:	2b0c      	cmp	r3, #12
 800a380:	f040 808b 	bne.w	800a49a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	2b01      	cmp	r3, #1
 800a388:	f040 8087 	bne.w	800a49a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a38c:	4b88      	ldr	r3, [pc, #544]	@ (800a5b0 <HAL_RCC_OscConfig+0x270>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	f003 0302 	and.w	r3, r3, #2
 800a394:	2b00      	cmp	r3, #0
 800a396:	d005      	beq.n	800a3a4 <HAL_RCC_OscConfig+0x64>
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	699b      	ldr	r3, [r3, #24]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d101      	bne.n	800a3a4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800a3a0:	2301      	movs	r3, #1
 800a3a2:	e3df      	b.n	800ab64 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	6a1a      	ldr	r2, [r3, #32]
 800a3a8:	4b81      	ldr	r3, [pc, #516]	@ (800a5b0 <HAL_RCC_OscConfig+0x270>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f003 0308 	and.w	r3, r3, #8
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d004      	beq.n	800a3be <HAL_RCC_OscConfig+0x7e>
 800a3b4:	4b7e      	ldr	r3, [pc, #504]	@ (800a5b0 <HAL_RCC_OscConfig+0x270>)
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a3bc:	e005      	b.n	800a3ca <HAL_RCC_OscConfig+0x8a>
 800a3be:	4b7c      	ldr	r3, [pc, #496]	@ (800a5b0 <HAL_RCC_OscConfig+0x270>)
 800a3c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a3c4:	091b      	lsrs	r3, r3, #4
 800a3c6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a3ca:	4293      	cmp	r3, r2
 800a3cc:	d223      	bcs.n	800a416 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6a1b      	ldr	r3, [r3, #32]
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	f000 fd92 	bl	800aefc <RCC_SetFlashLatencyFromMSIRange>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d001      	beq.n	800a3e2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800a3de:	2301      	movs	r3, #1
 800a3e0:	e3c0      	b.n	800ab64 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a3e2:	4b73      	ldr	r3, [pc, #460]	@ (800a5b0 <HAL_RCC_OscConfig+0x270>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	4a72      	ldr	r2, [pc, #456]	@ (800a5b0 <HAL_RCC_OscConfig+0x270>)
 800a3e8:	f043 0308 	orr.w	r3, r3, #8
 800a3ec:	6013      	str	r3, [r2, #0]
 800a3ee:	4b70      	ldr	r3, [pc, #448]	@ (800a5b0 <HAL_RCC_OscConfig+0x270>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6a1b      	ldr	r3, [r3, #32]
 800a3fa:	496d      	ldr	r1, [pc, #436]	@ (800a5b0 <HAL_RCC_OscConfig+0x270>)
 800a3fc:	4313      	orrs	r3, r2
 800a3fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a400:	4b6b      	ldr	r3, [pc, #428]	@ (800a5b0 <HAL_RCC_OscConfig+0x270>)
 800a402:	685b      	ldr	r3, [r3, #4]
 800a404:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	69db      	ldr	r3, [r3, #28]
 800a40c:	021b      	lsls	r3, r3, #8
 800a40e:	4968      	ldr	r1, [pc, #416]	@ (800a5b0 <HAL_RCC_OscConfig+0x270>)
 800a410:	4313      	orrs	r3, r2
 800a412:	604b      	str	r3, [r1, #4]
 800a414:	e025      	b.n	800a462 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a416:	4b66      	ldr	r3, [pc, #408]	@ (800a5b0 <HAL_RCC_OscConfig+0x270>)
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	4a65      	ldr	r2, [pc, #404]	@ (800a5b0 <HAL_RCC_OscConfig+0x270>)
 800a41c:	f043 0308 	orr.w	r3, r3, #8
 800a420:	6013      	str	r3, [r2, #0]
 800a422:	4b63      	ldr	r3, [pc, #396]	@ (800a5b0 <HAL_RCC_OscConfig+0x270>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6a1b      	ldr	r3, [r3, #32]
 800a42e:	4960      	ldr	r1, [pc, #384]	@ (800a5b0 <HAL_RCC_OscConfig+0x270>)
 800a430:	4313      	orrs	r3, r2
 800a432:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a434:	4b5e      	ldr	r3, [pc, #376]	@ (800a5b0 <HAL_RCC_OscConfig+0x270>)
 800a436:	685b      	ldr	r3, [r3, #4]
 800a438:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	69db      	ldr	r3, [r3, #28]
 800a440:	021b      	lsls	r3, r3, #8
 800a442:	495b      	ldr	r1, [pc, #364]	@ (800a5b0 <HAL_RCC_OscConfig+0x270>)
 800a444:	4313      	orrs	r3, r2
 800a446:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a448:	69bb      	ldr	r3, [r7, #24]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d109      	bne.n	800a462 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6a1b      	ldr	r3, [r3, #32]
 800a452:	4618      	mov	r0, r3
 800a454:	f000 fd52 	bl	800aefc <RCC_SetFlashLatencyFromMSIRange>
 800a458:	4603      	mov	r3, r0
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d001      	beq.n	800a462 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800a45e:	2301      	movs	r3, #1
 800a460:	e380      	b.n	800ab64 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a462:	f000 fc87 	bl	800ad74 <HAL_RCC_GetSysClockFreq>
 800a466:	4602      	mov	r2, r0
 800a468:	4b51      	ldr	r3, [pc, #324]	@ (800a5b0 <HAL_RCC_OscConfig+0x270>)
 800a46a:	689b      	ldr	r3, [r3, #8]
 800a46c:	091b      	lsrs	r3, r3, #4
 800a46e:	f003 030f 	and.w	r3, r3, #15
 800a472:	4950      	ldr	r1, [pc, #320]	@ (800a5b4 <HAL_RCC_OscConfig+0x274>)
 800a474:	5ccb      	ldrb	r3, [r1, r3]
 800a476:	f003 031f 	and.w	r3, r3, #31
 800a47a:	fa22 f303 	lsr.w	r3, r2, r3
 800a47e:	4a4e      	ldr	r2, [pc, #312]	@ (800a5b8 <HAL_RCC_OscConfig+0x278>)
 800a480:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800a482:	4b4e      	ldr	r3, [pc, #312]	@ (800a5bc <HAL_RCC_OscConfig+0x27c>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	4618      	mov	r0, r3
 800a488:	f7fa ff84 	bl	8005394 <HAL_InitTick>
 800a48c:	4603      	mov	r3, r0
 800a48e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800a490:	7bfb      	ldrb	r3, [r7, #15]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d052      	beq.n	800a53c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800a496:	7bfb      	ldrb	r3, [r7, #15]
 800a498:	e364      	b.n	800ab64 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	699b      	ldr	r3, [r3, #24]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d032      	beq.n	800a508 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800a4a2:	4b43      	ldr	r3, [pc, #268]	@ (800a5b0 <HAL_RCC_OscConfig+0x270>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	4a42      	ldr	r2, [pc, #264]	@ (800a5b0 <HAL_RCC_OscConfig+0x270>)
 800a4a8:	f043 0301 	orr.w	r3, r3, #1
 800a4ac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a4ae:	f7fa ffc1 	bl	8005434 <HAL_GetTick>
 800a4b2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a4b4:	e008      	b.n	800a4c8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a4b6:	f7fa ffbd 	bl	8005434 <HAL_GetTick>
 800a4ba:	4602      	mov	r2, r0
 800a4bc:	693b      	ldr	r3, [r7, #16]
 800a4be:	1ad3      	subs	r3, r2, r3
 800a4c0:	2b02      	cmp	r3, #2
 800a4c2:	d901      	bls.n	800a4c8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800a4c4:	2303      	movs	r3, #3
 800a4c6:	e34d      	b.n	800ab64 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a4c8:	4b39      	ldr	r3, [pc, #228]	@ (800a5b0 <HAL_RCC_OscConfig+0x270>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	f003 0302 	and.w	r3, r3, #2
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d0f0      	beq.n	800a4b6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a4d4:	4b36      	ldr	r3, [pc, #216]	@ (800a5b0 <HAL_RCC_OscConfig+0x270>)
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	4a35      	ldr	r2, [pc, #212]	@ (800a5b0 <HAL_RCC_OscConfig+0x270>)
 800a4da:	f043 0308 	orr.w	r3, r3, #8
 800a4de:	6013      	str	r3, [r2, #0]
 800a4e0:	4b33      	ldr	r3, [pc, #204]	@ (800a5b0 <HAL_RCC_OscConfig+0x270>)
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	6a1b      	ldr	r3, [r3, #32]
 800a4ec:	4930      	ldr	r1, [pc, #192]	@ (800a5b0 <HAL_RCC_OscConfig+0x270>)
 800a4ee:	4313      	orrs	r3, r2
 800a4f0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a4f2:	4b2f      	ldr	r3, [pc, #188]	@ (800a5b0 <HAL_RCC_OscConfig+0x270>)
 800a4f4:	685b      	ldr	r3, [r3, #4]
 800a4f6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	69db      	ldr	r3, [r3, #28]
 800a4fe:	021b      	lsls	r3, r3, #8
 800a500:	492b      	ldr	r1, [pc, #172]	@ (800a5b0 <HAL_RCC_OscConfig+0x270>)
 800a502:	4313      	orrs	r3, r2
 800a504:	604b      	str	r3, [r1, #4]
 800a506:	e01a      	b.n	800a53e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800a508:	4b29      	ldr	r3, [pc, #164]	@ (800a5b0 <HAL_RCC_OscConfig+0x270>)
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	4a28      	ldr	r2, [pc, #160]	@ (800a5b0 <HAL_RCC_OscConfig+0x270>)
 800a50e:	f023 0301 	bic.w	r3, r3, #1
 800a512:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a514:	f7fa ff8e 	bl	8005434 <HAL_GetTick>
 800a518:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800a51a:	e008      	b.n	800a52e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a51c:	f7fa ff8a 	bl	8005434 <HAL_GetTick>
 800a520:	4602      	mov	r2, r0
 800a522:	693b      	ldr	r3, [r7, #16]
 800a524:	1ad3      	subs	r3, r2, r3
 800a526:	2b02      	cmp	r3, #2
 800a528:	d901      	bls.n	800a52e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800a52a:	2303      	movs	r3, #3
 800a52c:	e31a      	b.n	800ab64 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800a52e:	4b20      	ldr	r3, [pc, #128]	@ (800a5b0 <HAL_RCC_OscConfig+0x270>)
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	f003 0302 	and.w	r3, r3, #2
 800a536:	2b00      	cmp	r3, #0
 800a538:	d1f0      	bne.n	800a51c <HAL_RCC_OscConfig+0x1dc>
 800a53a:	e000      	b.n	800a53e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a53c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f003 0301 	and.w	r3, r3, #1
 800a546:	2b00      	cmp	r3, #0
 800a548:	d073      	beq.n	800a632 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800a54a:	69bb      	ldr	r3, [r7, #24]
 800a54c:	2b08      	cmp	r3, #8
 800a54e:	d005      	beq.n	800a55c <HAL_RCC_OscConfig+0x21c>
 800a550:	69bb      	ldr	r3, [r7, #24]
 800a552:	2b0c      	cmp	r3, #12
 800a554:	d10e      	bne.n	800a574 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800a556:	697b      	ldr	r3, [r7, #20]
 800a558:	2b03      	cmp	r3, #3
 800a55a:	d10b      	bne.n	800a574 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a55c:	4b14      	ldr	r3, [pc, #80]	@ (800a5b0 <HAL_RCC_OscConfig+0x270>)
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a564:	2b00      	cmp	r3, #0
 800a566:	d063      	beq.n	800a630 <HAL_RCC_OscConfig+0x2f0>
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	685b      	ldr	r3, [r3, #4]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d15f      	bne.n	800a630 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800a570:	2301      	movs	r3, #1
 800a572:	e2f7      	b.n	800ab64 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	685b      	ldr	r3, [r3, #4]
 800a578:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a57c:	d106      	bne.n	800a58c <HAL_RCC_OscConfig+0x24c>
 800a57e:	4b0c      	ldr	r3, [pc, #48]	@ (800a5b0 <HAL_RCC_OscConfig+0x270>)
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	4a0b      	ldr	r2, [pc, #44]	@ (800a5b0 <HAL_RCC_OscConfig+0x270>)
 800a584:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a588:	6013      	str	r3, [r2, #0]
 800a58a:	e025      	b.n	800a5d8 <HAL_RCC_OscConfig+0x298>
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	685b      	ldr	r3, [r3, #4]
 800a590:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a594:	d114      	bne.n	800a5c0 <HAL_RCC_OscConfig+0x280>
 800a596:	4b06      	ldr	r3, [pc, #24]	@ (800a5b0 <HAL_RCC_OscConfig+0x270>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	4a05      	ldr	r2, [pc, #20]	@ (800a5b0 <HAL_RCC_OscConfig+0x270>)
 800a59c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a5a0:	6013      	str	r3, [r2, #0]
 800a5a2:	4b03      	ldr	r3, [pc, #12]	@ (800a5b0 <HAL_RCC_OscConfig+0x270>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	4a02      	ldr	r2, [pc, #8]	@ (800a5b0 <HAL_RCC_OscConfig+0x270>)
 800a5a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a5ac:	6013      	str	r3, [r2, #0]
 800a5ae:	e013      	b.n	800a5d8 <HAL_RCC_OscConfig+0x298>
 800a5b0:	40021000 	.word	0x40021000
 800a5b4:	0800d76c 	.word	0x0800d76c
 800a5b8:	20000398 	.word	0x20000398
 800a5bc:	2000039c 	.word	0x2000039c
 800a5c0:	4ba0      	ldr	r3, [pc, #640]	@ (800a844 <HAL_RCC_OscConfig+0x504>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	4a9f      	ldr	r2, [pc, #636]	@ (800a844 <HAL_RCC_OscConfig+0x504>)
 800a5c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a5ca:	6013      	str	r3, [r2, #0]
 800a5cc:	4b9d      	ldr	r3, [pc, #628]	@ (800a844 <HAL_RCC_OscConfig+0x504>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	4a9c      	ldr	r2, [pc, #624]	@ (800a844 <HAL_RCC_OscConfig+0x504>)
 800a5d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a5d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	685b      	ldr	r3, [r3, #4]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d013      	beq.n	800a608 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5e0:	f7fa ff28 	bl	8005434 <HAL_GetTick>
 800a5e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a5e6:	e008      	b.n	800a5fa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a5e8:	f7fa ff24 	bl	8005434 <HAL_GetTick>
 800a5ec:	4602      	mov	r2, r0
 800a5ee:	693b      	ldr	r3, [r7, #16]
 800a5f0:	1ad3      	subs	r3, r2, r3
 800a5f2:	2b64      	cmp	r3, #100	@ 0x64
 800a5f4:	d901      	bls.n	800a5fa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800a5f6:	2303      	movs	r3, #3
 800a5f8:	e2b4      	b.n	800ab64 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a5fa:	4b92      	ldr	r3, [pc, #584]	@ (800a844 <HAL_RCC_OscConfig+0x504>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a602:	2b00      	cmp	r3, #0
 800a604:	d0f0      	beq.n	800a5e8 <HAL_RCC_OscConfig+0x2a8>
 800a606:	e014      	b.n	800a632 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a608:	f7fa ff14 	bl	8005434 <HAL_GetTick>
 800a60c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a60e:	e008      	b.n	800a622 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a610:	f7fa ff10 	bl	8005434 <HAL_GetTick>
 800a614:	4602      	mov	r2, r0
 800a616:	693b      	ldr	r3, [r7, #16]
 800a618:	1ad3      	subs	r3, r2, r3
 800a61a:	2b64      	cmp	r3, #100	@ 0x64
 800a61c:	d901      	bls.n	800a622 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800a61e:	2303      	movs	r3, #3
 800a620:	e2a0      	b.n	800ab64 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a622:	4b88      	ldr	r3, [pc, #544]	@ (800a844 <HAL_RCC_OscConfig+0x504>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d1f0      	bne.n	800a610 <HAL_RCC_OscConfig+0x2d0>
 800a62e:	e000      	b.n	800a632 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a630:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f003 0302 	and.w	r3, r3, #2
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d060      	beq.n	800a700 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800a63e:	69bb      	ldr	r3, [r7, #24]
 800a640:	2b04      	cmp	r3, #4
 800a642:	d005      	beq.n	800a650 <HAL_RCC_OscConfig+0x310>
 800a644:	69bb      	ldr	r3, [r7, #24]
 800a646:	2b0c      	cmp	r3, #12
 800a648:	d119      	bne.n	800a67e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800a64a:	697b      	ldr	r3, [r7, #20]
 800a64c:	2b02      	cmp	r3, #2
 800a64e:	d116      	bne.n	800a67e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a650:	4b7c      	ldr	r3, [pc, #496]	@ (800a844 <HAL_RCC_OscConfig+0x504>)
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d005      	beq.n	800a668 <HAL_RCC_OscConfig+0x328>
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	68db      	ldr	r3, [r3, #12]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d101      	bne.n	800a668 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800a664:	2301      	movs	r3, #1
 800a666:	e27d      	b.n	800ab64 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a668:	4b76      	ldr	r3, [pc, #472]	@ (800a844 <HAL_RCC_OscConfig+0x504>)
 800a66a:	685b      	ldr	r3, [r3, #4]
 800a66c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	691b      	ldr	r3, [r3, #16]
 800a674:	061b      	lsls	r3, r3, #24
 800a676:	4973      	ldr	r1, [pc, #460]	@ (800a844 <HAL_RCC_OscConfig+0x504>)
 800a678:	4313      	orrs	r3, r2
 800a67a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a67c:	e040      	b.n	800a700 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	68db      	ldr	r3, [r3, #12]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d023      	beq.n	800a6ce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a686:	4b6f      	ldr	r3, [pc, #444]	@ (800a844 <HAL_RCC_OscConfig+0x504>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	4a6e      	ldr	r2, [pc, #440]	@ (800a844 <HAL_RCC_OscConfig+0x504>)
 800a68c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a690:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a692:	f7fa fecf 	bl	8005434 <HAL_GetTick>
 800a696:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a698:	e008      	b.n	800a6ac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a69a:	f7fa fecb 	bl	8005434 <HAL_GetTick>
 800a69e:	4602      	mov	r2, r0
 800a6a0:	693b      	ldr	r3, [r7, #16]
 800a6a2:	1ad3      	subs	r3, r2, r3
 800a6a4:	2b02      	cmp	r3, #2
 800a6a6:	d901      	bls.n	800a6ac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800a6a8:	2303      	movs	r3, #3
 800a6aa:	e25b      	b.n	800ab64 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a6ac:	4b65      	ldr	r3, [pc, #404]	@ (800a844 <HAL_RCC_OscConfig+0x504>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d0f0      	beq.n	800a69a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a6b8:	4b62      	ldr	r3, [pc, #392]	@ (800a844 <HAL_RCC_OscConfig+0x504>)
 800a6ba:	685b      	ldr	r3, [r3, #4]
 800a6bc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	691b      	ldr	r3, [r3, #16]
 800a6c4:	061b      	lsls	r3, r3, #24
 800a6c6:	495f      	ldr	r1, [pc, #380]	@ (800a844 <HAL_RCC_OscConfig+0x504>)
 800a6c8:	4313      	orrs	r3, r2
 800a6ca:	604b      	str	r3, [r1, #4]
 800a6cc:	e018      	b.n	800a700 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a6ce:	4b5d      	ldr	r3, [pc, #372]	@ (800a844 <HAL_RCC_OscConfig+0x504>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	4a5c      	ldr	r2, [pc, #368]	@ (800a844 <HAL_RCC_OscConfig+0x504>)
 800a6d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a6d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6da:	f7fa feab 	bl	8005434 <HAL_GetTick>
 800a6de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a6e0:	e008      	b.n	800a6f4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a6e2:	f7fa fea7 	bl	8005434 <HAL_GetTick>
 800a6e6:	4602      	mov	r2, r0
 800a6e8:	693b      	ldr	r3, [r7, #16]
 800a6ea:	1ad3      	subs	r3, r2, r3
 800a6ec:	2b02      	cmp	r3, #2
 800a6ee:	d901      	bls.n	800a6f4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800a6f0:	2303      	movs	r3, #3
 800a6f2:	e237      	b.n	800ab64 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a6f4:	4b53      	ldr	r3, [pc, #332]	@ (800a844 <HAL_RCC_OscConfig+0x504>)
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d1f0      	bne.n	800a6e2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	f003 0308 	and.w	r3, r3, #8
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d03c      	beq.n	800a786 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	695b      	ldr	r3, [r3, #20]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d01c      	beq.n	800a74e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a714:	4b4b      	ldr	r3, [pc, #300]	@ (800a844 <HAL_RCC_OscConfig+0x504>)
 800a716:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a71a:	4a4a      	ldr	r2, [pc, #296]	@ (800a844 <HAL_RCC_OscConfig+0x504>)
 800a71c:	f043 0301 	orr.w	r3, r3, #1
 800a720:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a724:	f7fa fe86 	bl	8005434 <HAL_GetTick>
 800a728:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a72a:	e008      	b.n	800a73e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a72c:	f7fa fe82 	bl	8005434 <HAL_GetTick>
 800a730:	4602      	mov	r2, r0
 800a732:	693b      	ldr	r3, [r7, #16]
 800a734:	1ad3      	subs	r3, r2, r3
 800a736:	2b02      	cmp	r3, #2
 800a738:	d901      	bls.n	800a73e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800a73a:	2303      	movs	r3, #3
 800a73c:	e212      	b.n	800ab64 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a73e:	4b41      	ldr	r3, [pc, #260]	@ (800a844 <HAL_RCC_OscConfig+0x504>)
 800a740:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a744:	f003 0302 	and.w	r3, r3, #2
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d0ef      	beq.n	800a72c <HAL_RCC_OscConfig+0x3ec>
 800a74c:	e01b      	b.n	800a786 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a74e:	4b3d      	ldr	r3, [pc, #244]	@ (800a844 <HAL_RCC_OscConfig+0x504>)
 800a750:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a754:	4a3b      	ldr	r2, [pc, #236]	@ (800a844 <HAL_RCC_OscConfig+0x504>)
 800a756:	f023 0301 	bic.w	r3, r3, #1
 800a75a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a75e:	f7fa fe69 	bl	8005434 <HAL_GetTick>
 800a762:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a764:	e008      	b.n	800a778 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a766:	f7fa fe65 	bl	8005434 <HAL_GetTick>
 800a76a:	4602      	mov	r2, r0
 800a76c:	693b      	ldr	r3, [r7, #16]
 800a76e:	1ad3      	subs	r3, r2, r3
 800a770:	2b02      	cmp	r3, #2
 800a772:	d901      	bls.n	800a778 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800a774:	2303      	movs	r3, #3
 800a776:	e1f5      	b.n	800ab64 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a778:	4b32      	ldr	r3, [pc, #200]	@ (800a844 <HAL_RCC_OscConfig+0x504>)
 800a77a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a77e:	f003 0302 	and.w	r3, r3, #2
 800a782:	2b00      	cmp	r3, #0
 800a784:	d1ef      	bne.n	800a766 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	f003 0304 	and.w	r3, r3, #4
 800a78e:	2b00      	cmp	r3, #0
 800a790:	f000 80a6 	beq.w	800a8e0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a794:	2300      	movs	r3, #0
 800a796:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800a798:	4b2a      	ldr	r3, [pc, #168]	@ (800a844 <HAL_RCC_OscConfig+0x504>)
 800a79a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a79c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d10d      	bne.n	800a7c0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a7a4:	4b27      	ldr	r3, [pc, #156]	@ (800a844 <HAL_RCC_OscConfig+0x504>)
 800a7a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a7a8:	4a26      	ldr	r2, [pc, #152]	@ (800a844 <HAL_RCC_OscConfig+0x504>)
 800a7aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a7ae:	6593      	str	r3, [r2, #88]	@ 0x58
 800a7b0:	4b24      	ldr	r3, [pc, #144]	@ (800a844 <HAL_RCC_OscConfig+0x504>)
 800a7b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a7b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a7b8:	60bb      	str	r3, [r7, #8]
 800a7ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a7bc:	2301      	movs	r3, #1
 800a7be:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a7c0:	4b21      	ldr	r3, [pc, #132]	@ (800a848 <HAL_RCC_OscConfig+0x508>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d118      	bne.n	800a7fe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a7cc:	4b1e      	ldr	r3, [pc, #120]	@ (800a848 <HAL_RCC_OscConfig+0x508>)
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	4a1d      	ldr	r2, [pc, #116]	@ (800a848 <HAL_RCC_OscConfig+0x508>)
 800a7d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a7d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a7d8:	f7fa fe2c 	bl	8005434 <HAL_GetTick>
 800a7dc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a7de:	e008      	b.n	800a7f2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a7e0:	f7fa fe28 	bl	8005434 <HAL_GetTick>
 800a7e4:	4602      	mov	r2, r0
 800a7e6:	693b      	ldr	r3, [r7, #16]
 800a7e8:	1ad3      	subs	r3, r2, r3
 800a7ea:	2b02      	cmp	r3, #2
 800a7ec:	d901      	bls.n	800a7f2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800a7ee:	2303      	movs	r3, #3
 800a7f0:	e1b8      	b.n	800ab64 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a7f2:	4b15      	ldr	r3, [pc, #84]	@ (800a848 <HAL_RCC_OscConfig+0x508>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d0f0      	beq.n	800a7e0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	689b      	ldr	r3, [r3, #8]
 800a802:	2b01      	cmp	r3, #1
 800a804:	d108      	bne.n	800a818 <HAL_RCC_OscConfig+0x4d8>
 800a806:	4b0f      	ldr	r3, [pc, #60]	@ (800a844 <HAL_RCC_OscConfig+0x504>)
 800a808:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a80c:	4a0d      	ldr	r2, [pc, #52]	@ (800a844 <HAL_RCC_OscConfig+0x504>)
 800a80e:	f043 0301 	orr.w	r3, r3, #1
 800a812:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800a816:	e029      	b.n	800a86c <HAL_RCC_OscConfig+0x52c>
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	689b      	ldr	r3, [r3, #8]
 800a81c:	2b05      	cmp	r3, #5
 800a81e:	d115      	bne.n	800a84c <HAL_RCC_OscConfig+0x50c>
 800a820:	4b08      	ldr	r3, [pc, #32]	@ (800a844 <HAL_RCC_OscConfig+0x504>)
 800a822:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a826:	4a07      	ldr	r2, [pc, #28]	@ (800a844 <HAL_RCC_OscConfig+0x504>)
 800a828:	f043 0304 	orr.w	r3, r3, #4
 800a82c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800a830:	4b04      	ldr	r3, [pc, #16]	@ (800a844 <HAL_RCC_OscConfig+0x504>)
 800a832:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a836:	4a03      	ldr	r2, [pc, #12]	@ (800a844 <HAL_RCC_OscConfig+0x504>)
 800a838:	f043 0301 	orr.w	r3, r3, #1
 800a83c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800a840:	e014      	b.n	800a86c <HAL_RCC_OscConfig+0x52c>
 800a842:	bf00      	nop
 800a844:	40021000 	.word	0x40021000
 800a848:	40007000 	.word	0x40007000
 800a84c:	4b9d      	ldr	r3, [pc, #628]	@ (800aac4 <HAL_RCC_OscConfig+0x784>)
 800a84e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a852:	4a9c      	ldr	r2, [pc, #624]	@ (800aac4 <HAL_RCC_OscConfig+0x784>)
 800a854:	f023 0301 	bic.w	r3, r3, #1
 800a858:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800a85c:	4b99      	ldr	r3, [pc, #612]	@ (800aac4 <HAL_RCC_OscConfig+0x784>)
 800a85e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a862:	4a98      	ldr	r2, [pc, #608]	@ (800aac4 <HAL_RCC_OscConfig+0x784>)
 800a864:	f023 0304 	bic.w	r3, r3, #4
 800a868:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	689b      	ldr	r3, [r3, #8]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d016      	beq.n	800a8a2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a874:	f7fa fdde 	bl	8005434 <HAL_GetTick>
 800a878:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a87a:	e00a      	b.n	800a892 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a87c:	f7fa fdda 	bl	8005434 <HAL_GetTick>
 800a880:	4602      	mov	r2, r0
 800a882:	693b      	ldr	r3, [r7, #16]
 800a884:	1ad3      	subs	r3, r2, r3
 800a886:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a88a:	4293      	cmp	r3, r2
 800a88c:	d901      	bls.n	800a892 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800a88e:	2303      	movs	r3, #3
 800a890:	e168      	b.n	800ab64 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a892:	4b8c      	ldr	r3, [pc, #560]	@ (800aac4 <HAL_RCC_OscConfig+0x784>)
 800a894:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a898:	f003 0302 	and.w	r3, r3, #2
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d0ed      	beq.n	800a87c <HAL_RCC_OscConfig+0x53c>
 800a8a0:	e015      	b.n	800a8ce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a8a2:	f7fa fdc7 	bl	8005434 <HAL_GetTick>
 800a8a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a8a8:	e00a      	b.n	800a8c0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a8aa:	f7fa fdc3 	bl	8005434 <HAL_GetTick>
 800a8ae:	4602      	mov	r2, r0
 800a8b0:	693b      	ldr	r3, [r7, #16]
 800a8b2:	1ad3      	subs	r3, r2, r3
 800a8b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a8b8:	4293      	cmp	r3, r2
 800a8ba:	d901      	bls.n	800a8c0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800a8bc:	2303      	movs	r3, #3
 800a8be:	e151      	b.n	800ab64 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a8c0:	4b80      	ldr	r3, [pc, #512]	@ (800aac4 <HAL_RCC_OscConfig+0x784>)
 800a8c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a8c6:	f003 0302 	and.w	r3, r3, #2
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d1ed      	bne.n	800a8aa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a8ce:	7ffb      	ldrb	r3, [r7, #31]
 800a8d0:	2b01      	cmp	r3, #1
 800a8d2:	d105      	bne.n	800a8e0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a8d4:	4b7b      	ldr	r3, [pc, #492]	@ (800aac4 <HAL_RCC_OscConfig+0x784>)
 800a8d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a8d8:	4a7a      	ldr	r2, [pc, #488]	@ (800aac4 <HAL_RCC_OscConfig+0x784>)
 800a8da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a8de:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	f003 0320 	and.w	r3, r3, #32
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d03c      	beq.n	800a966 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d01c      	beq.n	800a92e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a8f4:	4b73      	ldr	r3, [pc, #460]	@ (800aac4 <HAL_RCC_OscConfig+0x784>)
 800a8f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a8fa:	4a72      	ldr	r2, [pc, #456]	@ (800aac4 <HAL_RCC_OscConfig+0x784>)
 800a8fc:	f043 0301 	orr.w	r3, r3, #1
 800a900:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a904:	f7fa fd96 	bl	8005434 <HAL_GetTick>
 800a908:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a90a:	e008      	b.n	800a91e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a90c:	f7fa fd92 	bl	8005434 <HAL_GetTick>
 800a910:	4602      	mov	r2, r0
 800a912:	693b      	ldr	r3, [r7, #16]
 800a914:	1ad3      	subs	r3, r2, r3
 800a916:	2b02      	cmp	r3, #2
 800a918:	d901      	bls.n	800a91e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800a91a:	2303      	movs	r3, #3
 800a91c:	e122      	b.n	800ab64 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a91e:	4b69      	ldr	r3, [pc, #420]	@ (800aac4 <HAL_RCC_OscConfig+0x784>)
 800a920:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a924:	f003 0302 	and.w	r3, r3, #2
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d0ef      	beq.n	800a90c <HAL_RCC_OscConfig+0x5cc>
 800a92c:	e01b      	b.n	800a966 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a92e:	4b65      	ldr	r3, [pc, #404]	@ (800aac4 <HAL_RCC_OscConfig+0x784>)
 800a930:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a934:	4a63      	ldr	r2, [pc, #396]	@ (800aac4 <HAL_RCC_OscConfig+0x784>)
 800a936:	f023 0301 	bic.w	r3, r3, #1
 800a93a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a93e:	f7fa fd79 	bl	8005434 <HAL_GetTick>
 800a942:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a944:	e008      	b.n	800a958 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a946:	f7fa fd75 	bl	8005434 <HAL_GetTick>
 800a94a:	4602      	mov	r2, r0
 800a94c:	693b      	ldr	r3, [r7, #16]
 800a94e:	1ad3      	subs	r3, r2, r3
 800a950:	2b02      	cmp	r3, #2
 800a952:	d901      	bls.n	800a958 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800a954:	2303      	movs	r3, #3
 800a956:	e105      	b.n	800ab64 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a958:	4b5a      	ldr	r3, [pc, #360]	@ (800aac4 <HAL_RCC_OscConfig+0x784>)
 800a95a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a95e:	f003 0302 	and.w	r3, r3, #2
 800a962:	2b00      	cmp	r3, #0
 800a964:	d1ef      	bne.n	800a946 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	f000 80f9 	beq.w	800ab62 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a974:	2b02      	cmp	r3, #2
 800a976:	f040 80cf 	bne.w	800ab18 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800a97a:	4b52      	ldr	r3, [pc, #328]	@ (800aac4 <HAL_RCC_OscConfig+0x784>)
 800a97c:	68db      	ldr	r3, [r3, #12]
 800a97e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a980:	697b      	ldr	r3, [r7, #20]
 800a982:	f003 0203 	and.w	r2, r3, #3
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a98a:	429a      	cmp	r2, r3
 800a98c:	d12c      	bne.n	800a9e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a98e:	697b      	ldr	r3, [r7, #20]
 800a990:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a998:	3b01      	subs	r3, #1
 800a99a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a99c:	429a      	cmp	r2, r3
 800a99e:	d123      	bne.n	800a9e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a9a0:	697b      	ldr	r3, [r7, #20]
 800a9a2:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a9aa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a9ac:	429a      	cmp	r2, r3
 800a9ae:	d11b      	bne.n	800a9e8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a9b0:	697b      	ldr	r3, [r7, #20]
 800a9b2:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9ba:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a9bc:	429a      	cmp	r2, r3
 800a9be:	d113      	bne.n	800a9e8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a9c0:	697b      	ldr	r3, [r7, #20]
 800a9c2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9ca:	085b      	lsrs	r3, r3, #1
 800a9cc:	3b01      	subs	r3, #1
 800a9ce:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a9d0:	429a      	cmp	r2, r3
 800a9d2:	d109      	bne.n	800a9e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800a9d4:	697b      	ldr	r3, [r7, #20]
 800a9d6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9de:	085b      	lsrs	r3, r3, #1
 800a9e0:	3b01      	subs	r3, #1
 800a9e2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a9e4:	429a      	cmp	r2, r3
 800a9e6:	d071      	beq.n	800aacc <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a9e8:	69bb      	ldr	r3, [r7, #24]
 800a9ea:	2b0c      	cmp	r3, #12
 800a9ec:	d068      	beq.n	800aac0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800a9ee:	4b35      	ldr	r3, [pc, #212]	@ (800aac4 <HAL_RCC_OscConfig+0x784>)
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d105      	bne.n	800aa06 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800a9fa:	4b32      	ldr	r3, [pc, #200]	@ (800aac4 <HAL_RCC_OscConfig+0x784>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d001      	beq.n	800aa0a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800aa06:	2301      	movs	r3, #1
 800aa08:	e0ac      	b.n	800ab64 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800aa0a:	4b2e      	ldr	r3, [pc, #184]	@ (800aac4 <HAL_RCC_OscConfig+0x784>)
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	4a2d      	ldr	r2, [pc, #180]	@ (800aac4 <HAL_RCC_OscConfig+0x784>)
 800aa10:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800aa14:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800aa16:	f7fa fd0d 	bl	8005434 <HAL_GetTick>
 800aa1a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800aa1c:	e008      	b.n	800aa30 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aa1e:	f7fa fd09 	bl	8005434 <HAL_GetTick>
 800aa22:	4602      	mov	r2, r0
 800aa24:	693b      	ldr	r3, [r7, #16]
 800aa26:	1ad3      	subs	r3, r2, r3
 800aa28:	2b02      	cmp	r3, #2
 800aa2a:	d901      	bls.n	800aa30 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800aa2c:	2303      	movs	r3, #3
 800aa2e:	e099      	b.n	800ab64 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800aa30:	4b24      	ldr	r3, [pc, #144]	@ (800aac4 <HAL_RCC_OscConfig+0x784>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d1f0      	bne.n	800aa1e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800aa3c:	4b21      	ldr	r3, [pc, #132]	@ (800aac4 <HAL_RCC_OscConfig+0x784>)
 800aa3e:	68da      	ldr	r2, [r3, #12]
 800aa40:	4b21      	ldr	r3, [pc, #132]	@ (800aac8 <HAL_RCC_OscConfig+0x788>)
 800aa42:	4013      	ands	r3, r2
 800aa44:	687a      	ldr	r2, [r7, #4]
 800aa46:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800aa48:	687a      	ldr	r2, [r7, #4]
 800aa4a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800aa4c:	3a01      	subs	r2, #1
 800aa4e:	0112      	lsls	r2, r2, #4
 800aa50:	4311      	orrs	r1, r2
 800aa52:	687a      	ldr	r2, [r7, #4]
 800aa54:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800aa56:	0212      	lsls	r2, r2, #8
 800aa58:	4311      	orrs	r1, r2
 800aa5a:	687a      	ldr	r2, [r7, #4]
 800aa5c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800aa5e:	0852      	lsrs	r2, r2, #1
 800aa60:	3a01      	subs	r2, #1
 800aa62:	0552      	lsls	r2, r2, #21
 800aa64:	4311      	orrs	r1, r2
 800aa66:	687a      	ldr	r2, [r7, #4]
 800aa68:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800aa6a:	0852      	lsrs	r2, r2, #1
 800aa6c:	3a01      	subs	r2, #1
 800aa6e:	0652      	lsls	r2, r2, #25
 800aa70:	4311      	orrs	r1, r2
 800aa72:	687a      	ldr	r2, [r7, #4]
 800aa74:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800aa76:	06d2      	lsls	r2, r2, #27
 800aa78:	430a      	orrs	r2, r1
 800aa7a:	4912      	ldr	r1, [pc, #72]	@ (800aac4 <HAL_RCC_OscConfig+0x784>)
 800aa7c:	4313      	orrs	r3, r2
 800aa7e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800aa80:	4b10      	ldr	r3, [pc, #64]	@ (800aac4 <HAL_RCC_OscConfig+0x784>)
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	4a0f      	ldr	r2, [pc, #60]	@ (800aac4 <HAL_RCC_OscConfig+0x784>)
 800aa86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800aa8a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800aa8c:	4b0d      	ldr	r3, [pc, #52]	@ (800aac4 <HAL_RCC_OscConfig+0x784>)
 800aa8e:	68db      	ldr	r3, [r3, #12]
 800aa90:	4a0c      	ldr	r2, [pc, #48]	@ (800aac4 <HAL_RCC_OscConfig+0x784>)
 800aa92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800aa96:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800aa98:	f7fa fccc 	bl	8005434 <HAL_GetTick>
 800aa9c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800aa9e:	e008      	b.n	800aab2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aaa0:	f7fa fcc8 	bl	8005434 <HAL_GetTick>
 800aaa4:	4602      	mov	r2, r0
 800aaa6:	693b      	ldr	r3, [r7, #16]
 800aaa8:	1ad3      	subs	r3, r2, r3
 800aaaa:	2b02      	cmp	r3, #2
 800aaac:	d901      	bls.n	800aab2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800aaae:	2303      	movs	r3, #3
 800aab0:	e058      	b.n	800ab64 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800aab2:	4b04      	ldr	r3, [pc, #16]	@ (800aac4 <HAL_RCC_OscConfig+0x784>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d0f0      	beq.n	800aaa0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800aabe:	e050      	b.n	800ab62 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800aac0:	2301      	movs	r3, #1
 800aac2:	e04f      	b.n	800ab64 <HAL_RCC_OscConfig+0x824>
 800aac4:	40021000 	.word	0x40021000
 800aac8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800aacc:	4b27      	ldr	r3, [pc, #156]	@ (800ab6c <HAL_RCC_OscConfig+0x82c>)
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d144      	bne.n	800ab62 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800aad8:	4b24      	ldr	r3, [pc, #144]	@ (800ab6c <HAL_RCC_OscConfig+0x82c>)
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	4a23      	ldr	r2, [pc, #140]	@ (800ab6c <HAL_RCC_OscConfig+0x82c>)
 800aade:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800aae2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800aae4:	4b21      	ldr	r3, [pc, #132]	@ (800ab6c <HAL_RCC_OscConfig+0x82c>)
 800aae6:	68db      	ldr	r3, [r3, #12]
 800aae8:	4a20      	ldr	r2, [pc, #128]	@ (800ab6c <HAL_RCC_OscConfig+0x82c>)
 800aaea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800aaee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800aaf0:	f7fa fca0 	bl	8005434 <HAL_GetTick>
 800aaf4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800aaf6:	e008      	b.n	800ab0a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aaf8:	f7fa fc9c 	bl	8005434 <HAL_GetTick>
 800aafc:	4602      	mov	r2, r0
 800aafe:	693b      	ldr	r3, [r7, #16]
 800ab00:	1ad3      	subs	r3, r2, r3
 800ab02:	2b02      	cmp	r3, #2
 800ab04:	d901      	bls.n	800ab0a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800ab06:	2303      	movs	r3, #3
 800ab08:	e02c      	b.n	800ab64 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ab0a:	4b18      	ldr	r3, [pc, #96]	@ (800ab6c <HAL_RCC_OscConfig+0x82c>)
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d0f0      	beq.n	800aaf8 <HAL_RCC_OscConfig+0x7b8>
 800ab16:	e024      	b.n	800ab62 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800ab18:	69bb      	ldr	r3, [r7, #24]
 800ab1a:	2b0c      	cmp	r3, #12
 800ab1c:	d01f      	beq.n	800ab5e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ab1e:	4b13      	ldr	r3, [pc, #76]	@ (800ab6c <HAL_RCC_OscConfig+0x82c>)
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	4a12      	ldr	r2, [pc, #72]	@ (800ab6c <HAL_RCC_OscConfig+0x82c>)
 800ab24:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ab28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab2a:	f7fa fc83 	bl	8005434 <HAL_GetTick>
 800ab2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ab30:	e008      	b.n	800ab44 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ab32:	f7fa fc7f 	bl	8005434 <HAL_GetTick>
 800ab36:	4602      	mov	r2, r0
 800ab38:	693b      	ldr	r3, [r7, #16]
 800ab3a:	1ad3      	subs	r3, r2, r3
 800ab3c:	2b02      	cmp	r3, #2
 800ab3e:	d901      	bls.n	800ab44 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800ab40:	2303      	movs	r3, #3
 800ab42:	e00f      	b.n	800ab64 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ab44:	4b09      	ldr	r3, [pc, #36]	@ (800ab6c <HAL_RCC_OscConfig+0x82c>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d1f0      	bne.n	800ab32 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800ab50:	4b06      	ldr	r3, [pc, #24]	@ (800ab6c <HAL_RCC_OscConfig+0x82c>)
 800ab52:	68da      	ldr	r2, [r3, #12]
 800ab54:	4905      	ldr	r1, [pc, #20]	@ (800ab6c <HAL_RCC_OscConfig+0x82c>)
 800ab56:	4b06      	ldr	r3, [pc, #24]	@ (800ab70 <HAL_RCC_OscConfig+0x830>)
 800ab58:	4013      	ands	r3, r2
 800ab5a:	60cb      	str	r3, [r1, #12]
 800ab5c:	e001      	b.n	800ab62 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800ab5e:	2301      	movs	r3, #1
 800ab60:	e000      	b.n	800ab64 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800ab62:	2300      	movs	r3, #0
}
 800ab64:	4618      	mov	r0, r3
 800ab66:	3720      	adds	r7, #32
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	bd80      	pop	{r7, pc}
 800ab6c:	40021000 	.word	0x40021000
 800ab70:	feeefffc 	.word	0xfeeefffc

0800ab74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b084      	sub	sp, #16
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
 800ab7c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d101      	bne.n	800ab88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ab84:	2301      	movs	r3, #1
 800ab86:	e0e7      	b.n	800ad58 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800ab88:	4b75      	ldr	r3, [pc, #468]	@ (800ad60 <HAL_RCC_ClockConfig+0x1ec>)
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	f003 0307 	and.w	r3, r3, #7
 800ab90:	683a      	ldr	r2, [r7, #0]
 800ab92:	429a      	cmp	r2, r3
 800ab94:	d910      	bls.n	800abb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ab96:	4b72      	ldr	r3, [pc, #456]	@ (800ad60 <HAL_RCC_ClockConfig+0x1ec>)
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	f023 0207 	bic.w	r2, r3, #7
 800ab9e:	4970      	ldr	r1, [pc, #448]	@ (800ad60 <HAL_RCC_ClockConfig+0x1ec>)
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	4313      	orrs	r3, r2
 800aba4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800aba6:	4b6e      	ldr	r3, [pc, #440]	@ (800ad60 <HAL_RCC_ClockConfig+0x1ec>)
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	f003 0307 	and.w	r3, r3, #7
 800abae:	683a      	ldr	r2, [r7, #0]
 800abb0:	429a      	cmp	r2, r3
 800abb2:	d001      	beq.n	800abb8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800abb4:	2301      	movs	r3, #1
 800abb6:	e0cf      	b.n	800ad58 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	f003 0302 	and.w	r3, r3, #2
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d010      	beq.n	800abe6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	689a      	ldr	r2, [r3, #8]
 800abc8:	4b66      	ldr	r3, [pc, #408]	@ (800ad64 <HAL_RCC_ClockConfig+0x1f0>)
 800abca:	689b      	ldr	r3, [r3, #8]
 800abcc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800abd0:	429a      	cmp	r2, r3
 800abd2:	d908      	bls.n	800abe6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800abd4:	4b63      	ldr	r3, [pc, #396]	@ (800ad64 <HAL_RCC_ClockConfig+0x1f0>)
 800abd6:	689b      	ldr	r3, [r3, #8]
 800abd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	689b      	ldr	r3, [r3, #8]
 800abe0:	4960      	ldr	r1, [pc, #384]	@ (800ad64 <HAL_RCC_ClockConfig+0x1f0>)
 800abe2:	4313      	orrs	r3, r2
 800abe4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	f003 0301 	and.w	r3, r3, #1
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d04c      	beq.n	800ac8c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	685b      	ldr	r3, [r3, #4]
 800abf6:	2b03      	cmp	r3, #3
 800abf8:	d107      	bne.n	800ac0a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800abfa:	4b5a      	ldr	r3, [pc, #360]	@ (800ad64 <HAL_RCC_ClockConfig+0x1f0>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d121      	bne.n	800ac4a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800ac06:	2301      	movs	r3, #1
 800ac08:	e0a6      	b.n	800ad58 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	685b      	ldr	r3, [r3, #4]
 800ac0e:	2b02      	cmp	r3, #2
 800ac10:	d107      	bne.n	800ac22 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ac12:	4b54      	ldr	r3, [pc, #336]	@ (800ad64 <HAL_RCC_ClockConfig+0x1f0>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d115      	bne.n	800ac4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800ac1e:	2301      	movs	r3, #1
 800ac20:	e09a      	b.n	800ad58 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	685b      	ldr	r3, [r3, #4]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d107      	bne.n	800ac3a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800ac2a:	4b4e      	ldr	r3, [pc, #312]	@ (800ad64 <HAL_RCC_ClockConfig+0x1f0>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	f003 0302 	and.w	r3, r3, #2
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d109      	bne.n	800ac4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800ac36:	2301      	movs	r3, #1
 800ac38:	e08e      	b.n	800ad58 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ac3a:	4b4a      	ldr	r3, [pc, #296]	@ (800ad64 <HAL_RCC_ClockConfig+0x1f0>)
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d101      	bne.n	800ac4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800ac46:	2301      	movs	r3, #1
 800ac48:	e086      	b.n	800ad58 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ac4a:	4b46      	ldr	r3, [pc, #280]	@ (800ad64 <HAL_RCC_ClockConfig+0x1f0>)
 800ac4c:	689b      	ldr	r3, [r3, #8]
 800ac4e:	f023 0203 	bic.w	r2, r3, #3
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	685b      	ldr	r3, [r3, #4]
 800ac56:	4943      	ldr	r1, [pc, #268]	@ (800ad64 <HAL_RCC_ClockConfig+0x1f0>)
 800ac58:	4313      	orrs	r3, r2
 800ac5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ac5c:	f7fa fbea 	bl	8005434 <HAL_GetTick>
 800ac60:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ac62:	e00a      	b.n	800ac7a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ac64:	f7fa fbe6 	bl	8005434 <HAL_GetTick>
 800ac68:	4602      	mov	r2, r0
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	1ad3      	subs	r3, r2, r3
 800ac6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac72:	4293      	cmp	r3, r2
 800ac74:	d901      	bls.n	800ac7a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800ac76:	2303      	movs	r3, #3
 800ac78:	e06e      	b.n	800ad58 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ac7a:	4b3a      	ldr	r3, [pc, #232]	@ (800ad64 <HAL_RCC_ClockConfig+0x1f0>)
 800ac7c:	689b      	ldr	r3, [r3, #8]
 800ac7e:	f003 020c 	and.w	r2, r3, #12
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	685b      	ldr	r3, [r3, #4]
 800ac86:	009b      	lsls	r3, r3, #2
 800ac88:	429a      	cmp	r2, r3
 800ac8a:	d1eb      	bne.n	800ac64 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	f003 0302 	and.w	r3, r3, #2
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d010      	beq.n	800acba <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	689a      	ldr	r2, [r3, #8]
 800ac9c:	4b31      	ldr	r3, [pc, #196]	@ (800ad64 <HAL_RCC_ClockConfig+0x1f0>)
 800ac9e:	689b      	ldr	r3, [r3, #8]
 800aca0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800aca4:	429a      	cmp	r2, r3
 800aca6:	d208      	bcs.n	800acba <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800aca8:	4b2e      	ldr	r3, [pc, #184]	@ (800ad64 <HAL_RCC_ClockConfig+0x1f0>)
 800acaa:	689b      	ldr	r3, [r3, #8]
 800acac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	689b      	ldr	r3, [r3, #8]
 800acb4:	492b      	ldr	r1, [pc, #172]	@ (800ad64 <HAL_RCC_ClockConfig+0x1f0>)
 800acb6:	4313      	orrs	r3, r2
 800acb8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800acba:	4b29      	ldr	r3, [pc, #164]	@ (800ad60 <HAL_RCC_ClockConfig+0x1ec>)
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	f003 0307 	and.w	r3, r3, #7
 800acc2:	683a      	ldr	r2, [r7, #0]
 800acc4:	429a      	cmp	r2, r3
 800acc6:	d210      	bcs.n	800acea <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800acc8:	4b25      	ldr	r3, [pc, #148]	@ (800ad60 <HAL_RCC_ClockConfig+0x1ec>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	f023 0207 	bic.w	r2, r3, #7
 800acd0:	4923      	ldr	r1, [pc, #140]	@ (800ad60 <HAL_RCC_ClockConfig+0x1ec>)
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	4313      	orrs	r3, r2
 800acd6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800acd8:	4b21      	ldr	r3, [pc, #132]	@ (800ad60 <HAL_RCC_ClockConfig+0x1ec>)
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f003 0307 	and.w	r3, r3, #7
 800ace0:	683a      	ldr	r2, [r7, #0]
 800ace2:	429a      	cmp	r2, r3
 800ace4:	d001      	beq.n	800acea <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800ace6:	2301      	movs	r3, #1
 800ace8:	e036      	b.n	800ad58 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	f003 0304 	and.w	r3, r3, #4
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d008      	beq.n	800ad08 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800acf6:	4b1b      	ldr	r3, [pc, #108]	@ (800ad64 <HAL_RCC_ClockConfig+0x1f0>)
 800acf8:	689b      	ldr	r3, [r3, #8]
 800acfa:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	68db      	ldr	r3, [r3, #12]
 800ad02:	4918      	ldr	r1, [pc, #96]	@ (800ad64 <HAL_RCC_ClockConfig+0x1f0>)
 800ad04:	4313      	orrs	r3, r2
 800ad06:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	f003 0308 	and.w	r3, r3, #8
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d009      	beq.n	800ad28 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ad14:	4b13      	ldr	r3, [pc, #76]	@ (800ad64 <HAL_RCC_ClockConfig+0x1f0>)
 800ad16:	689b      	ldr	r3, [r3, #8]
 800ad18:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	691b      	ldr	r3, [r3, #16]
 800ad20:	00db      	lsls	r3, r3, #3
 800ad22:	4910      	ldr	r1, [pc, #64]	@ (800ad64 <HAL_RCC_ClockConfig+0x1f0>)
 800ad24:	4313      	orrs	r3, r2
 800ad26:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800ad28:	f000 f824 	bl	800ad74 <HAL_RCC_GetSysClockFreq>
 800ad2c:	4602      	mov	r2, r0
 800ad2e:	4b0d      	ldr	r3, [pc, #52]	@ (800ad64 <HAL_RCC_ClockConfig+0x1f0>)
 800ad30:	689b      	ldr	r3, [r3, #8]
 800ad32:	091b      	lsrs	r3, r3, #4
 800ad34:	f003 030f 	and.w	r3, r3, #15
 800ad38:	490b      	ldr	r1, [pc, #44]	@ (800ad68 <HAL_RCC_ClockConfig+0x1f4>)
 800ad3a:	5ccb      	ldrb	r3, [r1, r3]
 800ad3c:	f003 031f 	and.w	r3, r3, #31
 800ad40:	fa22 f303 	lsr.w	r3, r2, r3
 800ad44:	4a09      	ldr	r2, [pc, #36]	@ (800ad6c <HAL_RCC_ClockConfig+0x1f8>)
 800ad46:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800ad48:	4b09      	ldr	r3, [pc, #36]	@ (800ad70 <HAL_RCC_ClockConfig+0x1fc>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	f7fa fb21 	bl	8005394 <HAL_InitTick>
 800ad52:	4603      	mov	r3, r0
 800ad54:	72fb      	strb	r3, [r7, #11]

  return status;
 800ad56:	7afb      	ldrb	r3, [r7, #11]
}
 800ad58:	4618      	mov	r0, r3
 800ad5a:	3710      	adds	r7, #16
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}
 800ad60:	40022000 	.word	0x40022000
 800ad64:	40021000 	.word	0x40021000
 800ad68:	0800d76c 	.word	0x0800d76c
 800ad6c:	20000398 	.word	0x20000398
 800ad70:	2000039c 	.word	0x2000039c

0800ad74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ad74:	b480      	push	{r7}
 800ad76:	b089      	sub	sp, #36	@ 0x24
 800ad78:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	61fb      	str	r3, [r7, #28]
 800ad7e:	2300      	movs	r3, #0
 800ad80:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ad82:	4b3e      	ldr	r3, [pc, #248]	@ (800ae7c <HAL_RCC_GetSysClockFreq+0x108>)
 800ad84:	689b      	ldr	r3, [r3, #8]
 800ad86:	f003 030c 	and.w	r3, r3, #12
 800ad8a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ad8c:	4b3b      	ldr	r3, [pc, #236]	@ (800ae7c <HAL_RCC_GetSysClockFreq+0x108>)
 800ad8e:	68db      	ldr	r3, [r3, #12]
 800ad90:	f003 0303 	and.w	r3, r3, #3
 800ad94:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800ad96:	693b      	ldr	r3, [r7, #16]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d005      	beq.n	800ada8 <HAL_RCC_GetSysClockFreq+0x34>
 800ad9c:	693b      	ldr	r3, [r7, #16]
 800ad9e:	2b0c      	cmp	r3, #12
 800ada0:	d121      	bne.n	800ade6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	2b01      	cmp	r3, #1
 800ada6:	d11e      	bne.n	800ade6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800ada8:	4b34      	ldr	r3, [pc, #208]	@ (800ae7c <HAL_RCC_GetSysClockFreq+0x108>)
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	f003 0308 	and.w	r3, r3, #8
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d107      	bne.n	800adc4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800adb4:	4b31      	ldr	r3, [pc, #196]	@ (800ae7c <HAL_RCC_GetSysClockFreq+0x108>)
 800adb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800adba:	0a1b      	lsrs	r3, r3, #8
 800adbc:	f003 030f 	and.w	r3, r3, #15
 800adc0:	61fb      	str	r3, [r7, #28]
 800adc2:	e005      	b.n	800add0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800adc4:	4b2d      	ldr	r3, [pc, #180]	@ (800ae7c <HAL_RCC_GetSysClockFreq+0x108>)
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	091b      	lsrs	r3, r3, #4
 800adca:	f003 030f 	and.w	r3, r3, #15
 800adce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800add0:	4a2b      	ldr	r2, [pc, #172]	@ (800ae80 <HAL_RCC_GetSysClockFreq+0x10c>)
 800add2:	69fb      	ldr	r3, [r7, #28]
 800add4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800add8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800adda:	693b      	ldr	r3, [r7, #16]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d10d      	bne.n	800adfc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800ade0:	69fb      	ldr	r3, [r7, #28]
 800ade2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800ade4:	e00a      	b.n	800adfc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800ade6:	693b      	ldr	r3, [r7, #16]
 800ade8:	2b04      	cmp	r3, #4
 800adea:	d102      	bne.n	800adf2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800adec:	4b25      	ldr	r3, [pc, #148]	@ (800ae84 <HAL_RCC_GetSysClockFreq+0x110>)
 800adee:	61bb      	str	r3, [r7, #24]
 800adf0:	e004      	b.n	800adfc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800adf2:	693b      	ldr	r3, [r7, #16]
 800adf4:	2b08      	cmp	r3, #8
 800adf6:	d101      	bne.n	800adfc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800adf8:	4b23      	ldr	r3, [pc, #140]	@ (800ae88 <HAL_RCC_GetSysClockFreq+0x114>)
 800adfa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800adfc:	693b      	ldr	r3, [r7, #16]
 800adfe:	2b0c      	cmp	r3, #12
 800ae00:	d134      	bne.n	800ae6c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800ae02:	4b1e      	ldr	r3, [pc, #120]	@ (800ae7c <HAL_RCC_GetSysClockFreq+0x108>)
 800ae04:	68db      	ldr	r3, [r3, #12]
 800ae06:	f003 0303 	and.w	r3, r3, #3
 800ae0a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	2b02      	cmp	r3, #2
 800ae10:	d003      	beq.n	800ae1a <HAL_RCC_GetSysClockFreq+0xa6>
 800ae12:	68bb      	ldr	r3, [r7, #8]
 800ae14:	2b03      	cmp	r3, #3
 800ae16:	d003      	beq.n	800ae20 <HAL_RCC_GetSysClockFreq+0xac>
 800ae18:	e005      	b.n	800ae26 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800ae1a:	4b1a      	ldr	r3, [pc, #104]	@ (800ae84 <HAL_RCC_GetSysClockFreq+0x110>)
 800ae1c:	617b      	str	r3, [r7, #20]
      break;
 800ae1e:	e005      	b.n	800ae2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800ae20:	4b19      	ldr	r3, [pc, #100]	@ (800ae88 <HAL_RCC_GetSysClockFreq+0x114>)
 800ae22:	617b      	str	r3, [r7, #20]
      break;
 800ae24:	e002      	b.n	800ae2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800ae26:	69fb      	ldr	r3, [r7, #28]
 800ae28:	617b      	str	r3, [r7, #20]
      break;
 800ae2a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800ae2c:	4b13      	ldr	r3, [pc, #76]	@ (800ae7c <HAL_RCC_GetSysClockFreq+0x108>)
 800ae2e:	68db      	ldr	r3, [r3, #12]
 800ae30:	091b      	lsrs	r3, r3, #4
 800ae32:	f003 0307 	and.w	r3, r3, #7
 800ae36:	3301      	adds	r3, #1
 800ae38:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800ae3a:	4b10      	ldr	r3, [pc, #64]	@ (800ae7c <HAL_RCC_GetSysClockFreq+0x108>)
 800ae3c:	68db      	ldr	r3, [r3, #12]
 800ae3e:	0a1b      	lsrs	r3, r3, #8
 800ae40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae44:	697a      	ldr	r2, [r7, #20]
 800ae46:	fb03 f202 	mul.w	r2, r3, r2
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae50:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800ae52:	4b0a      	ldr	r3, [pc, #40]	@ (800ae7c <HAL_RCC_GetSysClockFreq+0x108>)
 800ae54:	68db      	ldr	r3, [r3, #12]
 800ae56:	0e5b      	lsrs	r3, r3, #25
 800ae58:	f003 0303 	and.w	r3, r3, #3
 800ae5c:	3301      	adds	r3, #1
 800ae5e:	005b      	lsls	r3, r3, #1
 800ae60:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800ae62:	697a      	ldr	r2, [r7, #20]
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae6a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800ae6c:	69bb      	ldr	r3, [r7, #24]
}
 800ae6e:	4618      	mov	r0, r3
 800ae70:	3724      	adds	r7, #36	@ 0x24
 800ae72:	46bd      	mov	sp, r7
 800ae74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae78:	4770      	bx	lr
 800ae7a:	bf00      	nop
 800ae7c:	40021000 	.word	0x40021000
 800ae80:	0800d784 	.word	0x0800d784
 800ae84:	00f42400 	.word	0x00f42400
 800ae88:	007a1200 	.word	0x007a1200

0800ae8c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ae8c:	b480      	push	{r7}
 800ae8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ae90:	4b03      	ldr	r3, [pc, #12]	@ (800aea0 <HAL_RCC_GetHCLKFreq+0x14>)
 800ae92:	681b      	ldr	r3, [r3, #0]
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	46bd      	mov	sp, r7
 800ae98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9c:	4770      	bx	lr
 800ae9e:	bf00      	nop
 800aea0:	20000398 	.word	0x20000398

0800aea4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800aea8:	f7ff fff0 	bl	800ae8c <HAL_RCC_GetHCLKFreq>
 800aeac:	4602      	mov	r2, r0
 800aeae:	4b06      	ldr	r3, [pc, #24]	@ (800aec8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800aeb0:	689b      	ldr	r3, [r3, #8]
 800aeb2:	0a1b      	lsrs	r3, r3, #8
 800aeb4:	f003 0307 	and.w	r3, r3, #7
 800aeb8:	4904      	ldr	r1, [pc, #16]	@ (800aecc <HAL_RCC_GetPCLK1Freq+0x28>)
 800aeba:	5ccb      	ldrb	r3, [r1, r3]
 800aebc:	f003 031f 	and.w	r3, r3, #31
 800aec0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aec4:	4618      	mov	r0, r3
 800aec6:	bd80      	pop	{r7, pc}
 800aec8:	40021000 	.word	0x40021000
 800aecc:	0800d77c 	.word	0x0800d77c

0800aed0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800aed4:	f7ff ffda 	bl	800ae8c <HAL_RCC_GetHCLKFreq>
 800aed8:	4602      	mov	r2, r0
 800aeda:	4b06      	ldr	r3, [pc, #24]	@ (800aef4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800aedc:	689b      	ldr	r3, [r3, #8]
 800aede:	0adb      	lsrs	r3, r3, #11
 800aee0:	f003 0307 	and.w	r3, r3, #7
 800aee4:	4904      	ldr	r1, [pc, #16]	@ (800aef8 <HAL_RCC_GetPCLK2Freq+0x28>)
 800aee6:	5ccb      	ldrb	r3, [r1, r3]
 800aee8:	f003 031f 	and.w	r3, r3, #31
 800aeec:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aef0:	4618      	mov	r0, r3
 800aef2:	bd80      	pop	{r7, pc}
 800aef4:	40021000 	.word	0x40021000
 800aef8:	0800d77c 	.word	0x0800d77c

0800aefc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b086      	sub	sp, #24
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800af04:	2300      	movs	r3, #0
 800af06:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800af08:	4b2a      	ldr	r3, [pc, #168]	@ (800afb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800af0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800af10:	2b00      	cmp	r3, #0
 800af12:	d003      	beq.n	800af1c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800af14:	f7ff f968 	bl	800a1e8 <HAL_PWREx_GetVoltageRange>
 800af18:	6178      	str	r0, [r7, #20]
 800af1a:	e014      	b.n	800af46 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800af1c:	4b25      	ldr	r3, [pc, #148]	@ (800afb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800af1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af20:	4a24      	ldr	r2, [pc, #144]	@ (800afb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800af22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800af26:	6593      	str	r3, [r2, #88]	@ 0x58
 800af28:	4b22      	ldr	r3, [pc, #136]	@ (800afb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800af2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800af30:	60fb      	str	r3, [r7, #12]
 800af32:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800af34:	f7ff f958 	bl	800a1e8 <HAL_PWREx_GetVoltageRange>
 800af38:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800af3a:	4b1e      	ldr	r3, [pc, #120]	@ (800afb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800af3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af3e:	4a1d      	ldr	r2, [pc, #116]	@ (800afb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800af40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800af44:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800af46:	697b      	ldr	r3, [r7, #20]
 800af48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800af4c:	d10b      	bne.n	800af66 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	2b80      	cmp	r3, #128	@ 0x80
 800af52:	d919      	bls.n	800af88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2ba0      	cmp	r3, #160	@ 0xa0
 800af58:	d902      	bls.n	800af60 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800af5a:	2302      	movs	r3, #2
 800af5c:	613b      	str	r3, [r7, #16]
 800af5e:	e013      	b.n	800af88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800af60:	2301      	movs	r3, #1
 800af62:	613b      	str	r3, [r7, #16]
 800af64:	e010      	b.n	800af88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	2b80      	cmp	r3, #128	@ 0x80
 800af6a:	d902      	bls.n	800af72 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800af6c:	2303      	movs	r3, #3
 800af6e:	613b      	str	r3, [r7, #16]
 800af70:	e00a      	b.n	800af88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	2b80      	cmp	r3, #128	@ 0x80
 800af76:	d102      	bne.n	800af7e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800af78:	2302      	movs	r3, #2
 800af7a:	613b      	str	r3, [r7, #16]
 800af7c:	e004      	b.n	800af88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	2b70      	cmp	r3, #112	@ 0x70
 800af82:	d101      	bne.n	800af88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800af84:	2301      	movs	r3, #1
 800af86:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800af88:	4b0b      	ldr	r3, [pc, #44]	@ (800afb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	f023 0207 	bic.w	r2, r3, #7
 800af90:	4909      	ldr	r1, [pc, #36]	@ (800afb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800af92:	693b      	ldr	r3, [r7, #16]
 800af94:	4313      	orrs	r3, r2
 800af96:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800af98:	4b07      	ldr	r3, [pc, #28]	@ (800afb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	f003 0307 	and.w	r3, r3, #7
 800afa0:	693a      	ldr	r2, [r7, #16]
 800afa2:	429a      	cmp	r2, r3
 800afa4:	d001      	beq.n	800afaa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800afa6:	2301      	movs	r3, #1
 800afa8:	e000      	b.n	800afac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800afaa:	2300      	movs	r3, #0
}
 800afac:	4618      	mov	r0, r3
 800afae:	3718      	adds	r7, #24
 800afb0:	46bd      	mov	sp, r7
 800afb2:	bd80      	pop	{r7, pc}
 800afb4:	40021000 	.word	0x40021000
 800afb8:	40022000 	.word	0x40022000

0800afbc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b086      	sub	sp, #24
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800afc4:	2300      	movs	r3, #0
 800afc6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800afc8:	2300      	movs	r3, #0
 800afca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d041      	beq.n	800b05c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800afdc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800afe0:	d02a      	beq.n	800b038 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800afe2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800afe6:	d824      	bhi.n	800b032 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800afe8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800afec:	d008      	beq.n	800b000 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800afee:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800aff2:	d81e      	bhi.n	800b032 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d00a      	beq.n	800b00e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800aff8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800affc:	d010      	beq.n	800b020 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800affe:	e018      	b.n	800b032 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800b000:	4b86      	ldr	r3, [pc, #536]	@ (800b21c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b002:	68db      	ldr	r3, [r3, #12]
 800b004:	4a85      	ldr	r2, [pc, #532]	@ (800b21c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b006:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b00a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800b00c:	e015      	b.n	800b03a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	3304      	adds	r3, #4
 800b012:	2100      	movs	r1, #0
 800b014:	4618      	mov	r0, r3
 800b016:	f000 facd 	bl	800b5b4 <RCCEx_PLLSAI1_Config>
 800b01a:	4603      	mov	r3, r0
 800b01c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800b01e:	e00c      	b.n	800b03a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	3320      	adds	r3, #32
 800b024:	2100      	movs	r1, #0
 800b026:	4618      	mov	r0, r3
 800b028:	f000 fbb6 	bl	800b798 <RCCEx_PLLSAI2_Config>
 800b02c:	4603      	mov	r3, r0
 800b02e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800b030:	e003      	b.n	800b03a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b032:	2301      	movs	r3, #1
 800b034:	74fb      	strb	r3, [r7, #19]
      break;
 800b036:	e000      	b.n	800b03a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800b038:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b03a:	7cfb      	ldrb	r3, [r7, #19]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d10b      	bne.n	800b058 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b040:	4b76      	ldr	r3, [pc, #472]	@ (800b21c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b042:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b046:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b04e:	4973      	ldr	r1, [pc, #460]	@ (800b21c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b050:	4313      	orrs	r3, r2
 800b052:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800b056:	e001      	b.n	800b05c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b058:	7cfb      	ldrb	r3, [r7, #19]
 800b05a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b064:	2b00      	cmp	r3, #0
 800b066:	d041      	beq.n	800b0ec <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b06c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b070:	d02a      	beq.n	800b0c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800b072:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b076:	d824      	bhi.n	800b0c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800b078:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b07c:	d008      	beq.n	800b090 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800b07e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b082:	d81e      	bhi.n	800b0c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800b084:	2b00      	cmp	r3, #0
 800b086:	d00a      	beq.n	800b09e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800b088:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b08c:	d010      	beq.n	800b0b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800b08e:	e018      	b.n	800b0c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800b090:	4b62      	ldr	r3, [pc, #392]	@ (800b21c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b092:	68db      	ldr	r3, [r3, #12]
 800b094:	4a61      	ldr	r2, [pc, #388]	@ (800b21c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b096:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b09a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800b09c:	e015      	b.n	800b0ca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	3304      	adds	r3, #4
 800b0a2:	2100      	movs	r1, #0
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	f000 fa85 	bl	800b5b4 <RCCEx_PLLSAI1_Config>
 800b0aa:	4603      	mov	r3, r0
 800b0ac:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800b0ae:	e00c      	b.n	800b0ca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	3320      	adds	r3, #32
 800b0b4:	2100      	movs	r1, #0
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	f000 fb6e 	bl	800b798 <RCCEx_PLLSAI2_Config>
 800b0bc:	4603      	mov	r3, r0
 800b0be:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800b0c0:	e003      	b.n	800b0ca <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	74fb      	strb	r3, [r7, #19]
      break;
 800b0c6:	e000      	b.n	800b0ca <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800b0c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b0ca:	7cfb      	ldrb	r3, [r7, #19]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d10b      	bne.n	800b0e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800b0d0:	4b52      	ldr	r3, [pc, #328]	@ (800b21c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b0d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b0d6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b0de:	494f      	ldr	r1, [pc, #316]	@ (800b21c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b0e0:	4313      	orrs	r3, r2
 800b0e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800b0e6:	e001      	b.n	800b0ec <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0e8:	7cfb      	ldrb	r3, [r7, #19]
 800b0ea:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	f000 80a0 	beq.w	800b23a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800b0fe:	4b47      	ldr	r3, [pc, #284]	@ (800b21c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b100:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b102:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b106:	2b00      	cmp	r3, #0
 800b108:	d101      	bne.n	800b10e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800b10a:	2301      	movs	r3, #1
 800b10c:	e000      	b.n	800b110 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800b10e:	2300      	movs	r3, #0
 800b110:	2b00      	cmp	r3, #0
 800b112:	d00d      	beq.n	800b130 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b114:	4b41      	ldr	r3, [pc, #260]	@ (800b21c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b116:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b118:	4a40      	ldr	r2, [pc, #256]	@ (800b21c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b11a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b11e:	6593      	str	r3, [r2, #88]	@ 0x58
 800b120:	4b3e      	ldr	r3, [pc, #248]	@ (800b21c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b122:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b124:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b128:	60bb      	str	r3, [r7, #8]
 800b12a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b12c:	2301      	movs	r3, #1
 800b12e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b130:	4b3b      	ldr	r3, [pc, #236]	@ (800b220 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	4a3a      	ldr	r2, [pc, #232]	@ (800b220 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800b136:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b13a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b13c:	f7fa f97a 	bl	8005434 <HAL_GetTick>
 800b140:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800b142:	e009      	b.n	800b158 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b144:	f7fa f976 	bl	8005434 <HAL_GetTick>
 800b148:	4602      	mov	r2, r0
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	1ad3      	subs	r3, r2, r3
 800b14e:	2b02      	cmp	r3, #2
 800b150:	d902      	bls.n	800b158 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800b152:	2303      	movs	r3, #3
 800b154:	74fb      	strb	r3, [r7, #19]
        break;
 800b156:	e005      	b.n	800b164 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800b158:	4b31      	ldr	r3, [pc, #196]	@ (800b220 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b160:	2b00      	cmp	r3, #0
 800b162:	d0ef      	beq.n	800b144 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800b164:	7cfb      	ldrb	r3, [r7, #19]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d15c      	bne.n	800b224 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b16a:	4b2c      	ldr	r3, [pc, #176]	@ (800b21c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b16c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b170:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b174:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800b176:	697b      	ldr	r3, [r7, #20]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d01f      	beq.n	800b1bc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b182:	697a      	ldr	r2, [r7, #20]
 800b184:	429a      	cmp	r2, r3
 800b186:	d019      	beq.n	800b1bc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b188:	4b24      	ldr	r3, [pc, #144]	@ (800b21c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b18a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b18e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b192:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b194:	4b21      	ldr	r3, [pc, #132]	@ (800b21c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b196:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b19a:	4a20      	ldr	r2, [pc, #128]	@ (800b21c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b19c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b1a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b1a4:	4b1d      	ldr	r3, [pc, #116]	@ (800b21c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b1a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b1aa:	4a1c      	ldr	r2, [pc, #112]	@ (800b21c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b1ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b1b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b1b4:	4a19      	ldr	r2, [pc, #100]	@ (800b21c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b1b6:	697b      	ldr	r3, [r7, #20]
 800b1b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b1bc:	697b      	ldr	r3, [r7, #20]
 800b1be:	f003 0301 	and.w	r3, r3, #1
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d016      	beq.n	800b1f4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b1c6:	f7fa f935 	bl	8005434 <HAL_GetTick>
 800b1ca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b1cc:	e00b      	b.n	800b1e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b1ce:	f7fa f931 	bl	8005434 <HAL_GetTick>
 800b1d2:	4602      	mov	r2, r0
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	1ad3      	subs	r3, r2, r3
 800b1d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b1dc:	4293      	cmp	r3, r2
 800b1de:	d902      	bls.n	800b1e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800b1e0:	2303      	movs	r3, #3
 800b1e2:	74fb      	strb	r3, [r7, #19]
            break;
 800b1e4:	e006      	b.n	800b1f4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b1e6:	4b0d      	ldr	r3, [pc, #52]	@ (800b21c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b1e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b1ec:	f003 0302 	and.w	r3, r3, #2
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d0ec      	beq.n	800b1ce <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800b1f4:	7cfb      	ldrb	r3, [r7, #19]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d10c      	bne.n	800b214 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b1fa:	4b08      	ldr	r3, [pc, #32]	@ (800b21c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b1fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b200:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b20a:	4904      	ldr	r1, [pc, #16]	@ (800b21c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b20c:	4313      	orrs	r3, r2
 800b20e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800b212:	e009      	b.n	800b228 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b214:	7cfb      	ldrb	r3, [r7, #19]
 800b216:	74bb      	strb	r3, [r7, #18]
 800b218:	e006      	b.n	800b228 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800b21a:	bf00      	nop
 800b21c:	40021000 	.word	0x40021000
 800b220:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b224:	7cfb      	ldrb	r3, [r7, #19]
 800b226:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b228:	7c7b      	ldrb	r3, [r7, #17]
 800b22a:	2b01      	cmp	r3, #1
 800b22c:	d105      	bne.n	800b23a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b22e:	4ba6      	ldr	r3, [pc, #664]	@ (800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b230:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b232:	4aa5      	ldr	r2, [pc, #660]	@ (800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b234:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b238:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	f003 0301 	and.w	r3, r3, #1
 800b242:	2b00      	cmp	r3, #0
 800b244:	d00a      	beq.n	800b25c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b246:	4ba0      	ldr	r3, [pc, #640]	@ (800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b248:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b24c:	f023 0203 	bic.w	r2, r3, #3
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b254:	499c      	ldr	r1, [pc, #624]	@ (800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b256:	4313      	orrs	r3, r2
 800b258:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	f003 0302 	and.w	r3, r3, #2
 800b264:	2b00      	cmp	r3, #0
 800b266:	d00a      	beq.n	800b27e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b268:	4b97      	ldr	r3, [pc, #604]	@ (800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b26a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b26e:	f023 020c 	bic.w	r2, r3, #12
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b276:	4994      	ldr	r1, [pc, #592]	@ (800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b278:	4313      	orrs	r3, r2
 800b27a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	f003 0304 	and.w	r3, r3, #4
 800b286:	2b00      	cmp	r3, #0
 800b288:	d00a      	beq.n	800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b28a:	4b8f      	ldr	r3, [pc, #572]	@ (800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b28c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b290:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b298:	498b      	ldr	r1, [pc, #556]	@ (800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b29a:	4313      	orrs	r3, r2
 800b29c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	f003 0308 	and.w	r3, r3, #8
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d00a      	beq.n	800b2c2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800b2ac:	4b86      	ldr	r3, [pc, #536]	@ (800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b2ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b2b2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b2ba:	4983      	ldr	r1, [pc, #524]	@ (800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b2bc:	4313      	orrs	r3, r2
 800b2be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	f003 0310 	and.w	r3, r3, #16
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d00a      	beq.n	800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800b2ce:	4b7e      	ldr	r3, [pc, #504]	@ (800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b2d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b2d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b2dc:	497a      	ldr	r1, [pc, #488]	@ (800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b2de:	4313      	orrs	r3, r2
 800b2e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	f003 0320 	and.w	r3, r3, #32
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d00a      	beq.n	800b306 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b2f0:	4b75      	ldr	r3, [pc, #468]	@ (800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b2f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b2f6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b2fe:	4972      	ldr	r1, [pc, #456]	@ (800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b300:	4313      	orrs	r3, r2
 800b302:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d00a      	beq.n	800b328 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b312:	4b6d      	ldr	r3, [pc, #436]	@ (800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b314:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b318:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b320:	4969      	ldr	r1, [pc, #420]	@ (800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b322:	4313      	orrs	r3, r2
 800b324:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b330:	2b00      	cmp	r3, #0
 800b332:	d00a      	beq.n	800b34a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b334:	4b64      	ldr	r3, [pc, #400]	@ (800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b336:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b33a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b342:	4961      	ldr	r1, [pc, #388]	@ (800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b344:	4313      	orrs	r3, r2
 800b346:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b352:	2b00      	cmp	r3, #0
 800b354:	d00a      	beq.n	800b36c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b356:	4b5c      	ldr	r3, [pc, #368]	@ (800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b358:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b35c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b364:	4958      	ldr	r1, [pc, #352]	@ (800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b366:	4313      	orrs	r3, r2
 800b368:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b374:	2b00      	cmp	r3, #0
 800b376:	d00a      	beq.n	800b38e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b378:	4b53      	ldr	r3, [pc, #332]	@ (800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b37a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b37e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b386:	4950      	ldr	r1, [pc, #320]	@ (800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b388:	4313      	orrs	r3, r2
 800b38a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b396:	2b00      	cmp	r3, #0
 800b398:	d00a      	beq.n	800b3b0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b39a:	4b4b      	ldr	r3, [pc, #300]	@ (800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b39c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b3a0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b3a8:	4947      	ldr	r1, [pc, #284]	@ (800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b3aa:	4313      	orrs	r3, r2
 800b3ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d00a      	beq.n	800b3d2 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b3bc:	4b42      	ldr	r3, [pc, #264]	@ (800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b3be:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b3c2:	f023 0203 	bic.w	r2, r3, #3
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b3ca:	493f      	ldr	r1, [pc, #252]	@ (800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b3cc:	4313      	orrs	r3, r2
 800b3ce:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d028      	beq.n	800b430 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b3de:	4b3a      	ldr	r3, [pc, #232]	@ (800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b3e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b3e4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b3ec:	4936      	ldr	r1, [pc, #216]	@ (800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b3ee:	4313      	orrs	r3, r2
 800b3f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b3f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b3fc:	d106      	bne.n	800b40c <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b3fe:	4b32      	ldr	r3, [pc, #200]	@ (800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b400:	68db      	ldr	r3, [r3, #12]
 800b402:	4a31      	ldr	r2, [pc, #196]	@ (800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b404:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b408:	60d3      	str	r3, [r2, #12]
 800b40a:	e011      	b.n	800b430 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b410:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b414:	d10c      	bne.n	800b430 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	3304      	adds	r3, #4
 800b41a:	2101      	movs	r1, #1
 800b41c:	4618      	mov	r0, r3
 800b41e:	f000 f8c9 	bl	800b5b4 <RCCEx_PLLSAI1_Config>
 800b422:	4603      	mov	r3, r0
 800b424:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800b426:	7cfb      	ldrb	r3, [r7, #19]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d001      	beq.n	800b430 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 800b42c:	7cfb      	ldrb	r3, [r7, #19]
 800b42e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d028      	beq.n	800b48e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800b43c:	4b22      	ldr	r3, [pc, #136]	@ (800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b43e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b442:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b44a:	491f      	ldr	r1, [pc, #124]	@ (800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b44c:	4313      	orrs	r3, r2
 800b44e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b456:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b45a:	d106      	bne.n	800b46a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b45c:	4b1a      	ldr	r3, [pc, #104]	@ (800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b45e:	68db      	ldr	r3, [r3, #12]
 800b460:	4a19      	ldr	r2, [pc, #100]	@ (800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b462:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b466:	60d3      	str	r3, [r2, #12]
 800b468:	e011      	b.n	800b48e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b46e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b472:	d10c      	bne.n	800b48e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	3304      	adds	r3, #4
 800b478:	2101      	movs	r1, #1
 800b47a:	4618      	mov	r0, r3
 800b47c:	f000 f89a 	bl	800b5b4 <RCCEx_PLLSAI1_Config>
 800b480:	4603      	mov	r3, r0
 800b482:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b484:	7cfb      	ldrb	r3, [r7, #19]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d001      	beq.n	800b48e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 800b48a:	7cfb      	ldrb	r3, [r7, #19]
 800b48c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b496:	2b00      	cmp	r3, #0
 800b498:	d02a      	beq.n	800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b49a:	4b0b      	ldr	r3, [pc, #44]	@ (800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b49c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b4a0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b4a8:	4907      	ldr	r1, [pc, #28]	@ (800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b4aa:	4313      	orrs	r3, r2
 800b4ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b4b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b4b8:	d108      	bne.n	800b4cc <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b4ba:	4b03      	ldr	r3, [pc, #12]	@ (800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b4bc:	68db      	ldr	r3, [r3, #12]
 800b4be:	4a02      	ldr	r2, [pc, #8]	@ (800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800b4c0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b4c4:	60d3      	str	r3, [r2, #12]
 800b4c6:	e013      	b.n	800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x534>
 800b4c8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b4d0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b4d4:	d10c      	bne.n	800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	3304      	adds	r3, #4
 800b4da:	2101      	movs	r1, #1
 800b4dc:	4618      	mov	r0, r3
 800b4de:	f000 f869 	bl	800b5b4 <RCCEx_PLLSAI1_Config>
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b4e6:	7cfb      	ldrb	r3, [r7, #19]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d001      	beq.n	800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 800b4ec:	7cfb      	ldrb	r3, [r7, #19]
 800b4ee:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d02f      	beq.n	800b55c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b4fc:	4b2c      	ldr	r3, [pc, #176]	@ (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800b4fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b502:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b50a:	4929      	ldr	r1, [pc, #164]	@ (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800b50c:	4313      	orrs	r3, r2
 800b50e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b516:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b51a:	d10d      	bne.n	800b538 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	3304      	adds	r3, #4
 800b520:	2102      	movs	r1, #2
 800b522:	4618      	mov	r0, r3
 800b524:	f000 f846 	bl	800b5b4 <RCCEx_PLLSAI1_Config>
 800b528:	4603      	mov	r3, r0
 800b52a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b52c:	7cfb      	ldrb	r3, [r7, #19]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d014      	beq.n	800b55c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800b532:	7cfb      	ldrb	r3, [r7, #19]
 800b534:	74bb      	strb	r3, [r7, #18]
 800b536:	e011      	b.n	800b55c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b53c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b540:	d10c      	bne.n	800b55c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	3320      	adds	r3, #32
 800b546:	2102      	movs	r1, #2
 800b548:	4618      	mov	r0, r3
 800b54a:	f000 f925 	bl	800b798 <RCCEx_PLLSAI2_Config>
 800b54e:	4603      	mov	r3, r0
 800b550:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b552:	7cfb      	ldrb	r3, [r7, #19]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d001      	beq.n	800b55c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800b558:	7cfb      	ldrb	r3, [r7, #19]
 800b55a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b564:	2b00      	cmp	r3, #0
 800b566:	d00b      	beq.n	800b580 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b568:	4b11      	ldr	r3, [pc, #68]	@ (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800b56a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b56e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b578:	490d      	ldr	r1, [pc, #52]	@ (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800b57a:	4313      	orrs	r3, r2
 800b57c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d00b      	beq.n	800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b58c:	4b08      	ldr	r3, [pc, #32]	@ (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800b58e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b592:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b59c:	4904      	ldr	r1, [pc, #16]	@ (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800b59e:	4313      	orrs	r3, r2
 800b5a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800b5a4:	7cbb      	ldrb	r3, [r7, #18]
}
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	3718      	adds	r7, #24
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	bd80      	pop	{r7, pc}
 800b5ae:	bf00      	nop
 800b5b0:	40021000 	.word	0x40021000

0800b5b4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b084      	sub	sp, #16
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
 800b5bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b5be:	2300      	movs	r3, #0
 800b5c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800b5c2:	4b74      	ldr	r3, [pc, #464]	@ (800b794 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b5c4:	68db      	ldr	r3, [r3, #12]
 800b5c6:	f003 0303 	and.w	r3, r3, #3
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d018      	beq.n	800b600 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800b5ce:	4b71      	ldr	r3, [pc, #452]	@ (800b794 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b5d0:	68db      	ldr	r3, [r3, #12]
 800b5d2:	f003 0203 	and.w	r2, r3, #3
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	429a      	cmp	r2, r3
 800b5dc:	d10d      	bne.n	800b5fa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
       ||
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d009      	beq.n	800b5fa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800b5e6:	4b6b      	ldr	r3, [pc, #428]	@ (800b794 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b5e8:	68db      	ldr	r3, [r3, #12]
 800b5ea:	091b      	lsrs	r3, r3, #4
 800b5ec:	f003 0307 	and.w	r3, r3, #7
 800b5f0:	1c5a      	adds	r2, r3, #1
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	685b      	ldr	r3, [r3, #4]
       ||
 800b5f6:	429a      	cmp	r2, r3
 800b5f8:	d047      	beq.n	800b68a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800b5fa:	2301      	movs	r3, #1
 800b5fc:	73fb      	strb	r3, [r7, #15]
 800b5fe:	e044      	b.n	800b68a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	2b03      	cmp	r3, #3
 800b606:	d018      	beq.n	800b63a <RCCEx_PLLSAI1_Config+0x86>
 800b608:	2b03      	cmp	r3, #3
 800b60a:	d825      	bhi.n	800b658 <RCCEx_PLLSAI1_Config+0xa4>
 800b60c:	2b01      	cmp	r3, #1
 800b60e:	d002      	beq.n	800b616 <RCCEx_PLLSAI1_Config+0x62>
 800b610:	2b02      	cmp	r3, #2
 800b612:	d009      	beq.n	800b628 <RCCEx_PLLSAI1_Config+0x74>
 800b614:	e020      	b.n	800b658 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800b616:	4b5f      	ldr	r3, [pc, #380]	@ (800b794 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	f003 0302 	and.w	r3, r3, #2
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d11d      	bne.n	800b65e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800b622:	2301      	movs	r3, #1
 800b624:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b626:	e01a      	b.n	800b65e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800b628:	4b5a      	ldr	r3, [pc, #360]	@ (800b794 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b630:	2b00      	cmp	r3, #0
 800b632:	d116      	bne.n	800b662 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800b634:	2301      	movs	r3, #1
 800b636:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b638:	e013      	b.n	800b662 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800b63a:	4b56      	ldr	r3, [pc, #344]	@ (800b794 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b642:	2b00      	cmp	r3, #0
 800b644:	d10f      	bne.n	800b666 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800b646:	4b53      	ldr	r3, [pc, #332]	@ (800b794 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d109      	bne.n	800b666 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800b652:	2301      	movs	r3, #1
 800b654:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b656:	e006      	b.n	800b666 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800b658:	2301      	movs	r3, #1
 800b65a:	73fb      	strb	r3, [r7, #15]
      break;
 800b65c:	e004      	b.n	800b668 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800b65e:	bf00      	nop
 800b660:	e002      	b.n	800b668 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800b662:	bf00      	nop
 800b664:	e000      	b.n	800b668 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800b666:	bf00      	nop
    }

    if(status == HAL_OK)
 800b668:	7bfb      	ldrb	r3, [r7, #15]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d10d      	bne.n	800b68a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800b66e:	4b49      	ldr	r3, [pc, #292]	@ (800b794 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b670:	68db      	ldr	r3, [r3, #12]
 800b672:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	6819      	ldr	r1, [r3, #0]
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	685b      	ldr	r3, [r3, #4]
 800b67e:	3b01      	subs	r3, #1
 800b680:	011b      	lsls	r3, r3, #4
 800b682:	430b      	orrs	r3, r1
 800b684:	4943      	ldr	r1, [pc, #268]	@ (800b794 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b686:	4313      	orrs	r3, r2
 800b688:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800b68a:	7bfb      	ldrb	r3, [r7, #15]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d17c      	bne.n	800b78a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800b690:	4b40      	ldr	r3, [pc, #256]	@ (800b794 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	4a3f      	ldr	r2, [pc, #252]	@ (800b794 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b696:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b69a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b69c:	f7f9 feca 	bl	8005434 <HAL_GetTick>
 800b6a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800b6a2:	e009      	b.n	800b6b8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b6a4:	f7f9 fec6 	bl	8005434 <HAL_GetTick>
 800b6a8:	4602      	mov	r2, r0
 800b6aa:	68bb      	ldr	r3, [r7, #8]
 800b6ac:	1ad3      	subs	r3, r2, r3
 800b6ae:	2b02      	cmp	r3, #2
 800b6b0:	d902      	bls.n	800b6b8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800b6b2:	2303      	movs	r3, #3
 800b6b4:	73fb      	strb	r3, [r7, #15]
        break;
 800b6b6:	e005      	b.n	800b6c4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800b6b8:	4b36      	ldr	r3, [pc, #216]	@ (800b794 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d1ef      	bne.n	800b6a4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800b6c4:	7bfb      	ldrb	r3, [r7, #15]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d15f      	bne.n	800b78a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800b6ca:	683b      	ldr	r3, [r7, #0]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d110      	bne.n	800b6f2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b6d0:	4b30      	ldr	r3, [pc, #192]	@ (800b794 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b6d2:	691b      	ldr	r3, [r3, #16]
 800b6d4:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 800b6d8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800b6dc:	687a      	ldr	r2, [r7, #4]
 800b6de:	6892      	ldr	r2, [r2, #8]
 800b6e0:	0211      	lsls	r1, r2, #8
 800b6e2:	687a      	ldr	r2, [r7, #4]
 800b6e4:	68d2      	ldr	r2, [r2, #12]
 800b6e6:	06d2      	lsls	r2, r2, #27
 800b6e8:	430a      	orrs	r2, r1
 800b6ea:	492a      	ldr	r1, [pc, #168]	@ (800b794 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b6ec:	4313      	orrs	r3, r2
 800b6ee:	610b      	str	r3, [r1, #16]
 800b6f0:	e027      	b.n	800b742 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800b6f2:	683b      	ldr	r3, [r7, #0]
 800b6f4:	2b01      	cmp	r3, #1
 800b6f6:	d112      	bne.n	800b71e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b6f8:	4b26      	ldr	r3, [pc, #152]	@ (800b794 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b6fa:	691b      	ldr	r3, [r3, #16]
 800b6fc:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800b700:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800b704:	687a      	ldr	r2, [r7, #4]
 800b706:	6892      	ldr	r2, [r2, #8]
 800b708:	0211      	lsls	r1, r2, #8
 800b70a:	687a      	ldr	r2, [r7, #4]
 800b70c:	6912      	ldr	r2, [r2, #16]
 800b70e:	0852      	lsrs	r2, r2, #1
 800b710:	3a01      	subs	r2, #1
 800b712:	0552      	lsls	r2, r2, #21
 800b714:	430a      	orrs	r2, r1
 800b716:	491f      	ldr	r1, [pc, #124]	@ (800b794 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b718:	4313      	orrs	r3, r2
 800b71a:	610b      	str	r3, [r1, #16]
 800b71c:	e011      	b.n	800b742 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b71e:	4b1d      	ldr	r3, [pc, #116]	@ (800b794 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b720:	691b      	ldr	r3, [r3, #16]
 800b722:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800b726:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800b72a:	687a      	ldr	r2, [r7, #4]
 800b72c:	6892      	ldr	r2, [r2, #8]
 800b72e:	0211      	lsls	r1, r2, #8
 800b730:	687a      	ldr	r2, [r7, #4]
 800b732:	6952      	ldr	r2, [r2, #20]
 800b734:	0852      	lsrs	r2, r2, #1
 800b736:	3a01      	subs	r2, #1
 800b738:	0652      	lsls	r2, r2, #25
 800b73a:	430a      	orrs	r2, r1
 800b73c:	4915      	ldr	r1, [pc, #84]	@ (800b794 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b73e:	4313      	orrs	r3, r2
 800b740:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800b742:	4b14      	ldr	r3, [pc, #80]	@ (800b794 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	4a13      	ldr	r2, [pc, #76]	@ (800b794 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b748:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b74c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b74e:	f7f9 fe71 	bl	8005434 <HAL_GetTick>
 800b752:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b754:	e009      	b.n	800b76a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b756:	f7f9 fe6d 	bl	8005434 <HAL_GetTick>
 800b75a:	4602      	mov	r2, r0
 800b75c:	68bb      	ldr	r3, [r7, #8]
 800b75e:	1ad3      	subs	r3, r2, r3
 800b760:	2b02      	cmp	r3, #2
 800b762:	d902      	bls.n	800b76a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800b764:	2303      	movs	r3, #3
 800b766:	73fb      	strb	r3, [r7, #15]
          break;
 800b768:	e005      	b.n	800b776 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b76a:	4b0a      	ldr	r3, [pc, #40]	@ (800b794 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b772:	2b00      	cmp	r3, #0
 800b774:	d0ef      	beq.n	800b756 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800b776:	7bfb      	ldrb	r3, [r7, #15]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d106      	bne.n	800b78a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800b77c:	4b05      	ldr	r3, [pc, #20]	@ (800b794 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b77e:	691a      	ldr	r2, [r3, #16]
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	699b      	ldr	r3, [r3, #24]
 800b784:	4903      	ldr	r1, [pc, #12]	@ (800b794 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b786:	4313      	orrs	r3, r2
 800b788:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800b78a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b78c:	4618      	mov	r0, r3
 800b78e:	3710      	adds	r7, #16
 800b790:	46bd      	mov	sp, r7
 800b792:	bd80      	pop	{r7, pc}
 800b794:	40021000 	.word	0x40021000

0800b798 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b084      	sub	sp, #16
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
 800b7a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800b7a6:	4b69      	ldr	r3, [pc, #420]	@ (800b94c <RCCEx_PLLSAI2_Config+0x1b4>)
 800b7a8:	68db      	ldr	r3, [r3, #12]
 800b7aa:	f003 0303 	and.w	r3, r3, #3
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d018      	beq.n	800b7e4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800b7b2:	4b66      	ldr	r3, [pc, #408]	@ (800b94c <RCCEx_PLLSAI2_Config+0x1b4>)
 800b7b4:	68db      	ldr	r3, [r3, #12]
 800b7b6:	f003 0203 	and.w	r2, r3, #3
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	429a      	cmp	r2, r3
 800b7c0:	d10d      	bne.n	800b7de <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
       ||
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d009      	beq.n	800b7de <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800b7ca:	4b60      	ldr	r3, [pc, #384]	@ (800b94c <RCCEx_PLLSAI2_Config+0x1b4>)
 800b7cc:	68db      	ldr	r3, [r3, #12]
 800b7ce:	091b      	lsrs	r3, r3, #4
 800b7d0:	f003 0307 	and.w	r3, r3, #7
 800b7d4:	1c5a      	adds	r2, r3, #1
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	685b      	ldr	r3, [r3, #4]
       ||
 800b7da:	429a      	cmp	r2, r3
 800b7dc:	d047      	beq.n	800b86e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800b7de:	2301      	movs	r3, #1
 800b7e0:	73fb      	strb	r3, [r7, #15]
 800b7e2:	e044      	b.n	800b86e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	2b03      	cmp	r3, #3
 800b7ea:	d018      	beq.n	800b81e <RCCEx_PLLSAI2_Config+0x86>
 800b7ec:	2b03      	cmp	r3, #3
 800b7ee:	d825      	bhi.n	800b83c <RCCEx_PLLSAI2_Config+0xa4>
 800b7f0:	2b01      	cmp	r3, #1
 800b7f2:	d002      	beq.n	800b7fa <RCCEx_PLLSAI2_Config+0x62>
 800b7f4:	2b02      	cmp	r3, #2
 800b7f6:	d009      	beq.n	800b80c <RCCEx_PLLSAI2_Config+0x74>
 800b7f8:	e020      	b.n	800b83c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800b7fa:	4b54      	ldr	r3, [pc, #336]	@ (800b94c <RCCEx_PLLSAI2_Config+0x1b4>)
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	f003 0302 	and.w	r3, r3, #2
 800b802:	2b00      	cmp	r3, #0
 800b804:	d11d      	bne.n	800b842 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800b806:	2301      	movs	r3, #1
 800b808:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b80a:	e01a      	b.n	800b842 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800b80c:	4b4f      	ldr	r3, [pc, #316]	@ (800b94c <RCCEx_PLLSAI2_Config+0x1b4>)
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b814:	2b00      	cmp	r3, #0
 800b816:	d116      	bne.n	800b846 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800b818:	2301      	movs	r3, #1
 800b81a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b81c:	e013      	b.n	800b846 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800b81e:	4b4b      	ldr	r3, [pc, #300]	@ (800b94c <RCCEx_PLLSAI2_Config+0x1b4>)
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b826:	2b00      	cmp	r3, #0
 800b828:	d10f      	bne.n	800b84a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800b82a:	4b48      	ldr	r3, [pc, #288]	@ (800b94c <RCCEx_PLLSAI2_Config+0x1b4>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b832:	2b00      	cmp	r3, #0
 800b834:	d109      	bne.n	800b84a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800b836:	2301      	movs	r3, #1
 800b838:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b83a:	e006      	b.n	800b84a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800b83c:	2301      	movs	r3, #1
 800b83e:	73fb      	strb	r3, [r7, #15]
      break;
 800b840:	e004      	b.n	800b84c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800b842:	bf00      	nop
 800b844:	e002      	b.n	800b84c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800b846:	bf00      	nop
 800b848:	e000      	b.n	800b84c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800b84a:	bf00      	nop
    }

    if(status == HAL_OK)
 800b84c:	7bfb      	ldrb	r3, [r7, #15]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d10d      	bne.n	800b86e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800b852:	4b3e      	ldr	r3, [pc, #248]	@ (800b94c <RCCEx_PLLSAI2_Config+0x1b4>)
 800b854:	68db      	ldr	r3, [r3, #12]
 800b856:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	6819      	ldr	r1, [r3, #0]
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	685b      	ldr	r3, [r3, #4]
 800b862:	3b01      	subs	r3, #1
 800b864:	011b      	lsls	r3, r3, #4
 800b866:	430b      	orrs	r3, r1
 800b868:	4938      	ldr	r1, [pc, #224]	@ (800b94c <RCCEx_PLLSAI2_Config+0x1b4>)
 800b86a:	4313      	orrs	r3, r2
 800b86c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800b86e:	7bfb      	ldrb	r3, [r7, #15]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d166      	bne.n	800b942 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800b874:	4b35      	ldr	r3, [pc, #212]	@ (800b94c <RCCEx_PLLSAI2_Config+0x1b4>)
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	4a34      	ldr	r2, [pc, #208]	@ (800b94c <RCCEx_PLLSAI2_Config+0x1b4>)
 800b87a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b87e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b880:	f7f9 fdd8 	bl	8005434 <HAL_GetTick>
 800b884:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800b886:	e009      	b.n	800b89c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800b888:	f7f9 fdd4 	bl	8005434 <HAL_GetTick>
 800b88c:	4602      	mov	r2, r0
 800b88e:	68bb      	ldr	r3, [r7, #8]
 800b890:	1ad3      	subs	r3, r2, r3
 800b892:	2b02      	cmp	r3, #2
 800b894:	d902      	bls.n	800b89c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800b896:	2303      	movs	r3, #3
 800b898:	73fb      	strb	r3, [r7, #15]
        break;
 800b89a:	e005      	b.n	800b8a8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800b89c:	4b2b      	ldr	r3, [pc, #172]	@ (800b94c <RCCEx_PLLSAI2_Config+0x1b4>)
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d1ef      	bne.n	800b888 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800b8a8:	7bfb      	ldrb	r3, [r7, #15]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d149      	bne.n	800b942 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d110      	bne.n	800b8d6 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b8b4:	4b25      	ldr	r3, [pc, #148]	@ (800b94c <RCCEx_PLLSAI2_Config+0x1b4>)
 800b8b6:	695b      	ldr	r3, [r3, #20]
 800b8b8:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 800b8bc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800b8c0:	687a      	ldr	r2, [r7, #4]
 800b8c2:	6892      	ldr	r2, [r2, #8]
 800b8c4:	0211      	lsls	r1, r2, #8
 800b8c6:	687a      	ldr	r2, [r7, #4]
 800b8c8:	68d2      	ldr	r2, [r2, #12]
 800b8ca:	06d2      	lsls	r2, r2, #27
 800b8cc:	430a      	orrs	r2, r1
 800b8ce:	491f      	ldr	r1, [pc, #124]	@ (800b94c <RCCEx_PLLSAI2_Config+0x1b4>)
 800b8d0:	4313      	orrs	r3, r2
 800b8d2:	614b      	str	r3, [r1, #20]
 800b8d4:	e011      	b.n	800b8fa <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b8d6:	4b1d      	ldr	r3, [pc, #116]	@ (800b94c <RCCEx_PLLSAI2_Config+0x1b4>)
 800b8d8:	695b      	ldr	r3, [r3, #20]
 800b8da:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800b8de:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800b8e2:	687a      	ldr	r2, [r7, #4]
 800b8e4:	6892      	ldr	r2, [r2, #8]
 800b8e6:	0211      	lsls	r1, r2, #8
 800b8e8:	687a      	ldr	r2, [r7, #4]
 800b8ea:	6912      	ldr	r2, [r2, #16]
 800b8ec:	0852      	lsrs	r2, r2, #1
 800b8ee:	3a01      	subs	r2, #1
 800b8f0:	0652      	lsls	r2, r2, #25
 800b8f2:	430a      	orrs	r2, r1
 800b8f4:	4915      	ldr	r1, [pc, #84]	@ (800b94c <RCCEx_PLLSAI2_Config+0x1b4>)
 800b8f6:	4313      	orrs	r3, r2
 800b8f8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800b8fa:	4b14      	ldr	r3, [pc, #80]	@ (800b94c <RCCEx_PLLSAI2_Config+0x1b4>)
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	4a13      	ldr	r2, [pc, #76]	@ (800b94c <RCCEx_PLLSAI2_Config+0x1b4>)
 800b900:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b904:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b906:	f7f9 fd95 	bl	8005434 <HAL_GetTick>
 800b90a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800b90c:	e009      	b.n	800b922 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800b90e:	f7f9 fd91 	bl	8005434 <HAL_GetTick>
 800b912:	4602      	mov	r2, r0
 800b914:	68bb      	ldr	r3, [r7, #8]
 800b916:	1ad3      	subs	r3, r2, r3
 800b918:	2b02      	cmp	r3, #2
 800b91a:	d902      	bls.n	800b922 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 800b91c:	2303      	movs	r3, #3
 800b91e:	73fb      	strb	r3, [r7, #15]
          break;
 800b920:	e005      	b.n	800b92e <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800b922:	4b0a      	ldr	r3, [pc, #40]	@ (800b94c <RCCEx_PLLSAI2_Config+0x1b4>)
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d0ef      	beq.n	800b90e <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 800b92e:	7bfb      	ldrb	r3, [r7, #15]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d106      	bne.n	800b942 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800b934:	4b05      	ldr	r3, [pc, #20]	@ (800b94c <RCCEx_PLLSAI2_Config+0x1b4>)
 800b936:	695a      	ldr	r2, [r3, #20]
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	695b      	ldr	r3, [r3, #20]
 800b93c:	4903      	ldr	r1, [pc, #12]	@ (800b94c <RCCEx_PLLSAI2_Config+0x1b4>)
 800b93e:	4313      	orrs	r3, r2
 800b940:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800b942:	7bfb      	ldrb	r3, [r7, #15]
}
 800b944:	4618      	mov	r0, r3
 800b946:	3710      	adds	r7, #16
 800b948:	46bd      	mov	sp, r7
 800b94a:	bd80      	pop	{r7, pc}
 800b94c:	40021000 	.word	0x40021000

0800b950 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b082      	sub	sp, #8
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d101      	bne.n	800b962 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b95e:	2301      	movs	r3, #1
 800b960:	e049      	b.n	800b9f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b968:	b2db      	uxtb	r3, r3
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d106      	bne.n	800b97c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	2200      	movs	r2, #0
 800b972:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b976:	6878      	ldr	r0, [r7, #4]
 800b978:	f7f9 f82a 	bl	80049d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2202      	movs	r2, #2
 800b980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681a      	ldr	r2, [r3, #0]
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	3304      	adds	r3, #4
 800b98c:	4619      	mov	r1, r3
 800b98e:	4610      	mov	r0, r2
 800b990:	f000 f9d0 	bl	800bd34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2201      	movs	r2, #1
 800b998:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	2201      	movs	r2, #1
 800b9a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2201      	movs	r2, #1
 800b9a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2201      	movs	r2, #1
 800b9b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	2201      	movs	r2, #1
 800b9b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2201      	movs	r2, #1
 800b9c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2201      	movs	r2, #1
 800b9c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	2201      	movs	r2, #1
 800b9d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	2201      	movs	r2, #1
 800b9d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2201      	movs	r2, #1
 800b9e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2201      	movs	r2, #1
 800b9e8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2201      	movs	r2, #1
 800b9f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b9f4:	2300      	movs	r3, #0
}
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	3708      	adds	r7, #8
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	bd80      	pop	{r7, pc}
	...

0800ba00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ba00:	b480      	push	{r7}
 800ba02:	b085      	sub	sp, #20
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ba0e:	b2db      	uxtb	r3, r3
 800ba10:	2b01      	cmp	r3, #1
 800ba12:	d001      	beq.n	800ba18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ba14:	2301      	movs	r3, #1
 800ba16:	e04f      	b.n	800bab8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2202      	movs	r2, #2
 800ba1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	68da      	ldr	r2, [r3, #12]
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	f042 0201 	orr.w	r2, r2, #1
 800ba2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	4a23      	ldr	r2, [pc, #140]	@ (800bac4 <HAL_TIM_Base_Start_IT+0xc4>)
 800ba36:	4293      	cmp	r3, r2
 800ba38:	d01d      	beq.n	800ba76 <HAL_TIM_Base_Start_IT+0x76>
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ba42:	d018      	beq.n	800ba76 <HAL_TIM_Base_Start_IT+0x76>
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	4a1f      	ldr	r2, [pc, #124]	@ (800bac8 <HAL_TIM_Base_Start_IT+0xc8>)
 800ba4a:	4293      	cmp	r3, r2
 800ba4c:	d013      	beq.n	800ba76 <HAL_TIM_Base_Start_IT+0x76>
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	4a1e      	ldr	r2, [pc, #120]	@ (800bacc <HAL_TIM_Base_Start_IT+0xcc>)
 800ba54:	4293      	cmp	r3, r2
 800ba56:	d00e      	beq.n	800ba76 <HAL_TIM_Base_Start_IT+0x76>
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	4a1c      	ldr	r2, [pc, #112]	@ (800bad0 <HAL_TIM_Base_Start_IT+0xd0>)
 800ba5e:	4293      	cmp	r3, r2
 800ba60:	d009      	beq.n	800ba76 <HAL_TIM_Base_Start_IT+0x76>
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	4a1b      	ldr	r2, [pc, #108]	@ (800bad4 <HAL_TIM_Base_Start_IT+0xd4>)
 800ba68:	4293      	cmp	r3, r2
 800ba6a:	d004      	beq.n	800ba76 <HAL_TIM_Base_Start_IT+0x76>
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	4a19      	ldr	r2, [pc, #100]	@ (800bad8 <HAL_TIM_Base_Start_IT+0xd8>)
 800ba72:	4293      	cmp	r3, r2
 800ba74:	d115      	bne.n	800baa2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	689a      	ldr	r2, [r3, #8]
 800ba7c:	4b17      	ldr	r3, [pc, #92]	@ (800badc <HAL_TIM_Base_Start_IT+0xdc>)
 800ba7e:	4013      	ands	r3, r2
 800ba80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	2b06      	cmp	r3, #6
 800ba86:	d015      	beq.n	800bab4 <HAL_TIM_Base_Start_IT+0xb4>
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ba8e:	d011      	beq.n	800bab4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	681a      	ldr	r2, [r3, #0]
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	f042 0201 	orr.w	r2, r2, #1
 800ba9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800baa0:	e008      	b.n	800bab4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	681a      	ldr	r2, [r3, #0]
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	f042 0201 	orr.w	r2, r2, #1
 800bab0:	601a      	str	r2, [r3, #0]
 800bab2:	e000      	b.n	800bab6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bab4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bab6:	2300      	movs	r3, #0
}
 800bab8:	4618      	mov	r0, r3
 800baba:	3714      	adds	r7, #20
 800babc:	46bd      	mov	sp, r7
 800babe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac2:	4770      	bx	lr
 800bac4:	40012c00 	.word	0x40012c00
 800bac8:	40000400 	.word	0x40000400
 800bacc:	40000800 	.word	0x40000800
 800bad0:	40000c00 	.word	0x40000c00
 800bad4:	40013400 	.word	0x40013400
 800bad8:	40014000 	.word	0x40014000
 800badc:	00010007 	.word	0x00010007

0800bae0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b084      	sub	sp, #16
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	68db      	ldr	r3, [r3, #12]
 800baee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	691b      	ldr	r3, [r3, #16]
 800baf6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800baf8:	68bb      	ldr	r3, [r7, #8]
 800bafa:	f003 0302 	and.w	r3, r3, #2
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d020      	beq.n	800bb44 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	f003 0302 	and.w	r3, r3, #2
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d01b      	beq.n	800bb44 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	f06f 0202 	mvn.w	r2, #2
 800bb14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	2201      	movs	r2, #1
 800bb1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	699b      	ldr	r3, [r3, #24]
 800bb22:	f003 0303 	and.w	r3, r3, #3
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d003      	beq.n	800bb32 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bb2a:	6878      	ldr	r0, [r7, #4]
 800bb2c:	f000 f8e4 	bl	800bcf8 <HAL_TIM_IC_CaptureCallback>
 800bb30:	e005      	b.n	800bb3e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb32:	6878      	ldr	r0, [r7, #4]
 800bb34:	f000 f8d6 	bl	800bce4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb38:	6878      	ldr	r0, [r7, #4]
 800bb3a:	f000 f8e7 	bl	800bd0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	2200      	movs	r2, #0
 800bb42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800bb44:	68bb      	ldr	r3, [r7, #8]
 800bb46:	f003 0304 	and.w	r3, r3, #4
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d020      	beq.n	800bb90 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	f003 0304 	and.w	r3, r3, #4
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d01b      	beq.n	800bb90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	f06f 0204 	mvn.w	r2, #4
 800bb60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	2202      	movs	r2, #2
 800bb66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	699b      	ldr	r3, [r3, #24]
 800bb6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d003      	beq.n	800bb7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb76:	6878      	ldr	r0, [r7, #4]
 800bb78:	f000 f8be 	bl	800bcf8 <HAL_TIM_IC_CaptureCallback>
 800bb7c:	e005      	b.n	800bb8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb7e:	6878      	ldr	r0, [r7, #4]
 800bb80:	f000 f8b0 	bl	800bce4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb84:	6878      	ldr	r0, [r7, #4]
 800bb86:	f000 f8c1 	bl	800bd0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800bb90:	68bb      	ldr	r3, [r7, #8]
 800bb92:	f003 0308 	and.w	r3, r3, #8
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d020      	beq.n	800bbdc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	f003 0308 	and.w	r3, r3, #8
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d01b      	beq.n	800bbdc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	f06f 0208 	mvn.w	r2, #8
 800bbac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	2204      	movs	r2, #4
 800bbb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	69db      	ldr	r3, [r3, #28]
 800bbba:	f003 0303 	and.w	r3, r3, #3
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d003      	beq.n	800bbca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bbc2:	6878      	ldr	r0, [r7, #4]
 800bbc4:	f000 f898 	bl	800bcf8 <HAL_TIM_IC_CaptureCallback>
 800bbc8:	e005      	b.n	800bbd6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bbca:	6878      	ldr	r0, [r7, #4]
 800bbcc:	f000 f88a 	bl	800bce4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bbd0:	6878      	ldr	r0, [r7, #4]
 800bbd2:	f000 f89b 	bl	800bd0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	2200      	movs	r2, #0
 800bbda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800bbdc:	68bb      	ldr	r3, [r7, #8]
 800bbde:	f003 0310 	and.w	r3, r3, #16
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d020      	beq.n	800bc28 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	f003 0310 	and.w	r3, r3, #16
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d01b      	beq.n	800bc28 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	f06f 0210 	mvn.w	r2, #16
 800bbf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	2208      	movs	r2, #8
 800bbfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	69db      	ldr	r3, [r3, #28]
 800bc06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d003      	beq.n	800bc16 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bc0e:	6878      	ldr	r0, [r7, #4]
 800bc10:	f000 f872 	bl	800bcf8 <HAL_TIM_IC_CaptureCallback>
 800bc14:	e005      	b.n	800bc22 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc16:	6878      	ldr	r0, [r7, #4]
 800bc18:	f000 f864 	bl	800bce4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc1c:	6878      	ldr	r0, [r7, #4]
 800bc1e:	f000 f875 	bl	800bd0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	2200      	movs	r2, #0
 800bc26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800bc28:	68bb      	ldr	r3, [r7, #8]
 800bc2a:	f003 0301 	and.w	r3, r3, #1
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d00c      	beq.n	800bc4c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	f003 0301 	and.w	r3, r3, #1
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d007      	beq.n	800bc4c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	f06f 0201 	mvn.w	r2, #1
 800bc44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bc46:	6878      	ldr	r0, [r7, #4]
 800bc48:	f7f8 fccc 	bl	80045e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800bc4c:	68bb      	ldr	r3, [r7, #8]
 800bc4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d00c      	beq.n	800bc70 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d007      	beq.n	800bc70 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800bc68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bc6a:	6878      	ldr	r0, [r7, #4]
 800bc6c:	f000 f98e 	bl	800bf8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800bc70:	68bb      	ldr	r3, [r7, #8]
 800bc72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d00c      	beq.n	800bc94 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d007      	beq.n	800bc94 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800bc8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bc8e:	6878      	ldr	r0, [r7, #4]
 800bc90:	f000 f986 	bl	800bfa0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800bc94:	68bb      	ldr	r3, [r7, #8]
 800bc96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d00c      	beq.n	800bcb8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d007      	beq.n	800bcb8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800bcb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bcb2:	6878      	ldr	r0, [r7, #4]
 800bcb4:	f000 f834 	bl	800bd20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800bcb8:	68bb      	ldr	r3, [r7, #8]
 800bcba:	f003 0320 	and.w	r3, r3, #32
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d00c      	beq.n	800bcdc <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	f003 0320 	and.w	r3, r3, #32
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d007      	beq.n	800bcdc <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	f06f 0220 	mvn.w	r2, #32
 800bcd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bcd6:	6878      	ldr	r0, [r7, #4]
 800bcd8:	f000 f94e 	bl	800bf78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bcdc:	bf00      	nop
 800bcde:	3710      	adds	r7, #16
 800bce0:	46bd      	mov	sp, r7
 800bce2:	bd80      	pop	{r7, pc}

0800bce4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bce4:	b480      	push	{r7}
 800bce6:	b083      	sub	sp, #12
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bcec:	bf00      	nop
 800bcee:	370c      	adds	r7, #12
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf6:	4770      	bx	lr

0800bcf8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bcf8:	b480      	push	{r7}
 800bcfa:	b083      	sub	sp, #12
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bd00:	bf00      	nop
 800bd02:	370c      	adds	r7, #12
 800bd04:	46bd      	mov	sp, r7
 800bd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0a:	4770      	bx	lr

0800bd0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bd0c:	b480      	push	{r7}
 800bd0e:	b083      	sub	sp, #12
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bd14:	bf00      	nop
 800bd16:	370c      	adds	r7, #12
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1e:	4770      	bx	lr

0800bd20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bd20:	b480      	push	{r7}
 800bd22:	b083      	sub	sp, #12
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bd28:	bf00      	nop
 800bd2a:	370c      	adds	r7, #12
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd32:	4770      	bx	lr

0800bd34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bd34:	b480      	push	{r7}
 800bd36:	b085      	sub	sp, #20
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
 800bd3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	4a40      	ldr	r2, [pc, #256]	@ (800be48 <TIM_Base_SetConfig+0x114>)
 800bd48:	4293      	cmp	r3, r2
 800bd4a:	d013      	beq.n	800bd74 <TIM_Base_SetConfig+0x40>
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd52:	d00f      	beq.n	800bd74 <TIM_Base_SetConfig+0x40>
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	4a3d      	ldr	r2, [pc, #244]	@ (800be4c <TIM_Base_SetConfig+0x118>)
 800bd58:	4293      	cmp	r3, r2
 800bd5a:	d00b      	beq.n	800bd74 <TIM_Base_SetConfig+0x40>
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	4a3c      	ldr	r2, [pc, #240]	@ (800be50 <TIM_Base_SetConfig+0x11c>)
 800bd60:	4293      	cmp	r3, r2
 800bd62:	d007      	beq.n	800bd74 <TIM_Base_SetConfig+0x40>
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	4a3b      	ldr	r2, [pc, #236]	@ (800be54 <TIM_Base_SetConfig+0x120>)
 800bd68:	4293      	cmp	r3, r2
 800bd6a:	d003      	beq.n	800bd74 <TIM_Base_SetConfig+0x40>
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	4a3a      	ldr	r2, [pc, #232]	@ (800be58 <TIM_Base_SetConfig+0x124>)
 800bd70:	4293      	cmp	r3, r2
 800bd72:	d108      	bne.n	800bd86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bd7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	685b      	ldr	r3, [r3, #4]
 800bd80:	68fa      	ldr	r2, [r7, #12]
 800bd82:	4313      	orrs	r3, r2
 800bd84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	4a2f      	ldr	r2, [pc, #188]	@ (800be48 <TIM_Base_SetConfig+0x114>)
 800bd8a:	4293      	cmp	r3, r2
 800bd8c:	d01f      	beq.n	800bdce <TIM_Base_SetConfig+0x9a>
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd94:	d01b      	beq.n	800bdce <TIM_Base_SetConfig+0x9a>
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	4a2c      	ldr	r2, [pc, #176]	@ (800be4c <TIM_Base_SetConfig+0x118>)
 800bd9a:	4293      	cmp	r3, r2
 800bd9c:	d017      	beq.n	800bdce <TIM_Base_SetConfig+0x9a>
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	4a2b      	ldr	r2, [pc, #172]	@ (800be50 <TIM_Base_SetConfig+0x11c>)
 800bda2:	4293      	cmp	r3, r2
 800bda4:	d013      	beq.n	800bdce <TIM_Base_SetConfig+0x9a>
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	4a2a      	ldr	r2, [pc, #168]	@ (800be54 <TIM_Base_SetConfig+0x120>)
 800bdaa:	4293      	cmp	r3, r2
 800bdac:	d00f      	beq.n	800bdce <TIM_Base_SetConfig+0x9a>
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	4a29      	ldr	r2, [pc, #164]	@ (800be58 <TIM_Base_SetConfig+0x124>)
 800bdb2:	4293      	cmp	r3, r2
 800bdb4:	d00b      	beq.n	800bdce <TIM_Base_SetConfig+0x9a>
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	4a28      	ldr	r2, [pc, #160]	@ (800be5c <TIM_Base_SetConfig+0x128>)
 800bdba:	4293      	cmp	r3, r2
 800bdbc:	d007      	beq.n	800bdce <TIM_Base_SetConfig+0x9a>
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	4a27      	ldr	r2, [pc, #156]	@ (800be60 <TIM_Base_SetConfig+0x12c>)
 800bdc2:	4293      	cmp	r3, r2
 800bdc4:	d003      	beq.n	800bdce <TIM_Base_SetConfig+0x9a>
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	4a26      	ldr	r2, [pc, #152]	@ (800be64 <TIM_Base_SetConfig+0x130>)
 800bdca:	4293      	cmp	r3, r2
 800bdcc:	d108      	bne.n	800bde0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bdd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	68db      	ldr	r3, [r3, #12]
 800bdda:	68fa      	ldr	r2, [r7, #12]
 800bddc:	4313      	orrs	r3, r2
 800bdde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bde6:	683b      	ldr	r3, [r7, #0]
 800bde8:	695b      	ldr	r3, [r3, #20]
 800bdea:	4313      	orrs	r3, r2
 800bdec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	68fa      	ldr	r2, [r7, #12]
 800bdf2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bdf4:	683b      	ldr	r3, [r7, #0]
 800bdf6:	689a      	ldr	r2, [r3, #8]
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bdfc:	683b      	ldr	r3, [r7, #0]
 800bdfe:	681a      	ldr	r2, [r3, #0]
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	4a10      	ldr	r2, [pc, #64]	@ (800be48 <TIM_Base_SetConfig+0x114>)
 800be08:	4293      	cmp	r3, r2
 800be0a:	d00f      	beq.n	800be2c <TIM_Base_SetConfig+0xf8>
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	4a12      	ldr	r2, [pc, #72]	@ (800be58 <TIM_Base_SetConfig+0x124>)
 800be10:	4293      	cmp	r3, r2
 800be12:	d00b      	beq.n	800be2c <TIM_Base_SetConfig+0xf8>
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	4a11      	ldr	r2, [pc, #68]	@ (800be5c <TIM_Base_SetConfig+0x128>)
 800be18:	4293      	cmp	r3, r2
 800be1a:	d007      	beq.n	800be2c <TIM_Base_SetConfig+0xf8>
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	4a10      	ldr	r2, [pc, #64]	@ (800be60 <TIM_Base_SetConfig+0x12c>)
 800be20:	4293      	cmp	r3, r2
 800be22:	d003      	beq.n	800be2c <TIM_Base_SetConfig+0xf8>
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	4a0f      	ldr	r2, [pc, #60]	@ (800be64 <TIM_Base_SetConfig+0x130>)
 800be28:	4293      	cmp	r3, r2
 800be2a:	d103      	bne.n	800be34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800be2c:	683b      	ldr	r3, [r7, #0]
 800be2e:	691a      	ldr	r2, [r3, #16]
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2201      	movs	r2, #1
 800be38:	615a      	str	r2, [r3, #20]
}
 800be3a:	bf00      	nop
 800be3c:	3714      	adds	r7, #20
 800be3e:	46bd      	mov	sp, r7
 800be40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be44:	4770      	bx	lr
 800be46:	bf00      	nop
 800be48:	40012c00 	.word	0x40012c00
 800be4c:	40000400 	.word	0x40000400
 800be50:	40000800 	.word	0x40000800
 800be54:	40000c00 	.word	0x40000c00
 800be58:	40013400 	.word	0x40013400
 800be5c:	40014000 	.word	0x40014000
 800be60:	40014400 	.word	0x40014400
 800be64:	40014800 	.word	0x40014800

0800be68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800be68:	b480      	push	{r7}
 800be6a:	b085      	sub	sp, #20
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
 800be70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800be78:	2b01      	cmp	r3, #1
 800be7a:	d101      	bne.n	800be80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800be7c:	2302      	movs	r3, #2
 800be7e:	e068      	b.n	800bf52 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	2201      	movs	r2, #1
 800be84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	2202      	movs	r2, #2
 800be8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	685b      	ldr	r3, [r3, #4]
 800be96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	689b      	ldr	r3, [r3, #8]
 800be9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	4a2e      	ldr	r2, [pc, #184]	@ (800bf60 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800bea6:	4293      	cmp	r3, r2
 800bea8:	d004      	beq.n	800beb4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	4a2d      	ldr	r2, [pc, #180]	@ (800bf64 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800beb0:	4293      	cmp	r3, r2
 800beb2:	d108      	bne.n	800bec6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800beba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bebc:	683b      	ldr	r3, [r7, #0]
 800bebe:	685b      	ldr	r3, [r3, #4]
 800bec0:	68fa      	ldr	r2, [r7, #12]
 800bec2:	4313      	orrs	r3, r2
 800bec4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800becc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	68fa      	ldr	r2, [r7, #12]
 800bed4:	4313      	orrs	r3, r2
 800bed6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	68fa      	ldr	r2, [r7, #12]
 800bede:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	4a1e      	ldr	r2, [pc, #120]	@ (800bf60 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800bee6:	4293      	cmp	r3, r2
 800bee8:	d01d      	beq.n	800bf26 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bef2:	d018      	beq.n	800bf26 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	4a1b      	ldr	r2, [pc, #108]	@ (800bf68 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800befa:	4293      	cmp	r3, r2
 800befc:	d013      	beq.n	800bf26 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	4a1a      	ldr	r2, [pc, #104]	@ (800bf6c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bf04:	4293      	cmp	r3, r2
 800bf06:	d00e      	beq.n	800bf26 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	4a18      	ldr	r2, [pc, #96]	@ (800bf70 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800bf0e:	4293      	cmp	r3, r2
 800bf10:	d009      	beq.n	800bf26 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	4a13      	ldr	r2, [pc, #76]	@ (800bf64 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800bf18:	4293      	cmp	r3, r2
 800bf1a:	d004      	beq.n	800bf26 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	4a14      	ldr	r2, [pc, #80]	@ (800bf74 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800bf22:	4293      	cmp	r3, r2
 800bf24:	d10c      	bne.n	800bf40 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bf26:	68bb      	ldr	r3, [r7, #8]
 800bf28:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bf2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	689b      	ldr	r3, [r3, #8]
 800bf32:	68ba      	ldr	r2, [r7, #8]
 800bf34:	4313      	orrs	r3, r2
 800bf36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	68ba      	ldr	r2, [r7, #8]
 800bf3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	2201      	movs	r2, #1
 800bf44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bf50:	2300      	movs	r3, #0
}
 800bf52:	4618      	mov	r0, r3
 800bf54:	3714      	adds	r7, #20
 800bf56:	46bd      	mov	sp, r7
 800bf58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5c:	4770      	bx	lr
 800bf5e:	bf00      	nop
 800bf60:	40012c00 	.word	0x40012c00
 800bf64:	40013400 	.word	0x40013400
 800bf68:	40000400 	.word	0x40000400
 800bf6c:	40000800 	.word	0x40000800
 800bf70:	40000c00 	.word	0x40000c00
 800bf74:	40014000 	.word	0x40014000

0800bf78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bf78:	b480      	push	{r7}
 800bf7a:	b083      	sub	sp, #12
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bf80:	bf00      	nop
 800bf82:	370c      	adds	r7, #12
 800bf84:	46bd      	mov	sp, r7
 800bf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8a:	4770      	bx	lr

0800bf8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bf8c:	b480      	push	{r7}
 800bf8e:	b083      	sub	sp, #12
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bf94:	bf00      	nop
 800bf96:	370c      	adds	r7, #12
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9e:	4770      	bx	lr

0800bfa0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bfa0:	b480      	push	{r7}
 800bfa2:	b083      	sub	sp, #12
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bfa8:	bf00      	nop
 800bfaa:	370c      	adds	r7, #12
 800bfac:	46bd      	mov	sp, r7
 800bfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb2:	4770      	bx	lr

0800bfb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b082      	sub	sp, #8
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d101      	bne.n	800bfc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bfc2:	2301      	movs	r3, #1
 800bfc4:	e040      	b.n	800c048 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d106      	bne.n	800bfdc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bfd6:	6878      	ldr	r0, [r7, #4]
 800bfd8:	f7f8 fd20 	bl	8004a1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2224      	movs	r2, #36	@ 0x24
 800bfe0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	681a      	ldr	r2, [r3, #0]
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	f022 0201 	bic.w	r2, r2, #1
 800bff0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d002      	beq.n	800c000 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800bffa:	6878      	ldr	r0, [r7, #4]
 800bffc:	f000 ff04 	bl	800ce08 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c000:	6878      	ldr	r0, [r7, #4]
 800c002:	f000 fc49 	bl	800c898 <UART_SetConfig>
 800c006:	4603      	mov	r3, r0
 800c008:	2b01      	cmp	r3, #1
 800c00a:	d101      	bne.n	800c010 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800c00c:	2301      	movs	r3, #1
 800c00e:	e01b      	b.n	800c048 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	685a      	ldr	r2, [r3, #4]
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c01e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	689a      	ldr	r2, [r3, #8]
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c02e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	681a      	ldr	r2, [r3, #0]
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	f042 0201 	orr.w	r2, r2, #1
 800c03e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c040:	6878      	ldr	r0, [r7, #4]
 800c042:	f000 ff83 	bl	800cf4c <UART_CheckIdleState>
 800c046:	4603      	mov	r3, r0
}
 800c048:	4618      	mov	r0, r3
 800c04a:	3708      	adds	r7, #8
 800c04c:	46bd      	mov	sp, r7
 800c04e:	bd80      	pop	{r7, pc}

0800c050 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b082      	sub	sp, #8
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d101      	bne.n	800c062 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800c05e:	2301      	movs	r3, #1
 800c060:	e02f      	b.n	800c0c2 <HAL_UART_DeInit+0x72>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	2224      	movs	r2, #36	@ 0x24
 800c066:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	681a      	ldr	r2, [r3, #0]
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	f022 0201 	bic.w	r2, r2, #1
 800c076:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	2200      	movs	r2, #0
 800c07e:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	2200      	movs	r2, #0
 800c086:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	2200      	movs	r2, #0
 800c08e:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800c090:	6878      	ldr	r0, [r7, #4]
 800c092:	f7f8 fe51 	bl	8004d38 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	2200      	movs	r2, #0
 800c09a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_RESET;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	2200      	movs	r2, #0
 800c0a2:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_RESET;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800c0c0:	2300      	movs	r3, #0
}
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	3708      	adds	r7, #8
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	bd80      	pop	{r7, pc}
	...

0800c0cc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b08a      	sub	sp, #40	@ 0x28
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	60f8      	str	r0, [r7, #12]
 800c0d4:	60b9      	str	r1, [r7, #8]
 800c0d6:	4613      	mov	r3, r2
 800c0d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c0de:	2b20      	cmp	r3, #32
 800c0e0:	d165      	bne.n	800c1ae <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 800c0e2:	68bb      	ldr	r3, [r7, #8]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d002      	beq.n	800c0ee <HAL_UART_Transmit_DMA+0x22>
 800c0e8:	88fb      	ldrh	r3, [r7, #6]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d101      	bne.n	800c0f2 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800c0ee:	2301      	movs	r3, #1
 800c0f0:	e05e      	b.n	800c1b0 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	68ba      	ldr	r2, [r7, #8]
 800c0f6:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	88fa      	ldrh	r2, [r7, #6]
 800c0fc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	88fa      	ldrh	r2, [r7, #6]
 800c104:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	2200      	movs	r2, #0
 800c10c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	2221      	movs	r2, #33	@ 0x21
 800c114:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d027      	beq.n	800c16e <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c122:	4a25      	ldr	r2, [pc, #148]	@ (800c1b8 <HAL_UART_Transmit_DMA+0xec>)
 800c124:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c12a:	4a24      	ldr	r2, [pc, #144]	@ (800c1bc <HAL_UART_Transmit_DMA+0xf0>)
 800c12c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c132:	4a23      	ldr	r2, [pc, #140]	@ (800c1c0 <HAL_UART_Transmit_DMA+0xf4>)
 800c134:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c13a:	2200      	movs	r2, #0
 800c13c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c146:	4619      	mov	r1, r3
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	3328      	adds	r3, #40	@ 0x28
 800c14e:	461a      	mov	r2, r3
 800c150:	88fb      	ldrh	r3, [r7, #6]
 800c152:	f7fb f8a9 	bl	80072a8 <HAL_DMA_Start_IT>
 800c156:	4603      	mov	r3, r0
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d008      	beq.n	800c16e <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	2210      	movs	r2, #16
 800c160:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	2220      	movs	r2, #32
 800c168:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 800c16a:	2301      	movs	r3, #1
 800c16c:	e020      	b.n	800c1b0 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	2240      	movs	r2, #64	@ 0x40
 800c174:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	3308      	adds	r3, #8
 800c17c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c17e:	697b      	ldr	r3, [r7, #20]
 800c180:	e853 3f00 	ldrex	r3, [r3]
 800c184:	613b      	str	r3, [r7, #16]
   return(result);
 800c186:	693b      	ldr	r3, [r7, #16]
 800c188:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c18c:	627b      	str	r3, [r7, #36]	@ 0x24
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	3308      	adds	r3, #8
 800c194:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c196:	623a      	str	r2, [r7, #32]
 800c198:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c19a:	69f9      	ldr	r1, [r7, #28]
 800c19c:	6a3a      	ldr	r2, [r7, #32]
 800c19e:	e841 2300 	strex	r3, r2, [r1]
 800c1a2:	61bb      	str	r3, [r7, #24]
   return(result);
 800c1a4:	69bb      	ldr	r3, [r7, #24]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d1e5      	bne.n	800c176 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	e000      	b.n	800c1b0 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800c1ae:	2302      	movs	r3, #2
  }
}
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	3728      	adds	r7, #40	@ 0x28
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	bd80      	pop	{r7, pc}
 800c1b8:	0800d3c1 	.word	0x0800d3c1
 800c1bc:	0800d45b 	.word	0x0800d45b
 800c1c0:	0800d5e1 	.word	0x0800d5e1

0800c1c4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b08a      	sub	sp, #40	@ 0x28
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	60f8      	str	r0, [r7, #12]
 800c1cc:	60b9      	str	r1, [r7, #8]
 800c1ce:	4613      	mov	r3, r2
 800c1d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c1d8:	2b20      	cmp	r3, #32
 800c1da:	d137      	bne.n	800c24c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800c1dc:	68bb      	ldr	r3, [r7, #8]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d002      	beq.n	800c1e8 <HAL_UART_Receive_DMA+0x24>
 800c1e2:	88fb      	ldrh	r3, [r7, #6]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d101      	bne.n	800c1ec <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800c1e8:	2301      	movs	r3, #1
 800c1ea:	e030      	b.n	800c24e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	4a18      	ldr	r2, [pc, #96]	@ (800c258 <HAL_UART_Receive_DMA+0x94>)
 800c1f8:	4293      	cmp	r3, r2
 800c1fa:	d01f      	beq.n	800c23c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	685b      	ldr	r3, [r3, #4]
 800c202:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c206:	2b00      	cmp	r3, #0
 800c208:	d018      	beq.n	800c23c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c210:	697b      	ldr	r3, [r7, #20]
 800c212:	e853 3f00 	ldrex	r3, [r3]
 800c216:	613b      	str	r3, [r7, #16]
   return(result);
 800c218:	693b      	ldr	r3, [r7, #16]
 800c21a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c21e:	627b      	str	r3, [r7, #36]	@ 0x24
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	461a      	mov	r2, r3
 800c226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c228:	623b      	str	r3, [r7, #32]
 800c22a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c22c:	69f9      	ldr	r1, [r7, #28]
 800c22e:	6a3a      	ldr	r2, [r7, #32]
 800c230:	e841 2300 	strex	r3, r2, [r1]
 800c234:	61bb      	str	r3, [r7, #24]
   return(result);
 800c236:	69bb      	ldr	r3, [r7, #24]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d1e6      	bne.n	800c20a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c23c:	88fb      	ldrh	r3, [r7, #6]
 800c23e:	461a      	mov	r2, r3
 800c240:	68b9      	ldr	r1, [r7, #8]
 800c242:	68f8      	ldr	r0, [r7, #12]
 800c244:	f000 ff92 	bl	800d16c <UART_Start_Receive_DMA>
 800c248:	4603      	mov	r3, r0
 800c24a:	e000      	b.n	800c24e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c24c:	2302      	movs	r3, #2
  }
}
 800c24e:	4618      	mov	r0, r3
 800c250:	3728      	adds	r7, #40	@ 0x28
 800c252:	46bd      	mov	sp, r7
 800c254:	bd80      	pop	{r7, pc}
 800c256:	bf00      	nop
 800c258:	40008000 	.word	0x40008000

0800c25c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b0ba      	sub	sp, #232	@ 0xe8
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	69db      	ldr	r3, [r3, #28]
 800c26a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	689b      	ldr	r3, [r3, #8]
 800c27e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c282:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800c286:	f640 030f 	movw	r3, #2063	@ 0x80f
 800c28a:	4013      	ands	r3, r2
 800c28c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800c290:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c294:	2b00      	cmp	r3, #0
 800c296:	d115      	bne.n	800c2c4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800c298:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c29c:	f003 0320 	and.w	r3, r3, #32
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d00f      	beq.n	800c2c4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800c2a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c2a8:	f003 0320 	and.w	r3, r3, #32
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d009      	beq.n	800c2c4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	f000 82ae 	beq.w	800c816 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c2be:	6878      	ldr	r0, [r7, #4]
 800c2c0:	4798      	blx	r3
      }
      return;
 800c2c2:	e2a8      	b.n	800c816 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800c2c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	f000 8117 	beq.w	800c4fc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800c2ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c2d2:	f003 0301 	and.w	r3, r3, #1
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d106      	bne.n	800c2e8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800c2da:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800c2de:	4b85      	ldr	r3, [pc, #532]	@ (800c4f4 <HAL_UART_IRQHandler+0x298>)
 800c2e0:	4013      	ands	r3, r2
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	f000 810a 	beq.w	800c4fc <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c2e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c2ec:	f003 0301 	and.w	r3, r3, #1
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d011      	beq.n	800c318 <HAL_UART_IRQHandler+0xbc>
 800c2f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c2f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d00b      	beq.n	800c318 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	2201      	movs	r2, #1
 800c306:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c30e:	f043 0201 	orr.w	r2, r3, #1
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c31c:	f003 0302 	and.w	r3, r3, #2
 800c320:	2b00      	cmp	r3, #0
 800c322:	d011      	beq.n	800c348 <HAL_UART_IRQHandler+0xec>
 800c324:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c328:	f003 0301 	and.w	r3, r3, #1
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d00b      	beq.n	800c348 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	2202      	movs	r2, #2
 800c336:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c33e:	f043 0204 	orr.w	r2, r3, #4
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c34c:	f003 0304 	and.w	r3, r3, #4
 800c350:	2b00      	cmp	r3, #0
 800c352:	d011      	beq.n	800c378 <HAL_UART_IRQHandler+0x11c>
 800c354:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c358:	f003 0301 	and.w	r3, r3, #1
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d00b      	beq.n	800c378 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	2204      	movs	r2, #4
 800c366:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c36e:	f043 0202 	orr.w	r2, r3, #2
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c378:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c37c:	f003 0308 	and.w	r3, r3, #8
 800c380:	2b00      	cmp	r3, #0
 800c382:	d017      	beq.n	800c3b4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800c384:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c388:	f003 0320 	and.w	r3, r3, #32
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d105      	bne.n	800c39c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800c390:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c394:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d00b      	beq.n	800c3b4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	2208      	movs	r2, #8
 800c3a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c3aa:	f043 0208 	orr.w	r2, r3, #8
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c3b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c3b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d012      	beq.n	800c3e6 <HAL_UART_IRQHandler+0x18a>
 800c3c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c3c4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d00c      	beq.n	800c3e6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c3d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c3dc:	f043 0220 	orr.w	r2, r3, #32
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	f000 8214 	beq.w	800c81a <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800c3f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c3f6:	f003 0320 	and.w	r3, r3, #32
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d00d      	beq.n	800c41a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800c3fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c402:	f003 0320 	and.w	r3, r3, #32
 800c406:	2b00      	cmp	r3, #0
 800c408:	d007      	beq.n	800c41a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d003      	beq.n	800c41a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c416:	6878      	ldr	r0, [r7, #4]
 800c418:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c420:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	689b      	ldr	r3, [r3, #8]
 800c42a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c42e:	2b40      	cmp	r3, #64	@ 0x40
 800c430:	d005      	beq.n	800c43e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c432:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c436:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d04f      	beq.n	800c4de <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c43e:	6878      	ldr	r0, [r7, #4]
 800c440:	f000 ff5a 	bl	800d2f8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	689b      	ldr	r3, [r3, #8]
 800c44a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c44e:	2b40      	cmp	r3, #64	@ 0x40
 800c450:	d141      	bne.n	800c4d6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	3308      	adds	r3, #8
 800c458:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c45c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c460:	e853 3f00 	ldrex	r3, [r3]
 800c464:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c468:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c46c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c470:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	3308      	adds	r3, #8
 800c47a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c47e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c482:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c486:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c48a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c48e:	e841 2300 	strex	r3, r2, [r1]
 800c492:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c496:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d1d9      	bne.n	800c452 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d013      	beq.n	800c4ce <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c4aa:	4a13      	ldr	r2, [pc, #76]	@ (800c4f8 <HAL_UART_IRQHandler+0x29c>)
 800c4ac:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	f7fa ff96 	bl	80073e4 <HAL_DMA_Abort_IT>
 800c4b8:	4603      	mov	r3, r0
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d017      	beq.n	800c4ee <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c4c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c4c4:	687a      	ldr	r2, [r7, #4]
 800c4c6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800c4c8:	4610      	mov	r0, r2
 800c4ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4cc:	e00f      	b.n	800c4ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c4ce:	6878      	ldr	r0, [r7, #4]
 800c4d0:	f000 f9cc 	bl	800c86c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4d4:	e00b      	b.n	800c4ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c4d6:	6878      	ldr	r0, [r7, #4]
 800c4d8:	f000 f9c8 	bl	800c86c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4dc:	e007      	b.n	800c4ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c4de:	6878      	ldr	r0, [r7, #4]
 800c4e0:	f000 f9c4 	bl	800c86c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800c4ec:	e195      	b.n	800c81a <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4ee:	bf00      	nop
    return;
 800c4f0:	e193      	b.n	800c81a <HAL_UART_IRQHandler+0x5be>
 800c4f2:	bf00      	nop
 800c4f4:	04000120 	.word	0x04000120
 800c4f8:	0800d65f 	.word	0x0800d65f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c500:	2b01      	cmp	r3, #1
 800c502:	f040 814e 	bne.w	800c7a2 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c506:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c50a:	f003 0310 	and.w	r3, r3, #16
 800c50e:	2b00      	cmp	r3, #0
 800c510:	f000 8147 	beq.w	800c7a2 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c514:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c518:	f003 0310 	and.w	r3, r3, #16
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	f000 8140 	beq.w	800c7a2 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	2210      	movs	r2, #16
 800c528:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	689b      	ldr	r3, [r3, #8]
 800c530:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c534:	2b40      	cmp	r3, #64	@ 0x40
 800c536:	f040 80b8 	bne.w	800c6aa <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	685b      	ldr	r3, [r3, #4]
 800c542:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c546:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	f000 8167 	beq.w	800c81e <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800c556:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c55a:	429a      	cmp	r2, r3
 800c55c:	f080 815f 	bcs.w	800c81e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c566:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	f003 0320 	and.w	r3, r3, #32
 800c576:	2b00      	cmp	r3, #0
 800c578:	f040 8086 	bne.w	800c688 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c584:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c588:	e853 3f00 	ldrex	r3, [r3]
 800c58c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c590:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c594:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c598:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	461a      	mov	r2, r3
 800c5a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c5a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c5aa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c5b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c5b6:	e841 2300 	strex	r3, r2, [r1]
 800c5ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c5be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d1da      	bne.n	800c57c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	3308      	adds	r3, #8
 800c5cc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c5d0:	e853 3f00 	ldrex	r3, [r3]
 800c5d4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c5d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c5d8:	f023 0301 	bic.w	r3, r3, #1
 800c5dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	3308      	adds	r3, #8
 800c5e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c5ea:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c5ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5f0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c5f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c5f6:	e841 2300 	strex	r3, r2, [r1]
 800c5fa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c5fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d1e1      	bne.n	800c5c6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	3308      	adds	r3, #8
 800c608:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c60a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c60c:	e853 3f00 	ldrex	r3, [r3]
 800c610:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c612:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c614:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c618:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	3308      	adds	r3, #8
 800c622:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c626:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c628:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c62a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c62c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c62e:	e841 2300 	strex	r3, r2, [r1]
 800c632:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c634:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c636:	2b00      	cmp	r3, #0
 800c638:	d1e3      	bne.n	800c602 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	2220      	movs	r2, #32
 800c63e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	2200      	movs	r2, #0
 800c646:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c64e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c650:	e853 3f00 	ldrex	r3, [r3]
 800c654:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c656:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c658:	f023 0310 	bic.w	r3, r3, #16
 800c65c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	461a      	mov	r2, r3
 800c666:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c66a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c66c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c66e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c670:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c672:	e841 2300 	strex	r3, r2, [r1]
 800c676:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c678:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d1e4      	bne.n	800c648 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c682:	4618      	mov	r0, r3
 800c684:	f7fa fe70 	bl	8007368 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2202      	movs	r2, #2
 800c68c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800c69a:	b29b      	uxth	r3, r3
 800c69c:	1ad3      	subs	r3, r2, r3
 800c69e:	b29b      	uxth	r3, r3
 800c6a0:	4619      	mov	r1, r3
 800c6a2:	6878      	ldr	r0, [r7, #4]
 800c6a4:	f000 f8ec 	bl	800c880 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c6a8:	e0b9      	b.n	800c81e <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800c6b6:	b29b      	uxth	r3, r3
 800c6b8:	1ad3      	subs	r3, r2, r3
 800c6ba:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800c6c4:	b29b      	uxth	r3, r3
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	f000 80ab 	beq.w	800c822 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 800c6cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	f000 80a6 	beq.w	800c822 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6de:	e853 3f00 	ldrex	r3, [r3]
 800c6e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c6e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c6ea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	461a      	mov	r2, r3
 800c6f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c6f8:	647b      	str	r3, [r7, #68]	@ 0x44
 800c6fa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c6fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c700:	e841 2300 	strex	r3, r2, [r1]
 800c704:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c706:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d1e4      	bne.n	800c6d6 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	3308      	adds	r3, #8
 800c712:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c716:	e853 3f00 	ldrex	r3, [r3]
 800c71a:	623b      	str	r3, [r7, #32]
   return(result);
 800c71c:	6a3b      	ldr	r3, [r7, #32]
 800c71e:	f023 0301 	bic.w	r3, r3, #1
 800c722:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	3308      	adds	r3, #8
 800c72c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c730:	633a      	str	r2, [r7, #48]	@ 0x30
 800c732:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c734:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c736:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c738:	e841 2300 	strex	r3, r2, [r1]
 800c73c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c73e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c740:	2b00      	cmp	r3, #0
 800c742:	d1e3      	bne.n	800c70c <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	2220      	movs	r2, #32
 800c748:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	2200      	movs	r2, #0
 800c750:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	2200      	movs	r2, #0
 800c756:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c75e:	693b      	ldr	r3, [r7, #16]
 800c760:	e853 3f00 	ldrex	r3, [r3]
 800c764:	60fb      	str	r3, [r7, #12]
   return(result);
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	f023 0310 	bic.w	r3, r3, #16
 800c76c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	461a      	mov	r2, r3
 800c776:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c77a:	61fb      	str	r3, [r7, #28]
 800c77c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c77e:	69b9      	ldr	r1, [r7, #24]
 800c780:	69fa      	ldr	r2, [r7, #28]
 800c782:	e841 2300 	strex	r3, r2, [r1]
 800c786:	617b      	str	r3, [r7, #20]
   return(result);
 800c788:	697b      	ldr	r3, [r7, #20]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d1e4      	bne.n	800c758 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	2202      	movs	r2, #2
 800c792:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c794:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c798:	4619      	mov	r1, r3
 800c79a:	6878      	ldr	r0, [r7, #4]
 800c79c:	f000 f870 	bl	800c880 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c7a0:	e03f      	b.n	800c822 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c7a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c7a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d00e      	beq.n	800c7cc <HAL_UART_IRQHandler+0x570>
 800c7ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c7b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d008      	beq.n	800c7cc <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800c7c2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c7c4:	6878      	ldr	r0, [r7, #4]
 800c7c6:	f000 ff8a 	bl	800d6de <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c7ca:	e02d      	b.n	800c828 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800c7cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c7d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d00e      	beq.n	800c7f6 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800c7d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c7dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d008      	beq.n	800c7f6 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d01c      	beq.n	800c826 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c7f0:	6878      	ldr	r0, [r7, #4]
 800c7f2:	4798      	blx	r3
    }
    return;
 800c7f4:	e017      	b.n	800c826 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c7f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c7fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d012      	beq.n	800c828 <HAL_UART_IRQHandler+0x5cc>
 800c802:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c806:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d00c      	beq.n	800c828 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800c80e:	6878      	ldr	r0, [r7, #4]
 800c810:	f000 ff3b 	bl	800d68a <UART_EndTransmit_IT>
    return;
 800c814:	e008      	b.n	800c828 <HAL_UART_IRQHandler+0x5cc>
      return;
 800c816:	bf00      	nop
 800c818:	e006      	b.n	800c828 <HAL_UART_IRQHandler+0x5cc>
    return;
 800c81a:	bf00      	nop
 800c81c:	e004      	b.n	800c828 <HAL_UART_IRQHandler+0x5cc>
      return;
 800c81e:	bf00      	nop
 800c820:	e002      	b.n	800c828 <HAL_UART_IRQHandler+0x5cc>
      return;
 800c822:	bf00      	nop
 800c824:	e000      	b.n	800c828 <HAL_UART_IRQHandler+0x5cc>
    return;
 800c826:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800c828:	37e8      	adds	r7, #232	@ 0xe8
 800c82a:	46bd      	mov	sp, r7
 800c82c:	bd80      	pop	{r7, pc}
 800c82e:	bf00      	nop

0800c830 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c830:	b480      	push	{r7}
 800c832:	b083      	sub	sp, #12
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c838:	bf00      	nop
 800c83a:	370c      	adds	r7, #12
 800c83c:	46bd      	mov	sp, r7
 800c83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c842:	4770      	bx	lr

0800c844 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c844:	b480      	push	{r7}
 800c846:	b083      	sub	sp, #12
 800c848:	af00      	add	r7, sp, #0
 800c84a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c84c:	bf00      	nop
 800c84e:	370c      	adds	r7, #12
 800c850:	46bd      	mov	sp, r7
 800c852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c856:	4770      	bx	lr

0800c858 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c858:	b480      	push	{r7}
 800c85a:	b083      	sub	sp, #12
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c860:	bf00      	nop
 800c862:	370c      	adds	r7, #12
 800c864:	46bd      	mov	sp, r7
 800c866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86a:	4770      	bx	lr

0800c86c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c86c:	b480      	push	{r7}
 800c86e:	b083      	sub	sp, #12
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c874:	bf00      	nop
 800c876:	370c      	adds	r7, #12
 800c878:	46bd      	mov	sp, r7
 800c87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87e:	4770      	bx	lr

0800c880 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c880:	b480      	push	{r7}
 800c882:	b083      	sub	sp, #12
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
 800c888:	460b      	mov	r3, r1
 800c88a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c88c:	bf00      	nop
 800c88e:	370c      	adds	r7, #12
 800c890:	46bd      	mov	sp, r7
 800c892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c896:	4770      	bx	lr

0800c898 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c898:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c89c:	b08a      	sub	sp, #40	@ 0x28
 800c89e:	af00      	add	r7, sp, #0
 800c8a0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	689a      	ldr	r2, [r3, #8]
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	691b      	ldr	r3, [r3, #16]
 800c8b0:	431a      	orrs	r2, r3
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	695b      	ldr	r3, [r3, #20]
 800c8b6:	431a      	orrs	r2, r3
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	69db      	ldr	r3, [r3, #28]
 800c8bc:	4313      	orrs	r3, r2
 800c8be:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	681a      	ldr	r2, [r3, #0]
 800c8c6:	4ba4      	ldr	r3, [pc, #656]	@ (800cb58 <UART_SetConfig+0x2c0>)
 800c8c8:	4013      	ands	r3, r2
 800c8ca:	68fa      	ldr	r2, [r7, #12]
 800c8cc:	6812      	ldr	r2, [r2, #0]
 800c8ce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c8d0:	430b      	orrs	r3, r1
 800c8d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	685b      	ldr	r3, [r3, #4]
 800c8da:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	68da      	ldr	r2, [r3, #12]
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	430a      	orrs	r2, r1
 800c8e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	699b      	ldr	r3, [r3, #24]
 800c8ee:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	4a99      	ldr	r2, [pc, #612]	@ (800cb5c <UART_SetConfig+0x2c4>)
 800c8f6:	4293      	cmp	r3, r2
 800c8f8:	d004      	beq.n	800c904 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	6a1b      	ldr	r3, [r3, #32]
 800c8fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c900:	4313      	orrs	r3, r2
 800c902:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	689b      	ldr	r3, [r3, #8]
 800c90a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c914:	430a      	orrs	r2, r1
 800c916:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	4a90      	ldr	r2, [pc, #576]	@ (800cb60 <UART_SetConfig+0x2c8>)
 800c91e:	4293      	cmp	r3, r2
 800c920:	d126      	bne.n	800c970 <UART_SetConfig+0xd8>
 800c922:	4b90      	ldr	r3, [pc, #576]	@ (800cb64 <UART_SetConfig+0x2cc>)
 800c924:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c928:	f003 0303 	and.w	r3, r3, #3
 800c92c:	2b03      	cmp	r3, #3
 800c92e:	d81b      	bhi.n	800c968 <UART_SetConfig+0xd0>
 800c930:	a201      	add	r2, pc, #4	@ (adr r2, 800c938 <UART_SetConfig+0xa0>)
 800c932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c936:	bf00      	nop
 800c938:	0800c949 	.word	0x0800c949
 800c93c:	0800c959 	.word	0x0800c959
 800c940:	0800c951 	.word	0x0800c951
 800c944:	0800c961 	.word	0x0800c961
 800c948:	2301      	movs	r3, #1
 800c94a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c94e:	e116      	b.n	800cb7e <UART_SetConfig+0x2e6>
 800c950:	2302      	movs	r3, #2
 800c952:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c956:	e112      	b.n	800cb7e <UART_SetConfig+0x2e6>
 800c958:	2304      	movs	r3, #4
 800c95a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c95e:	e10e      	b.n	800cb7e <UART_SetConfig+0x2e6>
 800c960:	2308      	movs	r3, #8
 800c962:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c966:	e10a      	b.n	800cb7e <UART_SetConfig+0x2e6>
 800c968:	2310      	movs	r3, #16
 800c96a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c96e:	e106      	b.n	800cb7e <UART_SetConfig+0x2e6>
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	4a7c      	ldr	r2, [pc, #496]	@ (800cb68 <UART_SetConfig+0x2d0>)
 800c976:	4293      	cmp	r3, r2
 800c978:	d138      	bne.n	800c9ec <UART_SetConfig+0x154>
 800c97a:	4b7a      	ldr	r3, [pc, #488]	@ (800cb64 <UART_SetConfig+0x2cc>)
 800c97c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c980:	f003 030c 	and.w	r3, r3, #12
 800c984:	2b0c      	cmp	r3, #12
 800c986:	d82d      	bhi.n	800c9e4 <UART_SetConfig+0x14c>
 800c988:	a201      	add	r2, pc, #4	@ (adr r2, 800c990 <UART_SetConfig+0xf8>)
 800c98a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c98e:	bf00      	nop
 800c990:	0800c9c5 	.word	0x0800c9c5
 800c994:	0800c9e5 	.word	0x0800c9e5
 800c998:	0800c9e5 	.word	0x0800c9e5
 800c99c:	0800c9e5 	.word	0x0800c9e5
 800c9a0:	0800c9d5 	.word	0x0800c9d5
 800c9a4:	0800c9e5 	.word	0x0800c9e5
 800c9a8:	0800c9e5 	.word	0x0800c9e5
 800c9ac:	0800c9e5 	.word	0x0800c9e5
 800c9b0:	0800c9cd 	.word	0x0800c9cd
 800c9b4:	0800c9e5 	.word	0x0800c9e5
 800c9b8:	0800c9e5 	.word	0x0800c9e5
 800c9bc:	0800c9e5 	.word	0x0800c9e5
 800c9c0:	0800c9dd 	.word	0x0800c9dd
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c9ca:	e0d8      	b.n	800cb7e <UART_SetConfig+0x2e6>
 800c9cc:	2302      	movs	r3, #2
 800c9ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c9d2:	e0d4      	b.n	800cb7e <UART_SetConfig+0x2e6>
 800c9d4:	2304      	movs	r3, #4
 800c9d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c9da:	e0d0      	b.n	800cb7e <UART_SetConfig+0x2e6>
 800c9dc:	2308      	movs	r3, #8
 800c9de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c9e2:	e0cc      	b.n	800cb7e <UART_SetConfig+0x2e6>
 800c9e4:	2310      	movs	r3, #16
 800c9e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c9ea:	e0c8      	b.n	800cb7e <UART_SetConfig+0x2e6>
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	4a5e      	ldr	r2, [pc, #376]	@ (800cb6c <UART_SetConfig+0x2d4>)
 800c9f2:	4293      	cmp	r3, r2
 800c9f4:	d125      	bne.n	800ca42 <UART_SetConfig+0x1aa>
 800c9f6:	4b5b      	ldr	r3, [pc, #364]	@ (800cb64 <UART_SetConfig+0x2cc>)
 800c9f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c9fc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800ca00:	2b30      	cmp	r3, #48	@ 0x30
 800ca02:	d016      	beq.n	800ca32 <UART_SetConfig+0x19a>
 800ca04:	2b30      	cmp	r3, #48	@ 0x30
 800ca06:	d818      	bhi.n	800ca3a <UART_SetConfig+0x1a2>
 800ca08:	2b20      	cmp	r3, #32
 800ca0a:	d00a      	beq.n	800ca22 <UART_SetConfig+0x18a>
 800ca0c:	2b20      	cmp	r3, #32
 800ca0e:	d814      	bhi.n	800ca3a <UART_SetConfig+0x1a2>
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d002      	beq.n	800ca1a <UART_SetConfig+0x182>
 800ca14:	2b10      	cmp	r3, #16
 800ca16:	d008      	beq.n	800ca2a <UART_SetConfig+0x192>
 800ca18:	e00f      	b.n	800ca3a <UART_SetConfig+0x1a2>
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ca20:	e0ad      	b.n	800cb7e <UART_SetConfig+0x2e6>
 800ca22:	2302      	movs	r3, #2
 800ca24:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ca28:	e0a9      	b.n	800cb7e <UART_SetConfig+0x2e6>
 800ca2a:	2304      	movs	r3, #4
 800ca2c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ca30:	e0a5      	b.n	800cb7e <UART_SetConfig+0x2e6>
 800ca32:	2308      	movs	r3, #8
 800ca34:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ca38:	e0a1      	b.n	800cb7e <UART_SetConfig+0x2e6>
 800ca3a:	2310      	movs	r3, #16
 800ca3c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ca40:	e09d      	b.n	800cb7e <UART_SetConfig+0x2e6>
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	4a4a      	ldr	r2, [pc, #296]	@ (800cb70 <UART_SetConfig+0x2d8>)
 800ca48:	4293      	cmp	r3, r2
 800ca4a:	d125      	bne.n	800ca98 <UART_SetConfig+0x200>
 800ca4c:	4b45      	ldr	r3, [pc, #276]	@ (800cb64 <UART_SetConfig+0x2cc>)
 800ca4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ca52:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ca56:	2bc0      	cmp	r3, #192	@ 0xc0
 800ca58:	d016      	beq.n	800ca88 <UART_SetConfig+0x1f0>
 800ca5a:	2bc0      	cmp	r3, #192	@ 0xc0
 800ca5c:	d818      	bhi.n	800ca90 <UART_SetConfig+0x1f8>
 800ca5e:	2b80      	cmp	r3, #128	@ 0x80
 800ca60:	d00a      	beq.n	800ca78 <UART_SetConfig+0x1e0>
 800ca62:	2b80      	cmp	r3, #128	@ 0x80
 800ca64:	d814      	bhi.n	800ca90 <UART_SetConfig+0x1f8>
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d002      	beq.n	800ca70 <UART_SetConfig+0x1d8>
 800ca6a:	2b40      	cmp	r3, #64	@ 0x40
 800ca6c:	d008      	beq.n	800ca80 <UART_SetConfig+0x1e8>
 800ca6e:	e00f      	b.n	800ca90 <UART_SetConfig+0x1f8>
 800ca70:	2300      	movs	r3, #0
 800ca72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ca76:	e082      	b.n	800cb7e <UART_SetConfig+0x2e6>
 800ca78:	2302      	movs	r3, #2
 800ca7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ca7e:	e07e      	b.n	800cb7e <UART_SetConfig+0x2e6>
 800ca80:	2304      	movs	r3, #4
 800ca82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ca86:	e07a      	b.n	800cb7e <UART_SetConfig+0x2e6>
 800ca88:	2308      	movs	r3, #8
 800ca8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ca8e:	e076      	b.n	800cb7e <UART_SetConfig+0x2e6>
 800ca90:	2310      	movs	r3, #16
 800ca92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ca96:	e072      	b.n	800cb7e <UART_SetConfig+0x2e6>
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	4a35      	ldr	r2, [pc, #212]	@ (800cb74 <UART_SetConfig+0x2dc>)
 800ca9e:	4293      	cmp	r3, r2
 800caa0:	d12a      	bne.n	800caf8 <UART_SetConfig+0x260>
 800caa2:	4b30      	ldr	r3, [pc, #192]	@ (800cb64 <UART_SetConfig+0x2cc>)
 800caa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800caa8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800caac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cab0:	d01a      	beq.n	800cae8 <UART_SetConfig+0x250>
 800cab2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cab6:	d81b      	bhi.n	800caf0 <UART_SetConfig+0x258>
 800cab8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cabc:	d00c      	beq.n	800cad8 <UART_SetConfig+0x240>
 800cabe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cac2:	d815      	bhi.n	800caf0 <UART_SetConfig+0x258>
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d003      	beq.n	800cad0 <UART_SetConfig+0x238>
 800cac8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cacc:	d008      	beq.n	800cae0 <UART_SetConfig+0x248>
 800cace:	e00f      	b.n	800caf0 <UART_SetConfig+0x258>
 800cad0:	2300      	movs	r3, #0
 800cad2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800cad6:	e052      	b.n	800cb7e <UART_SetConfig+0x2e6>
 800cad8:	2302      	movs	r3, #2
 800cada:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800cade:	e04e      	b.n	800cb7e <UART_SetConfig+0x2e6>
 800cae0:	2304      	movs	r3, #4
 800cae2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800cae6:	e04a      	b.n	800cb7e <UART_SetConfig+0x2e6>
 800cae8:	2308      	movs	r3, #8
 800caea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800caee:	e046      	b.n	800cb7e <UART_SetConfig+0x2e6>
 800caf0:	2310      	movs	r3, #16
 800caf2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800caf6:	e042      	b.n	800cb7e <UART_SetConfig+0x2e6>
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	4a17      	ldr	r2, [pc, #92]	@ (800cb5c <UART_SetConfig+0x2c4>)
 800cafe:	4293      	cmp	r3, r2
 800cb00:	d13a      	bne.n	800cb78 <UART_SetConfig+0x2e0>
 800cb02:	4b18      	ldr	r3, [pc, #96]	@ (800cb64 <UART_SetConfig+0x2cc>)
 800cb04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cb08:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800cb0c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800cb10:	d01a      	beq.n	800cb48 <UART_SetConfig+0x2b0>
 800cb12:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800cb16:	d81b      	bhi.n	800cb50 <UART_SetConfig+0x2b8>
 800cb18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cb1c:	d00c      	beq.n	800cb38 <UART_SetConfig+0x2a0>
 800cb1e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cb22:	d815      	bhi.n	800cb50 <UART_SetConfig+0x2b8>
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d003      	beq.n	800cb30 <UART_SetConfig+0x298>
 800cb28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cb2c:	d008      	beq.n	800cb40 <UART_SetConfig+0x2a8>
 800cb2e:	e00f      	b.n	800cb50 <UART_SetConfig+0x2b8>
 800cb30:	2300      	movs	r3, #0
 800cb32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800cb36:	e022      	b.n	800cb7e <UART_SetConfig+0x2e6>
 800cb38:	2302      	movs	r3, #2
 800cb3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800cb3e:	e01e      	b.n	800cb7e <UART_SetConfig+0x2e6>
 800cb40:	2304      	movs	r3, #4
 800cb42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800cb46:	e01a      	b.n	800cb7e <UART_SetConfig+0x2e6>
 800cb48:	2308      	movs	r3, #8
 800cb4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800cb4e:	e016      	b.n	800cb7e <UART_SetConfig+0x2e6>
 800cb50:	2310      	movs	r3, #16
 800cb52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800cb56:	e012      	b.n	800cb7e <UART_SetConfig+0x2e6>
 800cb58:	efff69f3 	.word	0xefff69f3
 800cb5c:	40008000 	.word	0x40008000
 800cb60:	40013800 	.word	0x40013800
 800cb64:	40021000 	.word	0x40021000
 800cb68:	40004400 	.word	0x40004400
 800cb6c:	40004800 	.word	0x40004800
 800cb70:	40004c00 	.word	0x40004c00
 800cb74:	40005000 	.word	0x40005000
 800cb78:	2310      	movs	r3, #16
 800cb7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	4a9f      	ldr	r2, [pc, #636]	@ (800ce00 <UART_SetConfig+0x568>)
 800cb84:	4293      	cmp	r3, r2
 800cb86:	d17a      	bne.n	800cc7e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cb88:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800cb8c:	2b08      	cmp	r3, #8
 800cb8e:	d824      	bhi.n	800cbda <UART_SetConfig+0x342>
 800cb90:	a201      	add	r2, pc, #4	@ (adr r2, 800cb98 <UART_SetConfig+0x300>)
 800cb92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb96:	bf00      	nop
 800cb98:	0800cbbd 	.word	0x0800cbbd
 800cb9c:	0800cbdb 	.word	0x0800cbdb
 800cba0:	0800cbc5 	.word	0x0800cbc5
 800cba4:	0800cbdb 	.word	0x0800cbdb
 800cba8:	0800cbcb 	.word	0x0800cbcb
 800cbac:	0800cbdb 	.word	0x0800cbdb
 800cbb0:	0800cbdb 	.word	0x0800cbdb
 800cbb4:	0800cbdb 	.word	0x0800cbdb
 800cbb8:	0800cbd3 	.word	0x0800cbd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cbbc:	f7fe f972 	bl	800aea4 <HAL_RCC_GetPCLK1Freq>
 800cbc0:	61f8      	str	r0, [r7, #28]
        break;
 800cbc2:	e010      	b.n	800cbe6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cbc4:	4b8f      	ldr	r3, [pc, #572]	@ (800ce04 <UART_SetConfig+0x56c>)
 800cbc6:	61fb      	str	r3, [r7, #28]
        break;
 800cbc8:	e00d      	b.n	800cbe6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cbca:	f7fe f8d3 	bl	800ad74 <HAL_RCC_GetSysClockFreq>
 800cbce:	61f8      	str	r0, [r7, #28]
        break;
 800cbd0:	e009      	b.n	800cbe6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cbd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cbd6:	61fb      	str	r3, [r7, #28]
        break;
 800cbd8:	e005      	b.n	800cbe6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800cbda:	2300      	movs	r3, #0
 800cbdc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800cbde:	2301      	movs	r3, #1
 800cbe0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800cbe4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cbe6:	69fb      	ldr	r3, [r7, #28]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	f000 80fb 	beq.w	800cde4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	685a      	ldr	r2, [r3, #4]
 800cbf2:	4613      	mov	r3, r2
 800cbf4:	005b      	lsls	r3, r3, #1
 800cbf6:	4413      	add	r3, r2
 800cbf8:	69fa      	ldr	r2, [r7, #28]
 800cbfa:	429a      	cmp	r2, r3
 800cbfc:	d305      	bcc.n	800cc0a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	685b      	ldr	r3, [r3, #4]
 800cc02:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800cc04:	69fa      	ldr	r2, [r7, #28]
 800cc06:	429a      	cmp	r2, r3
 800cc08:	d903      	bls.n	800cc12 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800cc0a:	2301      	movs	r3, #1
 800cc0c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800cc10:	e0e8      	b.n	800cde4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800cc12:	69fb      	ldr	r3, [r7, #28]
 800cc14:	2200      	movs	r2, #0
 800cc16:	461c      	mov	r4, r3
 800cc18:	4615      	mov	r5, r2
 800cc1a:	f04f 0200 	mov.w	r2, #0
 800cc1e:	f04f 0300 	mov.w	r3, #0
 800cc22:	022b      	lsls	r3, r5, #8
 800cc24:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800cc28:	0222      	lsls	r2, r4, #8
 800cc2a:	68f9      	ldr	r1, [r7, #12]
 800cc2c:	6849      	ldr	r1, [r1, #4]
 800cc2e:	0849      	lsrs	r1, r1, #1
 800cc30:	2000      	movs	r0, #0
 800cc32:	4688      	mov	r8, r1
 800cc34:	4681      	mov	r9, r0
 800cc36:	eb12 0a08 	adds.w	sl, r2, r8
 800cc3a:	eb43 0b09 	adc.w	fp, r3, r9
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	685b      	ldr	r3, [r3, #4]
 800cc42:	2200      	movs	r2, #0
 800cc44:	603b      	str	r3, [r7, #0]
 800cc46:	607a      	str	r2, [r7, #4]
 800cc48:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc4c:	4650      	mov	r0, sl
 800cc4e:	4659      	mov	r1, fp
 800cc50:	f7f3 facc 	bl	80001ec <__aeabi_uldivmod>
 800cc54:	4602      	mov	r2, r0
 800cc56:	460b      	mov	r3, r1
 800cc58:	4613      	mov	r3, r2
 800cc5a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cc5c:	69bb      	ldr	r3, [r7, #24]
 800cc5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cc62:	d308      	bcc.n	800cc76 <UART_SetConfig+0x3de>
 800cc64:	69bb      	ldr	r3, [r7, #24]
 800cc66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cc6a:	d204      	bcs.n	800cc76 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	69ba      	ldr	r2, [r7, #24]
 800cc72:	60da      	str	r2, [r3, #12]
 800cc74:	e0b6      	b.n	800cde4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800cc76:	2301      	movs	r3, #1
 800cc78:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800cc7c:	e0b2      	b.n	800cde4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	69db      	ldr	r3, [r3, #28]
 800cc82:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cc86:	d15e      	bne.n	800cd46 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800cc88:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800cc8c:	2b08      	cmp	r3, #8
 800cc8e:	d828      	bhi.n	800cce2 <UART_SetConfig+0x44a>
 800cc90:	a201      	add	r2, pc, #4	@ (adr r2, 800cc98 <UART_SetConfig+0x400>)
 800cc92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc96:	bf00      	nop
 800cc98:	0800ccbd 	.word	0x0800ccbd
 800cc9c:	0800ccc5 	.word	0x0800ccc5
 800cca0:	0800cccd 	.word	0x0800cccd
 800cca4:	0800cce3 	.word	0x0800cce3
 800cca8:	0800ccd3 	.word	0x0800ccd3
 800ccac:	0800cce3 	.word	0x0800cce3
 800ccb0:	0800cce3 	.word	0x0800cce3
 800ccb4:	0800cce3 	.word	0x0800cce3
 800ccb8:	0800ccdb 	.word	0x0800ccdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ccbc:	f7fe f8f2 	bl	800aea4 <HAL_RCC_GetPCLK1Freq>
 800ccc0:	61f8      	str	r0, [r7, #28]
        break;
 800ccc2:	e014      	b.n	800ccee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ccc4:	f7fe f904 	bl	800aed0 <HAL_RCC_GetPCLK2Freq>
 800ccc8:	61f8      	str	r0, [r7, #28]
        break;
 800ccca:	e010      	b.n	800ccee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cccc:	4b4d      	ldr	r3, [pc, #308]	@ (800ce04 <UART_SetConfig+0x56c>)
 800ccce:	61fb      	str	r3, [r7, #28]
        break;
 800ccd0:	e00d      	b.n	800ccee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ccd2:	f7fe f84f 	bl	800ad74 <HAL_RCC_GetSysClockFreq>
 800ccd6:	61f8      	str	r0, [r7, #28]
        break;
 800ccd8:	e009      	b.n	800ccee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ccda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ccde:	61fb      	str	r3, [r7, #28]
        break;
 800cce0:	e005      	b.n	800ccee <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800cce2:	2300      	movs	r3, #0
 800cce4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800cce6:	2301      	movs	r3, #1
 800cce8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800ccec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ccee:	69fb      	ldr	r3, [r7, #28]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d077      	beq.n	800cde4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ccf4:	69fb      	ldr	r3, [r7, #28]
 800ccf6:	005a      	lsls	r2, r3, #1
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	685b      	ldr	r3, [r3, #4]
 800ccfc:	085b      	lsrs	r3, r3, #1
 800ccfe:	441a      	add	r2, r3
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	685b      	ldr	r3, [r3, #4]
 800cd04:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd08:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cd0a:	69bb      	ldr	r3, [r7, #24]
 800cd0c:	2b0f      	cmp	r3, #15
 800cd0e:	d916      	bls.n	800cd3e <UART_SetConfig+0x4a6>
 800cd10:	69bb      	ldr	r3, [r7, #24]
 800cd12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cd16:	d212      	bcs.n	800cd3e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cd18:	69bb      	ldr	r3, [r7, #24]
 800cd1a:	b29b      	uxth	r3, r3
 800cd1c:	f023 030f 	bic.w	r3, r3, #15
 800cd20:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cd22:	69bb      	ldr	r3, [r7, #24]
 800cd24:	085b      	lsrs	r3, r3, #1
 800cd26:	b29b      	uxth	r3, r3
 800cd28:	f003 0307 	and.w	r3, r3, #7
 800cd2c:	b29a      	uxth	r2, r3
 800cd2e:	8afb      	ldrh	r3, [r7, #22]
 800cd30:	4313      	orrs	r3, r2
 800cd32:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	8afa      	ldrh	r2, [r7, #22]
 800cd3a:	60da      	str	r2, [r3, #12]
 800cd3c:	e052      	b.n	800cde4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800cd3e:	2301      	movs	r3, #1
 800cd40:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800cd44:	e04e      	b.n	800cde4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cd46:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800cd4a:	2b08      	cmp	r3, #8
 800cd4c:	d827      	bhi.n	800cd9e <UART_SetConfig+0x506>
 800cd4e:	a201      	add	r2, pc, #4	@ (adr r2, 800cd54 <UART_SetConfig+0x4bc>)
 800cd50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd54:	0800cd79 	.word	0x0800cd79
 800cd58:	0800cd81 	.word	0x0800cd81
 800cd5c:	0800cd89 	.word	0x0800cd89
 800cd60:	0800cd9f 	.word	0x0800cd9f
 800cd64:	0800cd8f 	.word	0x0800cd8f
 800cd68:	0800cd9f 	.word	0x0800cd9f
 800cd6c:	0800cd9f 	.word	0x0800cd9f
 800cd70:	0800cd9f 	.word	0x0800cd9f
 800cd74:	0800cd97 	.word	0x0800cd97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cd78:	f7fe f894 	bl	800aea4 <HAL_RCC_GetPCLK1Freq>
 800cd7c:	61f8      	str	r0, [r7, #28]
        break;
 800cd7e:	e014      	b.n	800cdaa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cd80:	f7fe f8a6 	bl	800aed0 <HAL_RCC_GetPCLK2Freq>
 800cd84:	61f8      	str	r0, [r7, #28]
        break;
 800cd86:	e010      	b.n	800cdaa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cd88:	4b1e      	ldr	r3, [pc, #120]	@ (800ce04 <UART_SetConfig+0x56c>)
 800cd8a:	61fb      	str	r3, [r7, #28]
        break;
 800cd8c:	e00d      	b.n	800cdaa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cd8e:	f7fd fff1 	bl	800ad74 <HAL_RCC_GetSysClockFreq>
 800cd92:	61f8      	str	r0, [r7, #28]
        break;
 800cd94:	e009      	b.n	800cdaa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cd96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cd9a:	61fb      	str	r3, [r7, #28]
        break;
 800cd9c:	e005      	b.n	800cdaa <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800cd9e:	2300      	movs	r3, #0
 800cda0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800cda2:	2301      	movs	r3, #1
 800cda4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800cda8:	bf00      	nop
    }

    if (pclk != 0U)
 800cdaa:	69fb      	ldr	r3, [r7, #28]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d019      	beq.n	800cde4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	685b      	ldr	r3, [r3, #4]
 800cdb4:	085a      	lsrs	r2, r3, #1
 800cdb6:	69fb      	ldr	r3, [r7, #28]
 800cdb8:	441a      	add	r2, r3
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	685b      	ldr	r3, [r3, #4]
 800cdbe:	fbb2 f3f3 	udiv	r3, r2, r3
 800cdc2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cdc4:	69bb      	ldr	r3, [r7, #24]
 800cdc6:	2b0f      	cmp	r3, #15
 800cdc8:	d909      	bls.n	800cdde <UART_SetConfig+0x546>
 800cdca:	69bb      	ldr	r3, [r7, #24]
 800cdcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cdd0:	d205      	bcs.n	800cdde <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cdd2:	69bb      	ldr	r3, [r7, #24]
 800cdd4:	b29a      	uxth	r2, r3
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	60da      	str	r2, [r3, #12]
 800cddc:	e002      	b.n	800cde4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800cdde:	2301      	movs	r3, #1
 800cde0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	2200      	movs	r2, #0
 800cde8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	2200      	movs	r2, #0
 800cdee:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800cdf0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	3728      	adds	r7, #40	@ 0x28
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cdfe:	bf00      	nop
 800ce00:	40008000 	.word	0x40008000
 800ce04:	00f42400 	.word	0x00f42400

0800ce08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ce08:	b480      	push	{r7}
 800ce0a:	b083      	sub	sp, #12
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce14:	f003 0308 	and.w	r3, r3, #8
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d00a      	beq.n	800ce32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	685b      	ldr	r3, [r3, #4]
 800ce22:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	430a      	orrs	r2, r1
 800ce30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce36:	f003 0301 	and.w	r3, r3, #1
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d00a      	beq.n	800ce54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	685b      	ldr	r3, [r3, #4]
 800ce44:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	430a      	orrs	r2, r1
 800ce52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce58:	f003 0302 	and.w	r3, r3, #2
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d00a      	beq.n	800ce76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	685b      	ldr	r3, [r3, #4]
 800ce66:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	430a      	orrs	r2, r1
 800ce74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce7a:	f003 0304 	and.w	r3, r3, #4
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d00a      	beq.n	800ce98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	685b      	ldr	r3, [r3, #4]
 800ce88:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	430a      	orrs	r2, r1
 800ce96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce9c:	f003 0310 	and.w	r3, r3, #16
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d00a      	beq.n	800ceba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	689b      	ldr	r3, [r3, #8]
 800ceaa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	430a      	orrs	r2, r1
 800ceb8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cebe:	f003 0320 	and.w	r3, r3, #32
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d00a      	beq.n	800cedc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	689b      	ldr	r3, [r3, #8]
 800cecc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	430a      	orrs	r2, r1
 800ceda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cee0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d01a      	beq.n	800cf1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	685b      	ldr	r3, [r3, #4]
 800ceee:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	430a      	orrs	r2, r1
 800cefc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cf06:	d10a      	bne.n	800cf1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	685b      	ldr	r3, [r3, #4]
 800cf0e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	430a      	orrs	r2, r1
 800cf1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d00a      	beq.n	800cf40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	685b      	ldr	r3, [r3, #4]
 800cf30:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	430a      	orrs	r2, r1
 800cf3e:	605a      	str	r2, [r3, #4]
  }
}
 800cf40:	bf00      	nop
 800cf42:	370c      	adds	r7, #12
 800cf44:	46bd      	mov	sp, r7
 800cf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4a:	4770      	bx	lr

0800cf4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	b098      	sub	sp, #96	@ 0x60
 800cf50:	af02      	add	r7, sp, #8
 800cf52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	2200      	movs	r2, #0
 800cf58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cf5c:	f7f8 fa6a 	bl	8005434 <HAL_GetTick>
 800cf60:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	f003 0308 	and.w	r3, r3, #8
 800cf6c:	2b08      	cmp	r3, #8
 800cf6e:	d12e      	bne.n	800cfce <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cf70:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cf74:	9300      	str	r3, [sp, #0]
 800cf76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cf78:	2200      	movs	r2, #0
 800cf7a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800cf7e:	6878      	ldr	r0, [r7, #4]
 800cf80:	f000 f88c 	bl	800d09c <UART_WaitOnFlagUntilTimeout>
 800cf84:	4603      	mov	r3, r0
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d021      	beq.n	800cfce <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf92:	e853 3f00 	ldrex	r3, [r3]
 800cf96:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cf98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cf9e:	653b      	str	r3, [r7, #80]	@ 0x50
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	461a      	mov	r2, r3
 800cfa6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cfa8:	647b      	str	r3, [r7, #68]	@ 0x44
 800cfaa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cfae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cfb0:	e841 2300 	strex	r3, r2, [r1]
 800cfb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cfb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d1e6      	bne.n	800cf8a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	2220      	movs	r2, #32
 800cfc0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cfca:	2303      	movs	r3, #3
 800cfcc:	e062      	b.n	800d094 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	f003 0304 	and.w	r3, r3, #4
 800cfd8:	2b04      	cmp	r3, #4
 800cfda:	d149      	bne.n	800d070 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cfdc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cfe0:	9300      	str	r3, [sp, #0]
 800cfe2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cfe4:	2200      	movs	r2, #0
 800cfe6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800cfea:	6878      	ldr	r0, [r7, #4]
 800cfec:	f000 f856 	bl	800d09c <UART_WaitOnFlagUntilTimeout>
 800cff0:	4603      	mov	r3, r0
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d03c      	beq.n	800d070 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cffe:	e853 3f00 	ldrex	r3, [r3]
 800d002:	623b      	str	r3, [r7, #32]
   return(result);
 800d004:	6a3b      	ldr	r3, [r7, #32]
 800d006:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d00a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	461a      	mov	r2, r3
 800d012:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d014:	633b      	str	r3, [r7, #48]	@ 0x30
 800d016:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d018:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d01a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d01c:	e841 2300 	strex	r3, r2, [r1]
 800d020:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d024:	2b00      	cmp	r3, #0
 800d026:	d1e6      	bne.n	800cff6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	3308      	adds	r3, #8
 800d02e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d030:	693b      	ldr	r3, [r7, #16]
 800d032:	e853 3f00 	ldrex	r3, [r3]
 800d036:	60fb      	str	r3, [r7, #12]
   return(result);
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	f023 0301 	bic.w	r3, r3, #1
 800d03e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	3308      	adds	r3, #8
 800d046:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d048:	61fa      	str	r2, [r7, #28]
 800d04a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d04c:	69b9      	ldr	r1, [r7, #24]
 800d04e:	69fa      	ldr	r2, [r7, #28]
 800d050:	e841 2300 	strex	r3, r2, [r1]
 800d054:	617b      	str	r3, [r7, #20]
   return(result);
 800d056:	697b      	ldr	r3, [r7, #20]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d1e5      	bne.n	800d028 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	2220      	movs	r2, #32
 800d060:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	2200      	movs	r2, #0
 800d068:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d06c:	2303      	movs	r3, #3
 800d06e:	e011      	b.n	800d094 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	2220      	movs	r2, #32
 800d074:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	2220      	movs	r2, #32
 800d07a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	2200      	movs	r2, #0
 800d082:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	2200      	movs	r2, #0
 800d088:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	2200      	movs	r2, #0
 800d08e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800d092:	2300      	movs	r3, #0
}
 800d094:	4618      	mov	r0, r3
 800d096:	3758      	adds	r7, #88	@ 0x58
 800d098:	46bd      	mov	sp, r7
 800d09a:	bd80      	pop	{r7, pc}

0800d09c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d09c:	b580      	push	{r7, lr}
 800d09e:	b084      	sub	sp, #16
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	60f8      	str	r0, [r7, #12]
 800d0a4:	60b9      	str	r1, [r7, #8]
 800d0a6:	603b      	str	r3, [r7, #0]
 800d0a8:	4613      	mov	r3, r2
 800d0aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d0ac:	e049      	b.n	800d142 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d0ae:	69bb      	ldr	r3, [r7, #24]
 800d0b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0b4:	d045      	beq.n	800d142 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d0b6:	f7f8 f9bd 	bl	8005434 <HAL_GetTick>
 800d0ba:	4602      	mov	r2, r0
 800d0bc:	683b      	ldr	r3, [r7, #0]
 800d0be:	1ad3      	subs	r3, r2, r3
 800d0c0:	69ba      	ldr	r2, [r7, #24]
 800d0c2:	429a      	cmp	r2, r3
 800d0c4:	d302      	bcc.n	800d0cc <UART_WaitOnFlagUntilTimeout+0x30>
 800d0c6:	69bb      	ldr	r3, [r7, #24]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d101      	bne.n	800d0d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d0cc:	2303      	movs	r3, #3
 800d0ce:	e048      	b.n	800d162 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	f003 0304 	and.w	r3, r3, #4
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d031      	beq.n	800d142 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	69db      	ldr	r3, [r3, #28]
 800d0e4:	f003 0308 	and.w	r3, r3, #8
 800d0e8:	2b08      	cmp	r3, #8
 800d0ea:	d110      	bne.n	800d10e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	2208      	movs	r2, #8
 800d0f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d0f4:	68f8      	ldr	r0, [r7, #12]
 800d0f6:	f000 f8ff 	bl	800d2f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	2208      	movs	r2, #8
 800d0fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	2200      	movs	r2, #0
 800d106:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800d10a:	2301      	movs	r3, #1
 800d10c:	e029      	b.n	800d162 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	69db      	ldr	r3, [r3, #28]
 800d114:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d118:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d11c:	d111      	bne.n	800d142 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d126:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d128:	68f8      	ldr	r0, [r7, #12]
 800d12a:	f000 f8e5 	bl	800d2f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	2220      	movs	r2, #32
 800d132:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	2200      	movs	r2, #0
 800d13a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800d13e:	2303      	movs	r3, #3
 800d140:	e00f      	b.n	800d162 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	69da      	ldr	r2, [r3, #28]
 800d148:	68bb      	ldr	r3, [r7, #8]
 800d14a:	4013      	ands	r3, r2
 800d14c:	68ba      	ldr	r2, [r7, #8]
 800d14e:	429a      	cmp	r2, r3
 800d150:	bf0c      	ite	eq
 800d152:	2301      	moveq	r3, #1
 800d154:	2300      	movne	r3, #0
 800d156:	b2db      	uxtb	r3, r3
 800d158:	461a      	mov	r2, r3
 800d15a:	79fb      	ldrb	r3, [r7, #7]
 800d15c:	429a      	cmp	r2, r3
 800d15e:	d0a6      	beq.n	800d0ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d160:	2300      	movs	r3, #0
}
 800d162:	4618      	mov	r0, r3
 800d164:	3710      	adds	r7, #16
 800d166:	46bd      	mov	sp, r7
 800d168:	bd80      	pop	{r7, pc}
	...

0800d16c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b096      	sub	sp, #88	@ 0x58
 800d170:	af00      	add	r7, sp, #0
 800d172:	60f8      	str	r0, [r7, #12]
 800d174:	60b9      	str	r1, [r7, #8]
 800d176:	4613      	mov	r3, r2
 800d178:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	68ba      	ldr	r2, [r7, #8]
 800d17e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	88fa      	ldrh	r2, [r7, #6]
 800d184:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	2200      	movs	r2, #0
 800d18c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	2222      	movs	r2, #34	@ 0x22
 800d194:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d028      	beq.n	800d1f2 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d1a4:	4a3e      	ldr	r2, [pc, #248]	@ (800d2a0 <UART_Start_Receive_DMA+0x134>)
 800d1a6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d1ac:	4a3d      	ldr	r2, [pc, #244]	@ (800d2a4 <UART_Start_Receive_DMA+0x138>)
 800d1ae:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d1b4:	4a3c      	ldr	r2, [pc, #240]	@ (800d2a8 <UART_Start_Receive_DMA+0x13c>)
 800d1b6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d1bc:	2200      	movs	r2, #0
 800d1be:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	3324      	adds	r3, #36	@ 0x24
 800d1ca:	4619      	mov	r1, r3
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d1d0:	461a      	mov	r2, r3
 800d1d2:	88fb      	ldrh	r3, [r7, #6]
 800d1d4:	f7fa f868 	bl	80072a8 <HAL_DMA_Start_IT>
 800d1d8:	4603      	mov	r3, r0
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d009      	beq.n	800d1f2 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	2210      	movs	r2, #16
 800d1e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	2220      	movs	r2, #32
 800d1ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800d1ee:	2301      	movs	r3, #1
 800d1f0:	e051      	b.n	800d296 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	691b      	ldr	r3, [r3, #16]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d018      	beq.n	800d22c <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d200:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d202:	e853 3f00 	ldrex	r3, [r3]
 800d206:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d20a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d20e:	657b      	str	r3, [r7, #84]	@ 0x54
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	461a      	mov	r2, r3
 800d216:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d218:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d21a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d21c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d21e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d220:	e841 2300 	strex	r3, r2, [r1]
 800d224:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800d226:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d1e6      	bne.n	800d1fa <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	3308      	adds	r3, #8
 800d232:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d236:	e853 3f00 	ldrex	r3, [r3]
 800d23a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d23c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d23e:	f043 0301 	orr.w	r3, r3, #1
 800d242:	653b      	str	r3, [r7, #80]	@ 0x50
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	3308      	adds	r3, #8
 800d24a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d24c:	637a      	str	r2, [r7, #52]	@ 0x34
 800d24e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d250:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d252:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d254:	e841 2300 	strex	r3, r2, [r1]
 800d258:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800d25a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d1e5      	bne.n	800d22c <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	3308      	adds	r3, #8
 800d266:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d268:	697b      	ldr	r3, [r7, #20]
 800d26a:	e853 3f00 	ldrex	r3, [r3]
 800d26e:	613b      	str	r3, [r7, #16]
   return(result);
 800d270:	693b      	ldr	r3, [r7, #16]
 800d272:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d276:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	3308      	adds	r3, #8
 800d27e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d280:	623a      	str	r2, [r7, #32]
 800d282:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d284:	69f9      	ldr	r1, [r7, #28]
 800d286:	6a3a      	ldr	r2, [r7, #32]
 800d288:	e841 2300 	strex	r3, r2, [r1]
 800d28c:	61bb      	str	r3, [r7, #24]
   return(result);
 800d28e:	69bb      	ldr	r3, [r7, #24]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d1e5      	bne.n	800d260 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800d294:	2300      	movs	r3, #0
}
 800d296:	4618      	mov	r0, r3
 800d298:	3758      	adds	r7, #88	@ 0x58
 800d29a:	46bd      	mov	sp, r7
 800d29c:	bd80      	pop	{r7, pc}
 800d29e:	bf00      	nop
 800d2a0:	0800d477 	.word	0x0800d477
 800d2a4:	0800d5a3 	.word	0x0800d5a3
 800d2a8:	0800d5e1 	.word	0x0800d5e1

0800d2ac <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d2ac:	b480      	push	{r7}
 800d2ae:	b089      	sub	sp, #36	@ 0x24
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	e853 3f00 	ldrex	r3, [r3]
 800d2c0:	60bb      	str	r3, [r7, #8]
   return(result);
 800d2c2:	68bb      	ldr	r3, [r7, #8]
 800d2c4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800d2c8:	61fb      	str	r3, [r7, #28]
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	461a      	mov	r2, r3
 800d2d0:	69fb      	ldr	r3, [r7, #28]
 800d2d2:	61bb      	str	r3, [r7, #24]
 800d2d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2d6:	6979      	ldr	r1, [r7, #20]
 800d2d8:	69ba      	ldr	r2, [r7, #24]
 800d2da:	e841 2300 	strex	r3, r2, [r1]
 800d2de:	613b      	str	r3, [r7, #16]
   return(result);
 800d2e0:	693b      	ldr	r3, [r7, #16]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d1e6      	bne.n	800d2b4 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	2220      	movs	r2, #32
 800d2ea:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800d2ec:	bf00      	nop
 800d2ee:	3724      	adds	r7, #36	@ 0x24
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f6:	4770      	bx	lr

0800d2f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d2f8:	b480      	push	{r7}
 800d2fa:	b095      	sub	sp, #84	@ 0x54
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d306:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d308:	e853 3f00 	ldrex	r3, [r3]
 800d30c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d30e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d310:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d314:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	461a      	mov	r2, r3
 800d31c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d31e:	643b      	str	r3, [r7, #64]	@ 0x40
 800d320:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d322:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d324:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d326:	e841 2300 	strex	r3, r2, [r1]
 800d32a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d32c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d1e6      	bne.n	800d300 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	3308      	adds	r3, #8
 800d338:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d33a:	6a3b      	ldr	r3, [r7, #32]
 800d33c:	e853 3f00 	ldrex	r3, [r3]
 800d340:	61fb      	str	r3, [r7, #28]
   return(result);
 800d342:	69fb      	ldr	r3, [r7, #28]
 800d344:	f023 0301 	bic.w	r3, r3, #1
 800d348:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	3308      	adds	r3, #8
 800d350:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d352:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d354:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d356:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d358:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d35a:	e841 2300 	strex	r3, r2, [r1]
 800d35e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d362:	2b00      	cmp	r3, #0
 800d364:	d1e5      	bne.n	800d332 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d36a:	2b01      	cmp	r3, #1
 800d36c:	d118      	bne.n	800d3a0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	e853 3f00 	ldrex	r3, [r3]
 800d37a:	60bb      	str	r3, [r7, #8]
   return(result);
 800d37c:	68bb      	ldr	r3, [r7, #8]
 800d37e:	f023 0310 	bic.w	r3, r3, #16
 800d382:	647b      	str	r3, [r7, #68]	@ 0x44
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	461a      	mov	r2, r3
 800d38a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d38c:	61bb      	str	r3, [r7, #24]
 800d38e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d390:	6979      	ldr	r1, [r7, #20]
 800d392:	69ba      	ldr	r2, [r7, #24]
 800d394:	e841 2300 	strex	r3, r2, [r1]
 800d398:	613b      	str	r3, [r7, #16]
   return(result);
 800d39a:	693b      	ldr	r3, [r7, #16]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d1e6      	bne.n	800d36e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	2220      	movs	r2, #32
 800d3a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	2200      	movs	r2, #0
 800d3b2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800d3b4:	bf00      	nop
 800d3b6:	3754      	adds	r7, #84	@ 0x54
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3be:	4770      	bx	lr

0800d3c0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b090      	sub	sp, #64	@ 0x40
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3cc:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	f003 0320 	and.w	r3, r3, #32
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d137      	bne.n	800d44c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800d3dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3de:	2200      	movs	r2, #0
 800d3e0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d3e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	3308      	adds	r3, #8
 800d3ea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3ee:	e853 3f00 	ldrex	r3, [r3]
 800d3f2:	623b      	str	r3, [r7, #32]
   return(result);
 800d3f4:	6a3b      	ldr	r3, [r7, #32]
 800d3f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d3fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d3fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	3308      	adds	r3, #8
 800d402:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d404:	633a      	str	r2, [r7, #48]	@ 0x30
 800d406:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d408:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d40a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d40c:	e841 2300 	strex	r3, r2, [r1]
 800d410:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d414:	2b00      	cmp	r3, #0
 800d416:	d1e5      	bne.n	800d3e4 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d418:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d41e:	693b      	ldr	r3, [r7, #16]
 800d420:	e853 3f00 	ldrex	r3, [r3]
 800d424:	60fb      	str	r3, [r7, #12]
   return(result);
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d42c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d42e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	461a      	mov	r2, r3
 800d434:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d436:	61fb      	str	r3, [r7, #28]
 800d438:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d43a:	69b9      	ldr	r1, [r7, #24]
 800d43c:	69fa      	ldr	r2, [r7, #28]
 800d43e:	e841 2300 	strex	r3, r2, [r1]
 800d442:	617b      	str	r3, [r7, #20]
   return(result);
 800d444:	697b      	ldr	r3, [r7, #20]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d1e6      	bne.n	800d418 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d44a:	e002      	b.n	800d452 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800d44c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d44e:	f7ff f9ef 	bl	800c830 <HAL_UART_TxCpltCallback>
}
 800d452:	bf00      	nop
 800d454:	3740      	adds	r7, #64	@ 0x40
 800d456:	46bd      	mov	sp, r7
 800d458:	bd80      	pop	{r7, pc}

0800d45a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d45a:	b580      	push	{r7, lr}
 800d45c:	b084      	sub	sp, #16
 800d45e:	af00      	add	r7, sp, #0
 800d460:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d466:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800d468:	68f8      	ldr	r0, [r7, #12]
 800d46a:	f7ff f9eb 	bl	800c844 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d46e:	bf00      	nop
 800d470:	3710      	adds	r7, #16
 800d472:	46bd      	mov	sp, r7
 800d474:	bd80      	pop	{r7, pc}

0800d476 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d476:	b580      	push	{r7, lr}
 800d478:	b09c      	sub	sp, #112	@ 0x70
 800d47a:	af00      	add	r7, sp, #0
 800d47c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d482:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	f003 0320 	and.w	r3, r3, #32
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d171      	bne.n	800d576 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800d492:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d494:	2200      	movs	r2, #0
 800d496:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d49a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d4a2:	e853 3f00 	ldrex	r3, [r3]
 800d4a6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d4a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d4aa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d4ae:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d4b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	461a      	mov	r2, r3
 800d4b6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d4b8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d4ba:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4bc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d4be:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d4c0:	e841 2300 	strex	r3, r2, [r1]
 800d4c4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d4c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d1e6      	bne.n	800d49a <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d4cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	3308      	adds	r3, #8
 800d4d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4d6:	e853 3f00 	ldrex	r3, [r3]
 800d4da:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d4dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d4de:	f023 0301 	bic.w	r3, r3, #1
 800d4e2:	667b      	str	r3, [r7, #100]	@ 0x64
 800d4e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	3308      	adds	r3, #8
 800d4ea:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d4ec:	647a      	str	r2, [r7, #68]	@ 0x44
 800d4ee:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4f0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d4f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d4f4:	e841 2300 	strex	r3, r2, [r1]
 800d4f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d4fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d1e5      	bne.n	800d4cc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d500:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	3308      	adds	r3, #8
 800d506:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d50a:	e853 3f00 	ldrex	r3, [r3]
 800d50e:	623b      	str	r3, [r7, #32]
   return(result);
 800d510:	6a3b      	ldr	r3, [r7, #32]
 800d512:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d516:	663b      	str	r3, [r7, #96]	@ 0x60
 800d518:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	3308      	adds	r3, #8
 800d51e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d520:	633a      	str	r2, [r7, #48]	@ 0x30
 800d522:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d524:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d526:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d528:	e841 2300 	strex	r3, r2, [r1]
 800d52c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d52e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d530:	2b00      	cmp	r3, #0
 800d532:	d1e5      	bne.n	800d500 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d534:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d536:	2220      	movs	r2, #32
 800d538:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d53c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d53e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d540:	2b01      	cmp	r3, #1
 800d542:	d118      	bne.n	800d576 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d544:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d54a:	693b      	ldr	r3, [r7, #16]
 800d54c:	e853 3f00 	ldrex	r3, [r3]
 800d550:	60fb      	str	r3, [r7, #12]
   return(result);
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	f023 0310 	bic.w	r3, r3, #16
 800d558:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d55a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	461a      	mov	r2, r3
 800d560:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d562:	61fb      	str	r3, [r7, #28]
 800d564:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d566:	69b9      	ldr	r1, [r7, #24]
 800d568:	69fa      	ldr	r2, [r7, #28]
 800d56a:	e841 2300 	strex	r3, r2, [r1]
 800d56e:	617b      	str	r3, [r7, #20]
   return(result);
 800d570:	697b      	ldr	r3, [r7, #20]
 800d572:	2b00      	cmp	r3, #0
 800d574:	d1e6      	bne.n	800d544 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d576:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d578:	2200      	movs	r2, #0
 800d57a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d57c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d57e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d580:	2b01      	cmp	r3, #1
 800d582:	d107      	bne.n	800d594 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d584:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d586:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800d58a:	4619      	mov	r1, r3
 800d58c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800d58e:	f7ff f977 	bl	800c880 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d592:	e002      	b.n	800d59a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800d594:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800d596:	f7f6 ffe3 	bl	8004560 <HAL_UART_RxCpltCallback>
}
 800d59a:	bf00      	nop
 800d59c:	3770      	adds	r7, #112	@ 0x70
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	bd80      	pop	{r7, pc}

0800d5a2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d5a2:	b580      	push	{r7, lr}
 800d5a4:	b084      	sub	sp, #16
 800d5a6:	af00      	add	r7, sp, #0
 800d5a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5ae:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	2201      	movs	r2, #1
 800d5b4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d5ba:	2b01      	cmp	r3, #1
 800d5bc:	d109      	bne.n	800d5d2 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800d5c4:	085b      	lsrs	r3, r3, #1
 800d5c6:	b29b      	uxth	r3, r3
 800d5c8:	4619      	mov	r1, r3
 800d5ca:	68f8      	ldr	r0, [r7, #12]
 800d5cc:	f7ff f958 	bl	800c880 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d5d0:	e002      	b.n	800d5d8 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800d5d2:	68f8      	ldr	r0, [r7, #12]
 800d5d4:	f7ff f940 	bl	800c858 <HAL_UART_RxHalfCpltCallback>
}
 800d5d8:	bf00      	nop
 800d5da:	3710      	adds	r7, #16
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	bd80      	pop	{r7, pc}

0800d5e0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b086      	sub	sp, #24
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5ec:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d5ee:	697b      	ldr	r3, [r7, #20]
 800d5f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d5f2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d5f4:	697b      	ldr	r3, [r7, #20]
 800d5f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d5fa:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d5fc:	697b      	ldr	r3, [r7, #20]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	689b      	ldr	r3, [r3, #8]
 800d602:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d606:	2b80      	cmp	r3, #128	@ 0x80
 800d608:	d109      	bne.n	800d61e <UART_DMAError+0x3e>
 800d60a:	693b      	ldr	r3, [r7, #16]
 800d60c:	2b21      	cmp	r3, #33	@ 0x21
 800d60e:	d106      	bne.n	800d61e <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d610:	697b      	ldr	r3, [r7, #20]
 800d612:	2200      	movs	r2, #0
 800d614:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800d618:	6978      	ldr	r0, [r7, #20]
 800d61a:	f7ff fe47 	bl	800d2ac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d61e:	697b      	ldr	r3, [r7, #20]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	689b      	ldr	r3, [r3, #8]
 800d624:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d628:	2b40      	cmp	r3, #64	@ 0x40
 800d62a:	d109      	bne.n	800d640 <UART_DMAError+0x60>
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	2b22      	cmp	r3, #34	@ 0x22
 800d630:	d106      	bne.n	800d640 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d632:	697b      	ldr	r3, [r7, #20]
 800d634:	2200      	movs	r2, #0
 800d636:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800d63a:	6978      	ldr	r0, [r7, #20]
 800d63c:	f7ff fe5c 	bl	800d2f8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d640:	697b      	ldr	r3, [r7, #20]
 800d642:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d646:	f043 0210 	orr.w	r2, r3, #16
 800d64a:	697b      	ldr	r3, [r7, #20]
 800d64c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d650:	6978      	ldr	r0, [r7, #20]
 800d652:	f7ff f90b 	bl	800c86c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d656:	bf00      	nop
 800d658:	3718      	adds	r7, #24
 800d65a:	46bd      	mov	sp, r7
 800d65c:	bd80      	pop	{r7, pc}

0800d65e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d65e:	b580      	push	{r7, lr}
 800d660:	b084      	sub	sp, #16
 800d662:	af00      	add	r7, sp, #0
 800d664:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d66a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	2200      	movs	r2, #0
 800d670:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	2200      	movs	r2, #0
 800d678:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d67c:	68f8      	ldr	r0, [r7, #12]
 800d67e:	f7ff f8f5 	bl	800c86c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d682:	bf00      	nop
 800d684:	3710      	adds	r7, #16
 800d686:	46bd      	mov	sp, r7
 800d688:	bd80      	pop	{r7, pc}

0800d68a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d68a:	b580      	push	{r7, lr}
 800d68c:	b088      	sub	sp, #32
 800d68e:	af00      	add	r7, sp, #0
 800d690:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	e853 3f00 	ldrex	r3, [r3]
 800d69e:	60bb      	str	r3, [r7, #8]
   return(result);
 800d6a0:	68bb      	ldr	r3, [r7, #8]
 800d6a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d6a6:	61fb      	str	r3, [r7, #28]
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	461a      	mov	r2, r3
 800d6ae:	69fb      	ldr	r3, [r7, #28]
 800d6b0:	61bb      	str	r3, [r7, #24]
 800d6b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6b4:	6979      	ldr	r1, [r7, #20]
 800d6b6:	69ba      	ldr	r2, [r7, #24]
 800d6b8:	e841 2300 	strex	r3, r2, [r1]
 800d6bc:	613b      	str	r3, [r7, #16]
   return(result);
 800d6be:	693b      	ldr	r3, [r7, #16]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d1e6      	bne.n	800d692 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	2220      	movs	r2, #32
 800d6c8:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d6d0:	6878      	ldr	r0, [r7, #4]
 800d6d2:	f7ff f8ad 	bl	800c830 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d6d6:	bf00      	nop
 800d6d8:	3720      	adds	r7, #32
 800d6da:	46bd      	mov	sp, r7
 800d6dc:	bd80      	pop	{r7, pc}

0800d6de <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d6de:	b480      	push	{r7}
 800d6e0:	b083      	sub	sp, #12
 800d6e2:	af00      	add	r7, sp, #0
 800d6e4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d6e6:	bf00      	nop
 800d6e8:	370c      	adds	r7, #12
 800d6ea:	46bd      	mov	sp, r7
 800d6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f0:	4770      	bx	lr

0800d6f2 <memset>:
 800d6f2:	4402      	add	r2, r0
 800d6f4:	4603      	mov	r3, r0
 800d6f6:	4293      	cmp	r3, r2
 800d6f8:	d100      	bne.n	800d6fc <memset+0xa>
 800d6fa:	4770      	bx	lr
 800d6fc:	f803 1b01 	strb.w	r1, [r3], #1
 800d700:	e7f9      	b.n	800d6f6 <memset+0x4>
	...

0800d704 <__libc_init_array>:
 800d704:	b570      	push	{r4, r5, r6, lr}
 800d706:	4d0d      	ldr	r5, [pc, #52]	@ (800d73c <__libc_init_array+0x38>)
 800d708:	4c0d      	ldr	r4, [pc, #52]	@ (800d740 <__libc_init_array+0x3c>)
 800d70a:	1b64      	subs	r4, r4, r5
 800d70c:	10a4      	asrs	r4, r4, #2
 800d70e:	2600      	movs	r6, #0
 800d710:	42a6      	cmp	r6, r4
 800d712:	d109      	bne.n	800d728 <__libc_init_array+0x24>
 800d714:	4d0b      	ldr	r5, [pc, #44]	@ (800d744 <__libc_init_array+0x40>)
 800d716:	4c0c      	ldr	r4, [pc, #48]	@ (800d748 <__libc_init_array+0x44>)
 800d718:	f000 f818 	bl	800d74c <_init>
 800d71c:	1b64      	subs	r4, r4, r5
 800d71e:	10a4      	asrs	r4, r4, #2
 800d720:	2600      	movs	r6, #0
 800d722:	42a6      	cmp	r6, r4
 800d724:	d105      	bne.n	800d732 <__libc_init_array+0x2e>
 800d726:	bd70      	pop	{r4, r5, r6, pc}
 800d728:	f855 3b04 	ldr.w	r3, [r5], #4
 800d72c:	4798      	blx	r3
 800d72e:	3601      	adds	r6, #1
 800d730:	e7ee      	b.n	800d710 <__libc_init_array+0xc>
 800d732:	f855 3b04 	ldr.w	r3, [r5], #4
 800d736:	4798      	blx	r3
 800d738:	3601      	adds	r6, #1
 800d73a:	e7f2      	b.n	800d722 <__libc_init_array+0x1e>
 800d73c:	0800d7bc 	.word	0x0800d7bc
 800d740:	0800d7bc 	.word	0x0800d7bc
 800d744:	0800d7bc 	.word	0x0800d7bc
 800d748:	0800d7dc 	.word	0x0800d7dc

0800d74c <_init>:
 800d74c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d74e:	bf00      	nop
 800d750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d752:	bc08      	pop	{r3}
 800d754:	469e      	mov	lr, r3
 800d756:	4770      	bx	lr

0800d758 <_fini>:
 800d758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d75a:	bf00      	nop
 800d75c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d75e:	bc08      	pop	{r3}
 800d760:	469e      	mov	lr, r3
 800d762:	4770      	bx	lr
