
KM3000_V1R0_A0.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000def0  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  0800e09c  0800e09c  0000f09c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e0ec  0800e0ec  000103a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e0ec  0800e0ec  0000f0ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e0f4  0800e0f4  000103a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000020  0800e0f4  0800e0f4  0000f0f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e114  0800e114  0000f114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003a4  20000000  0800e118  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000de0  200003a4  0800e4bc  000103a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001184  0800e4bc  00011184  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000103a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00053ad1  00000000  00000000  000103d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007d7b  00000000  00000000  00063ea5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d70  00000000  00000000  0006bc20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016c7  00000000  00000000  0006d990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00033bff  00000000  00000000  0006f057  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d8e7  00000000  00000000  000a2c56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001245d5  00000000  00000000  000d053d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001f4b12  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b20  00000000  00000000  001f4b58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  001fc678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	200003a4 	.word	0x200003a4
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800e084 	.word	0x0800e084

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	200003a8 	.word	0x200003a8
 80001e8:	0800e084 	.word	0x0800e084

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <_ZN11displayLink11dotPositionEv>:

//////////////////
// DOT POSITION //
//////////////////

uint8_t displayLink::dotPosition(){
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
	return this->dot;
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	781b      	ldrb	r3, [r3, #0]
}
 80004e8:	4618      	mov	r0, r3
 80004ea:	370c      	adds	r7, #12
 80004ec:	46bd      	mov	sp, r7
 80004ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f2:	4770      	bx	lr

080004f4 <_ZN11displayLink12inputDisplayEih>:

///////////////////
// INPUT DISPLAY //
///////////////////

void displayLink::inputDisplay( int number, uint8_t dot ){
 80004f4:	b480      	push	{r7}
 80004f6:	b085      	sub	sp, #20
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	60f8      	str	r0, [r7, #12]
 80004fc:	60b9      	str	r1, [r7, #8]
 80004fe:	4613      	mov	r3, r2
 8000500:	71fb      	strb	r3, [r7, #7]
	this->dot	= dot;																		// Copia posicion del punto
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	79fa      	ldrb	r2, [r7, #7]
 8000506:	701a      	strb	r2, [r3, #0]

	this->milesima	= number/1000;															// Obtiene milesima
 8000508:	68bb      	ldr	r3, [r7, #8]
 800050a:	4a2e      	ldr	r2, [pc, #184]	@ (80005c4 <_ZN11displayLink12inputDisplayEih+0xd0>)
 800050c:	fb82 1203 	smull	r1, r2, r2, r3
 8000510:	1192      	asrs	r2, r2, #6
 8000512:	17db      	asrs	r3, r3, #31
 8000514:	1ad3      	subs	r3, r2, r3
 8000516:	b2da      	uxtb	r2, r3
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	705a      	strb	r2, [r3, #1]
	this->centena	= (number - this->milesima*1000)/100;									// Obtiene centena
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	785b      	ldrb	r3, [r3, #1]
 8000520:	461a      	mov	r2, r3
 8000522:	4b29      	ldr	r3, [pc, #164]	@ (80005c8 <_ZN11displayLink12inputDisplayEih+0xd4>)
 8000524:	fb03 f202 	mul.w	r2, r3, r2
 8000528:	68bb      	ldr	r3, [r7, #8]
 800052a:	4413      	add	r3, r2
 800052c:	4a27      	ldr	r2, [pc, #156]	@ (80005cc <_ZN11displayLink12inputDisplayEih+0xd8>)
 800052e:	fb82 1203 	smull	r1, r2, r2, r3
 8000532:	1152      	asrs	r2, r2, #5
 8000534:	17db      	asrs	r3, r3, #31
 8000536:	1ad3      	subs	r3, r2, r3
 8000538:	b2da      	uxtb	r2, r3
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	709a      	strb	r2, [r3, #2]
	this->decena	= (number - this->milesima*1000 - this->centena*100)/10;				// Obtiene decena
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	785b      	ldrb	r3, [r3, #1]
 8000542:	461a      	mov	r2, r3
 8000544:	4b20      	ldr	r3, [pc, #128]	@ (80005c8 <_ZN11displayLink12inputDisplayEih+0xd4>)
 8000546:	fb03 f202 	mul.w	r2, r3, r2
 800054a:	68bb      	ldr	r3, [r7, #8]
 800054c:	441a      	add	r2, r3
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	789b      	ldrb	r3, [r3, #2]
 8000552:	4619      	mov	r1, r3
 8000554:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8000558:	fb01 f303 	mul.w	r3, r1, r3
 800055c:	4413      	add	r3, r2
 800055e:	4a1c      	ldr	r2, [pc, #112]	@ (80005d0 <_ZN11displayLink12inputDisplayEih+0xdc>)
 8000560:	fb82 1203 	smull	r1, r2, r2, r3
 8000564:	1092      	asrs	r2, r2, #2
 8000566:	17db      	asrs	r3, r3, #31
 8000568:	1ad3      	subs	r3, r2, r3
 800056a:	b2da      	uxtb	r2, r3
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	70da      	strb	r2, [r3, #3]
	this->unidad	= (number - this->milesima*1000 - this->centena*100 - this->decena*10);	// Obtiene unidad
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	785b      	ldrb	r3, [r3, #1]
 8000574:	461a      	mov	r2, r3
 8000576:	0052      	lsls	r2, r2, #1
 8000578:	4413      	add	r3, r2
 800057a:	00db      	lsls	r3, r3, #3
 800057c:	b2da      	uxtb	r2, r3
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	789b      	ldrb	r3, [r3, #2]
 8000582:	4619      	mov	r1, r3
 8000584:	0089      	lsls	r1, r1, #2
 8000586:	4419      	add	r1, r3
 8000588:	00c9      	lsls	r1, r1, #3
 800058a:	1acb      	subs	r3, r1, r3
 800058c:	009b      	lsls	r3, r3, #2
 800058e:	b2db      	uxtb	r3, r3
 8000590:	4413      	add	r3, r2
 8000592:	b2da      	uxtb	r2, r3
 8000594:	68bb      	ldr	r3, [r7, #8]
 8000596:	b2db      	uxtb	r3, r3
 8000598:	4413      	add	r3, r2
 800059a:	b2da      	uxtb	r2, r3
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	78db      	ldrb	r3, [r3, #3]
 80005a0:	4619      	mov	r1, r3
 80005a2:	0149      	lsls	r1, r1, #5
 80005a4:	1ac9      	subs	r1, r1, r3
 80005a6:	0089      	lsls	r1, r1, #2
 80005a8:	1acb      	subs	r3, r1, r3
 80005aa:	005b      	lsls	r3, r3, #1
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	4413      	add	r3, r2
 80005b0:	b2da      	uxtb	r2, r3
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	711a      	strb	r2, [r3, #4]
}
 80005b6:	bf00      	nop
 80005b8:	3714      	adds	r7, #20
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	10624dd3 	.word	0x10624dd3
 80005c8:	fffffc18 	.word	0xfffffc18
 80005cc:	51eb851f 	.word	0x51eb851f
 80005d0:	66666667 	.word	0x66666667

080005d4 <_ZN11displayLink13numberInDigitEh>:

/////////////////////
// NUMBER IN DIGIT //
/////////////////////

uint8_t displayLink::numberInDigit( uint8_t digit ){
 80005d4:	b480      	push	{r7}
 80005d6:	b085      	sub	sp, #20
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	460b      	mov	r3, r1
 80005de:	70fb      	strb	r3, [r7, #3]
	uint8_t number;					// Crea variable

	switch(digit){					// Segun el numero del digito que entra
 80005e0:	78fb      	ldrb	r3, [r7, #3]
 80005e2:	3b01      	subs	r3, #1
 80005e4:	2b03      	cmp	r3, #3
 80005e6:	d81b      	bhi.n	8000620 <_ZN11displayLink13numberInDigitEh+0x4c>
 80005e8:	a201      	add	r2, pc, #4	@ (adr r2, 80005f0 <_ZN11displayLink13numberInDigitEh+0x1c>)
 80005ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ee:	bf00      	nop
 80005f0:	08000601 	.word	0x08000601
 80005f4:	08000609 	.word	0x08000609
 80005f8:	08000611 	.word	0x08000611
 80005fc:	08000619 	.word	0x08000619
	case 1:							// Caso 1
		number	= this->milesima;	// Retorna milesima
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	785b      	ldrb	r3, [r3, #1]
 8000604:	73fb      	strb	r3, [r7, #15]
		break;
 8000606:	e00e      	b.n	8000626 <_ZN11displayLink13numberInDigitEh+0x52>

	case 2:							// Caso 2
		number	= this->centena;	// Retorna centena
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	789b      	ldrb	r3, [r3, #2]
 800060c:	73fb      	strb	r3, [r7, #15]
		break;
 800060e:	e00a      	b.n	8000626 <_ZN11displayLink13numberInDigitEh+0x52>

	case 3:							// Caso 3
		number	= this->decena;		// Retorna decena
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	78db      	ldrb	r3, [r3, #3]
 8000614:	73fb      	strb	r3, [r7, #15]
		break;
 8000616:	e006      	b.n	8000626 <_ZN11displayLink13numberInDigitEh+0x52>

	case 4:							// Caso 4
		number	= this->unidad;		// Retorna unidad
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	791b      	ldrb	r3, [r3, #4]
 800061c:	73fb      	strb	r3, [r7, #15]
		break;
 800061e:	e002      	b.n	8000626 <_ZN11displayLink13numberInDigitEh+0x52>

	default:						// En otro caso
		number	= 0;				// Retorna 0
 8000620:	2300      	movs	r3, #0
 8000622:	73fb      	strb	r3, [r7, #15]
		break;
 8000624:	bf00      	nop
	}
	return number;					// Retorna variable
 8000626:	7bfb      	ldrb	r3, [r7, #15]
}
 8000628:	4618      	mov	r0, r3
 800062a:	3714      	adds	r7, #20
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr

08000634 <_ZN15displayPhysical6enableEb>:

////////////
// ENABLE //
////////////

void displayPhysical::enable( bool onOff ){
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	460b      	mov	r3, r1
 800063e:	70fb      	strb	r3, [r7, #3]
	if ( !onOff ){					//	Si esta apagado
 8000640:	78fb      	ldrb	r3, [r7, #3]
 8000642:	f083 0301 	eor.w	r3, r3, #1
 8000646:	b2db      	uxtb	r3, r3
 8000648:	2b00      	cmp	r3, #0
 800064a:	d003      	beq.n	8000654 <_ZN15displayPhysical6enableEb+0x20>
		this->flagEnable	= 0;	//	Deshabilita
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
	}
	else{							//	Si esta prendido
		this->flagEnable	= 1;	//	Habilita
	}
}
 8000652:	e002      	b.n	800065a <_ZN15displayPhysical6enableEb+0x26>
		this->flagEnable	= 1;	//	Habilita
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	2201      	movs	r2, #1
 8000658:	701a      	strb	r2, [r3, #0]
}
 800065a:	bf00      	nop
 800065c:	370c      	adds	r7, #12
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr

08000666 <_ZN15displayPhysical6setDotEh>:

/////////////
// SET DOT //
/////////////

void displayPhysical::setDot( uint8_t dot ){
 8000666:	b480      	push	{r7}
 8000668:	b083      	sub	sp, #12
 800066a:	af00      	add	r7, sp, #0
 800066c:	6078      	str	r0, [r7, #4]
 800066e:	460b      	mov	r3, r1
 8000670:	70fb      	strb	r3, [r7, #3]
	this->dot	= dot;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	78fa      	ldrb	r2, [r7, #3]
 8000676:	705a      	strb	r2, [r3, #1]
}
 8000678:	bf00      	nop
 800067a:	370c      	adds	r7, #12
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr

08000684 <_ZN15displayPhysical4nextEv>:

//////////
// NEXT //
//////////

uint8_t displayPhysical::next(){
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
	return this->counter;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	789b      	ldrb	r3, [r3, #2]
}
 8000690:	4618      	mov	r0, r3
 8000692:	370c      	adds	r7, #12
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr

0800069c <_ZN15displayPhysical9setNumberEh>:

////////////////
// SET NUMBER //
////////////////

void displayPhysical::setNumber( uint8_t number ){
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	460b      	mov	r3, r1
 80006a6:	70fb      	strb	r3, [r7, #3]

	this->dpSignal	= 0;					// Reinicia la señal de Dot
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	2200      	movs	r2, #0
 80006ac:	739a      	strb	r2, [r3, #14]
	if (this->dot	== this->counter ){		// Si la posicion dot coincide con contador
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	785a      	ldrb	r2, [r3, #1]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	789b      	ldrb	r3, [r3, #2]
 80006b6:	429a      	cmp	r2, r3
 80006b8:	d102      	bne.n	80006c0 <_ZN15displayPhysical9setNumberEh+0x24>
		this->dpSignal	= 1;				// Se activa la señal de dot
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	2201      	movs	r2, #1
 80006be:	739a      	strb	r2, [r3, #14]
	}

	switch ( this->counter ){				// Dependiendo del contador
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	789b      	ldrb	r3, [r3, #2]
 80006c4:	3b01      	subs	r3, #1
 80006c6:	2b03      	cmp	r3, #3
 80006c8:	d84a      	bhi.n	8000760 <_ZN15displayPhysical9setNumberEh+0xc4>
 80006ca:	a201      	add	r2, pc, #4	@ (adr r2, 80006d0 <_ZN15displayPhysical9setNumberEh+0x34>)
 80006cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006d0:	080006e1 	.word	0x080006e1
 80006d4:	08000701 	.word	0x08000701
 80006d8:	08000721 	.word	0x08000721
 80006dc:	08000741 	.word	0x08000741
	case 1:									//	Caso 1
		this->oneSignal		= 1;			//	Activa led 1
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	2201      	movs	r2, #1
 80006e4:	70da      	strb	r2, [r3, #3]
		this->twoSignal		= 0;			//	Desactiva led 2
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	2200      	movs	r2, #0
 80006ea:	711a      	strb	r2, [r3, #4]
		this->threeSignal	= 0;			//	Desactiva led 3
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	2200      	movs	r2, #0
 80006f0:	715a      	strb	r2, [r3, #5]
		this->fourSignal	= 0;			//	Desactiva led 4
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	2200      	movs	r2, #0
 80006f6:	719a      	strb	r2, [r3, #6]
		this->counter		= 2;			//	Cambia contador a 2
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	2202      	movs	r2, #2
 80006fc:	709a      	strb	r2, [r3, #2]
		break;
 80006fe:	e033      	b.n	8000768 <_ZN15displayPhysical9setNumberEh+0xcc>

	case 2:									//	Caso 2
		this->oneSignal		= 0;			//	Desactiva led 1
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	2200      	movs	r2, #0
 8000704:	70da      	strb	r2, [r3, #3]
		this->twoSignal		= 1;			//	Activa led 2
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	2201      	movs	r2, #1
 800070a:	711a      	strb	r2, [r3, #4]
		this->threeSignal	= 0;			//	Desactiva led 3
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	2200      	movs	r2, #0
 8000710:	715a      	strb	r2, [r3, #5]
		this->fourSignal	= 0;			//	Desactiva led 4
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	2200      	movs	r2, #0
 8000716:	719a      	strb	r2, [r3, #6]
		this->counter		= 3;			//	Cambia contador a 3
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	2203      	movs	r2, #3
 800071c:	709a      	strb	r2, [r3, #2]
		break;
 800071e:	e023      	b.n	8000768 <_ZN15displayPhysical9setNumberEh+0xcc>

	case 3:									//	Caso 3
		this->oneSignal		= 0;			//	Desactiva led 1
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	2200      	movs	r2, #0
 8000724:	70da      	strb	r2, [r3, #3]
		this->twoSignal		= 0;			//	Desactiva led 2
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	2200      	movs	r2, #0
 800072a:	711a      	strb	r2, [r3, #4]
		this->threeSignal	= 1;			//	Activa led 3
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2201      	movs	r2, #1
 8000730:	715a      	strb	r2, [r3, #5]
		this->fourSignal	= 0;			//	Desactiva led 4
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	2200      	movs	r2, #0
 8000736:	719a      	strb	r2, [r3, #6]
		this->counter		= 4;			//	Cambia a contador 4
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	2204      	movs	r2, #4
 800073c:	709a      	strb	r2, [r3, #2]
		break;
 800073e:	e013      	b.n	8000768 <_ZN15displayPhysical9setNumberEh+0xcc>

	case 4:									//	Caso 4
		this->oneSignal		= 0;			//	Desactiva led 1
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	2200      	movs	r2, #0
 8000744:	70da      	strb	r2, [r3, #3]
		this->twoSignal		= 0;			//	Desactiva led 2
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	2200      	movs	r2, #0
 800074a:	711a      	strb	r2, [r3, #4]
		this->threeSignal	= 0;			//	Desactiva led 3
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	2200      	movs	r2, #0
 8000750:	715a      	strb	r2, [r3, #5]
		this->fourSignal	= 1;			//	Activa led 4
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	2201      	movs	r2, #1
 8000756:	719a      	strb	r2, [r3, #6]
		this->counter		= 1;			//	Cambia a contador en 1
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	2201      	movs	r2, #1
 800075c:	709a      	strb	r2, [r3, #2]
		break;
 800075e:	e003      	b.n	8000768 <_ZN15displayPhysical9setNumberEh+0xcc>

	default:
		this->counter	= 1;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	2201      	movs	r2, #1
 8000764:	709a      	strb	r2, [r3, #2]
		break;
 8000766:	bf00      	nop
	}

	if ( this->flagEnable ){		//	Si el display esta habilitado
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	2b00      	cmp	r3, #0
 800076e:	f000 810d 	beq.w	800098c <_ZN15displayPhysical9setNumberEh+0x2f0>

		switch( number ){			//	Segun el numero que ingresa
 8000772:	78fb      	ldrb	r3, [r7, #3]
 8000774:	2b09      	cmp	r3, #9
 8000776:	f200 80f3 	bhi.w	8000960 <_ZN15displayPhysical9setNumberEh+0x2c4>
 800077a:	a201      	add	r2, pc, #4	@ (adr r2, 8000780 <_ZN15displayPhysical9setNumberEh+0xe4>)
 800077c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000780:	080007a9 	.word	0x080007a9
 8000784:	080007d5 	.word	0x080007d5
 8000788:	08000801 	.word	0x08000801
 800078c:	0800082d 	.word	0x0800082d
 8000790:	08000859 	.word	0x08000859
 8000794:	08000885 	.word	0x08000885
 8000798:	080008b1 	.word	0x080008b1
 800079c:	080008dd 	.word	0x080008dd
 80007a0:	08000909 	.word	0x08000909
 80007a4:	08000935 	.word	0x08000935

		case 0:						//	Caso 0: asigna pines para marcar 0
			this->aSignal	= 1;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	2201      	movs	r2, #1
 80007ac:	71da      	strb	r2, [r3, #7]
			this->bSignal	= 1;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	2201      	movs	r2, #1
 80007b2:	721a      	strb	r2, [r3, #8]
			this->cSignal	= 1;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	2201      	movs	r2, #1
 80007b8:	725a      	strb	r2, [r3, #9]
			this->dSignal	= 1;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	2201      	movs	r2, #1
 80007be:	729a      	strb	r2, [r3, #10]
			this->eSignal	= 1;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	2201      	movs	r2, #1
 80007c4:	72da      	strb	r2, [r3, #11]
			this->fSignal	= 1;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	2201      	movs	r2, #1
 80007ca:	731a      	strb	r2, [r3, #12]
			this->gSignal	= 0;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	2200      	movs	r2, #0
 80007d0:	735a      	strb	r2, [r3, #13]
			break;
 80007d2:	e0f7      	b.n	80009c4 <_ZN15displayPhysical9setNumberEh+0x328>

		case 1:						//	Caso 1: asigna pines para marcar 1
			this->aSignal	= 0;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	2200      	movs	r2, #0
 80007d8:	71da      	strb	r2, [r3, #7]
			this->bSignal	= 1;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2201      	movs	r2, #1
 80007de:	721a      	strb	r2, [r3, #8]
			this->cSignal	= 1;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	2201      	movs	r2, #1
 80007e4:	725a      	strb	r2, [r3, #9]
			this->dSignal	= 0;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	2200      	movs	r2, #0
 80007ea:	729a      	strb	r2, [r3, #10]
			this->eSignal	= 0;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	2200      	movs	r2, #0
 80007f0:	72da      	strb	r2, [r3, #11]
			this->fSignal	= 0;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	2200      	movs	r2, #0
 80007f6:	731a      	strb	r2, [r3, #12]
			this->gSignal	= 0;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	2200      	movs	r2, #0
 80007fc:	735a      	strb	r2, [r3, #13]
			break;
 80007fe:	e0e1      	b.n	80009c4 <_ZN15displayPhysical9setNumberEh+0x328>

		case 2:						//	Caso 2: asigna pines para marcar 2
			this->aSignal	= 1;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	2201      	movs	r2, #1
 8000804:	71da      	strb	r2, [r3, #7]
			this->bSignal	= 1;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	2201      	movs	r2, #1
 800080a:	721a      	strb	r2, [r3, #8]
			this->cSignal	= 0;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2200      	movs	r2, #0
 8000810:	725a      	strb	r2, [r3, #9]
			this->dSignal	= 1;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	2201      	movs	r2, #1
 8000816:	729a      	strb	r2, [r3, #10]
			this->eSignal	= 1;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	2201      	movs	r2, #1
 800081c:	72da      	strb	r2, [r3, #11]
			this->fSignal	= 0;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2200      	movs	r2, #0
 8000822:	731a      	strb	r2, [r3, #12]
			this->gSignal	= 1;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	2201      	movs	r2, #1
 8000828:	735a      	strb	r2, [r3, #13]
			break;
 800082a:	e0cb      	b.n	80009c4 <_ZN15displayPhysical9setNumberEh+0x328>

		case 3:						//	Caso 3: asigna pines para marcar 3
			this->aSignal	= 1;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	2201      	movs	r2, #1
 8000830:	71da      	strb	r2, [r3, #7]
			this->bSignal	= 1;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2201      	movs	r2, #1
 8000836:	721a      	strb	r2, [r3, #8]
			this->cSignal	= 1;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	2201      	movs	r2, #1
 800083c:	725a      	strb	r2, [r3, #9]
			this->dSignal	= 1;
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	2201      	movs	r2, #1
 8000842:	729a      	strb	r2, [r3, #10]
			this->eSignal	= 0;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	2200      	movs	r2, #0
 8000848:	72da      	strb	r2, [r3, #11]
			this->fSignal	= 0;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	2200      	movs	r2, #0
 800084e:	731a      	strb	r2, [r3, #12]
			this->gSignal	= 1;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	2201      	movs	r2, #1
 8000854:	735a      	strb	r2, [r3, #13]
			break;
 8000856:	e0b5      	b.n	80009c4 <_ZN15displayPhysical9setNumberEh+0x328>

		case 4:						//	Caso 4: asigna pines para marcar 4
			this->aSignal	= 0;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2200      	movs	r2, #0
 800085c:	71da      	strb	r2, [r3, #7]
			this->bSignal	= 1;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	2201      	movs	r2, #1
 8000862:	721a      	strb	r2, [r3, #8]
			this->cSignal	= 1;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	2201      	movs	r2, #1
 8000868:	725a      	strb	r2, [r3, #9]
			this->dSignal	= 0;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	2200      	movs	r2, #0
 800086e:	729a      	strb	r2, [r3, #10]
			this->eSignal	= 0;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	2200      	movs	r2, #0
 8000874:	72da      	strb	r2, [r3, #11]
			this->fSignal	= 1;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	2201      	movs	r2, #1
 800087a:	731a      	strb	r2, [r3, #12]
			this->gSignal	= 1;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2201      	movs	r2, #1
 8000880:	735a      	strb	r2, [r3, #13]
			break;
 8000882:	e09f      	b.n	80009c4 <_ZN15displayPhysical9setNumberEh+0x328>

		case 5:						//	Caso 5: asigna pines para marcar 5
			this->aSignal	= 1;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2201      	movs	r2, #1
 8000888:	71da      	strb	r2, [r3, #7]
			this->bSignal	= 0;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	2200      	movs	r2, #0
 800088e:	721a      	strb	r2, [r3, #8]
			this->cSignal	= 1;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	2201      	movs	r2, #1
 8000894:	725a      	strb	r2, [r3, #9]
			this->dSignal	= 1;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	2201      	movs	r2, #1
 800089a:	729a      	strb	r2, [r3, #10]
			this->eSignal	= 0;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	2200      	movs	r2, #0
 80008a0:	72da      	strb	r2, [r3, #11]
			this->fSignal	= 1;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	2201      	movs	r2, #1
 80008a6:	731a      	strb	r2, [r3, #12]
			this->gSignal	= 1;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2201      	movs	r2, #1
 80008ac:	735a      	strb	r2, [r3, #13]
			break;
 80008ae:	e089      	b.n	80009c4 <_ZN15displayPhysical9setNumberEh+0x328>

		case 6:						//	Caso 6: asigna pines para marcar 6
			this->aSignal	= 1;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	2201      	movs	r2, #1
 80008b4:	71da      	strb	r2, [r3, #7]
			this->bSignal	= 0;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	2200      	movs	r2, #0
 80008ba:	721a      	strb	r2, [r3, #8]
			this->cSignal	= 1;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	2201      	movs	r2, #1
 80008c0:	725a      	strb	r2, [r3, #9]
			this->dSignal	= 1;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	2201      	movs	r2, #1
 80008c6:	729a      	strb	r2, [r3, #10]
			this->eSignal	= 1;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	2201      	movs	r2, #1
 80008cc:	72da      	strb	r2, [r3, #11]
			this->fSignal	= 1;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	2201      	movs	r2, #1
 80008d2:	731a      	strb	r2, [r3, #12]
			this->gSignal	= 1;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	2201      	movs	r2, #1
 80008d8:	735a      	strb	r2, [r3, #13]
			break;
 80008da:	e073      	b.n	80009c4 <_ZN15displayPhysical9setNumberEh+0x328>

		case 7:						//	Caso 7: asigna pines para marcar 7
			this->aSignal	= 1;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	2201      	movs	r2, #1
 80008e0:	71da      	strb	r2, [r3, #7]
			this->bSignal	= 1;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	2201      	movs	r2, #1
 80008e6:	721a      	strb	r2, [r3, #8]
			this->cSignal	= 1;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	2201      	movs	r2, #1
 80008ec:	725a      	strb	r2, [r3, #9]
			this->dSignal	= 0;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	2200      	movs	r2, #0
 80008f2:	729a      	strb	r2, [r3, #10]
			this->eSignal	= 0;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	2200      	movs	r2, #0
 80008f8:	72da      	strb	r2, [r3, #11]
			this->fSignal	= 0;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	2200      	movs	r2, #0
 80008fe:	731a      	strb	r2, [r3, #12]
			this->gSignal	= 0;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	2200      	movs	r2, #0
 8000904:	735a      	strb	r2, [r3, #13]
			break;
 8000906:	e05d      	b.n	80009c4 <_ZN15displayPhysical9setNumberEh+0x328>

		case 8:						//	Caso 8: asigna pines para marcar 8
			this->aSignal	= 1;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2201      	movs	r2, #1
 800090c:	71da      	strb	r2, [r3, #7]
			this->bSignal	= 1;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2201      	movs	r2, #1
 8000912:	721a      	strb	r2, [r3, #8]
			this->cSignal	= 1;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2201      	movs	r2, #1
 8000918:	725a      	strb	r2, [r3, #9]
			this->dSignal	= 1;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	2201      	movs	r2, #1
 800091e:	729a      	strb	r2, [r3, #10]
			this->eSignal	= 1;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	2201      	movs	r2, #1
 8000924:	72da      	strb	r2, [r3, #11]
			this->fSignal	= 1;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2201      	movs	r2, #1
 800092a:	731a      	strb	r2, [r3, #12]
			this->gSignal	= 1;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	2201      	movs	r2, #1
 8000930:	735a      	strb	r2, [r3, #13]
			break;
 8000932:	e047      	b.n	80009c4 <_ZN15displayPhysical9setNumberEh+0x328>

		case 9:						//	Caso 9: asigna pines para marcar 9
			this->aSignal	= 1;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	2201      	movs	r2, #1
 8000938:	71da      	strb	r2, [r3, #7]
			this->bSignal	= 1;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	2201      	movs	r2, #1
 800093e:	721a      	strb	r2, [r3, #8]
			this->cSignal	= 1;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	2201      	movs	r2, #1
 8000944:	725a      	strb	r2, [r3, #9]
			this->dSignal	= 1;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2201      	movs	r2, #1
 800094a:	729a      	strb	r2, [r3, #10]
			this->eSignal	= 0;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2200      	movs	r2, #0
 8000950:	72da      	strb	r2, [r3, #11]
			this->fSignal	= 1;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2201      	movs	r2, #1
 8000956:	731a      	strb	r2, [r3, #12]
			this->gSignal	= 1;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2201      	movs	r2, #1
 800095c:	735a      	strb	r2, [r3, #13]
			break;
 800095e:	e031      	b.n	80009c4 <_ZN15displayPhysical9setNumberEh+0x328>

		default:
			this->aSignal	= 0;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	2200      	movs	r2, #0
 8000964:	71da      	strb	r2, [r3, #7]
			this->bSignal	= 0;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	2200      	movs	r2, #0
 800096a:	721a      	strb	r2, [r3, #8]
			this->cSignal	= 0;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	2200      	movs	r2, #0
 8000970:	725a      	strb	r2, [r3, #9]
			this->dSignal	= 0;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	2200      	movs	r2, #0
 8000976:	729a      	strb	r2, [r3, #10]
			this->eSignal	= 0;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	2200      	movs	r2, #0
 800097c:	72da      	strb	r2, [r3, #11]
			this->fSignal	= 0;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	2200      	movs	r2, #0
 8000982:	731a      	strb	r2, [r3, #12]
			this->gSignal	= 0;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	2200      	movs	r2, #0
 8000988:	735a      	strb	r2, [r3, #13]
			break;
 800098a:	e01b      	b.n	80009c4 <_ZN15displayPhysical9setNumberEh+0x328>
		}
	}
	else{						// Si esta deshabiliado no marca display
		this->aSignal	= 0;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	2200      	movs	r2, #0
 8000990:	71da      	strb	r2, [r3, #7]
		this->bSignal	= 0;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	2200      	movs	r2, #0
 8000996:	721a      	strb	r2, [r3, #8]
		this->cSignal	= 0;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2200      	movs	r2, #0
 800099c:	725a      	strb	r2, [r3, #9]
		this->dSignal	= 0;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	2200      	movs	r2, #0
 80009a2:	729a      	strb	r2, [r3, #10]
		this->eSignal	= 0;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	2200      	movs	r2, #0
 80009a8:	72da      	strb	r2, [r3, #11]
		this->fSignal	= 0;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	2200      	movs	r2, #0
 80009ae:	731a      	strb	r2, [r3, #12]
		this->gSignal	= 0;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2200      	movs	r2, #0
 80009b4:	735a      	strb	r2, [r3, #13]
		this->dpSignal	= 0;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2200      	movs	r2, #0
 80009ba:	739a      	strb	r2, [r3, #14]
		this->counter	= 0;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2200      	movs	r2, #0
 80009c0:	709a      	strb	r2, [r3, #2]
	}
}
 80009c2:	bf00      	nop
 80009c4:	bf00      	nop
 80009c6:	370c      	adds	r7, #12
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr

080009d0 <_ZN15displayPhysical11firstNumberEv>:

//////////////////
// FIRST NUMBER //
//////////////////

bool displayPhysical::firstNumber(){
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
	return this->oneSignal;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	78db      	ldrb	r3, [r3, #3]
}
 80009dc:	4618      	mov	r0, r3
 80009de:	370c      	adds	r7, #12
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <_ZN15displayPhysical12secondNumberEv>:

///////////////////
// SECOND NUMBER //
///////////////////

bool displayPhysical::secondNumber(){
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
	return this->twoSignal;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	791b      	ldrb	r3, [r3, #4]
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	370c      	adds	r7, #12
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr

08000a00 <_ZN15displayPhysical11thirdNumberEv>:

//////////////////
// THIRD NUMBER //
//////////////////

bool displayPhysical::thirdNumber(){
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
	return this->threeSignal;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	795b      	ldrb	r3, [r3, #5]
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	370c      	adds	r7, #12
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr

08000a18 <_ZN15displayPhysical12fourthNumberEv>:

///////////////////
// FOURTH NUMBER //
///////////////////

bool displayPhysical::fourthNumber(){
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
	return this->fourSignal;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	799b      	ldrb	r3, [r3, #6]
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <_ZN15displayPhysical4aLedEv>:

///////////
// A LED //
///////////

bool displayPhysical::aLed(){
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
	return this->aSignal;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	79db      	ldrb	r3, [r3, #7]
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	370c      	adds	r7, #12
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr

08000a48 <_ZN15displayPhysical4bLedEv>:

///////////
// B LED //
///////////

bool displayPhysical::bLed(){
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
	return this->bSignal;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	7a1b      	ldrb	r3, [r3, #8]
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	370c      	adds	r7, #12
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr

08000a60 <_ZN15displayPhysical4cLedEv>:

///////////
// C LED //
///////////

bool displayPhysical::cLed(){
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
	return this->cSignal;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	7a5b      	ldrb	r3, [r3, #9]
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr

08000a78 <_ZN15displayPhysical4dLedEv>:

///////////
// D LED //
///////////

bool displayPhysical::dLed(){
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
	return this->dSignal;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	7a9b      	ldrb	r3, [r3, #10]
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	370c      	adds	r7, #12
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr

08000a90 <_ZN15displayPhysical4eLedEv>:

///////////
// E LED //
///////////

bool displayPhysical::eLed(){
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
	return this->eSignal;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	7adb      	ldrb	r3, [r3, #11]
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	370c      	adds	r7, #12
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr

08000aa8 <_ZN15displayPhysical4fLedEv>:

///////////
// F LED //
///////////

bool displayPhysical::fLed(){
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
	return this->fSignal;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	7b1b      	ldrb	r3, [r3, #12]
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	370c      	adds	r7, #12
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <_ZN15displayPhysical4gLedEv>:

///////////
// G LED //
///////////

bool displayPhysical::gLed(){
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
	return this->gSignal;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	7b5b      	ldrb	r3, [r3, #13]
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <_ZN15displayPhysical5dpLedEv>:

////////////
// DP LED //
////////////

bool displayPhysical::dpLed(){
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
	return this->dpSignal;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	7b9b      	ldrb	r3, [r3, #14]
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr

08000af0 <_Z12bytestowritett>:
/*****************************************************************************************************************************************/
uint8_t bytes_temp[4];

// function to determine the remaining bytes
uint16_t bytestowrite (uint16_t size, uint16_t offset)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	460a      	mov	r2, r1
 8000afa:	80fb      	strh	r3, [r7, #6]
 8000afc:	4613      	mov	r3, r2
 8000afe:	80bb      	strh	r3, [r7, #4]
	if ((size+offset)<PAGE_SIZE) return size;
 8000b00:	88fa      	ldrh	r2, [r7, #6]
 8000b02:	88bb      	ldrh	r3, [r7, #4]
 8000b04:	4413      	add	r3, r2
 8000b06:	2b3f      	cmp	r3, #63	@ 0x3f
 8000b08:	dc01      	bgt.n	8000b0e <_Z12bytestowritett+0x1e>
 8000b0a:	88fb      	ldrh	r3, [r7, #6]
 8000b0c:	e003      	b.n	8000b16 <_Z12bytestowritett+0x26>
	else return PAGE_SIZE-offset;
 8000b0e:	88bb      	ldrh	r3, [r7, #4]
 8000b10:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8000b14:	b29b      	uxth	r3, r3
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
	...

08000b24 <_Z11EEPROM_ReadttPht>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Read (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08e      	sub	sp, #56	@ 0x38
 8000b28:	af04      	add	r7, sp, #16
 8000b2a:	60ba      	str	r2, [r7, #8]
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	4603      	mov	r3, r0
 8000b30:	81fb      	strh	r3, [r7, #14]
 8000b32:	460b      	mov	r3, r1
 8000b34:	81bb      	strh	r3, [r7, #12]
 8000b36:	4613      	mov	r3, r2
 8000b38:	80fb      	strh	r3, [r7, #6]
	int paddrposition = log(PAGE_SIZE)/log(2);
 8000b3a:	2306      	movs	r3, #6
 8000b3c:	61fb      	str	r3, [r7, #28]

	uint16_t startPage = page;
 8000b3e:	89fb      	ldrh	r3, [r7, #14]
 8000b40:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 8000b42:	88fa      	ldrh	r2, [r7, #6]
 8000b44:	89bb      	ldrh	r3, [r7, #12]
 8000b46:	4413      	add	r3, r2
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	da00      	bge.n	8000b4e <_Z11EEPROM_ReadttPht+0x2a>
 8000b4c:	333f      	adds	r3, #63	@ 0x3f
 8000b4e:	119b      	asrs	r3, r3, #6
 8000b50:	b29a      	uxth	r2, r3
 8000b52:	89fb      	ldrh	r3, [r7, #14]
 8000b54:	4413      	add	r3, r2
 8000b56:	837b      	strh	r3, [r7, #26]

	uint16_t numofpages = (endPage-startPage) + 1;
 8000b58:	8b7a      	ldrh	r2, [r7, #26]
 8000b5a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000b5c:	1ad3      	subs	r3, r2, r3
 8000b5e:	b29b      	uxth	r3, r3
 8000b60:	3301      	adds	r3, #1
 8000b62:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	84bb      	strh	r3, [r7, #36]	@ 0x24

	for (int i=0; i<numofpages; i++)
 8000b68:	2300      	movs	r3, #0
 8000b6a:	623b      	str	r3, [r7, #32]
 8000b6c:	e031      	b.n	8000bd2 <_Z11EEPROM_ReadttPht+0xae>
	{
		uint16_t MemAddress = startPage<<paddrposition | offset;
 8000b6e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000b70:	69fb      	ldr	r3, [r7, #28]
 8000b72:	fa02 f303 	lsl.w	r3, r2, r3
 8000b76:	b21a      	sxth	r2, r3
 8000b78:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	b21b      	sxth	r3, r3
 8000b80:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);
 8000b82:	89ba      	ldrh	r2, [r7, #12]
 8000b84:	88fb      	ldrh	r3, [r7, #6]
 8000b86:	4611      	mov	r1, r2
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff ffb1 	bl	8000af0 <_Z12bytestowritett>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	82bb      	strh	r3, [r7, #20]
		HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);
 8000b92:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000b94:	68ba      	ldr	r2, [r7, #8]
 8000b96:	4413      	add	r3, r2
 8000b98:	8af9      	ldrh	r1, [r7, #22]
 8000b9a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000b9e:	9202      	str	r2, [sp, #8]
 8000ba0:	8aba      	ldrh	r2, [r7, #20]
 8000ba2:	9201      	str	r2, [sp, #4]
 8000ba4:	9300      	str	r3, [sp, #0]
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	460a      	mov	r2, r1
 8000baa:	21a0      	movs	r1, #160	@ 0xa0
 8000bac:	480d      	ldr	r0, [pc, #52]	@ (8000be4 <_Z11EEPROM_ReadttPht+0xc0>)
 8000bae:	f007 ff37 	bl	8008a20 <HAL_I2C_Mem_Read>
		startPage += 1;
 8000bb2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	84fb      	strh	r3, [r7, #38]	@ 0x26
		offset=0;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;
 8000bbc:	88fa      	ldrh	r2, [r7, #6]
 8000bbe:	8abb      	ldrh	r3, [r7, #20]
 8000bc0:	1ad3      	subs	r3, r2, r3
 8000bc2:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;
 8000bc4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000bc6:	8abb      	ldrh	r3, [r7, #20]
 8000bc8:	4413      	add	r3, r2
 8000bca:	84bb      	strh	r3, [r7, #36]	@ 0x24
	for (int i=0; i<numofpages; i++)
 8000bcc:	6a3b      	ldr	r3, [r7, #32]
 8000bce:	3301      	adds	r3, #1
 8000bd0:	623b      	str	r3, [r7, #32]
 8000bd2:	8b3b      	ldrh	r3, [r7, #24]
 8000bd4:	6a3a      	ldr	r2, [r7, #32]
 8000bd6:	429a      	cmp	r2, r3
 8000bd8:	dbc9      	blt.n	8000b6e <_Z11EEPROM_ReadttPht+0x4a>
	}
}
 8000bda:	bf00      	nop
 8000bdc:	bf00      	nop
 8000bde:	3728      	adds	r7, #40	@ 0x28
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	200006d0 	.word	0x200006d0

08000be8 <_Z3appv>:

/////////
// APP //
/////////

void app(){
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
	appContent();
 8000bec:	f000 f804 	bl	8000bf8 <_Z10appContentv>
	appLora();
 8000bf0:	f000 fb54 	bl	800129c <_Z7appLorav>
}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <_Z10appContentv>:
 * 			- Calcular valores a enviar
 * 			- Agregar comandos a Fifo
 * 			- Esperar relojes de TCP
 */

void appContent(){
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0

	switch ( stateContent ){
 8000bfc:	4b75      	ldr	r3, [pc, #468]	@ (8000dd4 <_Z10appContentv+0x1dc>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	2b06      	cmp	r3, #6
 8000c02:	f200 8327 	bhi.w	8001254 <_Z10appContentv+0x65c>
 8000c06:	a201      	add	r2, pc, #4	@ (adr r2, 8000c0c <_Z10appContentv+0x14>)
 8000c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c0c:	08000c29 	.word	0x08000c29
 8000c10:	08000c45 	.word	0x08000c45
 8000c14:	08000cc9 	.word	0x08000cc9
 8000c18:	08000e25 	.word	0x08000e25
 8000c1c:	0800102d 	.word	0x0800102d
 8000c20:	080011c3 	.word	0x080011c3
 8000c24:	08001223 	.word	0x08001223
	//////////////////////////
	// S0 - WAIT FOR ENABLE //
	//////////////////////////

	case 0:
		if ( loraDecision.enable() ){	// Si el chip esta habilitado
 8000c28:	486b      	ldr	r0, [pc, #428]	@ (8000dd8 <_Z10appContentv+0x1e0>)
 8000c2a:	f003 fcab 	bl	8004584 <_ZN12loraDecision6enableEv>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d003      	beq.n	8000c3c <_Z10appContentv+0x44>
			stateContent	= 1;		// Pasa a S1
 8000c34:	4b67      	ldr	r3, [pc, #412]	@ (8000dd4 <_Z10appContentv+0x1dc>)
 8000c36:	2201      	movs	r2, #1
 8000c38:	701a      	strb	r2, [r3, #0]
		}
		else{							// Si no
			stateContent	= 0;		// Espera en S0
		}
		break;
 8000c3a:	e30f      	b.n	800125c <_Z10appContentv+0x664>
			stateContent	= 0;		// Espera en S0
 8000c3c:	4b65      	ldr	r3, [pc, #404]	@ (8000dd4 <_Z10appContentv+0x1dc>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	701a      	strb	r2, [r3, #0]
		break;
 8000c42:	e30b      	b.n	800125c <_Z10appContentv+0x664>
	////////////////////////
	// S1 - WAIT FOR FLAG //
	////////////////////////

	case 1:
		bussyRN2903	= 0;
 8000c44:	4b65      	ldr	r3, [pc, #404]	@ (8000ddc <_Z10appContentv+0x1e4>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	701a      	strb	r2, [r3, #0]

		if ( !loraDecision.enable() ){			// Si no está habilitado
 8000c4a:	4863      	ldr	r0, [pc, #396]	@ (8000dd8 <_Z10appContentv+0x1e0>)
 8000c4c:	f003 fc9a 	bl	8004584 <_ZN12loraDecision6enableEv>
 8000c50:	4603      	mov	r3, r0
 8000c52:	f083 0301 	eor.w	r3, r3, #1
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d003      	beq.n	8000c64 <_Z10appContentv+0x6c>
			stateContent	= 0;				// Vuelve a S0
 8000c5c:	4b5d      	ldr	r3, [pc, #372]	@ (8000dd4 <_Z10appContentv+0x1dc>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	701a      	strb	r2, [r3, #0]
			stateContent	= 4;				// Pasa a S4
		}
		else{									// Si no pasa nada
			stateContent	= 1;				// Espera en S1
		}
		break;
 8000c62:	e2fb      	b.n	800125c <_Z10appContentv+0x664>
		else if ( fifoContent.available() ){	// Si hay
 8000c64:	485e      	ldr	r0, [pc, #376]	@ (8000de0 <_Z10appContentv+0x1e8>)
 8000c66:	f000 fe03 	bl	8001870 <_ZN12fifoCommands9availableEv>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d003      	beq.n	8000c78 <_Z10appContentv+0x80>
			stateContent	= 5;				//
 8000c70:	4b58      	ldr	r3, [pc, #352]	@ (8000dd4 <_Z10appContentv+0x1dc>)
 8000c72:	2205      	movs	r2, #5
 8000c74:	701a      	strb	r2, [r3, #0]
		break;
 8000c76:	e2f1      	b.n	800125c <_Z10appContentv+0x664>
		else if ( flagSetData ){				// Si se guardó datos de GPS
 8000c78:	4b5a      	ldr	r3, [pc, #360]	@ (8000de4 <_Z10appContentv+0x1ec>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d009      	beq.n	8000c94 <_Z10appContentv+0x9c>
			count_1_data++;
 8000c80:	4b59      	ldr	r3, [pc, #356]	@ (8000de8 <_Z10appContentv+0x1f0>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	3301      	adds	r3, #1
 8000c86:	b2da      	uxtb	r2, r3
 8000c88:	4b57      	ldr	r3, [pc, #348]	@ (8000de8 <_Z10appContentv+0x1f0>)
 8000c8a:	701a      	strb	r2, [r3, #0]
			stateContent	= 2;				// Pasa a S3
 8000c8c:	4b51      	ldr	r3, [pc, #324]	@ (8000dd4 <_Z10appContentv+0x1dc>)
 8000c8e:	2202      	movs	r2, #2
 8000c90:	701a      	strb	r2, [r3, #0]
		break;
 8000c92:	e2e3      	b.n	800125c <_Z10appContentv+0x664>
		else if ( flagGpsSaved ){				// Si pide guardar datos
 8000c94:	4b55      	ldr	r3, [pc, #340]	@ (8000dec <_Z10appContentv+0x1f4>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d009      	beq.n	8000cb0 <_Z10appContentv+0xb8>
			count_0_gps++;
 8000c9c:	4b54      	ldr	r3, [pc, #336]	@ (8000df0 <_Z10appContentv+0x1f8>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	b2da      	uxtb	r2, r3
 8000ca4:	4b52      	ldr	r3, [pc, #328]	@ (8000df0 <_Z10appContentv+0x1f8>)
 8000ca6:	701a      	strb	r2, [r3, #0]
			stateContent	= 3;				// Pasa a S2
 8000ca8:	4b4a      	ldr	r3, [pc, #296]	@ (8000dd4 <_Z10appContentv+0x1dc>)
 8000caa:	2203      	movs	r2, #3
 8000cac:	701a      	strb	r2, [r3, #0]
		break;
 8000cae:	e2d5      	b.n	800125c <_Z10appContentv+0x664>
		else if ( flagSetSys ){					// Si se guardan datos de sistema
 8000cb0:	4b50      	ldr	r3, [pc, #320]	@ (8000df4 <_Z10appContentv+0x1fc>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d003      	beq.n	8000cc0 <_Z10appContentv+0xc8>
			stateContent	= 4;				// Pasa a S4
 8000cb8:	4b46      	ldr	r3, [pc, #280]	@ (8000dd4 <_Z10appContentv+0x1dc>)
 8000cba:	2204      	movs	r2, #4
 8000cbc:	701a      	strb	r2, [r3, #0]
		break;
 8000cbe:	e2cd      	b.n	800125c <_Z10appContentv+0x664>
			stateContent	= 1;				// Espera en S1
 8000cc0:	4b44      	ldr	r3, [pc, #272]	@ (8000dd4 <_Z10appContentv+0x1dc>)
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	701a      	strb	r2, [r3, #0]
		break;
 8000cc6:	e2c9      	b.n	800125c <_Z10appContentv+0x664>
	////////////////////////////
	// S2 - SAVE SENSORS DATA //
	////////////////////////////

	case 2:
		flagSetData	= 0;					// Reinicia indicador de enviar datos
 8000cc8:	4b46      	ldr	r3, [pc, #280]	@ (8000de4 <_Z10appContentv+0x1ec>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	701a      	strb	r2, [r3, #0]

		tempApp		= tempApp/10;			// Reduce resolucion de temperatura
 8000cce:	4b4a      	ldr	r3, [pc, #296]	@ (8000df8 <_Z10appContentv+0x200>)
 8000cd0:	881b      	ldrh	r3, [r3, #0]
 8000cd2:	4a4a      	ldr	r2, [pc, #296]	@ (8000dfc <_Z10appContentv+0x204>)
 8000cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8000cd8:	08db      	lsrs	r3, r3, #3
 8000cda:	b29a      	uxth	r2, r3
 8000cdc:	4b46      	ldr	r3, [pc, #280]	@ (8000df8 <_Z10appContentv+0x200>)
 8000cde:	801a      	strh	r2, [r3, #0]
		humApp		= humApp/10;			// Reduce resolucion de humedad
 8000ce0:	4b47      	ldr	r3, [pc, #284]	@ (8000e00 <_Z10appContentv+0x208>)
 8000ce2:	881b      	ldrh	r3, [r3, #0]
 8000ce4:	4a45      	ldr	r2, [pc, #276]	@ (8000dfc <_Z10appContentv+0x204>)
 8000ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8000cea:	08db      	lsrs	r3, r3, #3
 8000cec:	b29a      	uxth	r2, r3
 8000cee:	4b44      	ldr	r3, [pc, #272]	@ (8000e00 <_Z10appContentv+0x208>)
 8000cf0:	801a      	strh	r2, [r3, #0]

		content[0]	= '1';					// Indica que los datos van sobre puerto 1
 8000cf2:	4b44      	ldr	r3, [pc, #272]	@ (8000e04 <_Z10appContentv+0x20c>)
 8000cf4:	2231      	movs	r2, #49	@ 0x31
 8000cf6:	701a      	strb	r2, [r3, #0]

		a1_HCL	= alphaA/16;
 8000cf8:	4b43      	ldr	r3, [pc, #268]	@ (8000e08 <_Z10appContentv+0x210>)
 8000cfa:	881b      	ldrh	r3, [r3, #0]
 8000cfc:	091b      	lsrs	r3, r3, #4
 8000cfe:	b29b      	uxth	r3, r3
 8000d00:	b2da      	uxtb	r2, r3
 8000d02:	4b42      	ldr	r3, [pc, #264]	@ (8000e0c <_Z10appContentv+0x214>)
 8000d04:	701a      	strb	r2, [r3, #0]
		b1_HCL	= alphaB/16;
 8000d06:	4b42      	ldr	r3, [pc, #264]	@ (8000e10 <_Z10appContentv+0x218>)
 8000d08:	881b      	ldrh	r3, [r3, #0]
 8000d0a:	091b      	lsrs	r3, r3, #4
 8000d0c:	b29b      	uxth	r3, r3
 8000d0e:	b2da      	uxtb	r2, r3
 8000d10:	4b40      	ldr	r3, [pc, #256]	@ (8000e14 <_Z10appContentv+0x21c>)
 8000d12:	701a      	strb	r2, [r3, #0]

		content[1]	= uint2hex_A(alpha_B1_PPM);	// Guarda primeros 4 bits de B1 HCL
 8000d14:	4b40      	ldr	r3, [pc, #256]	@ (8000e18 <_Z10appContentv+0x220>)
 8000d16:	881b      	ldrh	r3, [r3, #0]
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f000 fcb2 	bl	8001684 <_Z10uint2hex_Ah>
 8000d20:	4603      	mov	r3, r0
 8000d22:	461a      	mov	r2, r3
 8000d24:	4b37      	ldr	r3, [pc, #220]	@ (8000e04 <_Z10appContentv+0x20c>)
 8000d26:	705a      	strb	r2, [r3, #1]
		content[2]	= uint2hex_B(alpha_B1_PPM);	// Guarda segundos 4 bits de B1 HCL
 8000d28:	4b3b      	ldr	r3, [pc, #236]	@ (8000e18 <_Z10appContentv+0x220>)
 8000d2a:	881b      	ldrh	r3, [r3, #0]
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f000 fd0e 	bl	8001750 <_Z10uint2hex_Bh>
 8000d34:	4603      	mov	r3, r0
 8000d36:	461a      	mov	r2, r3
 8000d38:	4b32      	ldr	r3, [pc, #200]	@ (8000e04 <_Z10appContentv+0x20c>)
 8000d3a:	709a      	strb	r2, [r3, #2]

		content[3]	= uint2hex_A(alpha_A1_PPM);	// Guarda primeros 4 bits de A1 HCL
 8000d3c:	4b37      	ldr	r3, [pc, #220]	@ (8000e1c <_Z10appContentv+0x224>)
 8000d3e:	881b      	ldrh	r3, [r3, #0]
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	4618      	mov	r0, r3
 8000d44:	f000 fc9e 	bl	8001684 <_Z10uint2hex_Ah>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	4b2d      	ldr	r3, [pc, #180]	@ (8000e04 <_Z10appContentv+0x20c>)
 8000d4e:	70da      	strb	r2, [r3, #3]
		content[4] 	= uint2hex_B(alpha_A1_PPM);	// Guarda segundos 4 bits de A1 HCL
 8000d50:	4b32      	ldr	r3, [pc, #200]	@ (8000e1c <_Z10appContentv+0x224>)
 8000d52:	881b      	ldrh	r3, [r3, #0]
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	4618      	mov	r0, r3
 8000d58:	f000 fcfa 	bl	8001750 <_Z10uint2hex_Bh>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	461a      	mov	r2, r3
 8000d60:	4b28      	ldr	r3, [pc, #160]	@ (8000e04 <_Z10appContentv+0x20c>)
 8000d62:	711a      	strb	r2, [r3, #4]

		content[5]	= uint2hex_A(tempApp);	// Guarda primeros 4 bits de Temperatura
 8000d64:	4b24      	ldr	r3, [pc, #144]	@ (8000df8 <_Z10appContentv+0x200>)
 8000d66:	881b      	ldrh	r3, [r3, #0]
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f000 fc8a 	bl	8001684 <_Z10uint2hex_Ah>
 8000d70:	4603      	mov	r3, r0
 8000d72:	461a      	mov	r2, r3
 8000d74:	4b23      	ldr	r3, [pc, #140]	@ (8000e04 <_Z10appContentv+0x20c>)
 8000d76:	715a      	strb	r2, [r3, #5]
		content[6]  = uint2hex_B(tempApp);	// Guarda segundos 4 bits de Temperatura
 8000d78:	4b1f      	ldr	r3, [pc, #124]	@ (8000df8 <_Z10appContentv+0x200>)
 8000d7a:	881b      	ldrh	r3, [r3, #0]
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f000 fce6 	bl	8001750 <_Z10uint2hex_Bh>
 8000d84:	4603      	mov	r3, r0
 8000d86:	461a      	mov	r2, r3
 8000d88:	4b1e      	ldr	r3, [pc, #120]	@ (8000e04 <_Z10appContentv+0x20c>)
 8000d8a:	719a      	strb	r2, [r3, #6]

		content[7] 	= uint2hex_A(humApp);	// Guarda primeros 4 bits de Humedad
 8000d8c:	4b1c      	ldr	r3, [pc, #112]	@ (8000e00 <_Z10appContentv+0x208>)
 8000d8e:	881b      	ldrh	r3, [r3, #0]
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	4618      	mov	r0, r3
 8000d94:	f000 fc76 	bl	8001684 <_Z10uint2hex_Ah>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	4b19      	ldr	r3, [pc, #100]	@ (8000e04 <_Z10appContentv+0x20c>)
 8000d9e:	71da      	strb	r2, [r3, #7]
		content[8]	= uint2hex_B(humApp);	// Guarda segundos 4 bits de Humedad
 8000da0:	4b17      	ldr	r3, [pc, #92]	@ (8000e00 <_Z10appContentv+0x208>)
 8000da2:	881b      	ldrh	r3, [r3, #0]
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	4618      	mov	r0, r3
 8000da8:	f000 fcd2 	bl	8001750 <_Z10uint2hex_Bh>
 8000dac:	4603      	mov	r3, r0
 8000dae:	461a      	mov	r2, r3
 8000db0:	4b14      	ldr	r3, [pc, #80]	@ (8000e04 <_Z10appContentv+0x20c>)
 8000db2:	721a      	strb	r2, [r3, #8]

		qttyMsgData++;
 8000db4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e20 <_Z10appContentv+0x228>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	3301      	adds	r3, #1
 8000dba:	b2da      	uxtb	r2, r3
 8000dbc:	4b18      	ldr	r3, [pc, #96]	@ (8000e20 <_Z10appContentv+0x228>)
 8000dbe:	701a      	strb	r2, [r3, #0]

		fifoContent.add(content, sizeof(content));	// Envia paquete a la FIFO
 8000dc0:	2209      	movs	r2, #9
 8000dc2:	4910      	ldr	r1, [pc, #64]	@ (8000e04 <_Z10appContentv+0x20c>)
 8000dc4:	4806      	ldr	r0, [pc, #24]	@ (8000de0 <_Z10appContentv+0x1e8>)
 8000dc6:	f000 fd60 	bl	800188a <_ZN12fifoCommands3addEPhh>
		stateContent 	= 5;						// Pasa a S5
 8000dca:	4b02      	ldr	r3, [pc, #8]	@ (8000dd4 <_Z10appContentv+0x1dc>)
 8000dcc:	2205      	movs	r2, #5
 8000dce:	701a      	strb	r2, [r3, #0]
		break;
 8000dd0:	e244      	b.n	800125c <_Z10appContentv+0x664>
 8000dd2:	bf00      	nop
 8000dd4:	200003c0 	.word	0x200003c0
 8000dd8:	20000b84 	.word	0x20000b84
 8000ddc:	200003c4 	.word	0x200003c4
 8000de0:	200010a8 	.word	0x200010a8
 8000de4:	20001164 	.word	0x20001164
 8000de8:	200003c2 	.word	0x200003c2
 8000dec:	2000114e 	.word	0x2000114e
 8000df0:	200003c1 	.word	0x200003c1
 8000df4:	20001170 	.word	0x20001170
 8000df8:	2000051e 	.word	0x2000051e
 8000dfc:	cccccccd 	.word	0xcccccccd
 8000e00:	20000520 	.word	0x20000520
 8000e04:	200003c8 	.word	0x200003c8
 8000e08:	2000043e 	.word	0x2000043e
 8000e0c:	200003de 	.word	0x200003de
 8000e10:	20000440 	.word	0x20000440
 8000e14:	200003dd 	.word	0x200003dd
 8000e18:	2000051c 	.word	0x2000051c
 8000e1c:	2000051a 	.word	0x2000051a
 8000e20:	200003ea 	.word	0x200003ea
	////////////////////////
	// S3 - SAVE LAT/LONG //
	////////////////////////

	case 3:
		flagGpsSaved	= 0;						// Reinicia indicado de enviar GPS
 8000e24:	4b76      	ldr	r3, [pc, #472]	@ (8001000 <_Z10appContentv+0x408>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	701a      	strb	r2, [r3, #0]

		latitudSend		= latitud;					// Copia valor de latitud
 8000e2a:	4b76      	ldr	r3, [pc, #472]	@ (8001004 <_Z10appContentv+0x40c>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a76      	ldr	r2, [pc, #472]	@ (8001008 <_Z10appContentv+0x410>)
 8000e30:	6013      	str	r3, [r2, #0]
		longitudSend	= longitud;					// Copia valor de longitud
 8000e32:	4b76      	ldr	r3, [pc, #472]	@ (800100c <_Z10appContentv+0x414>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a76      	ldr	r2, [pc, #472]	@ (8001010 <_Z10appContentv+0x418>)
 8000e38:	6013      	str	r3, [r2, #0]

		content[0]	= '2';							// Indica que latitud va en puerto 2
 8000e3a:	4b76      	ldr	r3, [pc, #472]	@ (8001014 <_Z10appContentv+0x41c>)
 8000e3c:	2232      	movs	r2, #50	@ 0x32
 8000e3e:	701a      	strb	r2, [r3, #0]

		content[1]	= uint2hex_A(ptrFloat_Lat[0]);	// Guarda primeros 4 bits de latitud - 1byte
 8000e40:	4b75      	ldr	r3, [pc, #468]	@ (8001018 <_Z10appContentv+0x420>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	4618      	mov	r0, r3
 8000e48:	f000 fc1c 	bl	8001684 <_Z10uint2hex_Ah>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	461a      	mov	r2, r3
 8000e50:	4b70      	ldr	r3, [pc, #448]	@ (8001014 <_Z10appContentv+0x41c>)
 8000e52:	705a      	strb	r2, [r3, #1]
		content[2]	= uint2hex_B(ptrFloat_Lat[0]);	// Guarda segundos 4 bits de latitud - 1byte
 8000e54:	4b70      	ldr	r3, [pc, #448]	@ (8001018 <_Z10appContentv+0x420>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f000 fc78 	bl	8001750 <_Z10uint2hex_Bh>
 8000e60:	4603      	mov	r3, r0
 8000e62:	461a      	mov	r2, r3
 8000e64:	4b6b      	ldr	r3, [pc, #428]	@ (8001014 <_Z10appContentv+0x41c>)
 8000e66:	709a      	strb	r2, [r3, #2]

		content[3]	= uint2hex_A(ptrFloat_Lat[1]);	// Guarda terceros 4 bits de latitud - 2byte
 8000e68:	4b6b      	ldr	r3, [pc, #428]	@ (8001018 <_Z10appContentv+0x420>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	4618      	mov	r0, r3
 8000e72:	f000 fc07 	bl	8001684 <_Z10uint2hex_Ah>
 8000e76:	4603      	mov	r3, r0
 8000e78:	461a      	mov	r2, r3
 8000e7a:	4b66      	ldr	r3, [pc, #408]	@ (8001014 <_Z10appContentv+0x41c>)
 8000e7c:	70da      	strb	r2, [r3, #3]
		content[4] 	= uint2hex_B(ptrFloat_Lat[1]);	// Guarda cuartos 4 bits de latitud  - 2byte
 8000e7e:	4b66      	ldr	r3, [pc, #408]	@ (8001018 <_Z10appContentv+0x420>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	3301      	adds	r3, #1
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	4618      	mov	r0, r3
 8000e88:	f000 fc62 	bl	8001750 <_Z10uint2hex_Bh>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	461a      	mov	r2, r3
 8000e90:	4b60      	ldr	r3, [pc, #384]	@ (8001014 <_Z10appContentv+0x41c>)
 8000e92:	711a      	strb	r2, [r3, #4]

		content[5]	= uint2hex_A(ptrFloat_Lat[2]);	// Guarda quintos 4 bits de latitud  - 3byte
 8000e94:	4b60      	ldr	r3, [pc, #384]	@ (8001018 <_Z10appContentv+0x420>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	3302      	adds	r3, #2
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f000 fbf1 	bl	8001684 <_Z10uint2hex_Ah>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	4b5b      	ldr	r3, [pc, #364]	@ (8001014 <_Z10appContentv+0x41c>)
 8000ea8:	715a      	strb	r2, [r3, #5]
		content[6]  = uint2hex_B(ptrFloat_Lat[2]);	// Guarda sextos 4 bits de latitud   - 3byte
 8000eaa:	4b5b      	ldr	r3, [pc, #364]	@ (8001018 <_Z10appContentv+0x420>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	3302      	adds	r3, #2
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 fc4c 	bl	8001750 <_Z10uint2hex_Bh>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	461a      	mov	r2, r3
 8000ebc:	4b55      	ldr	r3, [pc, #340]	@ (8001014 <_Z10appContentv+0x41c>)
 8000ebe:	719a      	strb	r2, [r3, #6]

		content[7] 	= uint2hex_A(ptrFloat_Lat[3]);	// Guarda septimos 4 bits de latitud - 4byte
 8000ec0:	4b55      	ldr	r3, [pc, #340]	@ (8001018 <_Z10appContentv+0x420>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	3303      	adds	r3, #3
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f000 fbdb 	bl	8001684 <_Z10uint2hex_Ah>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	4b50      	ldr	r3, [pc, #320]	@ (8001014 <_Z10appContentv+0x41c>)
 8000ed4:	71da      	strb	r2, [r3, #7]
		content[8]	= uint2hex_B(ptrFloat_Lat[3]);	// Guarda octavos 4 bits de latitud  - 4byte
 8000ed6:	4b50      	ldr	r3, [pc, #320]	@ (8001018 <_Z10appContentv+0x420>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	3303      	adds	r3, #3
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f000 fc36 	bl	8001750 <_Z10uint2hex_Bh>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	4b4a      	ldr	r3, [pc, #296]	@ (8001014 <_Z10appContentv+0x41c>)
 8000eea:	721a      	strb	r2, [r3, #8]

		fifoContent.add(content, sizeof(content));	// Añade contenido de latitud a FIFO
 8000eec:	2209      	movs	r2, #9
 8000eee:	4949      	ldr	r1, [pc, #292]	@ (8001014 <_Z10appContentv+0x41c>)
 8000ef0:	484a      	ldr	r0, [pc, #296]	@ (800101c <_Z10appContentv+0x424>)
 8000ef2:	f000 fcca 	bl	800188a <_ZN12fifoCommands3addEPhh>
		fifoContent.add(content, sizeof(content));	// Repite contenido para enviar 2 veces
 8000ef6:	2209      	movs	r2, #9
 8000ef8:	4946      	ldr	r1, [pc, #280]	@ (8001014 <_Z10appContentv+0x41c>)
 8000efa:	4848      	ldr	r0, [pc, #288]	@ (800101c <_Z10appContentv+0x424>)
 8000efc:	f000 fcc5 	bl	800188a <_ZN12fifoCommands3addEPhh>

		content[0]	= '3';							// Indica que longitud va en puerto 3
 8000f00:	4b44      	ldr	r3, [pc, #272]	@ (8001014 <_Z10appContentv+0x41c>)
 8000f02:	2233      	movs	r2, #51	@ 0x33
 8000f04:	701a      	strb	r2, [r3, #0]

		content[1]	= uint2hex_A(ptrFloat_Lon[3]);	// Guarda primeros 4 bits de longitud - 1byte
 8000f06:	4b46      	ldr	r3, [pc, #280]	@ (8001020 <_Z10appContentv+0x428>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	3303      	adds	r3, #3
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f000 fbb8 	bl	8001684 <_Z10uint2hex_Ah>
 8000f14:	4603      	mov	r3, r0
 8000f16:	461a      	mov	r2, r3
 8000f18:	4b3e      	ldr	r3, [pc, #248]	@ (8001014 <_Z10appContentv+0x41c>)
 8000f1a:	705a      	strb	r2, [r3, #1]
		content[2]	= uint2hex_B(ptrFloat_Lon[3]);	// Guarda segundos 4 bits de longitud - 1byte
 8000f1c:	4b40      	ldr	r3, [pc, #256]	@ (8001020 <_Z10appContentv+0x428>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	3303      	adds	r3, #3
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	4618      	mov	r0, r3
 8000f26:	f000 fc13 	bl	8001750 <_Z10uint2hex_Bh>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	4b39      	ldr	r3, [pc, #228]	@ (8001014 <_Z10appContentv+0x41c>)
 8000f30:	709a      	strb	r2, [r3, #2]

		content[3]	= uint2hex_A(ptrFloat_Lon[2]);	// Guarda terceros 4 bits de longitud - 2byte
 8000f32:	4b3b      	ldr	r3, [pc, #236]	@ (8001020 <_Z10appContentv+0x428>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	3302      	adds	r3, #2
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f000 fba2 	bl	8001684 <_Z10uint2hex_Ah>
 8000f40:	4603      	mov	r3, r0
 8000f42:	461a      	mov	r2, r3
 8000f44:	4b33      	ldr	r3, [pc, #204]	@ (8001014 <_Z10appContentv+0x41c>)
 8000f46:	70da      	strb	r2, [r3, #3]
		content[4] 	= uint2hex_B(ptrFloat_Lon[2]);	// Guarda cuartos 4 bits de longitud  - 2byte
 8000f48:	4b35      	ldr	r3, [pc, #212]	@ (8001020 <_Z10appContentv+0x428>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	3302      	adds	r3, #2
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f000 fbfd 	bl	8001750 <_Z10uint2hex_Bh>
 8000f56:	4603      	mov	r3, r0
 8000f58:	461a      	mov	r2, r3
 8000f5a:	4b2e      	ldr	r3, [pc, #184]	@ (8001014 <_Z10appContentv+0x41c>)
 8000f5c:	711a      	strb	r2, [r3, #4]

		content[5]	= uint2hex_A(ptrFloat_Lon[1]);	// Guarda quintos 4 bits de longitud  - 3byte
 8000f5e:	4b30      	ldr	r3, [pc, #192]	@ (8001020 <_Z10appContentv+0x428>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	3301      	adds	r3, #1
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	4618      	mov	r0, r3
 8000f68:	f000 fb8c 	bl	8001684 <_Z10uint2hex_Ah>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	461a      	mov	r2, r3
 8000f70:	4b28      	ldr	r3, [pc, #160]	@ (8001014 <_Z10appContentv+0x41c>)
 8000f72:	715a      	strb	r2, [r3, #5]
		content[6]  = uint2hex_B(ptrFloat_Lon[1]);	// Guarda sextos 4 bits de longitud   - 3byte
 8000f74:	4b2a      	ldr	r3, [pc, #168]	@ (8001020 <_Z10appContentv+0x428>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f000 fbe7 	bl	8001750 <_Z10uint2hex_Bh>
 8000f82:	4603      	mov	r3, r0
 8000f84:	461a      	mov	r2, r3
 8000f86:	4b23      	ldr	r3, [pc, #140]	@ (8001014 <_Z10appContentv+0x41c>)
 8000f88:	719a      	strb	r2, [r3, #6]

		content[7] 	= uint2hex_A(ptrFloat_Lon[0]);	// Guarda septimos 4 bits de longitud - 4byte
 8000f8a:	4b25      	ldr	r3, [pc, #148]	@ (8001020 <_Z10appContentv+0x428>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f000 fb77 	bl	8001684 <_Z10uint2hex_Ah>
 8000f96:	4603      	mov	r3, r0
 8000f98:	461a      	mov	r2, r3
 8000f9a:	4b1e      	ldr	r3, [pc, #120]	@ (8001014 <_Z10appContentv+0x41c>)
 8000f9c:	71da      	strb	r2, [r3, #7]
		content[8]	= uint2hex_B(ptrFloat_Lon[0]);	// Guarda octavos 4 bits de longitud  - 4byte
 8000f9e:	4b20      	ldr	r3, [pc, #128]	@ (8001020 <_Z10appContentv+0x428>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f000 fbd3 	bl	8001750 <_Z10uint2hex_Bh>
 8000faa:	4603      	mov	r3, r0
 8000fac:	461a      	mov	r2, r3
 8000fae:	4b19      	ldr	r3, [pc, #100]	@ (8001014 <_Z10appContentv+0x41c>)
 8000fb0:	721a      	strb	r2, [r3, #8]

		fifoContent.add(content, sizeof(content));	// Añade contenido de longitud de la FIFO
 8000fb2:	2209      	movs	r2, #9
 8000fb4:	4917      	ldr	r1, [pc, #92]	@ (8001014 <_Z10appContentv+0x41c>)
 8000fb6:	4819      	ldr	r0, [pc, #100]	@ (800101c <_Z10appContentv+0x424>)
 8000fb8:	f000 fc67 	bl	800188a <_ZN12fifoCommands3addEPhh>
		fifoContent.add(content, sizeof(content));	// Repite contenido para enviar 2 veces
 8000fbc:	2209      	movs	r2, #9
 8000fbe:	4915      	ldr	r1, [pc, #84]	@ (8001014 <_Z10appContentv+0x41c>)
 8000fc0:	4816      	ldr	r0, [pc, #88]	@ (800101c <_Z10appContentv+0x424>)
 8000fc2:	f000 fc62 	bl	800188a <_ZN12fifoCommands3addEPhh>

		qttyMsgGps++;
 8000fc6:	4b17      	ldr	r3, [pc, #92]	@ (8001024 <_Z10appContentv+0x42c>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	b2da      	uxtb	r2, r3
 8000fce:	4b15      	ldr	r3, [pc, #84]	@ (8001024 <_Z10appContentv+0x42c>)
 8000fd0:	701a      	strb	r2, [r3, #0]
		qttyMsgGps++;
 8000fd2:	4b14      	ldr	r3, [pc, #80]	@ (8001024 <_Z10appContentv+0x42c>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	b2da      	uxtb	r2, r3
 8000fda:	4b12      	ldr	r3, [pc, #72]	@ (8001024 <_Z10appContentv+0x42c>)
 8000fdc:	701a      	strb	r2, [r3, #0]
		qttyMsgGps++;
 8000fde:	4b11      	ldr	r3, [pc, #68]	@ (8001024 <_Z10appContentv+0x42c>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	b2da      	uxtb	r2, r3
 8000fe6:	4b0f      	ldr	r3, [pc, #60]	@ (8001024 <_Z10appContentv+0x42c>)
 8000fe8:	701a      	strb	r2, [r3, #0]
		qttyMsgGps++;
 8000fea:	4b0e      	ldr	r3, [pc, #56]	@ (8001024 <_Z10appContentv+0x42c>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	b2da      	uxtb	r2, r3
 8000ff2:	4b0c      	ldr	r3, [pc, #48]	@ (8001024 <_Z10appContentv+0x42c>)
 8000ff4:	701a      	strb	r2, [r3, #0]

		stateContent	= 5;						// Pasa a S5
 8000ff6:	4b0c      	ldr	r3, [pc, #48]	@ (8001028 <_Z10appContentv+0x430>)
 8000ff8:	2205      	movs	r2, #5
 8000ffa:	701a      	strb	r2, [r3, #0]
		break;
 8000ffc:	e12e      	b.n	800125c <_Z10appContentv+0x664>
 8000ffe:	bf00      	nop
 8001000:	2000114e 	.word	0x2000114e
 8001004:	20000ae0 	.word	0x20000ae0
 8001008:	200003e0 	.word	0x200003e0
 800100c:	20000ae4 	.word	0x20000ae4
 8001010:	200003e4 	.word	0x200003e4
 8001014:	200003c8 	.word	0x200003c8
 8001018:	20000000 	.word	0x20000000
 800101c:	200010a8 	.word	0x200010a8
 8001020:	20000004 	.word	0x20000004
 8001024:	200003eb 	.word	0x200003eb
 8001028:	200003c0 	.word	0x200003c0
	////////////////////////
	// S4 - SAVE SYS DATA //
	////////////////////////

	case 4:
		warnings	= warningHardware[0]	+ warningHardware[1]*2;			// Multiplexa warning 0 y 1
 800102c:	4b8c      	ldr	r3, [pc, #560]	@ (8001260 <_Z10appContentv+0x668>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	461a      	mov	r2, r3
 8001032:	4b8b      	ldr	r3, [pc, #556]	@ (8001260 <_Z10appContentv+0x668>)
 8001034:	785b      	ldrb	r3, [r3, #1]
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	b2db      	uxtb	r3, r3
 800103a:	4413      	add	r3, r2
 800103c:	b2da      	uxtb	r2, r3
 800103e:	4b89      	ldr	r3, [pc, #548]	@ (8001264 <_Z10appContentv+0x66c>)
 8001040:	701a      	strb	r2, [r3, #0]
		warnings	+= warningHardware[2]*4	+ warningHardware[3]*8;			// Multiplexa warning 2 y 3
 8001042:	4b87      	ldr	r3, [pc, #540]	@ (8001260 <_Z10appContentv+0x668>)
 8001044:	789b      	ldrb	r3, [r3, #2]
 8001046:	461a      	mov	r2, r3
 8001048:	4b85      	ldr	r3, [pc, #532]	@ (8001260 <_Z10appContentv+0x668>)
 800104a:	78db      	ldrb	r3, [r3, #3]
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	4413      	add	r3, r2
 8001050:	b2db      	uxtb	r3, r3
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	b2da      	uxtb	r2, r3
 8001056:	4b83      	ldr	r3, [pc, #524]	@ (8001264 <_Z10appContentv+0x66c>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	4413      	add	r3, r2
 800105c:	b2da      	uxtb	r2, r3
 800105e:	4b81      	ldr	r3, [pc, #516]	@ (8001264 <_Z10appContentv+0x66c>)
 8001060:	701a      	strb	r2, [r3, #0]
		warnings	+= warningHardware[4]*16	+ warningHardware[5]*32;	// Multiplexa warning 4 y 5
 8001062:	4b7f      	ldr	r3, [pc, #508]	@ (8001260 <_Z10appContentv+0x668>)
 8001064:	791b      	ldrb	r3, [r3, #4]
 8001066:	461a      	mov	r2, r3
 8001068:	4b7d      	ldr	r3, [pc, #500]	@ (8001260 <_Z10appContentv+0x668>)
 800106a:	795b      	ldrb	r3, [r3, #5]
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	4413      	add	r3, r2
 8001070:	b2db      	uxtb	r3, r3
 8001072:	011b      	lsls	r3, r3, #4
 8001074:	b2da      	uxtb	r2, r3
 8001076:	4b7b      	ldr	r3, [pc, #492]	@ (8001264 <_Z10appContentv+0x66c>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	4413      	add	r3, r2
 800107c:	b2da      	uxtb	r2, r3
 800107e:	4b79      	ldr	r3, [pc, #484]	@ (8001264 <_Z10appContentv+0x66c>)
 8001080:	701a      	strb	r2, [r3, #0]
		warnings	+= warningHardware[6]*64	+ warningHardware[7]*128;	// Multiplexa warning 6 y 7
 8001082:	4b77      	ldr	r3, [pc, #476]	@ (8001260 <_Z10appContentv+0x668>)
 8001084:	799b      	ldrb	r3, [r3, #6]
 8001086:	461a      	mov	r2, r3
 8001088:	4b75      	ldr	r3, [pc, #468]	@ (8001260 <_Z10appContentv+0x668>)
 800108a:	79db      	ldrb	r3, [r3, #7]
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	4413      	add	r3, r2
 8001090:	b2db      	uxtb	r3, r3
 8001092:	019b      	lsls	r3, r3, #6
 8001094:	b2da      	uxtb	r2, r3
 8001096:	4b73      	ldr	r3, [pc, #460]	@ (8001264 <_Z10appContentv+0x66c>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	4413      	add	r3, r2
 800109c:	b2da      	uxtb	r2, r3
 800109e:	4b71      	ldr	r3, [pc, #452]	@ (8001264 <_Z10appContentv+0x66c>)
 80010a0:	701a      	strb	r2, [r3, #0]

		errorHw	= errorHardware[0] 		+ errorHardware[1]*2;				// Multiplexa error 0 y 1
 80010a2:	4b71      	ldr	r3, [pc, #452]	@ (8001268 <_Z10appContentv+0x670>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	461a      	mov	r2, r3
 80010a8:	4b6f      	ldr	r3, [pc, #444]	@ (8001268 <_Z10appContentv+0x670>)
 80010aa:	785b      	ldrb	r3, [r3, #1]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	4413      	add	r3, r2
 80010b2:	b2da      	uxtb	r2, r3
 80010b4:	4b6d      	ldr	r3, [pc, #436]	@ (800126c <_Z10appContentv+0x674>)
 80010b6:	701a      	strb	r2, [r3, #0]
		errorHw	+= errorHardware[2]*4 	+ errorHardware[3]*8;				// Multiplexa error 2 y 3
 80010b8:	4b6b      	ldr	r3, [pc, #428]	@ (8001268 <_Z10appContentv+0x670>)
 80010ba:	789b      	ldrb	r3, [r3, #2]
 80010bc:	461a      	mov	r2, r3
 80010be:	4b6a      	ldr	r3, [pc, #424]	@ (8001268 <_Z10appContentv+0x670>)
 80010c0:	78db      	ldrb	r3, [r3, #3]
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	4413      	add	r3, r2
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	b2da      	uxtb	r2, r3
 80010cc:	4b67      	ldr	r3, [pc, #412]	@ (800126c <_Z10appContentv+0x674>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	4413      	add	r3, r2
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	4b65      	ldr	r3, [pc, #404]	@ (800126c <_Z10appContentv+0x674>)
 80010d6:	701a      	strb	r2, [r3, #0]
		errorHw	+= errorHardware[4]*16 	+ errorHardware[5]*32;				// Multiplexa error 4 y 5
 80010d8:	4b63      	ldr	r3, [pc, #396]	@ (8001268 <_Z10appContentv+0x670>)
 80010da:	791b      	ldrb	r3, [r3, #4]
 80010dc:	461a      	mov	r2, r3
 80010de:	4b62      	ldr	r3, [pc, #392]	@ (8001268 <_Z10appContentv+0x670>)
 80010e0:	795b      	ldrb	r3, [r3, #5]
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	4413      	add	r3, r2
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	011b      	lsls	r3, r3, #4
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	4b5f      	ldr	r3, [pc, #380]	@ (800126c <_Z10appContentv+0x674>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	4413      	add	r3, r2
 80010f2:	b2da      	uxtb	r2, r3
 80010f4:	4b5d      	ldr	r3, [pc, #372]	@ (800126c <_Z10appContentv+0x674>)
 80010f6:	701a      	strb	r2, [r3, #0]
		errorHw	+= errorHardware[6]*64;										// Multiplexa error 6
 80010f8:	4b5b      	ldr	r3, [pc, #364]	@ (8001268 <_Z10appContentv+0x670>)
 80010fa:	799b      	ldrb	r3, [r3, #6]
 80010fc:	019b      	lsls	r3, r3, #6
 80010fe:	b2da      	uxtb	r2, r3
 8001100:	4b5a      	ldr	r3, [pc, #360]	@ (800126c <_Z10appContentv+0x674>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	4413      	add	r3, r2
 8001106:	b2da      	uxtb	r2, r3
 8001108:	4b58      	ldr	r3, [pc, #352]	@ (800126c <_Z10appContentv+0x674>)
 800110a:	701a      	strb	r2, [r3, #0]

		content[0]	= '4';						// Indica que longitud va en puerto 3
 800110c:	4b58      	ldr	r3, [pc, #352]	@ (8001270 <_Z10appContentv+0x678>)
 800110e:	2234      	movs	r2, #52	@ 0x34
 8001110:	701a      	strb	r2, [r3, #0]

		content[1]	= uint2hex_A(warnings);		// Guarda primeros 4 bits de warnings
 8001112:	4b54      	ldr	r3, [pc, #336]	@ (8001264 <_Z10appContentv+0x66c>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	4618      	mov	r0, r3
 8001118:	f000 fab4 	bl	8001684 <_Z10uint2hex_Ah>
 800111c:	4603      	mov	r3, r0
 800111e:	461a      	mov	r2, r3
 8001120:	4b53      	ldr	r3, [pc, #332]	@ (8001270 <_Z10appContentv+0x678>)
 8001122:	705a      	strb	r2, [r3, #1]
		content[2]	= uint2hex_A(warnings);		// Guarda segundos 4 bits de warnings
 8001124:	4b4f      	ldr	r3, [pc, #316]	@ (8001264 <_Z10appContentv+0x66c>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	4618      	mov	r0, r3
 800112a:	f000 faab 	bl	8001684 <_Z10uint2hex_Ah>
 800112e:	4603      	mov	r3, r0
 8001130:	461a      	mov	r2, r3
 8001132:	4b4f      	ldr	r3, [pc, #316]	@ (8001270 <_Z10appContentv+0x678>)
 8001134:	709a      	strb	r2, [r3, #2]

		content[3]	= uint2hex_A(errorHw);		// Guarda primeros 4 bits de errores
 8001136:	4b4d      	ldr	r3, [pc, #308]	@ (800126c <_Z10appContentv+0x674>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	4618      	mov	r0, r3
 800113c:	f000 faa2 	bl	8001684 <_Z10uint2hex_Ah>
 8001140:	4603      	mov	r3, r0
 8001142:	461a      	mov	r2, r3
 8001144:	4b4a      	ldr	r3, [pc, #296]	@ (8001270 <_Z10appContentv+0x678>)
 8001146:	70da      	strb	r2, [r3, #3]
		content[4]	= uint2hex_B(errorHw);		// Guarda segundos 4 bits de errores
 8001148:	4b48      	ldr	r3, [pc, #288]	@ (800126c <_Z10appContentv+0x674>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	4618      	mov	r0, r3
 800114e:	f000 faff 	bl	8001750 <_Z10uint2hex_Bh>
 8001152:	4603      	mov	r3, r0
 8001154:	461a      	mov	r2, r3
 8001156:	4b46      	ldr	r3, [pc, #280]	@ (8001270 <_Z10appContentv+0x678>)
 8001158:	711a      	strb	r2, [r3, #4]

		content[5]	= uint2hex_A(batScaled);	// Guarda primeros 4 bits de bateria escalada
 800115a:	4b46      	ldr	r3, [pc, #280]	@ (8001274 <_Z10appContentv+0x67c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	b2db      	uxtb	r3, r3
 8001160:	4618      	mov	r0, r3
 8001162:	f000 fa8f 	bl	8001684 <_Z10uint2hex_Ah>
 8001166:	4603      	mov	r3, r0
 8001168:	461a      	mov	r2, r3
 800116a:	4b41      	ldr	r3, [pc, #260]	@ (8001270 <_Z10appContentv+0x678>)
 800116c:	715a      	strb	r2, [r3, #5]
		content[6]	= uint2hex_A(batScaled);	// Guarda segundos 4 bits de bateria escalada
 800116e:	4b41      	ldr	r3, [pc, #260]	@ (8001274 <_Z10appContentv+0x67c>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	b2db      	uxtb	r3, r3
 8001174:	4618      	mov	r0, r3
 8001176:	f000 fa85 	bl	8001684 <_Z10uint2hex_Ah>
 800117a:	4603      	mov	r3, r0
 800117c:	461a      	mov	r2, r3
 800117e:	4b3c      	ldr	r3, [pc, #240]	@ (8001270 <_Z10appContentv+0x678>)
 8001180:	719a      	strb	r2, [r3, #6]

		content[7]	= uint2hex_A(0);			// Futuro uso
 8001182:	2000      	movs	r0, #0
 8001184:	f000 fa7e 	bl	8001684 <_Z10uint2hex_Ah>
 8001188:	4603      	mov	r3, r0
 800118a:	461a      	mov	r2, r3
 800118c:	4b38      	ldr	r3, [pc, #224]	@ (8001270 <_Z10appContentv+0x678>)
 800118e:	71da      	strb	r2, [r3, #7]
		content[8]	= uint2hex_A(0);			// Futuro iso
 8001190:	2000      	movs	r0, #0
 8001192:	f000 fa77 	bl	8001684 <_Z10uint2hex_Ah>
 8001196:	4603      	mov	r3, r0
 8001198:	461a      	mov	r2, r3
 800119a:	4b35      	ldr	r3, [pc, #212]	@ (8001270 <_Z10appContentv+0x678>)
 800119c:	721a      	strb	r2, [r3, #8]

		fifoContent.add(content, sizeof(content));	// Agrega contenido a la fifo
 800119e:	2209      	movs	r2, #9
 80011a0:	4933      	ldr	r1, [pc, #204]	@ (8001270 <_Z10appContentv+0x678>)
 80011a2:	4835      	ldr	r0, [pc, #212]	@ (8001278 <_Z10appContentv+0x680>)
 80011a4:	f000 fb71 	bl	800188a <_ZN12fifoCommands3addEPhh>

		qttyMsgSys++;
 80011a8:	4b34      	ldr	r3, [pc, #208]	@ (800127c <_Z10appContentv+0x684>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	3301      	adds	r3, #1
 80011ae:	b2da      	uxtb	r2, r3
 80011b0:	4b32      	ldr	r3, [pc, #200]	@ (800127c <_Z10appContentv+0x684>)
 80011b2:	701a      	strb	r2, [r3, #0]

		flagSetSys		= 0;						// Reinicia indicador de datos de sistema
 80011b4:	4b32      	ldr	r3, [pc, #200]	@ (8001280 <_Z10appContentv+0x688>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	701a      	strb	r2, [r3, #0]
		stateContent	= 5;						// Pasa a  S5
 80011ba:	4b32      	ldr	r3, [pc, #200]	@ (8001284 <_Z10appContentv+0x68c>)
 80011bc:	2205      	movs	r2, #5
 80011be:	701a      	strb	r2, [r3, #0]
		break;
 80011c0:	e04c      	b.n	800125c <_Z10appContentv+0x664>
	///////////////////
	// S5 - SET DATA //
	///////////////////

	case 5:
		fifoContent.read(content2, sizeof(content2));	// Lee contenido disponible en FIFO
 80011c2:	2209      	movs	r2, #9
 80011c4:	4930      	ldr	r1, [pc, #192]	@ (8001288 <_Z10appContentv+0x690>)
 80011c6:	482c      	ldr	r0, [pc, #176]	@ (8001278 <_Z10appContentv+0x680>)
 80011c8:	f000 fba2 	bl	8001910 <_ZN12fifoCommands4readEPhh>

		macTxData_RN2903[13] = content2[0];			// Copia PUERTO
 80011cc:	4b2e      	ldr	r3, [pc, #184]	@ (8001288 <_Z10appContentv+0x690>)
 80011ce:	781a      	ldrb	r2, [r3, #0]
 80011d0:	4b2e      	ldr	r3, [pc, #184]	@ (800128c <_Z10appContentv+0x694>)
 80011d2:	735a      	strb	r2, [r3, #13]
		macTxData_RN2903[15] = content2[1];			// 0 Byte
 80011d4:	4b2c      	ldr	r3, [pc, #176]	@ (8001288 <_Z10appContentv+0x690>)
 80011d6:	785a      	ldrb	r2, [r3, #1]
 80011d8:	4b2c      	ldr	r3, [pc, #176]	@ (800128c <_Z10appContentv+0x694>)
 80011da:	73da      	strb	r2, [r3, #15]
		macTxData_RN2903[16] = content2[2];			// 0 Byte
 80011dc:	4b2a      	ldr	r3, [pc, #168]	@ (8001288 <_Z10appContentv+0x690>)
 80011de:	789a      	ldrb	r2, [r3, #2]
 80011e0:	4b2a      	ldr	r3, [pc, #168]	@ (800128c <_Z10appContentv+0x694>)
 80011e2:	741a      	strb	r2, [r3, #16]
		macTxData_RN2903[17] = content2[3];			// 1 Byte
 80011e4:	4b28      	ldr	r3, [pc, #160]	@ (8001288 <_Z10appContentv+0x690>)
 80011e6:	78da      	ldrb	r2, [r3, #3]
 80011e8:	4b28      	ldr	r3, [pc, #160]	@ (800128c <_Z10appContentv+0x694>)
 80011ea:	745a      	strb	r2, [r3, #17]
		macTxData_RN2903[18] = content2[4];			// 1 Byte
 80011ec:	4b26      	ldr	r3, [pc, #152]	@ (8001288 <_Z10appContentv+0x690>)
 80011ee:	791a      	ldrb	r2, [r3, #4]
 80011f0:	4b26      	ldr	r3, [pc, #152]	@ (800128c <_Z10appContentv+0x694>)
 80011f2:	749a      	strb	r2, [r3, #18]
		macTxData_RN2903[19] = content2[5];			// 2 Byte
 80011f4:	4b24      	ldr	r3, [pc, #144]	@ (8001288 <_Z10appContentv+0x690>)
 80011f6:	795a      	ldrb	r2, [r3, #5]
 80011f8:	4b24      	ldr	r3, [pc, #144]	@ (800128c <_Z10appContentv+0x694>)
 80011fa:	74da      	strb	r2, [r3, #19]
		macTxData_RN2903[20] = content2[6];			// 2 Byte
 80011fc:	4b22      	ldr	r3, [pc, #136]	@ (8001288 <_Z10appContentv+0x690>)
 80011fe:	799a      	ldrb	r2, [r3, #6]
 8001200:	4b22      	ldr	r3, [pc, #136]	@ (800128c <_Z10appContentv+0x694>)
 8001202:	751a      	strb	r2, [r3, #20]
		macTxData_RN2903[21] = content2[7];			// 3 Byte
 8001204:	4b20      	ldr	r3, [pc, #128]	@ (8001288 <_Z10appContentv+0x690>)
 8001206:	79da      	ldrb	r2, [r3, #7]
 8001208:	4b20      	ldr	r3, [pc, #128]	@ (800128c <_Z10appContentv+0x694>)
 800120a:	755a      	strb	r2, [r3, #21]
		macTxData_RN2903[22] = content2[8];			// 3 Byte
 800120c:	4b1e      	ldr	r3, [pc, #120]	@ (8001288 <_Z10appContentv+0x690>)
 800120e:	7a1a      	ldrb	r2, [r3, #8]
 8001210:	4b1e      	ldr	r3, [pc, #120]	@ (800128c <_Z10appContentv+0x694>)
 8001212:	759a      	strb	r2, [r3, #22]

		savedData		= 1;						// Indica que se guardaron los datos		stateContent	= 6;						// Pasa a S
 8001214:	4b1e      	ldr	r3, [pc, #120]	@ (8001290 <_Z10appContentv+0x698>)
 8001216:	2201      	movs	r2, #1
 8001218:	701a      	strb	r2, [r3, #0]
		stateContent	= 6;						// Pasa a S6
 800121a:	4b1a      	ldr	r3, [pc, #104]	@ (8001284 <_Z10appContentv+0x68c>)
 800121c:	2206      	movs	r2, #6
 800121e:	701a      	strb	r2, [r3, #0]
		break;
 8001220:	e01c      	b.n	800125c <_Z10appContentv+0x664>
	//////////////////////////
	// S6 - WAIT FOR ENABLE //
	//////////////////////////

	case 6:
		if ( !loraDecision.enable() ){	// Si no está habilitado
 8001222:	481c      	ldr	r0, [pc, #112]	@ (8001294 <_Z10appContentv+0x69c>)
 8001224:	f003 f9ae 	bl	8004584 <_ZN12loraDecision6enableEv>
 8001228:	4603      	mov	r3, r0
 800122a:	f083 0301 	eor.w	r3, r3, #1
 800122e:	b2db      	uxtb	r3, r3
 8001230:	2b00      	cmp	r3, #0
 8001232:	d003      	beq.n	800123c <_Z10appContentv+0x644>
			stateContent	= 0;		// Vuelve a S0
 8001234:	4b13      	ldr	r3, [pc, #76]	@ (8001284 <_Z10appContentv+0x68c>)
 8001236:	2200      	movs	r2, #0
 8001238:	701a      	strb	r2, [r3, #0]
			stateContent	= 1;		// Vuelve a S1
		}
		else{							// Si no
			stateContent	= 6;		// Espera en S6
		}
		break;
 800123a:	e00f      	b.n	800125c <_Z10appContentv+0x664>
		else if (bussyRN2903){			// Si se habilita
 800123c:	4b16      	ldr	r3, [pc, #88]	@ (8001298 <_Z10appContentv+0x6a0>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d003      	beq.n	800124c <_Z10appContentv+0x654>
			stateContent	= 1;		// Vuelve a S1
 8001244:	4b0f      	ldr	r3, [pc, #60]	@ (8001284 <_Z10appContentv+0x68c>)
 8001246:	2201      	movs	r2, #1
 8001248:	701a      	strb	r2, [r3, #0]
		break;
 800124a:	e007      	b.n	800125c <_Z10appContentv+0x664>
			stateContent	= 6;		// Espera en S6
 800124c:	4b0d      	ldr	r3, [pc, #52]	@ (8001284 <_Z10appContentv+0x68c>)
 800124e:	2206      	movs	r2, #6
 8001250:	701a      	strb	r2, [r3, #0]
		break;
 8001252:	e003      	b.n	800125c <_Z10appContentv+0x664>

	default:
		stateContent	= 0;
 8001254:	4b0b      	ldr	r3, [pc, #44]	@ (8001284 <_Z10appContentv+0x68c>)
 8001256:	2200      	movs	r2, #0
 8001258:	701a      	strb	r2, [r3, #0]
		break;
 800125a:	bf00      	nop
	}
}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}
 8001260:	200004d4 	.word	0x200004d4
 8001264:	200003e9 	.word	0x200003e9
 8001268:	200004dc 	.word	0x200004dc
 800126c:	200003e8 	.word	0x200003e8
 8001270:	200003c8 	.word	0x200003c8
 8001274:	20000530 	.word	0x20000530
 8001278:	200010a8 	.word	0x200010a8
 800127c:	200003ec 	.word	0x200003ec
 8001280:	20001170 	.word	0x20001170
 8001284:	200003c0 	.word	0x200003c0
 8001288:	200003d4 	.word	0x200003d4
 800128c:	200002f0 	.word	0x200002f0
 8001290:	200003c3 	.word	0x200003c3
 8001294:	20000b84 	.word	0x20000b84
 8001298:	200003c4 	.word	0x200003c4

0800129c <_Z7appLorav>:
 * 	chSetRN2903:	Fija configuracion de canales del chip
 * 	loopRN2903:		Fija comandos de transmision en el chip
 *
 */

void appLora(){
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0

	switch ( stateLoraApp ){
 80012a0:	4ba7      	ldr	r3, [pc, #668]	@ (8001540 <_Z7appLorav+0x2a4>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	2b0a      	cmp	r3, #10
 80012a6:	f200 81d8 	bhi.w	800165a <_Z7appLorav+0x3be>
 80012aa:	a201      	add	r2, pc, #4	@ (adr r2, 80012b0 <_Z7appLorav+0x14>)
 80012ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012b0:	080012dd 	.word	0x080012dd
 80012b4:	08001303 	.word	0x08001303
 80012b8:	08001335 	.word	0x08001335
 80012bc:	08001395 	.word	0x08001395
 80012c0:	080013e9 	.word	0x080013e9
 80012c4:	08001445 	.word	0x08001445
 80012c8:	08001497 	.word	0x08001497
 80012cc:	080014b1 	.word	0x080014b1
 80012d0:	080014e3 	.word	0x080014e3
 80012d4:	08001585 	.word	0x08001585
 80012d8:	080015e1 	.word	0x080015e1
	//////////////////////////
	// S0 - WAIT FOR ENABLE //
	//////////////////////////

	case 0:
		if ( loraDecision.enable() ){						// Si el chip esta habilitado por SW
 80012dc:	4899      	ldr	r0, [pc, #612]	@ (8001544 <_Z7appLorav+0x2a8>)
 80012de:	f003 f951 	bl	8004584 <_ZN12loraDecision6enableEv>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d008      	beq.n	80012fa <_Z7appLorav+0x5e>
			loraCheck.setResponsePointer( rxCommand, 14);	//
 80012e8:	220e      	movs	r2, #14
 80012ea:	4997      	ldr	r1, [pc, #604]	@ (8001548 <_Z7appLorav+0x2ac>)
 80012ec:	4897      	ldr	r0, [pc, #604]	@ (800154c <_Z7appLorav+0x2b0>)
 80012ee:	f002 ff21 	bl	8004134 <_ZN9loraCheck18setResponsePointerEPPhh>
			stateLoraApp	= 7;							// Pasa a S1
 80012f2:	4b93      	ldr	r3, [pc, #588]	@ (8001540 <_Z7appLorav+0x2a4>)
 80012f4:	2207      	movs	r2, #7
 80012f6:	701a      	strb	r2, [r3, #0]
		}
		else{												// Si no
			stateLoraApp	= 0;							// Espera en S0
		}
		break;
 80012f8:	e1b3      	b.n	8001662 <_Z7appLorav+0x3c6>
			stateLoraApp	= 0;							// Espera en S0
 80012fa:	4b91      	ldr	r3, [pc, #580]	@ (8001540 <_Z7appLorav+0x2a4>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	701a      	strb	r2, [r3, #0]
		break;
 8001300:	e1af      	b.n	8001662 <_Z7appLorav+0x3c6>
	////////////////////////////
	// S1 - SET SETUP COMMAND //
	////////////////////////////

	case 1:
		loraDecision.reset();
 8001302:	4890      	ldr	r0, [pc, #576]	@ (8001544 <_Z7appLorav+0x2a8>)
 8001304:	f003 f91b 	bl	800453e <_ZN12loraDecision5resetEv>
		txCommandPointer	= setupRN2903.command();		// Solicita comando
 8001308:	4891      	ldr	r0, [pc, #580]	@ (8001550 <_Z7appLorav+0x2b4>)
 800130a:	f002 fe66 	bl	8003fda <_ZN10loraRutine7commandEv>
 800130e:	4603      	mov	r3, r0
 8001310:	4a90      	ldr	r2, [pc, #576]	@ (8001554 <_Z7appLorav+0x2b8>)
 8001312:	6013      	str	r3, [r2, #0]
		loraSelect.setCommand( txCommandPointer->command,	// Inserta puntero al comando
 8001314:	4b8f      	ldr	r3, [pc, #572]	@ (8001554 <_Z7appLorav+0x2b8>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	6859      	ldr	r1, [r3, #4]
 800131a:	4b8e      	ldr	r3, [pc, #568]	@ (8001554 <_Z7appLorav+0x2b8>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	781a      	ldrb	r2, [r3, #0]
 8001320:	4b8c      	ldr	r3, [pc, #560]	@ (8001554 <_Z7appLorav+0x2b8>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	7a1b      	ldrb	r3, [r3, #8]
 8001326:	488c      	ldr	r0, [pc, #560]	@ (8001558 <_Z7appLorav+0x2bc>)
 8001328:	f003 f82e 	bl	8004388 <_ZN10loraSelect10setCommandEPhhh>
			txCommandPointer->size,							// Inserta tamañp del comando
			txCommandPointer->responseSize);				// Inserta tamaño de respuesta
		stateLoraApp	= 2;								// Pasa a S2
 800132c:	4b84      	ldr	r3, [pc, #528]	@ (8001540 <_Z7appLorav+0x2a4>)
 800132e:	2202      	movs	r2, #2
 8001330:	701a      	strb	r2, [r3, #0]
		break;
 8001332:	e196      	b.n	8001662 <_Z7appLorav+0x3c6>
	// S2 - WAIT FOR NEXT //
	////////////////////////

	case 2:

		if ( !loraDecision.enable() ){									// Si el chip esta habilitado
 8001334:	4883      	ldr	r0, [pc, #524]	@ (8001544 <_Z7appLorav+0x2a8>)
 8001336:	f003 f925 	bl	8004584 <_ZN12loraDecision6enableEv>
 800133a:	4603      	mov	r3, r0
 800133c:	f083 0301 	eor.w	r3, r3, #1
 8001340:	b2db      	uxtb	r3, r3
 8001342:	2b00      	cmp	r3, #0
 8001344:	d003      	beq.n	800134e <_Z7appLorav+0xb2>
			stateLoraApp	= 6;										// Pasa a S6
 8001346:	4b7e      	ldr	r3, [pc, #504]	@ (8001540 <_Z7appLorav+0x2a4>)
 8001348:	2206      	movs	r2, #6
 800134a:	701a      	strb	r2, [r3, #0]
			stateLoraApp	= 1;										// Vuelve a S1
		}
		else{															// Si no
			stateLoraApp	= 2;										// Se queda en S2
		}
		break;
 800134c:	e189      	b.n	8001662 <_Z7appLorav+0x3c6>
		else if ( loraDecision.correct() && setupRN2903.finish() ){		// Si llegó la respuesta correcta y es la ultima
 800134e:	487d      	ldr	r0, [pc, #500]	@ (8001544 <_Z7appLorav+0x2a8>)
 8001350:	f003 f924 	bl	800459c <_ZN12loraDecision7correctEv>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d007      	beq.n	800136a <_Z7appLorav+0xce>
 800135a:	487d      	ldr	r0, [pc, #500]	@ (8001550 <_Z7appLorav+0x2b4>)
 800135c:	f002 fe79 	bl	8004052 <_ZN10loraRutine6finishEv>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <_Z7appLorav+0xce>
 8001366:	2301      	movs	r3, #1
 8001368:	e000      	b.n	800136c <_Z7appLorav+0xd0>
 800136a:	2300      	movs	r3, #0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d003      	beq.n	8001378 <_Z7appLorav+0xdc>
			stateLoraApp	= 3;										// Pasa a  S3
 8001370:	4b73      	ldr	r3, [pc, #460]	@ (8001540 <_Z7appLorav+0x2a4>)
 8001372:	2203      	movs	r2, #3
 8001374:	701a      	strb	r2, [r3, #0]
		break;
 8001376:	e174      	b.n	8001662 <_Z7appLorav+0x3c6>
		else if ( loraDecision.correct() ){								// Si solo es correctao
 8001378:	4872      	ldr	r0, [pc, #456]	@ (8001544 <_Z7appLorav+0x2a8>)
 800137a:	f003 f90f 	bl	800459c <_ZN12loraDecision7correctEv>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d003      	beq.n	800138c <_Z7appLorav+0xf0>
			stateLoraApp	= 1;										// Vuelve a S1
 8001384:	4b6e      	ldr	r3, [pc, #440]	@ (8001540 <_Z7appLorav+0x2a4>)
 8001386:	2201      	movs	r2, #1
 8001388:	701a      	strb	r2, [r3, #0]
		break;
 800138a:	e16a      	b.n	8001662 <_Z7appLorav+0x3c6>
			stateLoraApp	= 2;										// Se queda en S2
 800138c:	4b6c      	ldr	r3, [pc, #432]	@ (8001540 <_Z7appLorav+0x2a4>)
 800138e:	2202      	movs	r2, #2
 8001390:	701a      	strb	r2, [r3, #0]
		break;
 8001392:	e166      	b.n	8001662 <_Z7appLorav+0x3c6>
	// S3 - GET TX COMMAND //
	/////////////////////////

	case 3:

		if ( savedData ){										//
 8001394:	4b71      	ldr	r3, [pc, #452]	@ (800155c <_Z7appLorav+0x2c0>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d021      	beq.n	80013e0 <_Z7appLorav+0x144>
			qttyMessagesInputs2++;
 800139c:	4b70      	ldr	r3, [pc, #448]	@ (8001560 <_Z7appLorav+0x2c4>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	3301      	adds	r3, #1
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	4b6e      	ldr	r3, [pc, #440]	@ (8001560 <_Z7appLorav+0x2c4>)
 80013a6:	701a      	strb	r2, [r3, #0]
			loraDecision.reset();								//
 80013a8:	4866      	ldr	r0, [pc, #408]	@ (8001544 <_Z7appLorav+0x2a8>)
 80013aa:	f003 f8c8 	bl	800453e <_ZN12loraDecision5resetEv>
			loopRN2903.reset();									//
 80013ae:	486d      	ldr	r0, [pc, #436]	@ (8001564 <_Z7appLorav+0x2c8>)
 80013b0:	f002 fe3d 	bl	800402e <_ZN10loraRutine5resetEv>
			txCommandPointer	= loopRN2903.command();			// Solicita comando
 80013b4:	486b      	ldr	r0, [pc, #428]	@ (8001564 <_Z7appLorav+0x2c8>)
 80013b6:	f002 fe10 	bl	8003fda <_ZN10loraRutine7commandEv>
 80013ba:	4603      	mov	r3, r0
 80013bc:	4a65      	ldr	r2, [pc, #404]	@ (8001554 <_Z7appLorav+0x2b8>)
 80013be:	6013      	str	r3, [r2, #0]

			loraSelect.setCommand( txCommandPointer->command,	// Inserta puntero al comando
 80013c0:	4b64      	ldr	r3, [pc, #400]	@ (8001554 <_Z7appLorav+0x2b8>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	6859      	ldr	r1, [r3, #4]
 80013c6:	4b63      	ldr	r3, [pc, #396]	@ (8001554 <_Z7appLorav+0x2b8>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	781a      	ldrb	r2, [r3, #0]
 80013cc:	4b61      	ldr	r3, [pc, #388]	@ (8001554 <_Z7appLorav+0x2b8>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	7a1b      	ldrb	r3, [r3, #8]
 80013d2:	4861      	ldr	r0, [pc, #388]	@ (8001558 <_Z7appLorav+0x2bc>)
 80013d4:	f002 ffd8 	bl	8004388 <_ZN10loraSelect10setCommandEPhhh>
				txCommandPointer->size,							// Inserta tamañp del comando
				txCommandPointer->responseSize);				// Inserta tamaño de respuesta
			stateLoraApp	= 4;								// Pasa a S4
 80013d8:	4b59      	ldr	r3, [pc, #356]	@ (8001540 <_Z7appLorav+0x2a4>)
 80013da:	2204      	movs	r2, #4
 80013dc:	701a      	strb	r2, [r3, #0]
		}
		else{													// Si no
			stateLoraApp	= 3;								// Espera en S3
		}
		break;
 80013de:	e140      	b.n	8001662 <_Z7appLorav+0x3c6>
			stateLoraApp	= 3;								// Espera en S3
 80013e0:	4b57      	ldr	r3, [pc, #348]	@ (8001540 <_Z7appLorav+0x2a4>)
 80013e2:	2203      	movs	r2, #3
 80013e4:	701a      	strb	r2, [r3, #0]
		break;
 80013e6:	e13c      	b.n	8001662 <_Z7appLorav+0x3c6>
	////////////////////////////
	// S4 - WAIT FOR RESPONSE //
	////////////////////////////

	case 4:
		if ( !loraDecision.enable() ){			// Si el chip esta habilitado
 80013e8:	4856      	ldr	r0, [pc, #344]	@ (8001544 <_Z7appLorav+0x2a8>)
 80013ea:	f003 f8cb 	bl	8004584 <_ZN12loraDecision6enableEv>
 80013ee:	4603      	mov	r3, r0
 80013f0:	f083 0301 	eor.w	r3, r3, #1
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d003      	beq.n	8001402 <_Z7appLorav+0x166>
			stateLoraApp	= 6;				// Pasa a S6
 80013fa:	4b51      	ldr	r3, [pc, #324]	@ (8001540 <_Z7appLorav+0x2a4>)
 80013fc:	2206      	movs	r2, #6
 80013fe:	701a      	strb	r2, [r3, #0]
			stateLoraApp	= 1;
		}
		else{									// Si no
			stateLoraApp	= 4;				// Se queda en S4
		}
		break;
 8001400:	e12f      	b.n	8001662 <_Z7appLorav+0x3c6>
		else if ( loraDecision.correct() ){		// Si es correcto
 8001402:	4850      	ldr	r0, [pc, #320]	@ (8001544 <_Z7appLorav+0x2a8>)
 8001404:	f003 f8ca 	bl	800459c <_ZN12loraDecision7correctEv>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d003      	beq.n	8001416 <_Z7appLorav+0x17a>
			stateLoraApp	= 5;				// Vuelve a S5
 800140e:	4b4c      	ldr	r3, [pc, #304]	@ (8001540 <_Z7appLorav+0x2a4>)
 8001410:	2205      	movs	r2, #5
 8001412:	701a      	strb	r2, [r3, #0]
		break;
 8001414:	e125      	b.n	8001662 <_Z7appLorav+0x3c6>
		else if ( loraDecision.burn()){
 8001416:	484b      	ldr	r0, [pc, #300]	@ (8001544 <_Z7appLorav+0x2a8>)
 8001418:	f003 f8cc 	bl	80045b4 <_ZN12loraDecision4burnEv>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d00c      	beq.n	800143c <_Z7appLorav+0x1a0>
			setupRN2903.reset();	// Reinicia rutina
 8001422:	484b      	ldr	r0, [pc, #300]	@ (8001550 <_Z7appLorav+0x2b4>)
 8001424:	f002 fe03 	bl	800402e <_ZN10loraRutine5resetEv>
			chSetRN2903.reset();	// Reinicia rutina
 8001428:	484f      	ldr	r0, [pc, #316]	@ (8001568 <_Z7appLorav+0x2cc>)
 800142a:	f002 fe00 	bl	800402e <_ZN10loraRutine5resetEv>
			loopRN2903.reset();		// Reinicia rutina
 800142e:	484d      	ldr	r0, [pc, #308]	@ (8001564 <_Z7appLorav+0x2c8>)
 8001430:	f002 fdfd 	bl	800402e <_ZN10loraRutine5resetEv>
			stateLoraApp	= 1;
 8001434:	4b42      	ldr	r3, [pc, #264]	@ (8001540 <_Z7appLorav+0x2a4>)
 8001436:	2201      	movs	r2, #1
 8001438:	701a      	strb	r2, [r3, #0]
		break;
 800143a:	e112      	b.n	8001662 <_Z7appLorav+0x3c6>
			stateLoraApp	= 4;				// Se queda en S4
 800143c:	4b40      	ldr	r3, [pc, #256]	@ (8001540 <_Z7appLorav+0x2a4>)
 800143e:	2204      	movs	r2, #4
 8001440:	701a      	strb	r2, [r3, #0]
		break;
 8001442:	e10e      	b.n	8001662 <_Z7appLorav+0x3c6>
	////////////////////////////////
	// S5 - WAIT FOR NEXT MESSAGE //
	////////////////////////////////

	case 5:
		savedData = 0;								// Indica que se envia
 8001444:	4b45      	ldr	r3, [pc, #276]	@ (800155c <_Z7appLorav+0x2c0>)
 8001446:	2200      	movs	r2, #0
 8001448:	701a      	strb	r2, [r3, #0]
		countLoraApp++;								// Suma 1 al contador
 800144a:	4b48      	ldr	r3, [pc, #288]	@ (800156c <_Z7appLorav+0x2d0>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	3301      	adds	r3, #1
 8001450:	4a46      	ldr	r2, [pc, #280]	@ (800156c <_Z7appLorav+0x2d0>)
 8001452:	6013      	str	r3, [r2, #0]

		if ( !loraDecision.enable() ){				// Si el chip esta habilitado
 8001454:	483b      	ldr	r0, [pc, #236]	@ (8001544 <_Z7appLorav+0x2a8>)
 8001456:	f003 f895 	bl	8004584 <_ZN12loraDecision6enableEv>
 800145a:	4603      	mov	r3, r0
 800145c:	f083 0301 	eor.w	r3, r3, #1
 8001460:	b2db      	uxtb	r3, r3
 8001462:	2b00      	cmp	r3, #0
 8001464:	d003      	beq.n	800146e <_Z7appLorav+0x1d2>
			stateLoraApp	= 6;					// Pasa a S6
 8001466:	4b36      	ldr	r3, [pc, #216]	@ (8001540 <_Z7appLorav+0x2a4>)
 8001468:	2206      	movs	r2, #6
 800146a:	701a      	strb	r2, [r3, #0]
		}
		else{										// Si no
			stateLoraApp	= 5;					// Espera
		}

		break;
 800146c:	e0f9      	b.n	8001662 <_Z7appLorav+0x3c6>
		else if ( countLoraApp >= limitLoraApp ){	// Si pasa el limite
 800146e:	4b3f      	ldr	r3, [pc, #252]	@ (800156c <_Z7appLorav+0x2d0>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	4b3f      	ldr	r3, [pc, #252]	@ (8001570 <_Z7appLorav+0x2d4>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	429a      	cmp	r2, r3
 8001478:	db09      	blt.n	800148e <_Z7appLorav+0x1f2>
			bussyRN2903		= 1;					// Habilita
 800147a:	4b3e      	ldr	r3, [pc, #248]	@ (8001574 <_Z7appLorav+0x2d8>)
 800147c:	2201      	movs	r2, #1
 800147e:	701a      	strb	r2, [r3, #0]
			countLoraApp	= 0;					// Reinicia contador
 8001480:	4b3a      	ldr	r3, [pc, #232]	@ (800156c <_Z7appLorav+0x2d0>)
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
			stateLoraApp	= 3;					// Pasa a S3
 8001486:	4b2e      	ldr	r3, [pc, #184]	@ (8001540 <_Z7appLorav+0x2a4>)
 8001488:	2203      	movs	r2, #3
 800148a:	701a      	strb	r2, [r3, #0]
		break;
 800148c:	e0e9      	b.n	8001662 <_Z7appLorav+0x3c6>
			stateLoraApp	= 5;					// Espera
 800148e:	4b2c      	ldr	r3, [pc, #176]	@ (8001540 <_Z7appLorav+0x2a4>)
 8001490:	2205      	movs	r2, #5
 8001492:	701a      	strb	r2, [r3, #0]
		break;
 8001494:	e0e5      	b.n	8001662 <_Z7appLorav+0x3c6>
	////////////////////////
	// S6 - RESET RUTINES //
	////////////////////////

	case 6:
		setupRN2903.reset();	// Reinicia rutina
 8001496:	482e      	ldr	r0, [pc, #184]	@ (8001550 <_Z7appLorav+0x2b4>)
 8001498:	f002 fdc9 	bl	800402e <_ZN10loraRutine5resetEv>
		chSetRN2903.reset();	// Reinicia rutina
 800149c:	4832      	ldr	r0, [pc, #200]	@ (8001568 <_Z7appLorav+0x2cc>)
 800149e:	f002 fdc6 	bl	800402e <_ZN10loraRutine5resetEv>
		loopRN2903.reset();		// Reinicia rutina
 80014a2:	4830      	ldr	r0, [pc, #192]	@ (8001564 <_Z7appLorav+0x2c8>)
 80014a4:	f002 fdc3 	bl	800402e <_ZN10loraRutine5resetEv>

		stateLoraApp	= 0;	// Vuelve a S0
 80014a8:	4b25      	ldr	r3, [pc, #148]	@ (8001540 <_Z7appLorav+0x2a4>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	701a      	strb	r2, [r3, #0]
		break;
 80014ae:	e0d8      	b.n	8001662 <_Z7appLorav+0x3c6>
	/////////////////////////
	// S7 - SET CH COMMAND //
	/////////////////////////

	case 7:
		loraDecision.reset();								// Reinicia decisiones
 80014b0:	4824      	ldr	r0, [pc, #144]	@ (8001544 <_Z7appLorav+0x2a8>)
 80014b2:	f003 f844 	bl	800453e <_ZN12loraDecision5resetEv>
		txCommandPointer	= chSetRN2903.command();		// Solicita comando
 80014b6:	482c      	ldr	r0, [pc, #176]	@ (8001568 <_Z7appLorav+0x2cc>)
 80014b8:	f002 fd8f 	bl	8003fda <_ZN10loraRutine7commandEv>
 80014bc:	4603      	mov	r3, r0
 80014be:	4a25      	ldr	r2, [pc, #148]	@ (8001554 <_Z7appLorav+0x2b8>)
 80014c0:	6013      	str	r3, [r2, #0]
		loraSelect.setCommand( txCommandPointer->command,	// Inserta puntero al comando
 80014c2:	4b24      	ldr	r3, [pc, #144]	@ (8001554 <_Z7appLorav+0x2b8>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	6859      	ldr	r1, [r3, #4]
 80014c8:	4b22      	ldr	r3, [pc, #136]	@ (8001554 <_Z7appLorav+0x2b8>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	781a      	ldrb	r2, [r3, #0]
 80014ce:	4b21      	ldr	r3, [pc, #132]	@ (8001554 <_Z7appLorav+0x2b8>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	7a1b      	ldrb	r3, [r3, #8]
 80014d4:	4820      	ldr	r0, [pc, #128]	@ (8001558 <_Z7appLorav+0x2bc>)
 80014d6:	f002 ff57 	bl	8004388 <_ZN10loraSelect10setCommandEPhhh>
				txCommandPointer->size,						// Inserta tamañp del comando
				txCommandPointer->responseSize );			// Inserta tamaño de respuesta
		stateLoraApp	= 8;								// Pasa a S2
 80014da:	4b19      	ldr	r3, [pc, #100]	@ (8001540 <_Z7appLorav+0x2a4>)
 80014dc:	2208      	movs	r2, #8
 80014de:	701a      	strb	r2, [r3, #0]
		break;
 80014e0:	e0bf      	b.n	8001662 <_Z7appLorav+0x3c6>
	/////////////////////////
	// S8 - CHECK RESPONSE //
	/////////////////////////

	case 8:
		if ( !loraDecision.enable() ){									// Si el chip esta habilitado
 80014e2:	4818      	ldr	r0, [pc, #96]	@ (8001544 <_Z7appLorav+0x2a8>)
 80014e4:	f003 f84e 	bl	8004584 <_ZN12loraDecision6enableEv>
 80014e8:	4603      	mov	r3, r0
 80014ea:	f083 0301 	eor.w	r3, r3, #1
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d003      	beq.n	80014fc <_Z7appLorav+0x260>
			stateLoraApp	= 6;										// Pasa a S6
 80014f4:	4b12      	ldr	r3, [pc, #72]	@ (8001540 <_Z7appLorav+0x2a4>)
 80014f6:	2206      	movs	r2, #6
 80014f8:	701a      	strb	r2, [r3, #0]
			stateLoraApp	= 7;										// Vuelve a S7
		}
		else{															// Si no
			stateLoraApp	= 8;										// Se queda en S8
		}
		break;
 80014fa:	e0b2      	b.n	8001662 <_Z7appLorav+0x3c6>
		else if ( loraDecision.correct() && chSetRN2903.finish() ){		// Si llegó la respuesta correcta y es la ultima
 80014fc:	4811      	ldr	r0, [pc, #68]	@ (8001544 <_Z7appLorav+0x2a8>)
 80014fe:	f003 f84d 	bl	800459c <_ZN12loraDecision7correctEv>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d007      	beq.n	8001518 <_Z7appLorav+0x27c>
 8001508:	4817      	ldr	r0, [pc, #92]	@ (8001568 <_Z7appLorav+0x2cc>)
 800150a:	f002 fda2 	bl	8004052 <_ZN10loraRutine6finishEv>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <_Z7appLorav+0x27c>
 8001514:	2301      	movs	r3, #1
 8001516:	e000      	b.n	800151a <_Z7appLorav+0x27e>
 8001518:	2300      	movs	r3, #0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d006      	beq.n	800152c <_Z7appLorav+0x290>
			countChSet		= 10;										// Inicia contador en 10
 800151e:	4b16      	ldr	r3, [pc, #88]	@ (8001578 <_Z7appLorav+0x2dc>)
 8001520:	220a      	movs	r2, #10
 8001522:	701a      	strb	r2, [r3, #0]
			stateLoraApp	= 9;										// Pasa a  S9
 8001524:	4b06      	ldr	r3, [pc, #24]	@ (8001540 <_Z7appLorav+0x2a4>)
 8001526:	2209      	movs	r2, #9
 8001528:	701a      	strb	r2, [r3, #0]
		break;
 800152a:	e09a      	b.n	8001662 <_Z7appLorav+0x3c6>
		else if ( loraDecision.correct() ){								// Si solo es correctao
 800152c:	4805      	ldr	r0, [pc, #20]	@ (8001544 <_Z7appLorav+0x2a8>)
 800152e:	f003 f835 	bl	800459c <_ZN12loraDecision7correctEv>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d021      	beq.n	800157c <_Z7appLorav+0x2e0>
			stateLoraApp	= 7;										// Vuelve a S7
 8001538:	4b01      	ldr	r3, [pc, #4]	@ (8001540 <_Z7appLorav+0x2a4>)
 800153a:	2207      	movs	r2, #7
 800153c:	701a      	strb	r2, [r3, #0]
		break;
 800153e:	e090      	b.n	8001662 <_Z7appLorav+0x3c6>
 8001540:	20000008 	.word	0x20000008
 8001544:	20000b84 	.word	0x20000b84
 8001548:	20000170 	.word	0x20000170
 800154c:	20000b70 	.word	0x20000b70
 8001550:	20000b94 	.word	0x20000b94
 8001554:	200003f0 	.word	0x200003f0
 8001558:	20000b8c 	.word	0x20000b8c
 800155c:	200003c3 	.word	0x200003c3
 8001560:	2000050e 	.word	0x2000050e
 8001564:	20000ebc 	.word	0x20000ebc
 8001568:	20000d28 	.word	0x20000d28
 800156c:	200003f4 	.word	0x200003f4
 8001570:	200003f8 	.word	0x200003f8
 8001574:	200003c4 	.word	0x200003c4
 8001578:	200003fc 	.word	0x200003fc
			stateLoraApp	= 8;										// Se queda en S8
 800157c:	4b3a      	ldr	r3, [pc, #232]	@ (8001668 <_Z7appLorav+0x3cc>)
 800157e:	2208      	movs	r2, #8
 8001580:	701a      	strb	r2, [r3, #0]
		break;
 8001582:	e06e      	b.n	8001662 <_Z7appLorav+0x3c6>
	///////////////////////////
	// S9 - GET LAST COMMAND //
	///////////////////////////

	case 9:
		loraDecision.reset();										// Reinicia decisiones
 8001584:	4839      	ldr	r0, [pc, #228]	@ (800166c <_Z7appLorav+0x3d0>)
 8001586:	f002 ffda 	bl	800453e <_ZN12loraDecision5resetEv>
		macSetCh10_RN2903[18]	= uint8_t(countChSet/10) + '0';		// Inserta decena del contador
 800158a:	4b39      	ldr	r3, [pc, #228]	@ (8001670 <_Z7appLorav+0x3d4>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	4a39      	ldr	r2, [pc, #228]	@ (8001674 <_Z7appLorav+0x3d8>)
 8001590:	fba2 2303 	umull	r2, r3, r2, r3
 8001594:	08db      	lsrs	r3, r3, #3
 8001596:	b2db      	uxtb	r3, r3
 8001598:	3330      	adds	r3, #48	@ 0x30
 800159a:	b2da      	uxtb	r2, r3
 800159c:	4b36      	ldr	r3, [pc, #216]	@ (8001678 <_Z7appLorav+0x3dc>)
 800159e:	749a      	strb	r2, [r3, #18]
		macSetCh10_RN2903[19]	= countChSet%10 + '0';				// Inserta unidad de contador
 80015a0:	4b33      	ldr	r3, [pc, #204]	@ (8001670 <_Z7appLorav+0x3d4>)
 80015a2:	781a      	ldrb	r2, [r3, #0]
 80015a4:	4b33      	ldr	r3, [pc, #204]	@ (8001674 <_Z7appLorav+0x3d8>)
 80015a6:	fba3 1302 	umull	r1, r3, r3, r2
 80015aa:	08d9      	lsrs	r1, r3, #3
 80015ac:	460b      	mov	r3, r1
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	440b      	add	r3, r1
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	3330      	adds	r3, #48	@ 0x30
 80015ba:	b2da      	uxtb	r2, r3
 80015bc:	4b2e      	ldr	r3, [pc, #184]	@ (8001678 <_Z7appLorav+0x3dc>)
 80015be:	74da      	strb	r2, [r3, #19]
		loraSelect.setCommand( txCommandPointer->command,			// Fija comando en la salida
 80015c0:	4b2e      	ldr	r3, [pc, #184]	@ (800167c <_Z7appLorav+0x3e0>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	6859      	ldr	r1, [r3, #4]
 80015c6:	4b2d      	ldr	r3, [pc, #180]	@ (800167c <_Z7appLorav+0x3e0>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	781a      	ldrb	r2, [r3, #0]
 80015cc:	4b2b      	ldr	r3, [pc, #172]	@ (800167c <_Z7appLorav+0x3e0>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	7a1b      	ldrb	r3, [r3, #8]
 80015d2:	482b      	ldr	r0, [pc, #172]	@ (8001680 <_Z7appLorav+0x3e4>)
 80015d4:	f002 fed8 	bl	8004388 <_ZN10loraSelect10setCommandEPhhh>
				txCommandPointer->size,								// Inserta tamañp del comando
				txCommandPointer->responseSize);					// Inserta tamaño de respuesta
		stateLoraApp	= 10;										// Pasa a S10
 80015d8:	4b23      	ldr	r3, [pc, #140]	@ (8001668 <_Z7appLorav+0x3cc>)
 80015da:	220a      	movs	r2, #10
 80015dc:	701a      	strb	r2, [r3, #0]
		break;
 80015de:	e040      	b.n	8001662 <_Z7appLorav+0x3c6>
	//////////////////////////
	// S10 - CHECK RESPONSE //
	//////////////////////////

	case 10:
		if ( !loraDecision.enable() ){									// Si el chip esta habilitado
 80015e0:	4822      	ldr	r0, [pc, #136]	@ (800166c <_Z7appLorav+0x3d0>)
 80015e2:	f002 ffcf 	bl	8004584 <_ZN12loraDecision6enableEv>
 80015e6:	4603      	mov	r3, r0
 80015e8:	f083 0301 	eor.w	r3, r3, #1
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d003      	beq.n	80015fa <_Z7appLorav+0x35e>
			stateLoraApp	= 6;										// Pasa a S6
 80015f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001668 <_Z7appLorav+0x3cc>)
 80015f4:	2206      	movs	r2, #6
 80015f6:	701a      	strb	r2, [r3, #0]
			stateLoraApp	= 9;										// Vuelve a S9
		}
		else{															// Si no
			stateLoraApp	= 10;										// Se queda en S10
		}
		break;
 80015f8:	e033      	b.n	8001662 <_Z7appLorav+0x3c6>
		else if ( loraDecision.correct() && countChSet == 71 ){			// Si llegó la respuesta correcta y es la ultima
 80015fa:	481c      	ldr	r0, [pc, #112]	@ (800166c <_Z7appLorav+0x3d0>)
 80015fc:	f002 ffce 	bl	800459c <_ZN12loraDecision7correctEv>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d005      	beq.n	8001612 <_Z7appLorav+0x376>
 8001606:	4b1a      	ldr	r3, [pc, #104]	@ (8001670 <_Z7appLorav+0x3d4>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	2b47      	cmp	r3, #71	@ 0x47
 800160c:	d101      	bne.n	8001612 <_Z7appLorav+0x376>
 800160e:	2301      	movs	r3, #1
 8001610:	e000      	b.n	8001614 <_Z7appLorav+0x378>
 8001612:	2300      	movs	r3, #0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d00c      	beq.n	8001632 <_Z7appLorav+0x396>
			macSetCh10_RN2903[18]	= '1';								// Fija comando en valor original '1'
 8001618:	4b17      	ldr	r3, [pc, #92]	@ (8001678 <_Z7appLorav+0x3dc>)
 800161a:	2231      	movs	r2, #49	@ 0x31
 800161c:	749a      	strb	r2, [r3, #18]
			macSetCh10_RN2903[19]	= '0';								// Fija comando en valor original '0'
 800161e:	4b16      	ldr	r3, [pc, #88]	@ (8001678 <_Z7appLorav+0x3dc>)
 8001620:	2230      	movs	r2, #48	@ 0x30
 8001622:	74da      	strb	r2, [r3, #19]
			countChSet		= 10;										// Reinicia contador en 10
 8001624:	4b12      	ldr	r3, [pc, #72]	@ (8001670 <_Z7appLorav+0x3d4>)
 8001626:	220a      	movs	r2, #10
 8001628:	701a      	strb	r2, [r3, #0]
			stateLoraApp	= 1;										// Pasa a  S3
 800162a:	4b0f      	ldr	r3, [pc, #60]	@ (8001668 <_Z7appLorav+0x3cc>)
 800162c:	2201      	movs	r2, #1
 800162e:	701a      	strb	r2, [r3, #0]
		break;
 8001630:	e017      	b.n	8001662 <_Z7appLorav+0x3c6>
		else if ( loraDecision.correct() ){								// Si solo es correctao
 8001632:	480e      	ldr	r0, [pc, #56]	@ (800166c <_Z7appLorav+0x3d0>)
 8001634:	f002 ffb2 	bl	800459c <_ZN12loraDecision7correctEv>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d009      	beq.n	8001652 <_Z7appLorav+0x3b6>
			countChSet++;												// Suma 1 al contador
 800163e:	4b0c      	ldr	r3, [pc, #48]	@ (8001670 <_Z7appLorav+0x3d4>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	3301      	adds	r3, #1
 8001644:	b2da      	uxtb	r2, r3
 8001646:	4b0a      	ldr	r3, [pc, #40]	@ (8001670 <_Z7appLorav+0x3d4>)
 8001648:	701a      	strb	r2, [r3, #0]
			stateLoraApp	= 9;										// Vuelve a S9
 800164a:	4b07      	ldr	r3, [pc, #28]	@ (8001668 <_Z7appLorav+0x3cc>)
 800164c:	2209      	movs	r2, #9
 800164e:	701a      	strb	r2, [r3, #0]
		break;
 8001650:	e007      	b.n	8001662 <_Z7appLorav+0x3c6>
			stateLoraApp	= 10;										// Se queda en S10
 8001652:	4b05      	ldr	r3, [pc, #20]	@ (8001668 <_Z7appLorav+0x3cc>)
 8001654:	220a      	movs	r2, #10
 8001656:	701a      	strb	r2, [r3, #0]
		break;
 8001658:	e003      	b.n	8001662 <_Z7appLorav+0x3c6>

	default:
		stateLoraApp	= 0;
 800165a:	4b03      	ldr	r3, [pc, #12]	@ (8001668 <_Z7appLorav+0x3cc>)
 800165c:	2200      	movs	r2, #0
 800165e:	701a      	strb	r2, [r3, #0]
		break;
 8001660:	bf00      	nop
	}
}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000008 	.word	0x20000008
 800166c:	20000b84 	.word	0x20000b84
 8001670:	200003fc 	.word	0x200003fc
 8001674:	cccccccd 	.word	0xcccccccd
 8001678:	20000378 	.word	0x20000378
 800167c:	200003f0 	.word	0x200003f0
 8001680:	20000b8c 	.word	0x20000b8c

08001684 <_Z10uint2hex_Ah>:

uint8_t uint2hex_A( uint8_t number ){
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	71fb      	strb	r3, [r7, #7]
	uint8_t value = (number >> 4 & 0x0F);
 800168e:	79fb      	ldrb	r3, [r7, #7]
 8001690:	091b      	lsrs	r3, r3, #4
 8001692:	73fb      	strb	r3, [r7, #15]

	switch ( value ){
 8001694:	7bfb      	ldrb	r3, [r7, #15]
 8001696:	2b0f      	cmp	r3, #15
 8001698:	d852      	bhi.n	8001740 <_Z10uint2hex_Ah+0xbc>
 800169a:	a201      	add	r2, pc, #4	@ (adr r2, 80016a0 <_Z10uint2hex_Ah+0x1c>)
 800169c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016a0:	080016e1 	.word	0x080016e1
 80016a4:	080016e7 	.word	0x080016e7
 80016a8:	080016ed 	.word	0x080016ed
 80016ac:	080016f3 	.word	0x080016f3
 80016b0:	080016f9 	.word	0x080016f9
 80016b4:	080016ff 	.word	0x080016ff
 80016b8:	08001705 	.word	0x08001705
 80016bc:	0800170b 	.word	0x0800170b
 80016c0:	08001711 	.word	0x08001711
 80016c4:	08001717 	.word	0x08001717
 80016c8:	0800171d 	.word	0x0800171d
 80016cc:	08001723 	.word	0x08001723
 80016d0:	08001729 	.word	0x08001729
 80016d4:	0800172f 	.word	0x0800172f
 80016d8:	08001735 	.word	0x08001735
 80016dc:	0800173b 	.word	0x0800173b
	case 0:
		value = '0';
 80016e0:	2330      	movs	r3, #48	@ 0x30
 80016e2:	73fb      	strb	r3, [r7, #15]
		break;
 80016e4:	e02c      	b.n	8001740 <_Z10uint2hex_Ah+0xbc>

	case 1:
		value = '1';
 80016e6:	2331      	movs	r3, #49	@ 0x31
 80016e8:	73fb      	strb	r3, [r7, #15]
		break;
 80016ea:	e029      	b.n	8001740 <_Z10uint2hex_Ah+0xbc>

	case 2:
		value = '2';
 80016ec:	2332      	movs	r3, #50	@ 0x32
 80016ee:	73fb      	strb	r3, [r7, #15]
		break;
 80016f0:	e026      	b.n	8001740 <_Z10uint2hex_Ah+0xbc>

	case 3:
		value = '3';
 80016f2:	2333      	movs	r3, #51	@ 0x33
 80016f4:	73fb      	strb	r3, [r7, #15]
		break;
 80016f6:	e023      	b.n	8001740 <_Z10uint2hex_Ah+0xbc>

	case 4:
		value = '4';
 80016f8:	2334      	movs	r3, #52	@ 0x34
 80016fa:	73fb      	strb	r3, [r7, #15]
		break;
 80016fc:	e020      	b.n	8001740 <_Z10uint2hex_Ah+0xbc>

	case 5:
		value = '5';
 80016fe:	2335      	movs	r3, #53	@ 0x35
 8001700:	73fb      	strb	r3, [r7, #15]
		break;
 8001702:	e01d      	b.n	8001740 <_Z10uint2hex_Ah+0xbc>

	case 6:
		value = '6';
 8001704:	2336      	movs	r3, #54	@ 0x36
 8001706:	73fb      	strb	r3, [r7, #15]
		break;
 8001708:	e01a      	b.n	8001740 <_Z10uint2hex_Ah+0xbc>

	case 7:
		value = '7';
 800170a:	2337      	movs	r3, #55	@ 0x37
 800170c:	73fb      	strb	r3, [r7, #15]
		break;
 800170e:	e017      	b.n	8001740 <_Z10uint2hex_Ah+0xbc>

	case 8:
		value = '8';
 8001710:	2338      	movs	r3, #56	@ 0x38
 8001712:	73fb      	strb	r3, [r7, #15]
		break;
 8001714:	e014      	b.n	8001740 <_Z10uint2hex_Ah+0xbc>

	case 9:
		value = '9';
 8001716:	2339      	movs	r3, #57	@ 0x39
 8001718:	73fb      	strb	r3, [r7, #15]
		break;
 800171a:	e011      	b.n	8001740 <_Z10uint2hex_Ah+0xbc>

	case 10:
		value = 'A';
 800171c:	2341      	movs	r3, #65	@ 0x41
 800171e:	73fb      	strb	r3, [r7, #15]
		break;
 8001720:	e00e      	b.n	8001740 <_Z10uint2hex_Ah+0xbc>

	case 11:
		value = 'B';
 8001722:	2342      	movs	r3, #66	@ 0x42
 8001724:	73fb      	strb	r3, [r7, #15]
		break;
 8001726:	e00b      	b.n	8001740 <_Z10uint2hex_Ah+0xbc>

	case 12:
		value = 'C';
 8001728:	2343      	movs	r3, #67	@ 0x43
 800172a:	73fb      	strb	r3, [r7, #15]
		break;
 800172c:	e008      	b.n	8001740 <_Z10uint2hex_Ah+0xbc>

	case 13:
		value = 'D';
 800172e:	2344      	movs	r3, #68	@ 0x44
 8001730:	73fb      	strb	r3, [r7, #15]
		break;
 8001732:	e005      	b.n	8001740 <_Z10uint2hex_Ah+0xbc>

	case 14:
		value = 'E';
 8001734:	2345      	movs	r3, #69	@ 0x45
 8001736:	73fb      	strb	r3, [r7, #15]
		break;
 8001738:	e002      	b.n	8001740 <_Z10uint2hex_Ah+0xbc>

	case 15:
		value = 'F';
 800173a:	2346      	movs	r3, #70	@ 0x46
 800173c:	73fb      	strb	r3, [r7, #15]
		break;
 800173e:	bf00      	nop
	}
	return  value;
 8001740:	7bfb      	ldrb	r3, [r7, #15]
}
 8001742:	4618      	mov	r0, r3
 8001744:	3714      	adds	r7, #20
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop

08001750 <_Z10uint2hex_Bh>:

uint8_t uint2hex_B( uint8_t number ){
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	71fb      	strb	r3, [r7, #7]
	uint8_t value = (number & 0x0F);
 800175a:	79fb      	ldrb	r3, [r7, #7]
 800175c:	f003 030f 	and.w	r3, r3, #15
 8001760:	73fb      	strb	r3, [r7, #15]

	switch ( value ){
 8001762:	7bfb      	ldrb	r3, [r7, #15]
 8001764:	2b0f      	cmp	r3, #15
 8001766:	d853      	bhi.n	8001810 <_Z10uint2hex_Bh+0xc0>
 8001768:	a201      	add	r2, pc, #4	@ (adr r2, 8001770 <_Z10uint2hex_Bh+0x20>)
 800176a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800176e:	bf00      	nop
 8001770:	080017b1 	.word	0x080017b1
 8001774:	080017b7 	.word	0x080017b7
 8001778:	080017bd 	.word	0x080017bd
 800177c:	080017c3 	.word	0x080017c3
 8001780:	080017c9 	.word	0x080017c9
 8001784:	080017cf 	.word	0x080017cf
 8001788:	080017d5 	.word	0x080017d5
 800178c:	080017db 	.word	0x080017db
 8001790:	080017e1 	.word	0x080017e1
 8001794:	080017e7 	.word	0x080017e7
 8001798:	080017ed 	.word	0x080017ed
 800179c:	080017f3 	.word	0x080017f3
 80017a0:	080017f9 	.word	0x080017f9
 80017a4:	080017ff 	.word	0x080017ff
 80017a8:	08001805 	.word	0x08001805
 80017ac:	0800180b 	.word	0x0800180b
	case 0:
		value = '0';
 80017b0:	2330      	movs	r3, #48	@ 0x30
 80017b2:	73fb      	strb	r3, [r7, #15]
		break;
 80017b4:	e02c      	b.n	8001810 <_Z10uint2hex_Bh+0xc0>

	case 1:
		value = '1';
 80017b6:	2331      	movs	r3, #49	@ 0x31
 80017b8:	73fb      	strb	r3, [r7, #15]
		break;
 80017ba:	e029      	b.n	8001810 <_Z10uint2hex_Bh+0xc0>

	case 2:
		value = '2';
 80017bc:	2332      	movs	r3, #50	@ 0x32
 80017be:	73fb      	strb	r3, [r7, #15]
		break;
 80017c0:	e026      	b.n	8001810 <_Z10uint2hex_Bh+0xc0>

	case 3:
		value = '3';
 80017c2:	2333      	movs	r3, #51	@ 0x33
 80017c4:	73fb      	strb	r3, [r7, #15]
		break;
 80017c6:	e023      	b.n	8001810 <_Z10uint2hex_Bh+0xc0>

	case 4:
		value = '4';
 80017c8:	2334      	movs	r3, #52	@ 0x34
 80017ca:	73fb      	strb	r3, [r7, #15]
		break;
 80017cc:	e020      	b.n	8001810 <_Z10uint2hex_Bh+0xc0>

	case 5:
		value = '5';
 80017ce:	2335      	movs	r3, #53	@ 0x35
 80017d0:	73fb      	strb	r3, [r7, #15]
		break;
 80017d2:	e01d      	b.n	8001810 <_Z10uint2hex_Bh+0xc0>

	case 6:
		value = '6';
 80017d4:	2336      	movs	r3, #54	@ 0x36
 80017d6:	73fb      	strb	r3, [r7, #15]
		break;
 80017d8:	e01a      	b.n	8001810 <_Z10uint2hex_Bh+0xc0>

	case 7:
		value = '7';
 80017da:	2337      	movs	r3, #55	@ 0x37
 80017dc:	73fb      	strb	r3, [r7, #15]
		break;
 80017de:	e017      	b.n	8001810 <_Z10uint2hex_Bh+0xc0>

	case 8:
		value = '8';
 80017e0:	2338      	movs	r3, #56	@ 0x38
 80017e2:	73fb      	strb	r3, [r7, #15]
		break;
 80017e4:	e014      	b.n	8001810 <_Z10uint2hex_Bh+0xc0>

	case 9:
		value = '9';
 80017e6:	2339      	movs	r3, #57	@ 0x39
 80017e8:	73fb      	strb	r3, [r7, #15]
		break;
 80017ea:	e011      	b.n	8001810 <_Z10uint2hex_Bh+0xc0>

	case 10:
		value = 'A';
 80017ec:	2341      	movs	r3, #65	@ 0x41
 80017ee:	73fb      	strb	r3, [r7, #15]
		break;
 80017f0:	e00e      	b.n	8001810 <_Z10uint2hex_Bh+0xc0>

	case 11:
		value = 'B';
 80017f2:	2342      	movs	r3, #66	@ 0x42
 80017f4:	73fb      	strb	r3, [r7, #15]
		break;
 80017f6:	e00b      	b.n	8001810 <_Z10uint2hex_Bh+0xc0>

	case 12:
		value = 'C';
 80017f8:	2343      	movs	r3, #67	@ 0x43
 80017fa:	73fb      	strb	r3, [r7, #15]
		break;
 80017fc:	e008      	b.n	8001810 <_Z10uint2hex_Bh+0xc0>

	case 13:
		value = 'D';
 80017fe:	2344      	movs	r3, #68	@ 0x44
 8001800:	73fb      	strb	r3, [r7, #15]
		break;
 8001802:	e005      	b.n	8001810 <_Z10uint2hex_Bh+0xc0>

	case 14:
		value = 'E';
 8001804:	2345      	movs	r3, #69	@ 0x45
 8001806:	73fb      	strb	r3, [r7, #15]
		break;
 8001808:	e002      	b.n	8001810 <_Z10uint2hex_Bh+0xc0>

	case 15:
		value = 'F';
 800180a:	2346      	movs	r3, #70	@ 0x46
 800180c:	73fb      	strb	r3, [r7, #15]
		break;
 800180e:	bf00      	nop
	}
	return  value;
 8001810:	7bfb      	ldrb	r3, [r7, #15]
}
 8001812:	4618      	mov	r0, r3
 8001814:	3714      	adds	r7, #20
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop

08001820 <_Z41__static_initialization_and_destruction_0ii>:
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d10d      	bne.n	800184c <_Z41__static_initialization_and_destruction_0ii+0x2c>
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001836:	4293      	cmp	r3, r2
 8001838:	d108      	bne.n	800184c <_Z41__static_initialization_and_destruction_0ii+0x2c>
int limitLoraApp = 5000/superloop;
 800183a:	4b07      	ldr	r3, [pc, #28]	@ (8001858 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	461a      	mov	r2, r3
 8001840:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001844:	fb93 f3f2 	sdiv	r3, r3, r2
 8001848:	4a04      	ldr	r2, [pc, #16]	@ (800185c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 800184a:	6013      	str	r3, [r2, #0]
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	20000395 	.word	0x20000395
 800185c:	200003f8 	.word	0x200003f8

08001860 <_GLOBAL__sub_I_stateContent>:
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
 8001864:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001868:	2001      	movs	r0, #1
 800186a:	f7ff ffd9 	bl	8001820 <_Z41__static_initialization_and_destruction_0ii>
 800186e:	bd80      	pop	{r7, pc}

08001870 <_ZN12fifoCommands9availableEv>:

///////////////
// AVAILABLE //
///////////////

bool fifoCommands::available(){		// Indica si hay elementos en Fifo
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
	return this->bussy;				// Retorna flag
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
}
 800187e:	4618      	mov	r0, r3
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr

0800188a <_ZN12fifoCommands3addEPhh>:

/////////////////
// ADD COMMAND //
/////////////////

void fifoCommands::add( uint8_t *command, uint8_t size ){
 800188a:	b480      	push	{r7}
 800188c:	b087      	sub	sp, #28
 800188e:	af00      	add	r7, sp, #0
 8001890:	60f8      	str	r0, [r7, #12]
 8001892:	60b9      	str	r1, [r7, #8]
 8001894:	4613      	mov	r3, r2
 8001896:	71fb      	strb	r3, [r7, #7]
	uint8_t i;															// Crea variable

	if ( this->index < 10 ){											// Si el indice es menor a 10
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800189e:	2b09      	cmp	r3, #9
 80018a0:	d828      	bhi.n	80018f4 <_ZN12fifoCommands3addEPhh+0x6a>
		for( i = 0; i < size ; i++){									// Recorre el largo del comando
 80018a2:	2300      	movs	r3, #0
 80018a4:	75fb      	strb	r3, [r7, #23]
 80018a6:	e010      	b.n	80018ca <_ZN12fifoCommands3addEPhh+0x40>
			*(this->rxCommand[this->index] + i)  = *(command + i);		// Copia valores del comando
 80018a8:	7dfb      	ldrb	r3, [r7, #23]
 80018aa:	68ba      	ldr	r2, [r7, #8]
 80018ac:	441a      	add	r2, r3
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80018b4:	68f9      	ldr	r1, [r7, #12]
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	440b      	add	r3, r1
 80018ba:	6859      	ldr	r1, [r3, #4]
 80018bc:	7dfb      	ldrb	r3, [r7, #23]
 80018be:	440b      	add	r3, r1
 80018c0:	7812      	ldrb	r2, [r2, #0]
 80018c2:	701a      	strb	r2, [r3, #0]
		for( i = 0; i < size ; i++){									// Recorre el largo del comando
 80018c4:	7dfb      	ldrb	r3, [r7, #23]
 80018c6:	3301      	adds	r3, #1
 80018c8:	75fb      	strb	r3, [r7, #23]
 80018ca:	7dfa      	ldrb	r2, [r7, #23]
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d3ea      	bcc.n	80018a8 <_ZN12fifoCommands3addEPhh+0x1e>
		}
		this->index++;													// Suma 1 al indice
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80018d8:	3301      	adds	r3, #1
 80018da:	b2da      	uxtb	r2, r3
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
		this->full 	= 0;												// Indica que no está full
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	2200      	movs	r2, #0
 80018e6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
		this->bussy	= 1;												// Indica que hay elementos
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2201      	movs	r2, #1
 80018ee:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
	}
	else{																// Si no
		this->bussy	= 1;												// Indica que hay elementos
		this->full 	= 1;												// Indica que esta full
	}
}
 80018f2:	e007      	b.n	8001904 <_ZN12fifoCommands3addEPhh+0x7a>
		this->bussy	= 1;												// Indica que hay elementos
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2201      	movs	r2, #1
 80018f8:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
		this->full 	= 1;												// Indica que esta full
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2201      	movs	r2, #1
 8001900:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 8001904:	bf00      	nop
 8001906:	371c      	adds	r7, #28
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <_ZN12fifoCommands4readEPhh>:
//////////////////

/*
 * El output de esta operacion es la variable *buffer que a su vez es una entrada
 */
void fifoCommands::read( uint8_t *buffer, uint8_t size ){
 8001910:	b480      	push	{r7}
 8001912:	b087      	sub	sp, #28
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	4613      	mov	r3, r2
 800191c:	71fb      	strb	r3, [r7, #7]
	uint8_t i;																// Crea variable
	uint8_t j;																// Crea variable

	if ( this->index > 0 ){													// Si el indice es mayo a 0
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001924:	2b00      	cmp	r3, #0
 8001926:	d040      	beq.n	80019aa <_ZN12fifoCommands4readEPhh+0x9a>
		for (i = 0; i < size; i++){											// Recorre largo del comando
 8001928:	2300      	movs	r3, #0
 800192a:	75fb      	strb	r3, [r7, #23]
 800192c:	e00b      	b.n	8001946 <_ZN12fifoCommands4readEPhh+0x36>
			buffer[i]	= this->rxCommand_0[i];								// Copia comando en buffer
 800192e:	7dfa      	ldrb	r2, [r7, #23]
 8001930:	7dfb      	ldrb	r3, [r7, #23]
 8001932:	68b9      	ldr	r1, [r7, #8]
 8001934:	440b      	add	r3, r1
 8001936:	68f9      	ldr	r1, [r7, #12]
 8001938:	440a      	add	r2, r1
 800193a:	f892 202f 	ldrb.w	r2, [r2, #47]	@ 0x2f
 800193e:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < size; i++){											// Recorre largo del comando
 8001940:	7dfb      	ldrb	r3, [r7, #23]
 8001942:	3301      	adds	r3, #1
 8001944:	75fb      	strb	r3, [r7, #23]
 8001946:	7dfa      	ldrb	r2, [r7, #23]
 8001948:	79fb      	ldrb	r3, [r7, #7]
 800194a:	429a      	cmp	r2, r3
 800194c:	d3ef      	bcc.n	800192e <_ZN12fifoCommands4readEPhh+0x1e>
		}

		for (i = 0; i < this->index; i++){									// Recorre Fifo ocupada
 800194e:	2300      	movs	r3, #0
 8001950:	75fb      	strb	r3, [r7, #23]
 8001952:	e01c      	b.n	800198e <_ZN12fifoCommands4readEPhh+0x7e>
			for (j = 0; j < 10; j++){										// Recorre elementos de comando
 8001954:	2300      	movs	r3, #0
 8001956:	75bb      	strb	r3, [r7, #22]
 8001958:	e013      	b.n	8001982 <_ZN12fifoCommands4readEPhh+0x72>
				*(this->rxCommand[i] + j) = *(this->rxCommand[i + 1] + j);	// Realiza un shift de los comandos en fifo
 800195a:	7dfb      	ldrb	r3, [r7, #23]
 800195c:	3301      	adds	r3, #1
 800195e:	68fa      	ldr	r2, [r7, #12]
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	4413      	add	r3, r2
 8001964:	685a      	ldr	r2, [r3, #4]
 8001966:	7dbb      	ldrb	r3, [r7, #22]
 8001968:	441a      	add	r2, r3
 800196a:	7dfb      	ldrb	r3, [r7, #23]
 800196c:	68f9      	ldr	r1, [r7, #12]
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	440b      	add	r3, r1
 8001972:	6859      	ldr	r1, [r3, #4]
 8001974:	7dbb      	ldrb	r3, [r7, #22]
 8001976:	440b      	add	r3, r1
 8001978:	7812      	ldrb	r2, [r2, #0]
 800197a:	701a      	strb	r2, [r3, #0]
			for (j = 0; j < 10; j++){										// Recorre elementos de comando
 800197c:	7dbb      	ldrb	r3, [r7, #22]
 800197e:	3301      	adds	r3, #1
 8001980:	75bb      	strb	r3, [r7, #22]
 8001982:	7dbb      	ldrb	r3, [r7, #22]
 8001984:	2b09      	cmp	r3, #9
 8001986:	d9e8      	bls.n	800195a <_ZN12fifoCommands4readEPhh+0x4a>
		for (i = 0; i < this->index; i++){									// Recorre Fifo ocupada
 8001988:	7dfb      	ldrb	r3, [r7, #23]
 800198a:	3301      	adds	r3, #1
 800198c:	75fb      	strb	r3, [r7, #23]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001994:	7dfa      	ldrb	r2, [r7, #23]
 8001996:	429a      	cmp	r2, r3
 8001998:	d3dc      	bcc.n	8001954 <_ZN12fifoCommands4readEPhh+0x44>
			}
		}
		this->index--;														// Resta 1 en largo de fifo ocupada
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80019a0:	3b01      	subs	r3, #1
 80019a2:	b2da      	uxtb	r2, r3
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	}

	if ( this->index == 0){													// Si el largo es 0
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d103      	bne.n	80019bc <_ZN12fifoCommands4readEPhh+0xac>
		this->bussy	= 0;													// Indica que no está ocupada
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2200      	movs	r2, #0
 80019b8:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
	}
}
 80019bc:	bf00      	nop
 80019be:	371c      	adds	r7, #28
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <_ZN8fifoUartC1Ev>:


/********************/

fifoUart::fifoUart(){
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
	this->finalElement = this->elements;	// Cuando se construye la fifo
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f103 020c 	add.w	r2, r3, #12
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	601a      	str	r2, [r3, #0]
											// El puntero de ultimo elemento
											// Apunta al primer elemento de la cadena
}
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4618      	mov	r0, r3
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <_ZN8fifoUart13insertElementEh>:

////////////////////
// INSERT ELEMENT //
////////////////////

bool fifoUart::insertElement( uint8_t element ){
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	460b      	mov	r3, r1
 80019f2:	70fb      	strb	r3, [r7, #3]

	if (!(this->bussyFifo)){							// Si no está lleno
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	795b      	ldrb	r3, [r3, #5]
 80019f8:	f083 0301 	eor.w	r3, r3, #1
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d00d      	beq.n	8001a1e <_ZN8fifoUart13insertElementEh+0x36>
		*this->finalElement	= element;					// Inserta elemento
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	78fa      	ldrb	r2, [r7, #3]
 8001a08:	701a      	strb	r2, [r3, #0]
		this->finalElement = this->finalElement + 1;	// Suma 1 al puntero
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	1c5a      	adds	r2, r3, #1
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	601a      	str	r2, [r3, #0]
		this->large++;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	1c5a      	adds	r2, r3, #1
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	609a      	str	r2, [r3, #8]
	}

	if ( this->finalElement == &this->elements[50] ){	// Si el puntero es el último del array
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	333e      	adds	r3, #62	@ 0x3e
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d103      	bne.n	8001a32 <_ZN8fifoUart13insertElementEh+0x4a>
		this->bussyFifo	= 1;							// Indica que se lleno el buffer
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	715a      	strb	r2, [r3, #5]
 8001a30:	e002      	b.n	8001a38 <_ZN8fifoUart13insertElementEh+0x50>
	}
	else{												// Si no
		this->bussyFifo	= 0;							// Indica que no se ha llenado
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	715a      	strb	r2, [r3, #5]
	}

	return !(this->bussyFifo);							// 1: Se insertó correctamente
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	795b      	ldrb	r3, [r3, #5]
 8001a3c:	f083 0301 	eor.w	r3, r3, #1
 8001a40:	b2db      	uxtb	r3, r3
														// 0: No se inserto por Fifo llena
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr

08001a4e <_ZN8fifoUart11readElementEv>:

//////////////////
// READ ELEMENT //
//////////////////

uint8_t fifoUart::readElement(){
 8001a4e:	b480      	push	{r7}
 8001a50:	b085      	sub	sp, #20
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]

	uint8_t elementy	= this->elements[0];							// Copia primer valor en fifo
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	7b1b      	ldrb	r3, [r3, #12]
 8001a5a:	72fb      	strb	r3, [r7, #11]

	for (uint8_t *j = this->elements; j < this->finalElement; j++){		// Recorre los elementos de fifo
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	330c      	adds	r3, #12
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	e006      	b.n	8001a72 <_ZN8fifoUart11readElementEv+0x24>
		*j	= *(j+1);													// Copia el elemento siguiente
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	785a      	ldrb	r2, [r3, #1]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	701a      	strb	r2, [r3, #0]
	for (uint8_t *j = this->elements; j < this->finalElement; j++){		// Recorre los elementos de fifo
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	3301      	adds	r3, #1
 8001a70:	60fb      	str	r3, [r7, #12]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d3f3      	bcc.n	8001a64 <_ZN8fifoUart11readElementEv+0x16>
	}

	*this->finalElement = 0;											// Rellena el último valor con 0
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2200      	movs	r2, #0
 8001a82:	701a      	strb	r2, [r3, #0]

	if (this->finalElement != this->elements){							// Si el último elemento no es el primero
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	330c      	adds	r3, #12
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d00d      	beq.n	8001aac <_ZN8fifoUart11readElementEv+0x5e>
		this->finalElement	= this->finalElement - 1;					//  Resta una posición al elemento final
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	1e5a      	subs	r2, r3, #1
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	601a      	str	r2, [r3, #0]
		this->emptyFifo	= 0;											// Indica que fifo no esta vacia
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	711a      	strb	r2, [r3, #4]
		this->large--;													// Quita 1 al largo
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	1e5a      	subs	r2, r3, #1
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	609a      	str	r2, [r3, #8]
 8001aaa:	e002      	b.n	8001ab2 <_ZN8fifoUart11readElementEv+0x64>
	}
	else{																// Si no
		this->emptyFifo	= 1;											// Indica que fifo esta vacia
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	711a      	strb	r2, [r3, #4]
	}

	return elementy;													// Retorna elementos a leer
 8001ab2:	7afb      	ldrb	r3, [r7, #11]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3714      	adds	r7, #20
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <_ZN8fifoUart9availableEv>:

///////////////
// AVAILABLE //
///////////////

bool fifoUart::available(){
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
	if (this->finalElement == &this->elements[0]){		// Si el puntero está apuntando
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	330c      	adds	r3, #12
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d103      	bne.n	8001adc <_ZN8fifoUart9availableEv+0x1c>
														// al primer elemento de la fifo
		this->emptyFifo	= 1;							// Indica que la fifo esta vacia
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	711a      	strb	r2, [r3, #4]
 8001ada:	e002      	b.n	8001ae2 <_ZN8fifoUart9availableEv+0x22>
	}
	else{												// Sino
		this->emptyFifo	= 0;							// Indica que la fifo contiene elementos
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	711a      	strb	r2, [r3, #4]
	}
	return !(this->emptyFifo);							// 1: Elementos disponibles
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	791b      	ldrb	r3, [r3, #4]
 8001ae6:	f083 0301 	eor.w	r3, r3, #1
 8001aea:	b2db      	uxtb	r3, r3
}														// 0: Sin elementos
 8001aec:	4618      	mov	r0, r3
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <_ZN8gpsInputC1Ev>:

///////////////////////////
// CONSTRUCTOR GPS INPUT //
///////////////////////////

gpsInput::gpsInput(){
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
};
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4618      	mov	r0, r3
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
	...

08001b10 <_ZN8gpsInput11insertValueEh>:

//////////////////
// INSERT VALUE //
//////////////////

void gpsInput::insertValue(uint8_t symbol){
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	460b      	mov	r3, r1
 8001b1a:	70fb      	strb	r3, [r7, #3]

	uint8_t *state	= &this->stateInsert;	// El estado apunta al registro del objeto
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	3356      	adds	r3, #86	@ 0x56
 8001b20:	60fb      	str	r3, [r7, #12]

	this->lapsCounter++;			// Aumenta una vuelta
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	1c5a      	adds	r2, r3, #1
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	60da      	str	r2, [r3, #12]

	switch ( *state ){
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	2b3c      	cmp	r3, #60	@ 0x3c
 8001b32:	f200 829e 	bhi.w	8002072 <_ZN8gpsInput11insertValueEh+0x562>
 8001b36:	a201      	add	r2, pc, #4	@ (adr r2, 8001b3c <_ZN8gpsInput11insertValueEh+0x2c>)
 8001b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b3c:	08001c31 	.word	0x08001c31
 8001b40:	08001c5b 	.word	0x08001c5b
 8001b44:	08001c71 	.word	0x08001c71
 8001b48:	08001c87 	.word	0x08001c87
 8001b4c:	08001cb9 	.word	0x08001cb9
 8001b50:	08001ccf 	.word	0x08001ccf
 8001b54:	08001ce5 	.word	0x08001ce5
 8001b58:	08001d1f 	.word	0x08001d1f
 8001b5c:	08001d7d 	.word	0x08001d7d
 8001b60:	08001d9d 	.word	0x08001d9d
 8001b64:	08001df7 	.word	0x08001df7
 8001b68:	08001e13 	.word	0x08001e13
 8001b6c:	08001e6d 	.word	0x08001e6d
 8001b70:	08001e89 	.word	0x08001e89
 8001b74:	08001ee3 	.word	0x08001ee3
 8001b78:	08001f3d 	.word	0x08001f3d
 8001b7c:	08002073 	.word	0x08002073
 8001b80:	08002073 	.word	0x08002073
 8001b84:	08002073 	.word	0x08002073
 8001b88:	08002073 	.word	0x08002073
 8001b8c:	08002073 	.word	0x08002073
 8001b90:	08002073 	.word	0x08002073
 8001b94:	08002073 	.word	0x08002073
 8001b98:	08002073 	.word	0x08002073
 8001b9c:	08002073 	.word	0x08002073
 8001ba0:	08002073 	.word	0x08002073
 8001ba4:	08002073 	.word	0x08002073
 8001ba8:	08002073 	.word	0x08002073
 8001bac:	08002073 	.word	0x08002073
 8001bb0:	08002073 	.word	0x08002073
 8001bb4:	08002073 	.word	0x08002073
 8001bb8:	08002073 	.word	0x08002073
 8001bbc:	08002073 	.word	0x08002073
 8001bc0:	08002073 	.word	0x08002073
 8001bc4:	08002073 	.word	0x08002073
 8001bc8:	08002073 	.word	0x08002073
 8001bcc:	08002073 	.word	0x08002073
 8001bd0:	08002073 	.word	0x08002073
 8001bd4:	08002073 	.word	0x08002073
 8001bd8:	08002073 	.word	0x08002073
 8001bdc:	08002073 	.word	0x08002073
 8001be0:	08002073 	.word	0x08002073
 8001be4:	08002073 	.word	0x08002073
 8001be8:	08002073 	.word	0x08002073
 8001bec:	08002073 	.word	0x08002073
 8001bf0:	08002073 	.word	0x08002073
 8001bf4:	08002073 	.word	0x08002073
 8001bf8:	08002073 	.word	0x08002073
 8001bfc:	08002073 	.word	0x08002073
 8001c00:	08002073 	.word	0x08002073
 8001c04:	08001f75 	.word	0x08001f75
 8001c08:	08001f8b 	.word	0x08001f8b
 8001c0c:	08001fa1 	.word	0x08001fa1
 8001c10:	08001fb1 	.word	0x08001fb1
 8001c14:	08001fe3 	.word	0x08001fe3
 8001c18:	08002007 	.word	0x08002007
 8001c1c:	08002017 	.word	0x08002017
 8001c20:	08002027 	.word	0x08002027
 8001c24:	0800203d 	.word	0x0800203d
 8001c28:	0800204d 	.word	0x0800204d
 8001c2c:	08002063 	.word	0x08002063

		///////////////////////
		// S0 - FIRST SYMBOL //
		///////////////////////
		case 0:
			this->flagNew	= 0;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	749a      	strb	r2, [r3, #18]

			if ( symbol == '$' ){	// Si el simbolo es $
 8001c36:	78fb      	ldrb	r3, [r7, #3]
 8001c38:	2b24      	cmp	r3, #36	@ 0x24
 8001c3a:	d103      	bne.n	8001c44 <_ZN8gpsInput11insertValueEh+0x134>
				*state	=	1;		// Pasa a S1
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	701a      	strb	r2, [r3, #0]
				*state	= 2;
			}
			else{					// Si no
				*state	= 	0;		// Se queda en S0
			}
		break;
 8001c42:	e21a      	b.n	800207a <_ZN8gpsInput11insertValueEh+0x56a>
			else if( symbol == 'G' ){
 8001c44:	78fb      	ldrb	r3, [r7, #3]
 8001c46:	2b47      	cmp	r3, #71	@ 0x47
 8001c48:	d103      	bne.n	8001c52 <_ZN8gpsInput11insertValueEh+0x142>
				*state	= 2;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2202      	movs	r2, #2
 8001c4e:	701a      	strb	r2, [r3, #0]
		break;
 8001c50:	e213      	b.n	800207a <_ZN8gpsInput11insertValueEh+0x56a>
				*state	= 	0;		// Se queda en S0
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2200      	movs	r2, #0
 8001c56:	701a      	strb	r2, [r3, #0]
		break;
 8001c58:	e20f      	b.n	800207a <_ZN8gpsInput11insertValueEh+0x56a>
		// S1 - SECOND SYMBOL //
		////////////////////////

		case 1:

			if ( symbol ==  'G' ){		// Si el simbolo es G
 8001c5a:	78fb      	ldrb	r3, [r7, #3]
 8001c5c:	2b47      	cmp	r3, #71	@ 0x47
 8001c5e:	d103      	bne.n	8001c68 <_ZN8gpsInput11insertValueEh+0x158>
				*state	= 2;			// Pasa a S2
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2202      	movs	r2, #2
 8001c64:	701a      	strb	r2, [r3, #0]
			}
			else{						// Si no
				*state	= 0;			// Vuelve a S0
			}
			break;
 8001c66:	e208      	b.n	800207a <_ZN8gpsInput11insertValueEh+0x56a>
				*state	= 0;			// Vuelve a S0
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	701a      	strb	r2, [r3, #0]
			break;
 8001c6e:	e204      	b.n	800207a <_ZN8gpsInput11insertValueEh+0x56a>
		// S2 - THIRD SYMBOL //
		///////////////////////

		case 2:

			if ( symbol	== 'P'){		// Si el simbolo es P
 8001c70:	78fb      	ldrb	r3, [r7, #3]
 8001c72:	2b50      	cmp	r3, #80	@ 0x50
 8001c74:	d103      	bne.n	8001c7e <_ZN8gpsInput11insertValueEh+0x16e>
				*state	= 3;			// Pasa a S3
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2203      	movs	r2, #3
 8001c7a:	701a      	strb	r2, [r3, #0]
			}
			else{						// Si no
				*state	= 0;			// Vuelve a s0
			}
			break;
 8001c7c:	e1fd      	b.n	800207a <_ZN8gpsInput11insertValueEh+0x56a>
				*state	= 0;			// Vuelve a s0
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2200      	movs	r2, #0
 8001c82:	701a      	strb	r2, [r3, #0]
			break;
 8001c84:	e1f9      	b.n	800207a <_ZN8gpsInput11insertValueEh+0x56a>
		////////////////////////
		// S3 - FOURTH SYMBOL //
		////////////////////////

		case 3:
			if ( symbol == 'R'){		// Si el simbolo es R
 8001c86:	78fb      	ldrb	r3, [r7, #3]
 8001c88:	2b52      	cmp	r3, #82	@ 0x52
 8001c8a:	d103      	bne.n	8001c94 <_ZN8gpsInput11insertValueEh+0x184>
				*state	= 4;			// Pasa a S4
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2204      	movs	r2, #4
 8001c90:	701a      	strb	r2, [r3, #0]
				*state = 53;			// Pasa a S53 - DETECTA GPGSV
			}
			else{						// Si no
				*state	= 0;			// Vuelve a S0
			}
			break;
 8001c92:	e1f2      	b.n	800207a <_ZN8gpsInput11insertValueEh+0x56a>
			else if ( symbol == 'V'){	// Si el simbolo es T
 8001c94:	78fb      	ldrb	r3, [r7, #3]
 8001c96:	2b56      	cmp	r3, #86	@ 0x56
 8001c98:	d103      	bne.n	8001ca2 <_ZN8gpsInput11insertValueEh+0x192>
				*state	= 50;			// Pasa a S50 - DETECTA SI ES MODO GPTVG
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2232      	movs	r2, #50	@ 0x32
 8001c9e:	701a      	strb	r2, [r3, #0]
			break;
 8001ca0:	e1eb      	b.n	800207a <_ZN8gpsInput11insertValueEh+0x56a>
			else if ( symbol == 'G'){	// Si simboolo es G
 8001ca2:	78fb      	ldrb	r3, [r7, #3]
 8001ca4:	2b47      	cmp	r3, #71	@ 0x47
 8001ca6:	d103      	bne.n	8001cb0 <_ZN8gpsInput11insertValueEh+0x1a0>
				*state = 53;			// Pasa a S53 - DETECTA GPGSV
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2235      	movs	r2, #53	@ 0x35
 8001cac:	701a      	strb	r2, [r3, #0]
			break;
 8001cae:	e1e4      	b.n	800207a <_ZN8gpsInput11insertValueEh+0x56a>
				*state	= 0;			// Vuelve a S0
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	701a      	strb	r2, [r3, #0]
			break;
 8001cb6:	e1e0      	b.n	800207a <_ZN8gpsInput11insertValueEh+0x56a>
		// S4 - FIFTH SYMBOL //
		///////////////////////

		case 4:

			if ( symbol == 'M'){	// Si el simbolo es M
 8001cb8:	78fb      	ldrb	r3, [r7, #3]
 8001cba:	2b4d      	cmp	r3, #77	@ 0x4d
 8001cbc:	d103      	bne.n	8001cc6 <_ZN8gpsInput11insertValueEh+0x1b6>
				*state	= 5;		// Pasa a S5
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2205      	movs	r2, #5
 8001cc2:	701a      	strb	r2, [r3, #0]
			}
			else{					// Si no
				*state	= 0;		// Vieñve a S0
			}
			break;
 8001cc4:	e1d9      	b.n	800207a <_ZN8gpsInput11insertValueEh+0x56a>
				*state	= 0;		// Vieñve a S0
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	701a      	strb	r2, [r3, #0]
			break;
 8001ccc:	e1d5      	b.n	800207a <_ZN8gpsInput11insertValueEh+0x56a>
		// S5 - SIXTH SYMBOL //
		///////////////////////

		case 5:

			if ( symbol == 'C'){	// Si el simbolo es M
 8001cce:	78fb      	ldrb	r3, [r7, #3]
 8001cd0:	2b43      	cmp	r3, #67	@ 0x43
 8001cd2:	d103      	bne.n	8001cdc <_ZN8gpsInput11insertValueEh+0x1cc>
				*state	= 6;		// Pasa a S6
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2206      	movs	r2, #6
 8001cd8:	701a      	strb	r2, [r3, #0]
			}
			else{					// Si no
				*state	= 0;		// Vieñve a S0
			}
			break;
 8001cda:	e1ce      	b.n	800207a <_ZN8gpsInput11insertValueEh+0x56a>
				*state	= 0;		// Vieñve a S0
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	701a      	strb	r2, [r3, #0]
			break;
 8001ce2:	e1ca      	b.n	800207a <_ZN8gpsInput11insertValueEh+0x56a>
		///////////////////////
		// S6 - GPRMC PACKET //
		///////////////////////

		case 6:
			this->lapsBetween	= this->lapsCounter;	//Guarda valor de contador
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	68da      	ldr	r2, [r3, #12]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	609a      	str	r2, [r3, #8]
			this->lapsCounter	= 0;					// Reinicia contador
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	60da      	str	r2, [r3, #12]
			this->flagNew		= 1;					// Indica que llego mensaje
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	749a      	strb	r2, [r3, #18]

			this->setMode(1);							// Inserta el valor de mensaje tipo GPRMC
 8001cf8:	2101      	movs	r1, #1
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f000 f9c2 	bl	8002084 <_ZN8gpsInput7setModeEh>
			this->countGprmc	= 0;					// Reinicia el contador que guarda elementos
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

			if ( symbol == ','){						// Si el simbolo es , y confirma el formato del paquete
 8001d08:	78fb      	ldrb	r3, [r7, #3]
 8001d0a:	2b2c      	cmp	r3, #44	@ 0x2c
 8001d0c:	d103      	bne.n	8001d16 <_ZN8gpsInput11insertValueEh+0x206>
				*state	= 7;							// Pasa a S7
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2207      	movs	r2, #7
 8001d12:	701a      	strb	r2, [r3, #0]
			}
			else{										// Si no
				*state	= 0;							// Vieñve a S0
			}
			break;
 8001d14:	e1b1      	b.n	800207a <_ZN8gpsInput11insertValueEh+0x56a>
				*state	= 0;							// Vieñve a S0
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	701a      	strb	r2, [r3, #0]
			break;
 8001d1c:	e1ad      	b.n	800207a <_ZN8gpsInput11insertValueEh+0x56a>
		////////////////////
		// S7 - SAVE TIME //
		////////////////////

		case 7:
			this->flagNew		= 0;				// Indica que llego mensaje
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	749a      	strb	r2, [r3, #18]

			if ( symbol == ',' ){					// Si el simbolo es ,
 8001d24:	78fb      	ldrb	r3, [r7, #3]
 8001d26:	2b2c      	cmp	r3, #44	@ 0x2c
 8001d28:	d107      	bne.n	8001d3a <_ZN8gpsInput11insertValueEh+0x22a>
				this->countGprmc	= 0;			// Reinicia contador
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
				*state	= 8;						// Pasa a S8
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2208      	movs	r2, #8
 8001d36:	701a      	strb	r2, [r3, #0]
				this->time[this->countGprmc]  =	symbol;	// Guarda el simbolo en el buffer
				this->countGprmc++;						// Suma uno al indice
				*state	= 7;							// Se queda en S7
			}

			break;
 8001d38:	e19f      	b.n	800207a <_ZN8gpsInput11insertValueEh+0x56a>
			else if ( this->countGprmc >= 10 ){
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001d40:	2b09      	cmp	r3, #9
 8001d42:	d907      	bls.n	8001d54 <_ZN8gpsInput11insertValueEh+0x244>
				this->countGprmc	= 0;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
				*state	= 0;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	701a      	strb	r2, [r3, #0]
			break;
 8001d52:	e192      	b.n	800207a <_ZN8gpsInput11insertValueEh+0x56a>
				this->time[this->countGprmc]  =	symbol;	// Guarda el simbolo en el buffer
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	4413      	add	r3, r2
 8001d60:	78fa      	ldrb	r2, [r7, #3]
 8001d62:	751a      	strb	r2, [r3, #20]
				this->countGprmc++;						// Suma uno al indice
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	b2da      	uxtb	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
				*state	= 7;							// Se queda en S7
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2207      	movs	r2, #7
 8001d78:	701a      	strb	r2, [r3, #0]
			break;
 8001d7a:	e17e      	b.n	800207a <_ZN8gpsInput11insertValueEh+0x56a>
			 *
			 * 	,A,
			 *
			 * 	Fija VALID hasta que encuentre ,
			 */
			if( symbol == ',' ){			// Si es ,
 8001d7c:	78fb      	ldrb	r3, [r7, #3]
 8001d7e:	2b2c      	cmp	r3, #44	@ 0x2c
 8001d80:	d103      	bne.n	8001d8a <_ZN8gpsInput11insertValueEh+0x27a>
				*state	= 9;				// Pasa a S9
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2209      	movs	r2, #9
 8001d86:	701a      	strb	r2, [r3, #0]
			}
			else{							// Si no
				this->setValid(symbol);		// Fija simbolo de valido
				*state	= 8;				// Se queda en S8
			}
			break;
 8001d88:	e177      	b.n	800207a <_ZN8gpsInput11insertValueEh+0x56a>
				this->setValid(symbol);		// Fija simbolo de valido
 8001d8a:	78fb      	ldrb	r3, [r7, #3]
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f000 fa28 	bl	80021e4 <_ZN8gpsInput8setValidEc>
				*state	= 8;				// Se queda en S8
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2208      	movs	r2, #8
 8001d98:	701a      	strb	r2, [r3, #0]
			break;
 8001d9a:	e16e      	b.n	800207a <_ZN8gpsInput11insertValueEh+0x56a>
		////////////////////////
		// S9 - SAVE LONGITUD //
		////////////////////////

		case 9:
			if ( symbol == ',' ){							// Si es ,
 8001d9c:	78fb      	ldrb	r3, [r7, #3]
 8001d9e:	2b2c      	cmp	r3, #44	@ 0x2c
 8001da0:	d107      	bne.n	8001db2 <_ZN8gpsInput11insertValueEh+0x2a2>
				this->countGprmc	= 0;					// Reinicia contador
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
				*state 	= 10;								// Pasa a S10
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	220a      	movs	r2, #10
 8001dae:	701a      	strb	r2, [r3, #0]
			else{											// Si no
				this->latitud[this->countGprmc]  =	symbol;	// Guarda el simbolo en el buffer
				this->countGprmc++;							// Suma uno al indice
				*state	= 9;								// Se queda en S9
			}
			break;
 8001db0:	e163      	b.n	800207a <_ZN8gpsInput11insertValueEh+0x56a>
			else if ( this->countGprmc >= 10 ){
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001db8:	2b09      	cmp	r3, #9
 8001dba:	d907      	bls.n	8001dcc <_ZN8gpsInput11insertValueEh+0x2bc>
				this->countGprmc	= 0;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
				*state	= 0;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	701a      	strb	r2, [r3, #0]
			break;
 8001dca:	e156      	b.n	800207a <_ZN8gpsInput11insertValueEh+0x56a>
				this->latitud[this->countGprmc]  =	symbol;	// Guarda el simbolo en el buffer
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	78fa      	ldrb	r2, [r7, #3]
 8001dda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
				this->countGprmc++;							// Suma uno al indice
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001de4:	3301      	adds	r3, #1
 8001de6:	b2da      	uxtb	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
				*state	= 9;								// Se queda en S9
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2209      	movs	r2, #9
 8001df2:	701a      	strb	r2, [r3, #0]
			break;
 8001df4:	e141      	b.n	800207a <_ZN8gpsInput11insertValueEh+0x56a>
		///////////////////////////////////
		// S10 - SAVE LONGITUD DIRECTION //
		///////////////////////////////////

		case 10:
			if ( symbol == ',' ){			// Si es ,
 8001df6:	78fb      	ldrb	r3, [r7, #3]
 8001df8:	2b2c      	cmp	r3, #44	@ 0x2c
 8001dfa:	d103      	bne.n	8001e04 <_ZN8gpsInput11insertValueEh+0x2f4>
				*state	= 11;				// Pasa a S11
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	220b      	movs	r2, #11
 8001e00:	701a      	strb	r2, [r3, #0]
			}
			else{							// Si no
				this->latDirect	= symbol;	// Guarda el simbolo
				*state	= 10;				// Pasa a S10
			}
			break;
 8001e02:	e13a      	b.n	800207a <_ZN8gpsInput11insertValueEh+0x56a>
				this->latDirect	= symbol;	// Guarda el simbolo
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	78fa      	ldrb	r2, [r7, #3]
 8001e08:	77da      	strb	r2, [r3, #31]
				*state	= 10;				// Pasa a S10
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	220a      	movs	r2, #10
 8001e0e:	701a      	strb	r2, [r3, #0]
			break;
 8001e10:	e133      	b.n	800207a <_ZN8gpsInput11insertValueEh+0x56a>
		////////////////////////
		// S11 - SAVE LATITUD //
		////////////////////////

		case 11:
			if ( symbol == ',' ){							// Si el simbolo es ,
 8001e12:	78fb      	ldrb	r3, [r7, #3]
 8001e14:	2b2c      	cmp	r3, #44	@ 0x2c
 8001e16:	d107      	bne.n	8001e28 <_ZN8gpsInput11insertValueEh+0x318>
				this->countGprmc	= 0;					// Reinicia contador
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
				*state	= 12;								// Pasa a S12
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	220c      	movs	r2, #12
 8001e24:	701a      	strb	r2, [r3, #0]
			else{											// Si no
				this->longitud[this->countGprmc]  =	symbol;	// Guarda el simbolo en el buffer
				this->countGprmc++;							// Suma uno al indice
				*state	= 11;								// Queda en S11
			}
			break;
 8001e26:	e128      	b.n	800207a <_ZN8gpsInput11insertValueEh+0x56a>
			else if ( this->countGprmc >= 10 ){
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001e2e:	2b09      	cmp	r3, #9
 8001e30:	d907      	bls.n	8001e42 <_ZN8gpsInput11insertValueEh+0x332>
				this->countGprmc	= 0;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
				*state	= 0;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	701a      	strb	r2, [r3, #0]
			break;
 8001e40:	e11b      	b.n	800207a <_ZN8gpsInput11insertValueEh+0x56a>
				this->longitud[this->countGprmc]  =	symbol;	// Guarda el simbolo en el buffer
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001e48:	461a      	mov	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	78fa      	ldrb	r2, [r7, #3]
 8001e50:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
				this->countGprmc++;							// Suma uno al indice
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	b2da      	uxtb	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
				*state	= 11;								// Queda en S11
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	220b      	movs	r2, #11
 8001e68:	701a      	strb	r2, [r3, #0]
			break;
 8001e6a:	e106      	b.n	800207a <_ZN8gpsInput11insertValueEh+0x56a>
		//////////////////////////////////
		// S12 - SAVE DIRECTION LATITUD //
		//////////////////////////////////

		case 12:
			if ( symbol == ',' ){
 8001e6c:	78fb      	ldrb	r3, [r7, #3]
 8001e6e:	2b2c      	cmp	r3, #44	@ 0x2c
 8001e70:	d103      	bne.n	8001e7a <_ZN8gpsInput11insertValueEh+0x36a>
				*state = 13;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	220d      	movs	r2, #13
 8001e76:	701a      	strb	r2, [r3, #0]

			else{
				this->longDirect	= symbol;
				*state = 12;
			}
			break;
 8001e78:	e0ff      	b.n	800207a <_ZN8gpsInput11insertValueEh+0x56a>
				this->longDirect	= symbol;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	78fa      	ldrb	r2, [r7, #3]
 8001e7e:	779a      	strb	r2, [r3, #30]
				*state = 12;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	220c      	movs	r2, #12
 8001e84:	701a      	strb	r2, [r3, #0]
			break;
 8001e86:	e0f8      	b.n	800207a <_ZN8gpsInput11insertValueEh+0x56a>
		////////////////////
		// S13 - VELOCITY //
		////////////////////

		case 13:
			if ( symbol == ',' ){							//
 8001e88:	78fb      	ldrb	r3, [r7, #3]
 8001e8a:	2b2c      	cmp	r3, #44	@ 0x2c
 8001e8c:	d107      	bne.n	8001e9e <_ZN8gpsInput11insertValueEh+0x38e>
				this->countGprmc	= 0;					// Reinicia contador
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
				*state	= 14;								//
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	220e      	movs	r2, #14
 8001e9a:	701a      	strb	r2, [r3, #0]
			else{											//
				this->velocity[this->countGprmc]  =	symbol;	// Guarda el simbolo en el buffer
				this->countGprmc++;							// Suma uno al indice
				*state 	= 13;								//
			}
			break;
 8001e9c:	e0ed      	b.n	800207a <_ZN8gpsInput11insertValueEh+0x56a>
			else if ( this->countGprmc >= 10 ){
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001ea4:	2b09      	cmp	r3, #9
 8001ea6:	d907      	bls.n	8001eb8 <_ZN8gpsInput11insertValueEh+0x3a8>
				this->countGprmc	= 0;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
				*state	= 0;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	701a      	strb	r2, [r3, #0]
			break;
 8001eb6:	e0e0      	b.n	800207a <_ZN8gpsInput11insertValueEh+0x56a>
				this->velocity[this->countGprmc]  =	symbol;	// Guarda el simbolo en el buffer
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	78fa      	ldrb	r2, [r7, #3]
 8001ec6:	f883 2020 	strb.w	r2, [r3, #32]
				this->countGprmc++;							// Suma uno al indice
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	b2da      	uxtb	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
				*state 	= 13;								//
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	220d      	movs	r2, #13
 8001ede:	701a      	strb	r2, [r3, #0]
			break;
 8001ee0:	e0cb      	b.n	800207a <_ZN8gpsInput11insertValueEh+0x56a>
		/////////////////
		// S14 - ANGLE //
		/////////////////

		case 14:
			if ( symbol == ',' ){							//
 8001ee2:	78fb      	ldrb	r3, [r7, #3]
 8001ee4:	2b2c      	cmp	r3, #44	@ 0x2c
 8001ee6:	d107      	bne.n	8001ef8 <_ZN8gpsInput11insertValueEh+0x3e8>
				this->countGprmc	= 0;					// Reinicia contador
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
				*state	= 15;								//
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	220f      	movs	r2, #15
 8001ef4:	701a      	strb	r2, [r3, #0]
			else{											//
				this->angle[this->countGprmc]  =	symbol;	// Guarda el simbolo en el buffer
				this->countGprmc++;							// Suma uno al indice
				*state	= 14;								//
			}
			break;
 8001ef6:	e0c0      	b.n	800207a <_ZN8gpsInput11insertValueEh+0x56a>
			else if ( this->countGprmc >= 10 ){
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001efe:	2b09      	cmp	r3, #9
 8001f00:	d907      	bls.n	8001f12 <_ZN8gpsInput11insertValueEh+0x402>
				this->countGprmc	= 0;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
				*state	= 0;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	701a      	strb	r2, [r3, #0]
			break;
 8001f10:	e0b3      	b.n	800207a <_ZN8gpsInput11insertValueEh+0x56a>
				this->angle[this->countGprmc]  =	symbol;	// Guarda el simbolo en el buffer
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001f18:	461a      	mov	r2, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	78fa      	ldrb	r2, [r7, #3]
 8001f20:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
				this->countGprmc++;							// Suma uno al indice
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	b2da      	uxtb	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
				*state	= 14;								//
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	220e      	movs	r2, #14
 8001f38:	701a      	strb	r2, [r3, #0]
			break;
 8001f3a:	e09e      	b.n	800207a <_ZN8gpsInput11insertValueEh+0x56a>
		////////////////
		// S15 - DATE //
		////////////////

		case 15:
			if ( symbol == ','){						// Si es una ,
 8001f3c:	78fb      	ldrb	r3, [r7, #3]
 8001f3e:	2b2c      	cmp	r3, #44	@ 0x2c
 8001f40:	d103      	bne.n	8001f4a <_ZN8gpsInput11insertValueEh+0x43a>
				*state	= 0;							// Cierra la maquina
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2200      	movs	r2, #0
 8001f46:	701a      	strb	r2, [r3, #0]
			else{										// Si no
				this->date[this->countGprmc]  =	symbol;	// Guarda el simbolo en el buffer
				this->countGprmc++;						// Suma uno al indice
				*state	= 15;
			}
			break;
 8001f48:	e097      	b.n	800207a <_ZN8gpsInput11insertValueEh+0x56a>
				this->date[this->countGprmc]  =	symbol;	// Guarda el simbolo en el buffer
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001f50:	461a      	mov	r2, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4413      	add	r3, r2
 8001f56:	78fa      	ldrb	r2, [r7, #3]
 8001f58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
				this->countGprmc++;						// Suma uno al indice
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001f62:	3301      	adds	r3, #1
 8001f64:	b2da      	uxtb	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
				*state	= 15;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	220f      	movs	r2, #15
 8001f70:	701a      	strb	r2, [r3, #0]
			break;
 8001f72:	e082      	b.n	800207a <_ZN8gpsInput11insertValueEh+0x56a>
		////////////////////
		// S50 - DETECT V //
		////////////////////

		case 50:
			if (symbol == 'T'){	// Si detecta V
 8001f74:	78fb      	ldrb	r3, [r7, #3]
 8001f76:	2b54      	cmp	r3, #84	@ 0x54
 8001f78:	d103      	bne.n	8001f82 <_ZN8gpsInput11insertValueEh+0x472>
				*state	= 51;	// Pasa a S51
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2233      	movs	r2, #51	@ 0x33
 8001f7e:	701a      	strb	r2, [r3, #0]
			}
			else{				// Si no
				*state	= 0;	// Vuelve a S0
			}
			break;
 8001f80:	e07b      	b.n	800207a <_ZN8gpsInput11insertValueEh+0x56a>
				*state	= 0;	// Vuelve a S0
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2200      	movs	r2, #0
 8001f86:	701a      	strb	r2, [r3, #0]
			break;
 8001f88:	e077      	b.n	800207a <_ZN8gpsInput11insertValueEh+0x56a>
		/////////////////////
		// S51	- DETECT G //
		/////////////////////

		case 51:
			if (symbol == 'G'){	// Si detecta G
 8001f8a:	78fb      	ldrb	r3, [r7, #3]
 8001f8c:	2b47      	cmp	r3, #71	@ 0x47
 8001f8e:	d103      	bne.n	8001f98 <_ZN8gpsInput11insertValueEh+0x488>
				*state	= 52;	// Pasa a S51
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2234      	movs	r2, #52	@ 0x34
 8001f94:	701a      	strb	r2, [r3, #0]
			}
			else{				// Si no
				*state	= 0;	// Vuelve a S0
				break;
			}
			break;
 8001f96:	e070      	b.n	800207a <_ZN8gpsInput11insertValueEh+0x56a>
				*state	= 0;	// Vuelve a S0
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	701a      	strb	r2, [r3, #0]
				break;
 8001f9e:	e06c      	b.n	800207a <_ZN8gpsInput11insertValueEh+0x56a>
		/////////////////////////////////
		// S52 - DETECT A GPTVG PACKET //
		/////////////////////////////////

		case 52:
			this->setMode(2);
 8001fa0:	2102      	movs	r1, #2
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f86e 	bl	8002084 <_ZN8gpsInput7setModeEh>
			*state	= 0;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2200      	movs	r2, #0
 8001fac:	701a      	strb	r2, [r3, #0]
			break;
 8001fae:	e064      	b.n	800207a <_ZN8gpsInput11insertValueEh+0x56a>
		// S53 - DETECT A S //
		//////////////////////

		case 53:

			if (symbol == 'G'){
 8001fb0:	78fb      	ldrb	r3, [r7, #3]
 8001fb2:	2b47      	cmp	r3, #71	@ 0x47
 8001fb4:	d103      	bne.n	8001fbe <_ZN8gpsInput11insertValueEh+0x4ae>
				*state = 54;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2236      	movs	r2, #54	@ 0x36
 8001fba:	701a      	strb	r2, [r3, #0]
				*state	= 59;
			}
			else{
				*state = 0;
			}
			break;
 8001fbc:	e05d      	b.n	800207a <_ZN8gpsInput11insertValueEh+0x56a>
			else if (symbol == 'L'){
 8001fbe:	78fb      	ldrb	r3, [r7, #3]
 8001fc0:	2b4c      	cmp	r3, #76	@ 0x4c
 8001fc2:	d103      	bne.n	8001fcc <_ZN8gpsInput11insertValueEh+0x4bc>
				*state	= 57;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2239      	movs	r2, #57	@ 0x39
 8001fc8:	701a      	strb	r2, [r3, #0]
			break;
 8001fca:	e056      	b.n	800207a <_ZN8gpsInput11insertValueEh+0x56a>
			else if (symbol == 'S'){
 8001fcc:	78fb      	ldrb	r3, [r7, #3]
 8001fce:	2b53      	cmp	r3, #83	@ 0x53
 8001fd0:	d103      	bne.n	8001fda <_ZN8gpsInput11insertValueEh+0x4ca>
				*state	= 59;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	223b      	movs	r2, #59	@ 0x3b
 8001fd6:	701a      	strb	r2, [r3, #0]
			break;
 8001fd8:	e04f      	b.n	800207a <_ZN8gpsInput11insertValueEh+0x56a>
				*state = 0;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	701a      	strb	r2, [r3, #0]
			break;
 8001fe0:	e04b      	b.n	800207a <_ZN8gpsInput11insertValueEh+0x56a>
		//////////////////////
		// S54 - DETECT A V //
		//////////////////////

		case 54:
			if (symbol == 'A'){
 8001fe2:	78fb      	ldrb	r3, [r7, #3]
 8001fe4:	2b41      	cmp	r3, #65	@ 0x41
 8001fe6:	d103      	bne.n	8001ff0 <_ZN8gpsInput11insertValueEh+0x4e0>
				*state	= 55;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2237      	movs	r2, #55	@ 0x37
 8001fec:	701a      	strb	r2, [r3, #0]
				*state = 56;
			}
			else{
				*state	= 0;
			}
			break;
 8001fee:	e044      	b.n	800207a <_ZN8gpsInput11insertValueEh+0x56a>
			else if (symbol == 'V'){
 8001ff0:	78fb      	ldrb	r3, [r7, #3]
 8001ff2:	2b56      	cmp	r3, #86	@ 0x56
 8001ff4:	d103      	bne.n	8001ffe <_ZN8gpsInput11insertValueEh+0x4ee>
				*state = 56;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2238      	movs	r2, #56	@ 0x38
 8001ffa:	701a      	strb	r2, [r3, #0]
			break;
 8001ffc:	e03d      	b.n	800207a <_ZN8gpsInput11insertValueEh+0x56a>
				*state	= 0;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2200      	movs	r2, #0
 8002002:	701a      	strb	r2, [r3, #0]
			break;
 8002004:	e039      	b.n	800207a <_ZN8gpsInput11insertValueEh+0x56a>
		////////////////////////
		// S55 - DETECT GPGSA //
		////////////////////////

		case 55:
			this->setMode(32);
 8002006:	2120      	movs	r1, #32
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f000 f83b 	bl	8002084 <_ZN8gpsInput7setModeEh>
			*state	= 0;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2200      	movs	r2, #0
 8002012:	701a      	strb	r2, [r3, #0]
			break;
 8002014:	e031      	b.n	800207a <_ZN8gpsInput11insertValueEh+0x56a>
		////////////////////////
		// S56 - DETECT GPGSV //
		////////////////////////

		case 56:
			this->setMode(4);
 8002016:	2104      	movs	r1, #4
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f000 f833 	bl	8002084 <_ZN8gpsInput7setModeEh>
			*state	= 0;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2200      	movs	r2, #0
 8002022:	701a      	strb	r2, [r3, #0]
			break;
 8002024:	e029      	b.n	800207a <_ZN8gpsInput11insertValueEh+0x56a>
		////////////////////
		// S57 - DETECT L //
		////////////////////

		case 57:
			if (symbol == 'L'){
 8002026:	78fb      	ldrb	r3, [r7, #3]
 8002028:	2b4c      	cmp	r3, #76	@ 0x4c
 800202a:	d103      	bne.n	8002034 <_ZN8gpsInput11insertValueEh+0x524>
				*state	= 58;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	223a      	movs	r2, #58	@ 0x3a
 8002030:	701a      	strb	r2, [r3, #0]
			}
			else{
				*state	= 0;
			}
			break;
 8002032:	e022      	b.n	800207a <_ZN8gpsInput11insertValueEh+0x56a>
				*state	= 0;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2200      	movs	r2, #0
 8002038:	701a      	strb	r2, [r3, #0]
			break;
 800203a:	e01e      	b.n	800207a <_ZN8gpsInput11insertValueEh+0x56a>
		////////////////////////
		// S58 - DETECT GPGLL //
		////////////////////////

		case 58:
			this->setMode(8);
 800203c:	2108      	movs	r1, #8
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 f820 	bl	8002084 <_ZN8gpsInput7setModeEh>
			*state	= 0;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2200      	movs	r2, #0
 8002048:	701a      	strb	r2, [r3, #0]
			break;
 800204a:	e016      	b.n	800207a <_ZN8gpsInput11insertValueEh+0x56a>
		////////////////////
		// S59 - DETECT A //
		////////////////////

		case 59:
			if (symbol == 'V'){
 800204c:	78fb      	ldrb	r3, [r7, #3]
 800204e:	2b56      	cmp	r3, #86	@ 0x56
 8002050:	d103      	bne.n	800205a <_ZN8gpsInput11insertValueEh+0x54a>
				*state	= 60;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	223c      	movs	r2, #60	@ 0x3c
 8002056:	701a      	strb	r2, [r3, #0]
			}
			else{
				*state	= 0;
			}
			break;
 8002058:	e00f      	b.n	800207a <_ZN8gpsInput11insertValueEh+0x56a>
				*state	= 0;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2200      	movs	r2, #0
 800205e:	701a      	strb	r2, [r3, #0]
			break;
 8002060:	e00b      	b.n	800207a <_ZN8gpsInput11insertValueEh+0x56a>
		////////////////////////
		// S60 - DETECT GPGGA //
		////////////////////////

		case 60:
			this->setMode(16);
 8002062:	2110      	movs	r1, #16
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f000 f80d 	bl	8002084 <_ZN8gpsInput7setModeEh>
			*state = 0;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2200      	movs	r2, #0
 800206e:	701a      	strb	r2, [r3, #0]
			break;
 8002070:	e003      	b.n	800207a <_ZN8gpsInput11insertValueEh+0x56a>
		/////////////
		// DEFAULT //
		/////////////

		default:
			*state	= 0;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2200      	movs	r2, #0
 8002076:	701a      	strb	r2, [r3, #0]
			break;
 8002078:	bf00      	nop
	}
}
 800207a:	bf00      	nop
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop

08002084 <_ZN8gpsInput7setModeEh>:

//////////////
// SET MODE //
//////////////

void gpsInput::setMode(uint8_t mode){
 8002084:	b480      	push	{r7}
 8002086:	b087      	sub	sp, #28
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	460b      	mov	r3, r1
 800208e:	70fb      	strb	r3, [r7, #3]
	this->limitMsgModes	= 15;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	220f      	movs	r2, #15
 8002094:	74da      	strb	r2, [r3, #19]
	uint8_t output	= 0;
 8002096:	2300      	movs	r3, #0
 8002098:	75fb      	strb	r3, [r7, #23]
	uint8_t pot2[6]	= {1, 2, 4, 8, 16, 32};
 800209a:	4a51      	ldr	r2, [pc, #324]	@ (80021e0 <_ZN8gpsInput7setModeEh+0x15c>)
 800209c:	f107 0308 	add.w	r3, r7, #8
 80020a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80020a4:	6018      	str	r0, [r3, #0]
 80020a6:	3304      	adds	r3, #4
 80020a8:	8019      	strh	r1, [r3, #0]

	switch (mode){
 80020aa:	78fb      	ldrb	r3, [r7, #3]
 80020ac:	3b01      	subs	r3, #1
 80020ae:	2b1f      	cmp	r3, #31
 80020b0:	d866      	bhi.n	8002180 <_ZN8gpsInput7setModeEh+0xfc>
 80020b2:	a201      	add	r2, pc, #4	@ (adr r2, 80020b8 <_ZN8gpsInput7setModeEh+0x34>)
 80020b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020b8:	08002139 	.word	0x08002139
 80020bc:	08002145 	.word	0x08002145
 80020c0:	08002181 	.word	0x08002181
 80020c4:	08002151 	.word	0x08002151
 80020c8:	08002181 	.word	0x08002181
 80020cc:	08002181 	.word	0x08002181
 80020d0:	08002181 	.word	0x08002181
 80020d4:	0800215d 	.word	0x0800215d
 80020d8:	08002181 	.word	0x08002181
 80020dc:	08002181 	.word	0x08002181
 80020e0:	08002181 	.word	0x08002181
 80020e4:	08002181 	.word	0x08002181
 80020e8:	08002181 	.word	0x08002181
 80020ec:	08002181 	.word	0x08002181
 80020f0:	08002181 	.word	0x08002181
 80020f4:	08002169 	.word	0x08002169
 80020f8:	08002181 	.word	0x08002181
 80020fc:	08002181 	.word	0x08002181
 8002100:	08002181 	.word	0x08002181
 8002104:	08002181 	.word	0x08002181
 8002108:	08002181 	.word	0x08002181
 800210c:	08002181 	.word	0x08002181
 8002110:	08002181 	.word	0x08002181
 8002114:	08002181 	.word	0x08002181
 8002118:	08002181 	.word	0x08002181
 800211c:	08002181 	.word	0x08002181
 8002120:	08002181 	.word	0x08002181
 8002124:	08002181 	.word	0x08002181
 8002128:	08002181 	.word	0x08002181
 800212c:	08002181 	.word	0x08002181
 8002130:	08002181 	.word	0x08002181
 8002134:	08002175 	.word	0x08002175

	///////////
	// GPRMC //
	///////////
	case 1:
		this->countModes[0]	= this->limitMsgModes;	// Asigna valor maximo
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	7cda      	ldrb	r2, [r3, #19]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		break;
 8002142:	e01e      	b.n	8002182 <_ZN8gpsInput7setModeEh+0xfe>

	///////////
	// GPTVG //
	///////////
	case 2:
		this->countModes[1]	= this->limitMsgModes;	// Asigna valor maximo
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	7cda      	ldrb	r2, [r3, #19]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
		break;
 800214e:	e018      	b.n	8002182 <_ZN8gpsInput7setModeEh+0xfe>
	///////////
	// GPGGV //
	///////////

	case 4:
		this->countModes[2]	= this->limitMsgModes;	// Asigna valor maximo
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	7cda      	ldrb	r2, [r3, #19]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
		break;
 800215a:	e012      	b.n	8002182 <_ZN8gpsInput7setModeEh+0xfe>

	///////////
	// GPGLL //
	///////////
	case 8:
		this->countModes[3]	= this->limitMsgModes;	// Asigna valor maximo
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	7cda      	ldrb	r2, [r3, #19]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
		break;
 8002166:	e00c      	b.n	8002182 <_ZN8gpsInput7setModeEh+0xfe>

	///////////
	// GPGSV //
	///////////
	case 16:
		this->countModes[4]	= this->limitMsgModes;	// Asigna valor maximo
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	7cda      	ldrb	r2, [r3, #19]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		break;
 8002172:	e006      	b.n	8002182 <_ZN8gpsInput7setModeEh+0xfe>

	///////////
	// GPGGA //
	///////////
	case 32:
		this->countModes[5]	= this->limitMsgModes;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	7cda      	ldrb	r2, [r3, #19]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
		break;
 800217e:	e000      	b.n	8002182 <_ZN8gpsInput7setModeEh+0xfe>

	default:
		break;
 8002180:	bf00      	nop
	}

	for (int i = 0; i<6; i++){			// Recorre array de count
 8002182:	2300      	movs	r3, #0
 8002184:	613b      	str	r3, [r7, #16]
 8002186:	e01e      	b.n	80021c6 <_ZN8gpsInput7setModeEh+0x142>
		if (this->countModes[i] > 0){	// Si el contador >0
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	4413      	add	r3, r2
 800218e:	333c      	adds	r3, #60	@ 0x3c
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d014      	beq.n	80021c0 <_ZN8gpsInput7setModeEh+0x13c>
			this->countModes[i]--;		// Resta 1
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	4413      	add	r3, r2
 800219c:	333c      	adds	r3, #60	@ 0x3c
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	3b01      	subs	r3, #1
 80021a2:	b2d9      	uxtb	r1, r3
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	4413      	add	r3, r2
 80021aa:	333c      	adds	r3, #60	@ 0x3c
 80021ac:	460a      	mov	r2, r1
 80021ae:	701a      	strb	r2, [r3, #0]
			output = output + pot2[i];		// Suma un exponente de 2
 80021b0:	f107 0208 	add.w	r2, r7, #8
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	4413      	add	r3, r2
 80021b8:	781a      	ldrb	r2, [r3, #0]
 80021ba:	7dfb      	ldrb	r3, [r7, #23]
 80021bc:	4413      	add	r3, r2
 80021be:	75fb      	strb	r3, [r7, #23]
	for (int i = 0; i<6; i++){			// Recorre array de count
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	3301      	adds	r3, #1
 80021c4:	613b      	str	r3, [r7, #16]
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	2b05      	cmp	r3, #5
 80021ca:	dddd      	ble.n	8002188 <_ZN8gpsInput7setModeEh+0x104>
		}								// Genera numero unico
		else{							// Si no
			//this->countModes[i]	= 0;	// Asigna 0
		}
	}
	this->mode	= output;	// Asigna modo
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	7dfa      	ldrb	r2, [r7, #23]
 80021d0:	711a      	strb	r2, [r3, #4]
}
 80021d2:	bf00      	nop
 80021d4:	371c      	adds	r7, #28
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	0800e09c 	.word	0x0800e09c

080021e4 <_ZN8gpsInput8setValidEc>:

///////////////
// SET VALID //
///////////////

void gpsInput::setValid(char valid){
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	460b      	mov	r3, r1
 80021ee:	70fb      	strb	r3, [r7, #3]
	this->flagValid	= valid;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	78fa      	ldrb	r2, [r7, #3]
 80021f4:	741a      	strb	r2, [r3, #16]
}
 80021f6:	bf00      	nop
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr

08002202 <_ZN8gpsInput8getValidEv>:

///////////////////////
// GET VALID MESSAGE //
///////////////////////

bool gpsInput::getValid(){
 8002202:	b480      	push	{r7}
 8002204:	b085      	sub	sp, #20
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
	bool flag	= 0;
 800220a:	2300      	movs	r3, #0
 800220c:	73fb      	strb	r3, [r7, #15]

	if (this->flagValid == 'A'){
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	7c1b      	ldrb	r3, [r3, #16]
 8002212:	2b41      	cmp	r3, #65	@ 0x41
 8002214:	d102      	bne.n	800221c <_ZN8gpsInput8getValidEv+0x1a>
		flag = 1;
 8002216:	2301      	movs	r3, #1
 8002218:	73fb      	strb	r3, [r7, #15]
 800221a:	e001      	b.n	8002220 <_ZN8gpsInput8getValidEv+0x1e>
	}
	else{
		flag = 0;
 800221c:	2300      	movs	r3, #0
 800221e:	73fb      	strb	r3, [r7, #15]
	}

	return flag;
 8002220:	7bfb      	ldrb	r3, [r7, #15]
}
 8002222:	4618      	mov	r0, r3
 8002224:	3714      	adds	r7, #20
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr

0800222e <_ZN8gpsInput13getNewMessageEv>:

//////////////////////////
// GET NEW MESSAGE FLAG //
//////////////////////////

bool gpsInput::getNewMessage(){
 800222e:	b480      	push	{r7}
 8002230:	b083      	sub	sp, #12
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
	return	this->flagNew;	// Guarda el valor de flagNew
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	7c9b      	ldrb	r3, [r3, #18]

}
 800223a:	4618      	mov	r0, r3
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr

08002246 <_Z7hwInputv>:
							*	7: FUTURO USO
							*/

/***** INPUT *****/

void hwInput(){
 8002246:	b580      	push	{r7, lr}
 8002248:	af00      	add	r7, sp, #0
	hwBoton();
 800224a:	f000 fa55 	bl	80026f8 <_Z7hwBotonv>
	hwSht31();
 800224e:	f000 f8fb 	bl	8002448 <_Z7hwSht31v>
	hwAds1115();
 8002252:	f000 f829 	bl	80022a8 <_Z9hwAds1115v>
	hwAnalog();
 8002256:	f000 fad7 	bl	8002808 <_Z8hwAnalogv>
	hwEEPROM();
 800225a:	f000 fb35 	bl	80028c8 <_Z8hwEEPROMv>
	hwGpsIn();
 800225e:	f000 faad 	bl	80027bc <_Z7hwGpsInv>
	hwLoraIn();
 8002262:	f000 f803 	bl	800226c <_Z8hwLoraInv>
}
 8002266:	bf00      	nop
 8002268:	bd80      	pop	{r7, pc}
	...

0800226c <_Z8hwLoraInv>:
 * Traspaso de de loraBus a loraInput
 *
 * loraInput detecta respuesta dentro de bytes entrantes
 */

void hwLoraIn(){
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
	if ( loraIn.available() ){					// Si hay elementos disponibles en FIFO desde DMA
 8002270:	480a      	ldr	r0, [pc, #40]	@ (800229c <_Z8hwLoraInv+0x30>)
 8002272:	f7ff fc25 	bl	8001ac0 <_ZN8fifoUart9availableEv>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d00c      	beq.n	8002296 <_Z8hwLoraInv+0x2a>
		loraBus	= loraIn.readElement();			// Guarda el valor
 800227c:	4807      	ldr	r0, [pc, #28]	@ (800229c <_Z8hwLoraInv+0x30>)
 800227e:	f7ff fbe6 	bl	8001a4e <_ZN8fifoUart11readElementEv>
 8002282:	4603      	mov	r3, r0
 8002284:	461a      	mov	r2, r3
 8002286:	4b06      	ldr	r3, [pc, #24]	@ (80022a0 <_Z8hwLoraInv+0x34>)
 8002288:	701a      	strb	r2, [r3, #0]
		loraInput.insertElement( loraBus );		// Inserta en Lora Input
 800228a:	4b05      	ldr	r3, [pc, #20]	@ (80022a0 <_Z8hwLoraInv+0x34>)
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	4619      	mov	r1, r3
 8002290:	4804      	ldr	r0, [pc, #16]	@ (80022a4 <_Z8hwLoraInv+0x38>)
 8002292:	f002 f81b 	bl	80042cc <_ZN9loraInput13insertElementEh>
	}
}
 8002296:	bf00      	nop
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	20000af0 	.word	0x20000af0
 80022a0:	200004d0 	.word	0x200004d0
 80022a4:	20000b30 	.word	0x20000b30

080022a8 <_Z9hwAds1115v>:
 *	INPUT	:	I2C
 *	OUTPUT	:	alphaA, alphaB
 *				warningHardware[2]
 */

void hwAds1115(){
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0

	switch ( stateAdc ){
 80022ac:	4b57      	ldr	r3, [pc, #348]	@ (800240c <_Z9hwAds1115v+0x164>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	2b05      	cmp	r3, #5
 80022b2:	f200 80a8 	bhi.w	8002406 <_Z9hwAds1115v+0x15e>
 80022b6:	a201      	add	r2, pc, #4	@ (adr r2, 80022bc <_Z9hwAds1115v+0x14>)
 80022b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022bc:	080022d5 	.word	0x080022d5
 80022c0:	08002309 	.word	0x08002309
 80022c4:	0800233f 	.word	0x0800233f
 80022c8:	08002371 	.word	0x08002371
 80022cc:	08002397 	.word	0x08002397
 80022d0:	080023eb 	.word	0x080023eb
	////////////////////////////
	// S0 - WAIT FOR SAMPLING //
	////////////////////////////
	case 0:

		countAdc++;									// Suma 1 al contador
 80022d4:	4b4e      	ldr	r3, [pc, #312]	@ (8002410 <_Z9hwAds1115v+0x168>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	3301      	adds	r3, #1
 80022da:	4a4d      	ldr	r2, [pc, #308]	@ (8002410 <_Z9hwAds1115v+0x168>)
 80022dc:	6013      	str	r3, [r2, #0]

		if ( countAdc >= sampleAdc && enableI2C ){	// Si pasa limite de medición y el I2C esta habilitado
 80022de:	4b4c      	ldr	r3, [pc, #304]	@ (8002410 <_Z9hwAds1115v+0x168>)
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	4b4c      	ldr	r3, [pc, #304]	@ (8002414 <_Z9hwAds1115v+0x16c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	db0a      	blt.n	8002300 <_Z9hwAds1115v+0x58>
 80022ea:	4b4b      	ldr	r3, [pc, #300]	@ (8002418 <_Z9hwAds1115v+0x170>)
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d006      	beq.n	8002300 <_Z9hwAds1115v+0x58>
			enableI2C	= 0;						// Deshabilita I2C
 80022f2:	4b49      	ldr	r3, [pc, #292]	@ (8002418 <_Z9hwAds1115v+0x170>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	701a      	strb	r2, [r3, #0]
			stateAdc	= 1;						// Pasa a S1
 80022f8:	4b44      	ldr	r3, [pc, #272]	@ (800240c <_Z9hwAds1115v+0x164>)
 80022fa:	2201      	movs	r2, #1
 80022fc:	701a      	strb	r2, [r3, #0]
		}
		else{										// Si no
			stateAdc	= 0;						// Espera en S0
		}
		break;
 80022fe:	e083      	b.n	8002408 <_Z9hwAds1115v+0x160>
			stateAdc	= 0;						// Espera en S0
 8002300:	4b42      	ldr	r3, [pc, #264]	@ (800240c <_Z9hwAds1115v+0x164>)
 8002302:	2200      	movs	r2, #0
 8002304:	701a      	strb	r2, [r3, #0]
		break;
 8002306:	e07f      	b.n	8002408 <_Z9hwAds1115v+0x160>
	////////////////////////////
	// S1 - TRANSMIT COMMANDS //
	////////////////////////////

	case 1:
		countAdc	= 0;																// Reinicia contador
 8002308:	4b41      	ldr	r3, [pc, #260]	@ (8002410 <_Z9hwAds1115v+0x168>)
 800230a:	2200      	movs	r2, #0
 800230c:	601a      	str	r2, [r3, #0]

		if ( selectChannelAds ){														// Si esta seleccionado channel 0
 800230e:	4b43      	ldr	r3, [pc, #268]	@ (800241c <_Z9hwAds1115v+0x174>)
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d006      	beq.n	8002324 <_Z9hwAds1115v+0x7c>
			HAL_I2C_Master_Transmit_DMA(&hi2c1, ADS1115_ADDRESS<<1, AdsCommand_0, 3);	// Transmite comando
 8002316:	2303      	movs	r3, #3
 8002318:	4a41      	ldr	r2, [pc, #260]	@ (8002420 <_Z9hwAds1115v+0x178>)
 800231a:	2190      	movs	r1, #144	@ 0x90
 800231c:	4841      	ldr	r0, [pc, #260]	@ (8002424 <_Z9hwAds1115v+0x17c>)
 800231e:	f006 f97b 	bl	8008618 <HAL_I2C_Master_Transmit_DMA>
 8002322:	e005      	b.n	8002330 <_Z9hwAds1115v+0x88>
		}
		else{																			// Si esta seleccionado channel 1
			HAL_I2C_Master_Transmit_DMA(&hi2c1, ADS1115_ADDRESS<<1, AdsCommand_2, 3);	// Transmite comando
 8002324:	2303      	movs	r3, #3
 8002326:	4a40      	ldr	r2, [pc, #256]	@ (8002428 <_Z9hwAds1115v+0x180>)
 8002328:	2190      	movs	r1, #144	@ 0x90
 800232a:	483e      	ldr	r0, [pc, #248]	@ (8002424 <_Z9hwAds1115v+0x17c>)
 800232c:	f006 f974 	bl	8008618 <HAL_I2C_Master_Transmit_DMA>
		}

		flagI2C_DMA	= 0;																// Reinicia flag DMA
 8002330:	4b3e      	ldr	r3, [pc, #248]	@ (800242c <_Z9hwAds1115v+0x184>)
 8002332:	2200      	movs	r2, #0
 8002334:	701a      	strb	r2, [r3, #0]
		stateAdc	= 2;																// Pasa a S2
 8002336:	4b35      	ldr	r3, [pc, #212]	@ (800240c <_Z9hwAds1115v+0x164>)
 8002338:	2202      	movs	r2, #2
 800233a:	701a      	strb	r2, [r3, #0]

		break;
 800233c:	e064      	b.n	8002408 <_Z9hwAds1115v+0x160>
	/////////////////////////
	// S2 - CHECK TRANSMIT //
	/////////////////////////

	case 2:
		HAL_I2C_Master_Transmit_DMA(&hi2c1, ADS1115_ADDRESS<<1, AdsCommand_1, 1);	// Transmite comando
 800233e:	2301      	movs	r3, #1
 8002340:	4a3b      	ldr	r2, [pc, #236]	@ (8002430 <_Z9hwAds1115v+0x188>)
 8002342:	2190      	movs	r1, #144	@ 0x90
 8002344:	4837      	ldr	r0, [pc, #220]	@ (8002424 <_Z9hwAds1115v+0x17c>)
 8002346:	f006 f967 	bl	8008618 <HAL_I2C_Master_Transmit_DMA>
		errorHardware[5]	= !flagI2C_DMA;											// Registra si no hay ADS
 800234a:	4b38      	ldr	r3, [pc, #224]	@ (800242c <_Z9hwAds1115v+0x184>)
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	f083 0301 	eor.w	r3, r3, #1
 8002352:	b2da      	uxtb	r2, r3
 8002354:	4b37      	ldr	r3, [pc, #220]	@ (8002434 <_Z9hwAds1115v+0x18c>)
 8002356:	715a      	strb	r2, [r3, #5]

		if ( flagI2C_DMA ){					// Si HAY ADC
 8002358:	4b34      	ldr	r3, [pc, #208]	@ (800242c <_Z9hwAds1115v+0x184>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d003      	beq.n	8002368 <_Z9hwAds1115v+0xc0>
			stateAdc	= 3;				// Pasa a S3
 8002360:	4b2a      	ldr	r3, [pc, #168]	@ (800240c <_Z9hwAds1115v+0x164>)
 8002362:	2203      	movs	r2, #3
 8002364:	701a      	strb	r2, [r3, #0]
		}
		else{								// Si no
			stateAdc	= 5;				// Pasa  s5
		}
		break;
 8002366:	e04f      	b.n	8002408 <_Z9hwAds1115v+0x160>
			stateAdc	= 5;				// Pasa  s5
 8002368:	4b28      	ldr	r3, [pc, #160]	@ (800240c <_Z9hwAds1115v+0x164>)
 800236a:	2205      	movs	r2, #5
 800236c:	701a      	strb	r2, [r3, #0]
		break;
 800236e:	e04b      	b.n	8002408 <_Z9hwAds1115v+0x160>
	////////////////////////////
	// S3 - WAIT FOR RESPONSE //
	////////////////////////////

	case 3:
		countAdc++;							// Suma 1 al contador
 8002370:	4b27      	ldr	r3, [pc, #156]	@ (8002410 <_Z9hwAds1115v+0x168>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	3301      	adds	r3, #1
 8002376:	4a26      	ldr	r2, [pc, #152]	@ (8002410 <_Z9hwAds1115v+0x168>)
 8002378:	6013      	str	r3, [r2, #0]

		if ( countAdc >= limitAds_i2c ){	// Si pasa el limite de espera de respuesta
 800237a:	4b25      	ldr	r3, [pc, #148]	@ (8002410 <_Z9hwAds1115v+0x168>)
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	4b2e      	ldr	r3, [pc, #184]	@ (8002438 <_Z9hwAds1115v+0x190>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	429a      	cmp	r2, r3
 8002384:	db03      	blt.n	800238e <_Z9hwAds1115v+0xe6>
			stateAdc	= 4;				// Pasa a S4
 8002386:	4b21      	ldr	r3, [pc, #132]	@ (800240c <_Z9hwAds1115v+0x164>)
 8002388:	2204      	movs	r2, #4
 800238a:	701a      	strb	r2, [r3, #0]
		}
		else{								// Si no
			stateAdc	= 3;				// Pasa a S3
		}
		break;
 800238c:	e03c      	b.n	8002408 <_Z9hwAds1115v+0x160>
			stateAdc	= 3;				// Pasa a S3
 800238e:	4b1f      	ldr	r3, [pc, #124]	@ (800240c <_Z9hwAds1115v+0x164>)
 8002390:	2203      	movs	r2, #3
 8002392:	701a      	strb	r2, [r3, #0]
		break;
 8002394:	e038      	b.n	8002408 <_Z9hwAds1115v+0x160>
	//////////////////////
	// S4 - RECEIVE I2C //
	//////////////////////

	case 4:
		countAdc	= 0;																// Reinicia contador
 8002396:	4b1e      	ldr	r3, [pc, #120]	@ (8002410 <_Z9hwAds1115v+0x168>)
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]
		HAL_I2C_Master_Receive_DMA(&hi2c1, ADS1115_ADDRESS<<1, buffer_ADS_I2C_IN, 2);	// Solicita datos del buffer
 800239c:	2302      	movs	r3, #2
 800239e:	4a27      	ldr	r2, [pc, #156]	@ (800243c <_Z9hwAds1115v+0x194>)
 80023a0:	2190      	movs	r1, #144	@ 0x90
 80023a2:	4820      	ldr	r0, [pc, #128]	@ (8002424 <_Z9hwAds1115v+0x17c>)
 80023a4:	f006 fa4c 	bl	8008840 <HAL_I2C_Master_Receive_DMA>
		if ( selectChannelAds ){														// Si esta seleccionado channel 0
 80023a8:	4b1c      	ldr	r3, [pc, #112]	@ (800241c <_Z9hwAds1115v+0x174>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d00c      	beq.n	80023ca <_Z9hwAds1115v+0x122>
			alphaA = ( buffer_ADS_I2C_IN[0] << 8 | buffer_ADS_I2C_IN[1] );				// Guarda en Alpha0
 80023b0:	4b22      	ldr	r3, [pc, #136]	@ (800243c <_Z9hwAds1115v+0x194>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	021b      	lsls	r3, r3, #8
 80023b6:	b21a      	sxth	r2, r3
 80023b8:	4b20      	ldr	r3, [pc, #128]	@ (800243c <_Z9hwAds1115v+0x194>)
 80023ba:	785b      	ldrb	r3, [r3, #1]
 80023bc:	b21b      	sxth	r3, r3
 80023be:	4313      	orrs	r3, r2
 80023c0:	b21b      	sxth	r3, r3
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	4b1e      	ldr	r3, [pc, #120]	@ (8002440 <_Z9hwAds1115v+0x198>)
 80023c6:	801a      	strh	r2, [r3, #0]
 80023c8:	e00b      	b.n	80023e2 <_Z9hwAds1115v+0x13a>
		}
		else{																			// Si esta seleccionado channel 1
			alphaB = ( buffer_ADS_I2C_IN[0] << 8 | buffer_ADS_I2C_IN[1] );				// Guarda en Alpha1
 80023ca:	4b1c      	ldr	r3, [pc, #112]	@ (800243c <_Z9hwAds1115v+0x194>)
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	021b      	lsls	r3, r3, #8
 80023d0:	b21a      	sxth	r2, r3
 80023d2:	4b1a      	ldr	r3, [pc, #104]	@ (800243c <_Z9hwAds1115v+0x194>)
 80023d4:	785b      	ldrb	r3, [r3, #1]
 80023d6:	b21b      	sxth	r3, r3
 80023d8:	4313      	orrs	r3, r2
 80023da:	b21b      	sxth	r3, r3
 80023dc:	b29a      	uxth	r2, r3
 80023de:	4b19      	ldr	r3, [pc, #100]	@ (8002444 <_Z9hwAds1115v+0x19c>)
 80023e0:	801a      	strh	r2, [r3, #0]
		}
		stateAdc	= 5;																// Pasa a S5
 80023e2:	4b0a      	ldr	r3, [pc, #40]	@ (800240c <_Z9hwAds1115v+0x164>)
 80023e4:	2205      	movs	r2, #5
 80023e6:	701a      	strb	r2, [r3, #0]
		break;
 80023e8:	e00e      	b.n	8002408 <_Z9hwAds1115v+0x160>
	/////////////////////
	// S5 - CLOSE LOOP //
	/////////////////////

	case 5:
		selectChannelAds	= !selectChannelAds;	// Cambia canal
 80023ea:	4b0c      	ldr	r3, [pc, #48]	@ (800241c <_Z9hwAds1115v+0x174>)
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	f083 0301 	eor.w	r3, r3, #1
 80023f2:	b2da      	uxtb	r2, r3
 80023f4:	4b09      	ldr	r3, [pc, #36]	@ (800241c <_Z9hwAds1115v+0x174>)
 80023f6:	701a      	strb	r2, [r3, #0]
		enableI2C	= 1;							// Habilita uso de I2C
 80023f8:	4b07      	ldr	r3, [pc, #28]	@ (8002418 <_Z9hwAds1115v+0x170>)
 80023fa:	2201      	movs	r2, #1
 80023fc:	701a      	strb	r2, [r3, #0]
		stateAdc	= 0;							// Vuelve a S0
 80023fe:	4b03      	ldr	r3, [pc, #12]	@ (800240c <_Z9hwAds1115v+0x164>)
 8002400:	2200      	movs	r2, #0
 8002402:	701a      	strb	r2, [r3, #0]
		break;
 8002404:	e000      	b.n	8002408 <_Z9hwAds1115v+0x160>

	default:
		break;
 8002406:	bf00      	nop
	}
}
 8002408:	bf00      	nop
 800240a:	bd80      	pop	{r7, pc}
 800240c:	20000428 	.word	0x20000428
 8002410:	2000042c 	.word	0x2000042c
 8002414:	20000430 	.word	0x20000430
 8002418:	2000000f 	.word	0x2000000f
 800241c:	20000442 	.word	0x20000442
 8002420:	20000010 	.word	0x20000010
 8002424:	200006d0 	.word	0x200006d0
 8002428:	20000014 	.word	0x20000014
 800242c:	200010a7 	.word	0x200010a7
 8002430:	20000438 	.word	0x20000438
 8002434:	200004dc 	.word	0x200004dc
 8002438:	20000434 	.word	0x20000434
 800243c:	2000043c 	.word	0x2000043c
 8002440:	2000043e 	.word	0x2000043e
 8002444:	20000440 	.word	0x20000440

08002448 <_Z7hwSht31v>:
 *	OUTPUT	: 	tempIntern, tempExtern
 *				humIntern, humExtern
 *				warningHardware[0], warningHardware[1]
 */

void hwSht31(){
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0

	switch ( stateSht31 ){
 800244c:	4b98      	ldr	r3, [pc, #608]	@ (80026b0 <_Z7hwSht31v+0x268>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b06      	cmp	r3, #6
 8002452:	f200 8126 	bhi.w	80026a2 <_Z7hwSht31v+0x25a>
 8002456:	a201      	add	r2, pc, #4	@ (adr r2, 800245c <_Z7hwSht31v+0x14>)
 8002458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800245c:	08002479 	.word	0x08002479
 8002460:	080024ad 	.word	0x080024ad
 8002464:	080024eb 	.word	0x080024eb
 8002468:	0800252f 	.word	0x0800252f
 800246c:	08002555 	.word	0x08002555
 8002470:	08002575 	.word	0x08002575
 8002474:	08002671 	.word	0x08002671
	///////////////////////////
	// S0 - WAIT FOR MEASURE //
	///////////////////////////

	case 0:
		countSht31++;							// Suma 1 al contador
 8002478:	4b8e      	ldr	r3, [pc, #568]	@ (80026b4 <_Z7hwSht31v+0x26c>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	3301      	adds	r3, #1
 800247e:	4a8d      	ldr	r2, [pc, #564]	@ (80026b4 <_Z7hwSht31v+0x26c>)
 8002480:	6013      	str	r3, [r2, #0]

		if ( countSht31 >= limitSht31_measure && enableI2C ){// Si el contador pasa limite
 8002482:	4b8c      	ldr	r3, [pc, #560]	@ (80026b4 <_Z7hwSht31v+0x26c>)
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	4b8c      	ldr	r3, [pc, #560]	@ (80026b8 <_Z7hwSht31v+0x270>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	429a      	cmp	r2, r3
 800248c:	db0a      	blt.n	80024a4 <_Z7hwSht31v+0x5c>
 800248e:	4b8b      	ldr	r3, [pc, #556]	@ (80026bc <_Z7hwSht31v+0x274>)
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d006      	beq.n	80024a4 <_Z7hwSht31v+0x5c>
			enableI2C	= 0;					// Deshabilita uso de I2C
 8002496:	4b89      	ldr	r3, [pc, #548]	@ (80026bc <_Z7hwSht31v+0x274>)
 8002498:	2200      	movs	r2, #0
 800249a:	701a      	strb	r2, [r3, #0]
			stateSht31	= 1;					// Pasa a S1
 800249c:	4b84      	ldr	r3, [pc, #528]	@ (80026b0 <_Z7hwSht31v+0x268>)
 800249e:	2201      	movs	r2, #1
 80024a0:	701a      	strb	r2, [r3, #0]
		}
		else{									// Si no
			stateSht31	= 0;					// Espera
		}
		break;
 80024a2:	e102      	b.n	80026aa <_Z7hwSht31v+0x262>
			stateSht31	= 0;					// Espera
 80024a4:	4b82      	ldr	r3, [pc, #520]	@ (80026b0 <_Z7hwSht31v+0x268>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	701a      	strb	r2, [r3, #0]
		break;
 80024aa:	e0fe      	b.n	80026aa <_Z7hwSht31v+0x262>
	///////////////////////////
	// S1 - TRANSMIT COMMAND //
	///////////////////////////

	case 1:
		countSht31	= 0;				// Reinicia contador
 80024ac:	4b81      	ldr	r3, [pc, #516]	@ (80026b4 <_Z7hwSht31v+0x26c>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	601a      	str	r2, [r3, #0]
										// Transmite comando por I2C al SHT31 correspondiente
										// Solicita respuesta del proceso

		buffer_SHT31_I2C_OUT[0]	= command_Sht31 >> 8;				// Copia primer byte del comando
 80024b2:	4b83      	ldr	r3, [pc, #524]	@ (80026c0 <_Z7hwSht31v+0x278>)
 80024b4:	881b      	ldrh	r3, [r3, #0]
 80024b6:	0a1b      	lsrs	r3, r3, #8
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	b2da      	uxtb	r2, r3
 80024bc:	4b81      	ldr	r3, [pc, #516]	@ (80026c4 <_Z7hwSht31v+0x27c>)
 80024be:	701a      	strb	r2, [r3, #0]
		buffer_SHT31_I2C_OUT[1]	= uint8_t ( command_Sht31 & 0xFF );	// Copia segundo byte del comando
 80024c0:	4b7f      	ldr	r3, [pc, #508]	@ (80026c0 <_Z7hwSht31v+0x278>)
 80024c2:	881b      	ldrh	r3, [r3, #0]
 80024c4:	b2da      	uxtb	r2, r3
 80024c6:	4b7f      	ldr	r3, [pc, #508]	@ (80026c4 <_Z7hwSht31v+0x27c>)
 80024c8:	705a      	strb	r2, [r3, #1]

		flagI2C_DMA	= 0;											// Reinicia flag de envio de datos
 80024ca:	4b7f      	ldr	r3, [pc, #508]	@ (80026c8 <_Z7hwSht31v+0x280>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	701a      	strb	r2, [r3, #0]
														 			// Transmite comando
		HAL_I2C_Master_Transmit_DMA(&hi2c1, addressSht31<<1, buffer_SHT31_I2C_OUT, 2);
 80024d0:	4b7e      	ldr	r3, [pc, #504]	@ (80026cc <_Z7hwSht31v+0x284>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	b299      	uxth	r1, r3
 80024d8:	2302      	movs	r3, #2
 80024da:	4a7a      	ldr	r2, [pc, #488]	@ (80026c4 <_Z7hwSht31v+0x27c>)
 80024dc:	487c      	ldr	r0, [pc, #496]	@ (80026d0 <_Z7hwSht31v+0x288>)
 80024de:	f006 f89b 	bl	8008618 <HAL_I2C_Master_Transmit_DMA>

		stateSht31	= 2;											// Pasa a S2
 80024e2:	4b73      	ldr	r3, [pc, #460]	@ (80026b0 <_Z7hwSht31v+0x268>)
 80024e4:	2202      	movs	r2, #2
 80024e6:	701a      	strb	r2, [r3, #0]
		break;
 80024e8:	e0df      	b.n	80026aa <_Z7hwSht31v+0x262>
										// PERO CON FALTA DE INFORMACIÓN PARA EL SENSOR
										// flagI2C_DMA -> 0: No hay sensor | 1: Hay sensor
										// flagI2C_DMA se actualiza en HAL_I2C_MasterTxCpltCallback
										// HAL_I2C_MasterTxCpltCallback se activa cuando el DMA transmitió correctamente

		if ( !selectSht31 ){					// Si esta seleccionado SHT31 interno
 80024ea:	4b7a      	ldr	r3, [pc, #488]	@ (80026d4 <_Z7hwSht31v+0x28c>)
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	f083 0301 	eor.w	r3, r3, #1
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d007      	beq.n	8002508 <_Z7hwSht31v+0xc0>
			errorHardware[0]	= !flagI2C_DMA;	// Marca estado del sensor
 80024f8:	4b73      	ldr	r3, [pc, #460]	@ (80026c8 <_Z7hwSht31v+0x280>)
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	f083 0301 	eor.w	r3, r3, #1
 8002500:	b2da      	uxtb	r2, r3
 8002502:	4b75      	ldr	r3, [pc, #468]	@ (80026d8 <_Z7hwSht31v+0x290>)
 8002504:	701a      	strb	r2, [r3, #0]
 8002506:	e006      	b.n	8002516 <_Z7hwSht31v+0xce>
		}
		else{									// Si esta seleccionado SHT31 externo
			errorHardware[1]	= !flagI2C_DMA;	// Marca estado del sensor
 8002508:	4b6f      	ldr	r3, [pc, #444]	@ (80026c8 <_Z7hwSht31v+0x280>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	f083 0301 	eor.w	r3, r3, #1
 8002510:	b2da      	uxtb	r2, r3
 8002512:	4b71      	ldr	r3, [pc, #452]	@ (80026d8 <_Z7hwSht31v+0x290>)
 8002514:	705a      	strb	r2, [r3, #1]
		}

		if ( flagI2C_DMA ){						// Si hay sensor
 8002516:	4b6c      	ldr	r3, [pc, #432]	@ (80026c8 <_Z7hwSht31v+0x280>)
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d003      	beq.n	8002526 <_Z7hwSht31v+0xde>
			stateSht31	= 3;					// Pasa a S3 para recibir datos
 800251e:	4b64      	ldr	r3, [pc, #400]	@ (80026b0 <_Z7hwSht31v+0x268>)
 8002520:	2203      	movs	r2, #3
 8002522:	701a      	strb	r2, [r3, #0]
		}
		else{									// Si no hay sensor
			stateSht31	= 6;					// Pasa a S6 - cambio de sensor
		}
		break;
 8002524:	e0c1      	b.n	80026aa <_Z7hwSht31v+0x262>
			stateSht31	= 6;					// Pasa a S6 - cambio de sensor
 8002526:	4b62      	ldr	r3, [pc, #392]	@ (80026b0 <_Z7hwSht31v+0x268>)
 8002528:	2206      	movs	r2, #6
 800252a:	701a      	strb	r2, [r3, #0]
		break;
 800252c:	e0bd      	b.n	80026aa <_Z7hwSht31v+0x262>
	///////////////////////////
	// S3 - ESPERA RESPUESTA //
	///////////////////////////

	case 3:
		countSht31++;							// Suma 1 al contador
 800252e:	4b61      	ldr	r3, [pc, #388]	@ (80026b4 <_Z7hwSht31v+0x26c>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	3301      	adds	r3, #1
 8002534:	4a5f      	ldr	r2, [pc, #380]	@ (80026b4 <_Z7hwSht31v+0x26c>)
 8002536:	6013      	str	r3, [r2, #0]

		if ( countSht31 >= limitSht31_i2c ){	// Si pasa el limite de respuesta
 8002538:	4b5e      	ldr	r3, [pc, #376]	@ (80026b4 <_Z7hwSht31v+0x26c>)
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	4b67      	ldr	r3, [pc, #412]	@ (80026dc <_Z7hwSht31v+0x294>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	429a      	cmp	r2, r3
 8002542:	db03      	blt.n	800254c <_Z7hwSht31v+0x104>
			stateSht31	= 4;					// Pasa a S4
 8002544:	4b5a      	ldr	r3, [pc, #360]	@ (80026b0 <_Z7hwSht31v+0x268>)
 8002546:	2204      	movs	r2, #4
 8002548:	701a      	strb	r2, [r3, #0]
		}
		else{									// Sino
			stateSht31	= 3;					// Espera en S3
		}
		break;
 800254a:	e0ae      	b.n	80026aa <_Z7hwSht31v+0x262>
			stateSht31	= 3;					// Espera en S3
 800254c:	4b58      	ldr	r3, [pc, #352]	@ (80026b0 <_Z7hwSht31v+0x268>)
 800254e:	2203      	movs	r2, #3
 8002550:	701a      	strb	r2, [r3, #0]
		break;
 8002552:	e0aa      	b.n	80026aa <_Z7hwSht31v+0x262>

	///////////////////////
	// S4 - RECIBE DATOS //
	///////////////////////
	case 4:
		countSht31	= 0;	// Reinicia contador
 8002554:	4b57      	ldr	r3, [pc, #348]	@ (80026b4 <_Z7hwSht31v+0x26c>)
 8002556:	2200      	movs	r2, #0
 8002558:	601a      	str	r2, [r3, #0]
							// RECIBE LOS DATOS DEL BUS I2C
		HAL_I2C_Master_Receive_DMA(&hi2c1, addressSht31<<1, buffer_SHT31_I2C_IN, 6);
 800255a:	4b5c      	ldr	r3, [pc, #368]	@ (80026cc <_Z7hwSht31v+0x284>)
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	b299      	uxth	r1, r3
 8002562:	2306      	movs	r3, #6
 8002564:	4a5e      	ldr	r2, [pc, #376]	@ (80026e0 <_Z7hwSht31v+0x298>)
 8002566:	485a      	ldr	r0, [pc, #360]	@ (80026d0 <_Z7hwSht31v+0x288>)
 8002568:	f006 f96a 	bl	8008840 <HAL_I2C_Master_Receive_DMA>
		stateSht31	= 5;	// Pasa a S5 para
 800256c:	4b50      	ldr	r3, [pc, #320]	@ (80026b0 <_Z7hwSht31v+0x268>)
 800256e:	2205      	movs	r2, #5
 8002570:	701a      	strb	r2, [r3, #0]
		break;
 8002572:	e09a      	b.n	80026aa <_Z7hwSht31v+0x262>
	// S5 - ESCALA DE VARIABLES //
	//////////////////////////////

	case 5:

		if ( !selectSht31 ){														// Si esta seleccionado SHT INTERNO
 8002574:	4b57      	ldr	r3, [pc, #348]	@ (80026d4 <_Z7hwSht31v+0x28c>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	f083 0301 	eor.w	r3, r3, #1
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b00      	cmp	r3, #0
 8002580:	d039      	beq.n	80025f6 <_Z7hwSht31v+0x1ae>
			tempIntern	= (buffer_SHT31_I2C_IN[0] << 8) + buffer_SHT31_I2C_IN[1];	// Une valores del bus para temperatura
 8002582:	4b57      	ldr	r3, [pc, #348]	@ (80026e0 <_Z7hwSht31v+0x298>)
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	021b      	lsls	r3, r3, #8
 8002588:	b29b      	uxth	r3, r3
 800258a:	4a55      	ldr	r2, [pc, #340]	@ (80026e0 <_Z7hwSht31v+0x298>)
 800258c:	7852      	ldrb	r2, [r2, #1]
 800258e:	4413      	add	r3, r2
 8002590:	b29a      	uxth	r2, r3
 8002592:	4b54      	ldr	r3, [pc, #336]	@ (80026e4 <_Z7hwSht31v+0x29c>)
 8002594:	801a      	strh	r2, [r3, #0]
			tempIntern	= 1750*tempIntern/65535 - 450;								// Escala sugerida
 8002596:	4b53      	ldr	r3, [pc, #332]	@ (80026e4 <_Z7hwSht31v+0x29c>)
 8002598:	881b      	ldrh	r3, [r3, #0]
 800259a:	461a      	mov	r2, r3
 800259c:	f240 63d6 	movw	r3, #1750	@ 0x6d6
 80025a0:	fb02 f303 	mul.w	r3, r2, r3
 80025a4:	4a50      	ldr	r2, [pc, #320]	@ (80026e8 <_Z7hwSht31v+0x2a0>)
 80025a6:	fb82 1203 	smull	r1, r2, r2, r3
 80025aa:	441a      	add	r2, r3
 80025ac:	13d2      	asrs	r2, r2, #15
 80025ae:	17db      	asrs	r3, r3, #31
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	f5a3 73e1 	sub.w	r3, r3, #450	@ 0x1c2
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	4b4a      	ldr	r3, [pc, #296]	@ (80026e4 <_Z7hwSht31v+0x29c>)
 80025bc:	801a      	strh	r2, [r3, #0]

			humIntern	= (buffer_SHT31_I2C_IN[3] << 8) + buffer_SHT31_I2C_IN[4];	// Une los valores del bus para humedad
 80025be:	4b48      	ldr	r3, [pc, #288]	@ (80026e0 <_Z7hwSht31v+0x298>)
 80025c0:	78db      	ldrb	r3, [r3, #3]
 80025c2:	021b      	lsls	r3, r3, #8
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	4a46      	ldr	r2, [pc, #280]	@ (80026e0 <_Z7hwSht31v+0x298>)
 80025c8:	7912      	ldrb	r2, [r2, #4]
 80025ca:	4413      	add	r3, r2
 80025cc:	b29a      	uxth	r2, r3
 80025ce:	4b47      	ldr	r3, [pc, #284]	@ (80026ec <_Z7hwSht31v+0x2a4>)
 80025d0:	801a      	strh	r2, [r3, #0]
			humIntern	= 1000*humIntern/65535;										// Escala sugerida
 80025d2:	4b46      	ldr	r3, [pc, #280]	@ (80026ec <_Z7hwSht31v+0x2a4>)
 80025d4:	881b      	ldrh	r3, [r3, #0]
 80025d6:	461a      	mov	r2, r3
 80025d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80025dc:	fb02 f303 	mul.w	r3, r2, r3
 80025e0:	4a41      	ldr	r2, [pc, #260]	@ (80026e8 <_Z7hwSht31v+0x2a0>)
 80025e2:	fb82 1203 	smull	r1, r2, r2, r3
 80025e6:	441a      	add	r2, r3
 80025e8:	13d2      	asrs	r2, r2, #15
 80025ea:	17db      	asrs	r3, r3, #31
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	4b3e      	ldr	r3, [pc, #248]	@ (80026ec <_Z7hwSht31v+0x2a4>)
 80025f2:	801a      	strh	r2, [r3, #0]
 80025f4:	e038      	b.n	8002668 <_Z7hwSht31v+0x220>
		}
		else{																		// Si esta seleccionado SHT EXTERNO
			tempExtern	= (buffer_SHT31_I2C_IN[0] << 8) + buffer_SHT31_I2C_IN[1];	// Une valores del bus paa temperatura externa
 80025f6:	4b3a      	ldr	r3, [pc, #232]	@ (80026e0 <_Z7hwSht31v+0x298>)
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	021b      	lsls	r3, r3, #8
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	4a38      	ldr	r2, [pc, #224]	@ (80026e0 <_Z7hwSht31v+0x298>)
 8002600:	7852      	ldrb	r2, [r2, #1]
 8002602:	4413      	add	r3, r2
 8002604:	b29a      	uxth	r2, r3
 8002606:	4b3a      	ldr	r3, [pc, #232]	@ (80026f0 <_Z7hwSht31v+0x2a8>)
 8002608:	801a      	strh	r2, [r3, #0]
			tempExtern	= 1750*tempExtern/65535 - 450;								// Escala sugerida
 800260a:	4b39      	ldr	r3, [pc, #228]	@ (80026f0 <_Z7hwSht31v+0x2a8>)
 800260c:	881b      	ldrh	r3, [r3, #0]
 800260e:	461a      	mov	r2, r3
 8002610:	f240 63d6 	movw	r3, #1750	@ 0x6d6
 8002614:	fb02 f303 	mul.w	r3, r2, r3
 8002618:	4a33      	ldr	r2, [pc, #204]	@ (80026e8 <_Z7hwSht31v+0x2a0>)
 800261a:	fb82 1203 	smull	r1, r2, r2, r3
 800261e:	441a      	add	r2, r3
 8002620:	13d2      	asrs	r2, r2, #15
 8002622:	17db      	asrs	r3, r3, #31
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	b29b      	uxth	r3, r3
 8002628:	f5a3 73e1 	sub.w	r3, r3, #450	@ 0x1c2
 800262c:	b29a      	uxth	r2, r3
 800262e:	4b30      	ldr	r3, [pc, #192]	@ (80026f0 <_Z7hwSht31v+0x2a8>)
 8002630:	801a      	strh	r2, [r3, #0]

			humExtern	= (buffer_SHT31_I2C_IN[3] << 8) + buffer_SHT31_I2C_IN[4];	// Une valores del bus para humedad
 8002632:	4b2b      	ldr	r3, [pc, #172]	@ (80026e0 <_Z7hwSht31v+0x298>)
 8002634:	78db      	ldrb	r3, [r3, #3]
 8002636:	021b      	lsls	r3, r3, #8
 8002638:	b29b      	uxth	r3, r3
 800263a:	4a29      	ldr	r2, [pc, #164]	@ (80026e0 <_Z7hwSht31v+0x298>)
 800263c:	7912      	ldrb	r2, [r2, #4]
 800263e:	4413      	add	r3, r2
 8002640:	b29a      	uxth	r2, r3
 8002642:	4b2c      	ldr	r3, [pc, #176]	@ (80026f4 <_Z7hwSht31v+0x2ac>)
 8002644:	801a      	strh	r2, [r3, #0]
			humExtern	= 1000*humExtern/65535;										// Escala sugerida
 8002646:	4b2b      	ldr	r3, [pc, #172]	@ (80026f4 <_Z7hwSht31v+0x2ac>)
 8002648:	881b      	ldrh	r3, [r3, #0]
 800264a:	461a      	mov	r2, r3
 800264c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002650:	fb02 f303 	mul.w	r3, r2, r3
 8002654:	4a24      	ldr	r2, [pc, #144]	@ (80026e8 <_Z7hwSht31v+0x2a0>)
 8002656:	fb82 1203 	smull	r1, r2, r2, r3
 800265a:	441a      	add	r2, r3
 800265c:	13d2      	asrs	r2, r2, #15
 800265e:	17db      	asrs	r3, r3, #31
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	b29a      	uxth	r2, r3
 8002664:	4b23      	ldr	r3, [pc, #140]	@ (80026f4 <_Z7hwSht31v+0x2ac>)
 8002666:	801a      	strh	r2, [r3, #0]
		}
		stateSht31	= 6;
 8002668:	4b11      	ldr	r3, [pc, #68]	@ (80026b0 <_Z7hwSht31v+0x268>)
 800266a:	2206      	movs	r2, #6
 800266c:	701a      	strb	r2, [r3, #0]
		break;
 800266e:	e01c      	b.n	80026aa <_Z7hwSht31v+0x262>

	///////////////////////////
	// S6 - CAMBIO DE SENSOR //
	///////////////////////////
	case 6:
		enableI2C	= 1;
 8002670:	4b12      	ldr	r3, [pc, #72]	@ (80026bc <_Z7hwSht31v+0x274>)
 8002672:	2201      	movs	r2, #1
 8002674:	701a      	strb	r2, [r3, #0]
		selectSht31	= !selectSht31;				//	Cambia sht31 seleccionado
 8002676:	4b17      	ldr	r3, [pc, #92]	@ (80026d4 <_Z7hwSht31v+0x28c>)
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	f083 0301 	eor.w	r3, r3, #1
 800267e:	b2da      	uxtb	r2, r3
 8002680:	4b14      	ldr	r3, [pc, #80]	@ (80026d4 <_Z7hwSht31v+0x28c>)
 8002682:	701a      	strb	r2, [r3, #0]

		if ( selectSht31 ){						// Si selecciona SHT31 Externo
 8002684:	4b13      	ldr	r3, [pc, #76]	@ (80026d4 <_Z7hwSht31v+0x28c>)
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d003      	beq.n	8002694 <_Z7hwSht31v+0x24c>
			addressSht31	= SHT31_ADDRESS_A;	// Dija address 0x4
 800268c:	4b0f      	ldr	r3, [pc, #60]	@ (80026cc <_Z7hwSht31v+0x284>)
 800268e:	2244      	movs	r2, #68	@ 0x44
 8002690:	701a      	strb	r2, [r3, #0]
 8002692:	e002      	b.n	800269a <_Z7hwSht31v+0x252>
		}
		else{									// Si selecciona SHT31 Interno
			addressSht31	= SHT31_ADDRESS_B;	// Fija address 0x45
 8002694:	4b0d      	ldr	r3, [pc, #52]	@ (80026cc <_Z7hwSht31v+0x284>)
 8002696:	2245      	movs	r2, #69	@ 0x45
 8002698:	701a      	strb	r2, [r3, #0]
		}

		stateSht31	= 0;						// Cierra el ciclo
 800269a:	4b05      	ldr	r3, [pc, #20]	@ (80026b0 <_Z7hwSht31v+0x268>)
 800269c:	2200      	movs	r2, #0
 800269e:	701a      	strb	r2, [r3, #0]
		break;
 80026a0:	e003      	b.n	80026aa <_Z7hwSht31v+0x262>

	default:
		stateSht31	= 0;
 80026a2:	4b03      	ldr	r3, [pc, #12]	@ (80026b0 <_Z7hwSht31v+0x268>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	701a      	strb	r2, [r3, #0]
		break;
 80026a8:	bf00      	nop
	}
}
 80026aa:	bf00      	nop
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	20000409 	.word	0x20000409
 80026b4:	2000040c 	.word	0x2000040c
 80026b8:	20000410 	.word	0x20000410
 80026bc:	2000000f 	.word	0x2000000f
 80026c0:	2000000a 	.word	0x2000000a
 80026c4:	2000000c 	.word	0x2000000c
 80026c8:	200010a7 	.word	0x200010a7
 80026cc:	2000000e 	.word	0x2000000e
 80026d0:	200006d0 	.word	0x200006d0
 80026d4:	2000041e 	.word	0x2000041e
 80026d8:	200004dc 	.word	0x200004dc
 80026dc:	20000414 	.word	0x20000414
 80026e0:	20000418 	.word	0x20000418
 80026e4:	20000420 	.word	0x20000420
 80026e8:	80008001 	.word	0x80008001
 80026ec:	20000422 	.word	0x20000422
 80026f0:	20000424 	.word	0x20000424
 80026f4:	20000426 	.word	0x20000426

080026f8 <_Z7hwBotonv>:
 *	INPUT 	: GPIO_A, PIN_3
 *	OUTPUT	: flagBoton
 *
 */

void hwBoton(){
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
	///////////
	// BOTON //
	///////////

	boton	= ! HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);	// Invierte la entrada
 80026fc:	2108      	movs	r1, #8
 80026fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002702:	f005 febd 	bl	8008480 <HAL_GPIO_ReadPin>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	bf0c      	ite	eq
 800270c:	2301      	moveq	r3, #1
 800270e:	2300      	movne	r3, #0
 8002710:	b2da      	uxtb	r2, r3
 8002712:	4b25      	ldr	r3, [pc, #148]	@ (80027a8 <_Z7hwBotonv+0xb0>)
 8002714:	701a      	strb	r2, [r3, #0]

	switch (stateBoton){
 8002716:	4b25      	ldr	r3, [pc, #148]	@ (80027ac <_Z7hwBotonv+0xb4>)
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	2b02      	cmp	r3, #2
 800271c:	d03a      	beq.n	8002794 <_Z7hwBotonv+0x9c>
 800271e:	2b02      	cmp	r3, #2
 8002720:	dc3f      	bgt.n	80027a2 <_Z7hwBotonv+0xaa>
 8002722:	2b00      	cmp	r3, #0
 8002724:	d002      	beq.n	800272c <_Z7hwBotonv+0x34>
 8002726:	2b01      	cmp	r3, #1
 8002728:	d012      	beq.n	8002750 <_Z7hwBotonv+0x58>
		flagBoton	= 1;		// Indica que se presiono el boton
		stateBoton	= 0;		// Vuelve a S0
		break;

	default:
		break;
 800272a:	e03a      	b.n	80027a2 <_Z7hwBotonv+0xaa>
		countBoton	= 0;		//	Reinicia contador
 800272c:	4b20      	ldr	r3, [pc, #128]	@ (80027b0 <_Z7hwBotonv+0xb8>)
 800272e:	2200      	movs	r2, #0
 8002730:	601a      	str	r2, [r3, #0]
		flagBoton	= 0;		//	Reinicia flag de boton apretado
 8002732:	4b20      	ldr	r3, [pc, #128]	@ (80027b4 <_Z7hwBotonv+0xbc>)
 8002734:	2200      	movs	r2, #0
 8002736:	701a      	strb	r2, [r3, #0]
		if ( boton ){			//	Si se presiona el boton
 8002738:	4b1b      	ldr	r3, [pc, #108]	@ (80027a8 <_Z7hwBotonv+0xb0>)
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d003      	beq.n	8002748 <_Z7hwBotonv+0x50>
			stateBoton	= 1;	//	Pasa a S1
 8002740:	4b1a      	ldr	r3, [pc, #104]	@ (80027ac <_Z7hwBotonv+0xb4>)
 8002742:	2201      	movs	r2, #1
 8002744:	701a      	strb	r2, [r3, #0]
		break;
 8002746:	e02d      	b.n	80027a4 <_Z7hwBotonv+0xac>
			stateBoton	= 0;	// Se queda en S0
 8002748:	4b18      	ldr	r3, [pc, #96]	@ (80027ac <_Z7hwBotonv+0xb4>)
 800274a:	2200      	movs	r2, #0
 800274c:	701a      	strb	r2, [r3, #0]
		break;
 800274e:	e029      	b.n	80027a4 <_Z7hwBotonv+0xac>
		countBoton++;								// Suma 1 al contador
 8002750:	4b17      	ldr	r3, [pc, #92]	@ (80027b0 <_Z7hwBotonv+0xb8>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	3301      	adds	r3, #1
 8002756:	4a16      	ldr	r2, [pc, #88]	@ (80027b0 <_Z7hwBotonv+0xb8>)
 8002758:	6013      	str	r3, [r2, #0]
		if ( boton && countBoton >= limitBoton ){	// Si el boton esta presionado y llega al limite del contador
 800275a:	4b13      	ldr	r3, [pc, #76]	@ (80027a8 <_Z7hwBotonv+0xb0>)
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d009      	beq.n	8002776 <_Z7hwBotonv+0x7e>
 8002762:	4b13      	ldr	r3, [pc, #76]	@ (80027b0 <_Z7hwBotonv+0xb8>)
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	4b14      	ldr	r3, [pc, #80]	@ (80027b8 <_Z7hwBotonv+0xc0>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	429a      	cmp	r2, r3
 800276c:	db03      	blt.n	8002776 <_Z7hwBotonv+0x7e>
			stateBoton	= 2;						// Pasa a S2
 800276e:	4b0f      	ldr	r3, [pc, #60]	@ (80027ac <_Z7hwBotonv+0xb4>)
 8002770:	2202      	movs	r2, #2
 8002772:	701a      	strb	r2, [r3, #0]
		break;
 8002774:	e016      	b.n	80027a4 <_Z7hwBotonv+0xac>
		else if ( !boton ){							// Si el boton no estaba apretado
 8002776:	4b0c      	ldr	r3, [pc, #48]	@ (80027a8 <_Z7hwBotonv+0xb0>)
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	f083 0301 	eor.w	r3, r3, #1
 800277e:	b2db      	uxtb	r3, r3
 8002780:	2b00      	cmp	r3, #0
 8002782:	d003      	beq.n	800278c <_Z7hwBotonv+0x94>
			stateBoton	= 0;						// Vuelve a S0
 8002784:	4b09      	ldr	r3, [pc, #36]	@ (80027ac <_Z7hwBotonv+0xb4>)
 8002786:	2200      	movs	r2, #0
 8002788:	701a      	strb	r2, [r3, #0]
		break;
 800278a:	e00b      	b.n	80027a4 <_Z7hwBotonv+0xac>
			stateBoton	= 1;						// Se queda en S1
 800278c:	4b07      	ldr	r3, [pc, #28]	@ (80027ac <_Z7hwBotonv+0xb4>)
 800278e:	2201      	movs	r2, #1
 8002790:	701a      	strb	r2, [r3, #0]
		break;
 8002792:	e007      	b.n	80027a4 <_Z7hwBotonv+0xac>
		flagBoton	= 1;		// Indica que se presiono el boton
 8002794:	4b07      	ldr	r3, [pc, #28]	@ (80027b4 <_Z7hwBotonv+0xbc>)
 8002796:	2201      	movs	r2, #1
 8002798:	701a      	strb	r2, [r3, #0]
		stateBoton	= 0;		// Vuelve a S0
 800279a:	4b04      	ldr	r3, [pc, #16]	@ (80027ac <_Z7hwBotonv+0xb4>)
 800279c:	2200      	movs	r2, #0
 800279e:	701a      	strb	r2, [r3, #0]
		break;
 80027a0:	e000      	b.n	80027a4 <_Z7hwBotonv+0xac>
		break;
 80027a2:	bf00      	nop
	}
}
 80027a4:	bf00      	nop
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	200003fd 	.word	0x200003fd
 80027ac:	20000408 	.word	0x20000408
 80027b0:	20000400 	.word	0x20000400
 80027b4:	20000a40 	.word	0x20000a40
 80027b8:	20000404 	.word	0x20000404

080027bc <_Z7hwGpsInv>:
 *
 *	INPUT	:	gpsIn.available()
 *	OUTPUT	:	gpsInput.inserValue()
 */

void hwGpsIn(){
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
	if ( gpsIn.available() ){			// Si hay un elemento en fifo
 80027c0:	480e      	ldr	r0, [pc, #56]	@ (80027fc <_Z7hwGpsInv+0x40>)
 80027c2:	f7ff f97d 	bl	8001ac0 <_ZN8fifoUart9availableEv>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d015      	beq.n	80027f8 <_Z7hwGpsInv+0x3c>
		gpsBus = gpsIn.readElement();	// Lee valor en fifo
 80027cc:	480b      	ldr	r0, [pc, #44]	@ (80027fc <_Z7hwGpsInv+0x40>)
 80027ce:	f7ff f93e 	bl	8001a4e <_ZN8fifoUart11readElementEv>
 80027d2:	4603      	mov	r3, r0
 80027d4:	461a      	mov	r2, r3
 80027d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002800 <_Z7hwGpsInv+0x44>)
 80027d8:	701a      	strb	r2, [r3, #0]
		gpsInput.insertValue( gpsBus );	// Pasa el simbolo al otro metodo
 80027da:	4b09      	ldr	r3, [pc, #36]	@ (8002800 <_Z7hwGpsInv+0x44>)
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	4619      	mov	r1, r3
 80027e0:	4808      	ldr	r0, [pc, #32]	@ (8002804 <_Z7hwGpsInv+0x48>)
 80027e2:	f7ff f995 	bl	8001b10 <_ZN8gpsInput11insertValueEh>

		if ( gpsInput.stateInsert == 7){
 80027e6:	4b07      	ldr	r3, [pc, #28]	@ (8002804 <_Z7hwGpsInv+0x48>)
 80027e8:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80027ec:	2b07      	cmp	r3, #7
 80027ee:	d103      	bne.n	80027f8 <_Z7hwGpsInv+0x3c>
			gpsBus = gpsBus;
 80027f0:	4b03      	ldr	r3, [pc, #12]	@ (8002800 <_Z7hwGpsInv+0x44>)
 80027f2:	781a      	ldrb	r2, [r3, #0]
 80027f4:	4b02      	ldr	r3, [pc, #8]	@ (8002800 <_Z7hwGpsInv+0x44>)
 80027f6:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80027f8:	bf00      	nop
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	20000a9c 	.word	0x20000a9c
 8002800:	200004cf 	.word	0x200004cf
 8002804:	20000a44 	.word	0x20000a44

08002808 <_Z8hwAnalogv>:
 *
 *	INPUT	:	analog[0],	analog[1], flagAnalog
 *	OUTPUT	:	battery, alphaAnalog_A, alphaAnalog_B
 */

void hwAnalog(){
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
	switch ( stateAnalog ){
 800280c:	4b25      	ldr	r3, [pc, #148]	@ (80028a4 <_Z8hwAnalogv+0x9c>)
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	2b02      	cmp	r3, #2
 8002812:	d025      	beq.n	8002860 <_Z8hwAnalogv+0x58>
 8002814:	2b02      	cmp	r3, #2
 8002816:	dc42      	bgt.n	800289e <_Z8hwAnalogv+0x96>
 8002818:	2b00      	cmp	r3, #0
 800281a:	d002      	beq.n	8002822 <_Z8hwAnalogv+0x1a>
 800281c:	2b01      	cmp	r3, #1
 800281e:	d013      	beq.n	8002848 <_Z8hwAnalogv+0x40>
		else{												// Si no ha guardado
			stateAnalog		= 2;							// Espera en S2
		}
		break;
	}
}
 8002820:	e03d      	b.n	800289e <_Z8hwAnalogv+0x96>
		countAnalog++;						// Suma 1 al contador
 8002822:	4b21      	ldr	r3, [pc, #132]	@ (80028a8 <_Z8hwAnalogv+0xa0>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	3301      	adds	r3, #1
 8002828:	4a1f      	ldr	r2, [pc, #124]	@ (80028a8 <_Z8hwAnalogv+0xa0>)
 800282a:	6013      	str	r3, [r2, #0]
		if ( countAnalog >= sampleAnalog ){	// Si cumple el tiempo de muestreo
 800282c:	4b1e      	ldr	r3, [pc, #120]	@ (80028a8 <_Z8hwAnalogv+0xa0>)
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	4b1e      	ldr	r3, [pc, #120]	@ (80028ac <_Z8hwAnalogv+0xa4>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	429a      	cmp	r2, r3
 8002836:	db03      	blt.n	8002840 <_Z8hwAnalogv+0x38>
			stateAnalog	= 1;				// Pasa a S1
 8002838:	4b1a      	ldr	r3, [pc, #104]	@ (80028a4 <_Z8hwAnalogv+0x9c>)
 800283a:	2201      	movs	r2, #1
 800283c:	701a      	strb	r2, [r3, #0]
		break;
 800283e:	e02e      	b.n	800289e <_Z8hwAnalogv+0x96>
			stateAnalog	= 0;				// Espera en S0
 8002840:	4b18      	ldr	r3, [pc, #96]	@ (80028a4 <_Z8hwAnalogv+0x9c>)
 8002842:	2200      	movs	r2, #0
 8002844:	701a      	strb	r2, [r3, #0]
		break;
 8002846:	e02a      	b.n	800289e <_Z8hwAnalogv+0x96>
		countAnalog	= 0;									// Reinicia contador
 8002848:	4b17      	ldr	r3, [pc, #92]	@ (80028a8 <_Z8hwAnalogv+0xa0>)
 800284a:	2200      	movs	r2, #0
 800284c:	601a      	str	r2, [r3, #0]
		HAL_ADC_Start_DMA(&hadc1, (uint32_t *) analog, 3);	// Inicia muestreo
 800284e:	2203      	movs	r2, #3
 8002850:	4917      	ldr	r1, [pc, #92]	@ (80028b0 <_Z8hwAnalogv+0xa8>)
 8002852:	4818      	ldr	r0, [pc, #96]	@ (80028b4 <_Z8hwAnalogv+0xac>)
 8002854:	f003 fe14 	bl	8006480 <HAL_ADC_Start_DMA>
		stateAnalog	= 2;									// Pasa a S2
 8002858:	4b12      	ldr	r3, [pc, #72]	@ (80028a4 <_Z8hwAnalogv+0x9c>)
 800285a:	2202      	movs	r2, #2
 800285c:	701a      	strb	r2, [r3, #0]
		break;
 800285e:	e01e      	b.n	800289e <_Z8hwAnalogv+0x96>
		if ( flagAnalog ){									// Si guardo correctamente
 8002860:	4b15      	ldr	r3, [pc, #84]	@ (80028b8 <_Z8hwAnalogv+0xb0>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d016      	beq.n	8002896 <_Z8hwAnalogv+0x8e>
			battery			= (analog[0] & 0xFFFF);			// Guarda valor bateria
 8002868:	4b11      	ldr	r3, [pc, #68]	@ (80028b0 <_Z8hwAnalogv+0xa8>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	b29a      	uxth	r2, r3
 800286e:	4b13      	ldr	r3, [pc, #76]	@ (80028bc <_Z8hwAnalogv+0xb4>)
 8002870:	801a      	strh	r2, [r3, #0]
			alphaAnalog_A	= (analog[0] >> 16 & 0xFFFF);	// Guarda valor Alpha A
 8002872:	4b0f      	ldr	r3, [pc, #60]	@ (80028b0 <_Z8hwAnalogv+0xa8>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	0c1b      	lsrs	r3, r3, #16
 8002878:	b29a      	uxth	r2, r3
 800287a:	4b11      	ldr	r3, [pc, #68]	@ (80028c0 <_Z8hwAnalogv+0xb8>)
 800287c:	801a      	strh	r2, [r3, #0]
			alphaAnalog_B	= (analog[1] & 0xFFFF);			// Guarda valor Alpha B
 800287e:	4b0c      	ldr	r3, [pc, #48]	@ (80028b0 <_Z8hwAnalogv+0xa8>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	b29a      	uxth	r2, r3
 8002884:	4b0f      	ldr	r3, [pc, #60]	@ (80028c4 <_Z8hwAnalogv+0xbc>)
 8002886:	801a      	strh	r2, [r3, #0]
			flagAnalog		= 0;							// Reinicia flag de medicion analogica
 8002888:	4b0b      	ldr	r3, [pc, #44]	@ (80028b8 <_Z8hwAnalogv+0xb0>)
 800288a:	2200      	movs	r2, #0
 800288c:	701a      	strb	r2, [r3, #0]
			stateAnalog		= 0;							// Vuelve a S0
 800288e:	4b05      	ldr	r3, [pc, #20]	@ (80028a4 <_Z8hwAnalogv+0x9c>)
 8002890:	2200      	movs	r2, #0
 8002892:	701a      	strb	r2, [r3, #0]
		break;
 8002894:	e002      	b.n	800289c <_Z8hwAnalogv+0x94>
			stateAnalog		= 2;							// Espera en S2
 8002896:	4b03      	ldr	r3, [pc, #12]	@ (80028a4 <_Z8hwAnalogv+0x9c>)
 8002898:	2202      	movs	r2, #2
 800289a:	701a      	strb	r2, [r3, #0]
		break;
 800289c:	bf00      	nop
}
 800289e:	bf00      	nop
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	20000454 	.word	0x20000454
 80028a8:	2000044c 	.word	0x2000044c
 80028ac:	20000450 	.word	0x20000450
 80028b0:	20001140 	.word	0x20001140
 80028b4:	20000620 	.word	0x20000620
 80028b8:	2000114c 	.word	0x2000114c
 80028bc:	20000444 	.word	0x20000444
 80028c0:	20000446 	.word	0x20000446
 80028c4:	20000448 	.word	0x20000448

080028c8 <_Z8hwEEPROMv>:
 * 1. Indicar cada uno de los pasos de calibracion
 * 2. Guardas datos de forma periodica en EEPROM
 * 3.
 */

void hwEEPROM(){
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0

	switch ( stateEEPROM ){
 80028ce:	4b7b      	ldr	r3, [pc, #492]	@ (8002abc <_Z8hwEEPROMv+0x1f4>)
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	2b06      	cmp	r3, #6
 80028d4:	f200 80e8 	bhi.w	8002aa8 <_Z8hwEEPROMv+0x1e0>
 80028d8:	a201      	add	r2, pc, #4	@ (adr r2, 80028e0 <_Z8hwEEPROMv+0x18>)
 80028da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028de:	bf00      	nop
 80028e0:	080028fd 	.word	0x080028fd
 80028e4:	08002935 	.word	0x08002935
 80028e8:	0800296d 	.word	0x0800296d
 80028ec:	080029a5 	.word	0x080029a5
 80028f0:	080029dd 	.word	0x080029dd
 80028f4:	08002a3d 	.word	0x08002a3d
 80028f8:	08002ab1 	.word	0x08002ab1
	//////////////////////
	// S0 - READ PAGE 0 //
	//////////////////////

	case 0:
		EEPROM_Read(0, 0,  nameSensor_0,	sizeof(nameSensor_0));		// Name of sensor
 80028fc:	2314      	movs	r3, #20
 80028fe:	4a70      	ldr	r2, [pc, #448]	@ (8002ac0 <_Z8hwEEPROMv+0x1f8>)
 8002900:	2100      	movs	r1, #0
 8002902:	2000      	movs	r0, #0
 8002904:	f7fe f90e 	bl	8000b24 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(0, 20, idSensor_0,		sizeof(idSensor_0));		// ID of sensor
 8002908:	2304      	movs	r3, #4
 800290a:	4a6e      	ldr	r2, [pc, #440]	@ (8002ac4 <_Z8hwEEPROMv+0x1fc>)
 800290c:	2114      	movs	r1, #20
 800290e:	2000      	movs	r0, #0
 8002910:	f7fe f908 	bl	8000b24 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(0, 24, rangeSensor_0,	sizeof(rangeSensor_0));		// Range of sensor
 8002914:	2304      	movs	r3, #4
 8002916:	4a6c      	ldr	r2, [pc, #432]	@ (8002ac8 <_Z8hwEEPROMv+0x200>)
 8002918:	2118      	movs	r1, #24
 800291a:	2000      	movs	r0, #0
 800291c:	f7fe f902 	bl	8000b24 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(0, 28, amplifier_10,	sizeof(amplifier_10));		// Amplifier 1 of sensor
 8002920:	2304      	movs	r3, #4
 8002922:	4a6a      	ldr	r2, [pc, #424]	@ (8002acc <_Z8hwEEPROMv+0x204>)
 8002924:	211c      	movs	r1, #28
 8002926:	2000      	movs	r0, #0
 8002928:	f7fe f8fc 	bl	8000b24 <_Z11EEPROM_ReadttPht>
		stateEEPROM	= 1;												// S1 to read page 1
 800292c:	4b63      	ldr	r3, [pc, #396]	@ (8002abc <_Z8hwEEPROMv+0x1f4>)
 800292e:	2201      	movs	r2, #1
 8002930:	701a      	strb	r2, [r3, #0]
		break;
 8002932:	e0be      	b.n	8002ab2 <_Z8hwEEPROMv+0x1ea>

	case 1:
		EEPROM_Read(0, 32, amplifier_20,	sizeof(amplifier_20));		// Amplifier 2 of sensor
 8002934:	2304      	movs	r3, #4
 8002936:	4a66      	ldr	r2, [pc, #408]	@ (8002ad0 <_Z8hwEEPROMv+0x208>)
 8002938:	2120      	movs	r1, #32
 800293a:	2000      	movs	r0, #0
 800293c:	f7fe f8f2 	bl	8000b24 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(0, 36, groundSensor_0,	sizeof(groundSensor_0));	// N of curve
 8002940:	2304      	movs	r3, #4
 8002942:	4a64      	ldr	r2, [pc, #400]	@ (8002ad4 <_Z8hwEEPROMv+0x20c>)
 8002944:	2124      	movs	r1, #36	@ 0x24
 8002946:	2000      	movs	r0, #0
 8002948:	f7fe f8ec 	bl	8000b24 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(0, 40, curveSensor_0,	sizeof(curveSensor_0));		// M of curve
 800294c:	2304      	movs	r3, #4
 800294e:	4a62      	ldr	r2, [pc, #392]	@ (8002ad8 <_Z8hwEEPROMv+0x210>)
 8002950:	2128      	movs	r1, #40	@ 0x28
 8002952:	2000      	movs	r0, #0
 8002954:	f7fe f8e6 	bl	8000b24 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(0, 44, dateCalib_0,		sizeof(dateCalib_0));		// Date of calibration
 8002958:	230a      	movs	r3, #10
 800295a:	4a60      	ldr	r2, [pc, #384]	@ (8002adc <_Z8hwEEPROMv+0x214>)
 800295c:	212c      	movs	r1, #44	@ 0x2c
 800295e:	2000      	movs	r0, #0
 8002960:	f7fe f8e0 	bl	8000b24 <_Z11EEPROM_ReadttPht>

		stateEEPROM	= 2;
 8002964:	4b55      	ldr	r3, [pc, #340]	@ (8002abc <_Z8hwEEPROMv+0x1f4>)
 8002966:	2202      	movs	r2, #2
 8002968:	701a      	strb	r2, [r3, #0]
		break;
 800296a:	e0a2      	b.n	8002ab2 <_Z8hwEEPROMv+0x1ea>
	//////////////////////
	// S1 - READ PAGE 1 //
	//////////////////////

	case 2:
		EEPROM_Read(1, 0,  nameSensor_1,	sizeof(nameSensor_1));		// Name of sensor
 800296c:	2314      	movs	r3, #20
 800296e:	4a5c      	ldr	r2, [pc, #368]	@ (8002ae0 <_Z8hwEEPROMv+0x218>)
 8002970:	2100      	movs	r1, #0
 8002972:	2001      	movs	r0, #1
 8002974:	f7fe f8d6 	bl	8000b24 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(1, 20, idSensor_1,		sizeof(idSensor_1));		// ID of sensor
 8002978:	2304      	movs	r3, #4
 800297a:	4a5a      	ldr	r2, [pc, #360]	@ (8002ae4 <_Z8hwEEPROMv+0x21c>)
 800297c:	2114      	movs	r1, #20
 800297e:	2001      	movs	r0, #1
 8002980:	f7fe f8d0 	bl	8000b24 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(1, 24, rangeSensor_1,	sizeof(rangeSensor_1));		// Range of sensor
 8002984:	2304      	movs	r3, #4
 8002986:	4a58      	ldr	r2, [pc, #352]	@ (8002ae8 <_Z8hwEEPROMv+0x220>)
 8002988:	2118      	movs	r1, #24
 800298a:	2001      	movs	r0, #1
 800298c:	f7fe f8ca 	bl	8000b24 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(1, 28, amplifier_11,	sizeof(amplifier_11));		// Amplifier 1 of sensor
 8002990:	2304      	movs	r3, #4
 8002992:	4a56      	ldr	r2, [pc, #344]	@ (8002aec <_Z8hwEEPROMv+0x224>)
 8002994:	211c      	movs	r1, #28
 8002996:	2001      	movs	r0, #1
 8002998:	f7fe f8c4 	bl	8000b24 <_Z11EEPROM_ReadttPht>
		stateEEPROM	= 3;												// S2 to stop of read
 800299c:	4b47      	ldr	r3, [pc, #284]	@ (8002abc <_Z8hwEEPROMv+0x1f4>)
 800299e:	2203      	movs	r2, #3
 80029a0:	701a      	strb	r2, [r3, #0]
		break;
 80029a2:	e086      	b.n	8002ab2 <_Z8hwEEPROMv+0x1ea>


	case 3:
		EEPROM_Read(1, 32, amplifier_21,	sizeof(amplifier_21));		// Amplifier 2 of sensor
 80029a4:	2304      	movs	r3, #4
 80029a6:	4a52      	ldr	r2, [pc, #328]	@ (8002af0 <_Z8hwEEPROMv+0x228>)
 80029a8:	2120      	movs	r1, #32
 80029aa:	2001      	movs	r0, #1
 80029ac:	f7fe f8ba 	bl	8000b24 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(1, 36, groundSensor_1,	sizeof(groundSensor_1));	// N of curve
 80029b0:	2304      	movs	r3, #4
 80029b2:	4a50      	ldr	r2, [pc, #320]	@ (8002af4 <_Z8hwEEPROMv+0x22c>)
 80029b4:	2124      	movs	r1, #36	@ 0x24
 80029b6:	2001      	movs	r0, #1
 80029b8:	f7fe f8b4 	bl	8000b24 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(1, 40, curveSensor_1,	sizeof(curveSensor_1));		// M of curve
 80029bc:	2304      	movs	r3, #4
 80029be:	4a4e      	ldr	r2, [pc, #312]	@ (8002af8 <_Z8hwEEPROMv+0x230>)
 80029c0:	2128      	movs	r1, #40	@ 0x28
 80029c2:	2001      	movs	r0, #1
 80029c4:	f7fe f8ae 	bl	8000b24 <_Z11EEPROM_ReadttPht>
		EEPROM_Read(1, 44, dateCalib_1,		sizeof(dateCalib_1));		// Date of calibration
 80029c8:	230a      	movs	r3, #10
 80029ca:	4a4c      	ldr	r2, [pc, #304]	@ (8002afc <_Z8hwEEPROMv+0x234>)
 80029cc:	212c      	movs	r1, #44	@ 0x2c
 80029ce:	2001      	movs	r0, #1
 80029d0:	f7fe f8a8 	bl	8000b24 <_Z11EEPROM_ReadttPht>
		stateEEPROM	= 4;
 80029d4:	4b39      	ldr	r3, [pc, #228]	@ (8002abc <_Z8hwEEPROMv+0x1f4>)
 80029d6:	2204      	movs	r2, #4
 80029d8:	701a      	strb	r2, [r3, #0]
		break;
 80029da:	e06a      	b.n	8002ab2 <_Z8hwEEPROMv+0x1ea>
	// S2 - CHECK ERRORS //
	///////////////////////

	case 4:

		groundAlphaB	= groundSensor_0[0] + (groundSensor_0[1] << 8);
 80029dc:	4b3d      	ldr	r3, [pc, #244]	@ (8002ad4 <_Z8hwEEPROMv+0x20c>)
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	461a      	mov	r2, r3
 80029e2:	4b3c      	ldr	r3, [pc, #240]	@ (8002ad4 <_Z8hwEEPROMv+0x20c>)
 80029e4:	785b      	ldrb	r3, [r3, #1]
 80029e6:	021b      	lsls	r3, r3, #8
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	4413      	add	r3, r2
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	4b44      	ldr	r3, [pc, #272]	@ (8002b00 <_Z8hwEEPROMv+0x238>)
 80029f0:	801a      	strh	r2, [r3, #0]
		curveAlphaB		= curveSensor_0[0] + (curveSensor_0[1] << 8);
 80029f2:	4b39      	ldr	r3, [pc, #228]	@ (8002ad8 <_Z8hwEEPROMv+0x210>)
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	461a      	mov	r2, r3
 80029f8:	4b37      	ldr	r3, [pc, #220]	@ (8002ad8 <_Z8hwEEPROMv+0x210>)
 80029fa:	785b      	ldrb	r3, [r3, #1]
 80029fc:	021b      	lsls	r3, r3, #8
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	4413      	add	r3, r2
 8002a02:	b29a      	uxth	r2, r3
 8002a04:	4b3f      	ldr	r3, [pc, #252]	@ (8002b04 <_Z8hwEEPROMv+0x23c>)
 8002a06:	801a      	strh	r2, [r3, #0]

		groundAlphaA	= groundSensor_1[0] + (groundSensor_1[1] << 8);
 8002a08:	4b3a      	ldr	r3, [pc, #232]	@ (8002af4 <_Z8hwEEPROMv+0x22c>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	4b39      	ldr	r3, [pc, #228]	@ (8002af4 <_Z8hwEEPROMv+0x22c>)
 8002a10:	785b      	ldrb	r3, [r3, #1]
 8002a12:	021b      	lsls	r3, r3, #8
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	4413      	add	r3, r2
 8002a18:	b29a      	uxth	r2, r3
 8002a1a:	4b3b      	ldr	r3, [pc, #236]	@ (8002b08 <_Z8hwEEPROMv+0x240>)
 8002a1c:	801a      	strh	r2, [r3, #0]
		curveAlphaA		= curveSensor_1[0] + (curveSensor_1[1] << 8);
 8002a1e:	4b36      	ldr	r3, [pc, #216]	@ (8002af8 <_Z8hwEEPROMv+0x230>)
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	461a      	mov	r2, r3
 8002a24:	4b34      	ldr	r3, [pc, #208]	@ (8002af8 <_Z8hwEEPROMv+0x230>)
 8002a26:	785b      	ldrb	r3, [r3, #1]
 8002a28:	021b      	lsls	r3, r3, #8
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	4413      	add	r3, r2
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	4b36      	ldr	r3, [pc, #216]	@ (8002b0c <_Z8hwEEPROMv+0x244>)
 8002a32:	801a      	strh	r2, [r3, #0]
		EEPROM_Write(1, 32, amplifier2_1, sizeof(amplifier2_0));
		EEPROM_Write(1, 36, groundSensor1, sizeof(groundSensor0));
		EEPROM_Write(1, 40, curveSensor1, sizeof(curveSensor0));
		EEPROM_Write(1, 44, dateCalib1, sizeof(dateCalib0));
		*/
		stateEEPROM	= 5;								// Pasa a S3
 8002a34:	4b21      	ldr	r3, [pc, #132]	@ (8002abc <_Z8hwEEPROMv+0x1f4>)
 8002a36:	2205      	movs	r2, #5
 8002a38:	701a      	strb	r2, [r3, #0]
		break;
 8002a3a:	e03a      	b.n	8002ab2 <_Z8hwEEPROMv+0x1ea>
	// S3 - STOP READING //
	///////////////////////

	case 5:
		uint8_t i;										// Inicia contador
		for (i = 0; i<sizeof(nameAlphaB) ; i++){		// Recorre caracter a caracter
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	71fb      	strb	r3, [r7, #7]
 8002a40:	e012      	b.n	8002a68 <_Z8hwEEPROMv+0x1a0>
			if ( nameAlphaB[i]	== nameSensor_0[i] ){	// Compara caracter ideal y caracter leido
 8002a42:	79fb      	ldrb	r3, [r7, #7]
 8002a44:	4a32      	ldr	r2, [pc, #200]	@ (8002b10 <_Z8hwEEPROMv+0x248>)
 8002a46:	5cd2      	ldrb	r2, [r2, r3]
 8002a48:	79fb      	ldrb	r3, [r7, #7]
 8002a4a:	491d      	ldr	r1, [pc, #116]	@ (8002ac0 <_Z8hwEEPROMv+0x1f8>)
 8002a4c:	5ccb      	ldrb	r3, [r1, r3]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d103      	bne.n	8002a5a <_Z8hwEEPROMv+0x192>
				errorHardware[4]	= 0;				// Si son iguales  no hay error
 8002a52:	4b30      	ldr	r3, [pc, #192]	@ (8002b14 <_Z8hwEEPROMv+0x24c>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	711a      	strb	r2, [r3, #4]
 8002a58:	e003      	b.n	8002a62 <_Z8hwEEPROMv+0x19a>
			}
			else{										// Si son distintos
				errorHardware[4]	= 1;				// Indica error
 8002a5a:	4b2e      	ldr	r3, [pc, #184]	@ (8002b14 <_Z8hwEEPROMv+0x24c>)
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	711a      	strb	r2, [r3, #4]
				break;									// Termina loop
 8002a60:	e005      	b.n	8002a6e <_Z8hwEEPROMv+0x1a6>
		for (i = 0; i<sizeof(nameAlphaB) ; i++){		// Recorre caracter a caracter
 8002a62:	79fb      	ldrb	r3, [r7, #7]
 8002a64:	3301      	adds	r3, #1
 8002a66:	71fb      	strb	r3, [r7, #7]
 8002a68:	79fb      	ldrb	r3, [r7, #7]
 8002a6a:	2b11      	cmp	r3, #17
 8002a6c:	d9e9      	bls.n	8002a42 <_Z8hwEEPROMv+0x17a>
			}
		}

		for (i = 0; i<sizeof(nameAlphaB) ; i++){		// Recorre caracter a caracter del valor ideal
 8002a6e:	2300      	movs	r3, #0
 8002a70:	71fb      	strb	r3, [r7, #7]
 8002a72:	e012      	b.n	8002a9a <_Z8hwEEPROMv+0x1d2>
			if ( nameAlphaB[i]	== nameSensor_0[i] ){	// Compara caracter ideal y caracter leido
 8002a74:	79fb      	ldrb	r3, [r7, #7]
 8002a76:	4a26      	ldr	r2, [pc, #152]	@ (8002b10 <_Z8hwEEPROMv+0x248>)
 8002a78:	5cd2      	ldrb	r2, [r2, r3]
 8002a7a:	79fb      	ldrb	r3, [r7, #7]
 8002a7c:	4910      	ldr	r1, [pc, #64]	@ (8002ac0 <_Z8hwEEPROMv+0x1f8>)
 8002a7e:	5ccb      	ldrb	r3, [r1, r3]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d103      	bne.n	8002a8c <_Z8hwEEPROMv+0x1c4>
				errorHardware[4]	= 0;				// Si son iguales no idnica error
 8002a84:	4b23      	ldr	r3, [pc, #140]	@ (8002b14 <_Z8hwEEPROMv+0x24c>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	711a      	strb	r2, [r3, #4]
 8002a8a:	e003      	b.n	8002a94 <_Z8hwEEPROMv+0x1cc>
			}
			else{										// Si son distintos
				errorHardware[4]	= 1;				// Indica error
 8002a8c:	4b21      	ldr	r3, [pc, #132]	@ (8002b14 <_Z8hwEEPROMv+0x24c>)
 8002a8e:	2201      	movs	r2, #1
 8002a90:	711a      	strb	r2, [r3, #4]
				break;									// Termina loop
 8002a92:	e005      	b.n	8002aa0 <_Z8hwEEPROMv+0x1d8>
		for (i = 0; i<sizeof(nameAlphaB) ; i++){		// Recorre caracter a caracter del valor ideal
 8002a94:	79fb      	ldrb	r3, [r7, #7]
 8002a96:	3301      	adds	r3, #1
 8002a98:	71fb      	strb	r3, [r7, #7]
 8002a9a:	79fb      	ldrb	r3, [r7, #7]
 8002a9c:	2b11      	cmp	r3, #17
 8002a9e:	d9e9      	bls.n	8002a74 <_Z8hwEEPROMv+0x1ac>
			}
		}
		stateEEPROM	= 6;
 8002aa0:	4b06      	ldr	r3, [pc, #24]	@ (8002abc <_Z8hwEEPROMv+0x1f4>)
 8002aa2:	2206      	movs	r2, #6
 8002aa4:	701a      	strb	r2, [r3, #0]
		break;
 8002aa6:	e004      	b.n	8002ab2 <_Z8hwEEPROMv+0x1ea>

	case 6:
		break;
	default:
		stateEEPROM	= 0;
 8002aa8:	4b04      	ldr	r3, [pc, #16]	@ (8002abc <_Z8hwEEPROMv+0x1f4>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	701a      	strb	r2, [r3, #0]
		break;
 8002aae:	e000      	b.n	8002ab2 <_Z8hwEEPROMv+0x1ea>
		break;
 8002ab0:	bf00      	nop
	}
}
 8002ab2:	bf00      	nop
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	200004ce 	.word	0x200004ce
 8002ac0:	20000460 	.word	0x20000460
 8002ac4:	20000474 	.word	0x20000474
 8002ac8:	20000478 	.word	0x20000478
 8002acc:	2000047c 	.word	0x2000047c
 8002ad0:	20000480 	.word	0x20000480
 8002ad4:	20000484 	.word	0x20000484
 8002ad8:	20000488 	.word	0x20000488
 8002adc:	2000048c 	.word	0x2000048c
 8002ae0:	20000498 	.word	0x20000498
 8002ae4:	200004ac 	.word	0x200004ac
 8002ae8:	200004b0 	.word	0x200004b0
 8002aec:	200004b4 	.word	0x200004b4
 8002af0:	200004b8 	.word	0x200004b8
 8002af4:	200004bc 	.word	0x200004bc
 8002af8:	200004c0 	.word	0x200004c0
 8002afc:	200004c4 	.word	0x200004c4
 8002b00:	2000045a 	.word	0x2000045a
 8002b04:	2000045c 	.word	0x2000045c
 8002b08:	20000456 	.word	0x20000456
 8002b0c:	20000458 	.word	0x20000458
 8002b10:	20000018 	.word	0x20000018
 8002b14:	200004dc 	.word	0x200004dc

08002b18 <_Z41__static_initialization_and_destruction_0ii>:
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d137      	bne.n	8002b98 <_Z41__static_initialization_and_destruction_0ii+0x80>
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d132      	bne.n	8002b98 <_Z41__static_initialization_and_destruction_0ii+0x80>
int limitBoton	= 400/superloop;	// 400 milisegundos en 100 microsegundos
 8002b32:	4b1c      	ldr	r3, [pc, #112]	@ (8002ba4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	461a      	mov	r2, r3
 8002b38:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8002b3c:	fb93 f3f2 	sdiv	r3, r3, r2
 8002b40:	4a19      	ldr	r2, [pc, #100]	@ (8002ba8 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8002b42:	6013      	str	r3, [r2, #0]
int limitSht31_measure	= 2000/superloop;		// Limite de espera entre operaciones
 8002b44:	4b17      	ldr	r3, [pc, #92]	@ (8002ba4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	461a      	mov	r2, r3
 8002b4a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002b4e:	fb93 f3f2 	sdiv	r3, r3, r2
 8002b52:	4a16      	ldr	r2, [pc, #88]	@ (8002bac <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8002b54:	6013      	str	r3, [r2, #0]
int limitSht31_i2c		= 50/superloop;			// Limite
 8002b56:	4b13      	ldr	r3, [pc, #76]	@ (8002ba4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	2332      	movs	r3, #50	@ 0x32
 8002b5e:	fb93 f3f2 	sdiv	r3, r3, r2
 8002b62:	4a13      	ldr	r2, [pc, #76]	@ (8002bb0 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8002b64:	6013      	str	r3, [r2, #0]
const int sampleAdc	= 100/superloop;			// Tiempo de medicion
 8002b66:	4b0f      	ldr	r3, [pc, #60]	@ (8002ba4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	2364      	movs	r3, #100	@ 0x64
 8002b6e:	fb93 f3f2 	sdiv	r3, r3, r2
 8002b72:	4a10      	ldr	r2, [pc, #64]	@ (8002bb4 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8002b74:	6013      	str	r3, [r2, #0]
const int limitAds_i2c = 20/superloop-1;		// Tiempo que espera respuesta
 8002b76:	4b0b      	ldr	r3, [pc, #44]	@ (8002ba4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	2314      	movs	r3, #20
 8002b7e:	fb93 f3f2 	sdiv	r3, r3, r2
 8002b82:	3b01      	subs	r3, #1
 8002b84:	4a0c      	ldr	r2, [pc, #48]	@ (8002bb8 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8002b86:	6013      	str	r3, [r2, #0]
int sampleAnalog	= 50/superloop;	// Frecuencia de muestreo
 8002b88:	4b06      	ldr	r3, [pc, #24]	@ (8002ba4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	2332      	movs	r3, #50	@ 0x32
 8002b90:	fb93 f3f2 	sdiv	r3, r3, r2
 8002b94:	4a09      	ldr	r2, [pc, #36]	@ (8002bbc <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8002b96:	6013      	str	r3, [r2, #0]
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr
 8002ba4:	20000395 	.word	0x20000395
 8002ba8:	20000404 	.word	0x20000404
 8002bac:	20000410 	.word	0x20000410
 8002bb0:	20000414 	.word	0x20000414
 8002bb4:	20000430 	.word	0x20000430
 8002bb8:	20000434 	.word	0x20000434
 8002bbc:	20000450 	.word	0x20000450

08002bc0 <_GLOBAL__sub_I_boton>:
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002bc8:	2001      	movs	r0, #1
 8002bca:	f7ff ffa5 	bl	8002b18 <_Z41__static_initialization_and_destruction_0ii>
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <_Z8hwOutputv>:
uint16_t limitUartGps	= 20000/superloop;


/***** OUTPUT	*****/

void hwOutput(){
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
	hwDisplay();
 8002bd4:	f000 f9ea 	bl	8002fac <_Z9hwDisplayv>
	//hwAlarms();
	hwLoraOut();
 8002bd8:	f000 f966 	bl	8002ea8 <_Z9hwLoraOutv>
	hwGpsOut();
 8002bdc:	f000 f802 	bl	8002be4 <_Z8hwGpsOutv>
}
 8002be0:	bf00      	nop
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <_Z8hwGpsOutv>:

/////////
// GPS //
/////////

void hwGpsOut(){
 8002be4:	b580      	push	{r7, lr}
 8002be6:	af00      	add	r7, sp, #0

	////////////
	// ENABLE //
	////////////

	switch ( stateUartGps ){
 8002be8:	4b9d      	ldr	r3, [pc, #628]	@ (8002e60 <_Z8hwGpsOutv+0x27c>)
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d03d      	beq.n	8002c6c <_Z8hwGpsOutv+0x88>
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	dc4a      	bgt.n	8002c8a <_Z8hwGpsOutv+0xa6>
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d002      	beq.n	8002bfe <_Z8hwGpsOutv+0x1a>
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d011      	beq.n	8002c20 <_Z8hwGpsOutv+0x3c>
 8002bfc:	e045      	b.n	8002c8a <_Z8hwGpsOutv+0xa6>
	/////////////////////////
	// S0 - WAIT AVAILABLE //
	/////////////////////////

	case 0:
		if ( availableGps ){										// Si
 8002bfe:	4b99      	ldr	r3, [pc, #612]	@ (8002e64 <_Z8hwGpsOutv+0x280>)
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d008      	beq.n	8002c18 <_Z8hwGpsOutv+0x34>
			HAL_UART_Receive_DMA(&huart5,	rxGps, sizeof(rxGps));	//
 8002c06:	2202      	movs	r2, #2
 8002c08:	4997      	ldr	r1, [pc, #604]	@ (8002e68 <_Z8hwGpsOutv+0x284>)
 8002c0a:	4898      	ldr	r0, [pc, #608]	@ (8002e6c <_Z8hwGpsOutv+0x288>)
 8002c0c:	f009 ff76 	bl	800cafc <HAL_UART_Receive_DMA>
			stateUartGps	= 1;									//
 8002c10:	4b93      	ldr	r3, [pc, #588]	@ (8002e60 <_Z8hwGpsOutv+0x27c>)
 8002c12:	2201      	movs	r2, #1
 8002c14:	701a      	strb	r2, [r3, #0]
		}
		else{														//
			stateUartGps	= 0;									//
		}
		break;
 8002c16:	e03c      	b.n	8002c92 <_Z8hwGpsOutv+0xae>
			stateUartGps	= 0;									//
 8002c18:	4b91      	ldr	r3, [pc, #580]	@ (8002e60 <_Z8hwGpsOutv+0x27c>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	701a      	strb	r2, [r3, #0]
		break;
 8002c1e:	e038      	b.n	8002c92 <_Z8hwGpsOutv+0xae>

	case 1:
		countUartGps++;
 8002c20:	4b93      	ldr	r3, [pc, #588]	@ (8002e70 <_Z8hwGpsOutv+0x28c>)
 8002c22:	881b      	ldrh	r3, [r3, #0]
 8002c24:	3301      	adds	r3, #1
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	4b91      	ldr	r3, [pc, #580]	@ (8002e70 <_Z8hwGpsOutv+0x28c>)
 8002c2a:	801a      	strh	r2, [r3, #0]

		if ( !availableGps ){
 8002c2c:	4b8d      	ldr	r3, [pc, #564]	@ (8002e64 <_Z8hwGpsOutv+0x280>)
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	f083 0301 	eor.w	r3, r3, #1
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d006      	beq.n	8002c48 <_Z8hwGpsOutv+0x64>
			countUartGps	= 0;
 8002c3a:	4b8d      	ldr	r3, [pc, #564]	@ (8002e70 <_Z8hwGpsOutv+0x28c>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	801a      	strh	r2, [r3, #0]
			stateUartGps	= 0;
 8002c40:	4b87      	ldr	r3, [pc, #540]	@ (8002e60 <_Z8hwGpsOutv+0x27c>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	701a      	strb	r2, [r3, #0]
			stateUartGps	= 2;
		}
		else{
			stateUartGps	= 1;
		}
		break;
 8002c46:	e024      	b.n	8002c92 <_Z8hwGpsOutv+0xae>
		else if ( (countUartGps >= limitUartGps || flagUartGps)){
 8002c48:	4b89      	ldr	r3, [pc, #548]	@ (8002e70 <_Z8hwGpsOutv+0x28c>)
 8002c4a:	881a      	ldrh	r2, [r3, #0]
 8002c4c:	4b89      	ldr	r3, [pc, #548]	@ (8002e74 <_Z8hwGpsOutv+0x290>)
 8002c4e:	881b      	ldrh	r3, [r3, #0]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d203      	bcs.n	8002c5c <_Z8hwGpsOutv+0x78>
 8002c54:	4b88      	ldr	r3, [pc, #544]	@ (8002e78 <_Z8hwGpsOutv+0x294>)
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d003      	beq.n	8002c64 <_Z8hwGpsOutv+0x80>
			stateUartGps	= 2;
 8002c5c:	4b80      	ldr	r3, [pc, #512]	@ (8002e60 <_Z8hwGpsOutv+0x27c>)
 8002c5e:	2202      	movs	r2, #2
 8002c60:	701a      	strb	r2, [r3, #0]
		break;
 8002c62:	e016      	b.n	8002c92 <_Z8hwGpsOutv+0xae>
			stateUartGps	= 1;
 8002c64:	4b7e      	ldr	r3, [pc, #504]	@ (8002e60 <_Z8hwGpsOutv+0x27c>)
 8002c66:	2201      	movs	r2, #1
 8002c68:	701a      	strb	r2, [r3, #0]
		break;
 8002c6a:	e012      	b.n	8002c92 <_Z8hwGpsOutv+0xae>

	case 2:
		flagUartGps		= 0;
 8002c6c:	4b82      	ldr	r3, [pc, #520]	@ (8002e78 <_Z8hwGpsOutv+0x294>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	701a      	strb	r2, [r3, #0]
		countUartGps	= 0;
 8002c72:	4b7f      	ldr	r3, [pc, #508]	@ (8002e70 <_Z8hwGpsOutv+0x28c>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart5,	rxGps, sizeof(rxGps));
 8002c78:	2202      	movs	r2, #2
 8002c7a:	497b      	ldr	r1, [pc, #492]	@ (8002e68 <_Z8hwGpsOutv+0x284>)
 8002c7c:	487b      	ldr	r0, [pc, #492]	@ (8002e6c <_Z8hwGpsOutv+0x288>)
 8002c7e:	f009 ff3d 	bl	800cafc <HAL_UART_Receive_DMA>
		stateUartGps	= 1;
 8002c82:	4b77      	ldr	r3, [pc, #476]	@ (8002e60 <_Z8hwGpsOutv+0x27c>)
 8002c84:	2201      	movs	r2, #1
 8002c86:	701a      	strb	r2, [r3, #0]
		break;
 8002c88:	e003      	b.n	8002c92 <_Z8hwGpsOutv+0xae>
	default:
		stateUartGps	= 0;
 8002c8a:	4b75      	ldr	r3, [pc, #468]	@ (8002e60 <_Z8hwGpsOutv+0x27c>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	701a      	strb	r2, [r3, #0]
		break;
 8002c90:	bf00      	nop

	/////////////
	// MESSAGE //
	/////////////

	switch ( stateHwGpsEnable ){
 8002c92:	4b7a      	ldr	r3, [pc, #488]	@ (8002e7c <_Z8hwGpsOutv+0x298>)
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	2b03      	cmp	r3, #3
 8002c98:	d869      	bhi.n	8002d6e <_Z8hwGpsOutv+0x18a>
 8002c9a:	a201      	add	r2, pc, #4	@ (adr r2, 8002ca0 <_Z8hwGpsOutv+0xbc>)
 8002c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ca0:	08002cb1 	.word	0x08002cb1
 8002ca4:	08002cdf 	.word	0x08002cdf
 8002ca8:	08002d13 	.word	0x08002d13
 8002cac:	08002d51 	.word	0x08002d51

		case 0:
			availableGps	= 0;
 8002cb0:	4b6c      	ldr	r3, [pc, #432]	@ (8002e64 <_Z8hwGpsOutv+0x280>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	701a      	strb	r2, [r3, #0]

			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	2101      	movs	r1, #1
 8002cba:	4871      	ldr	r0, [pc, #452]	@ (8002e80 <_Z8hwGpsOutv+0x29c>)
 8002cbc:	f005 fbf8 	bl	80084b0 <HAL_GPIO_WritePin>
			//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
			//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
			if ( enableGps ){
 8002cc0:	4b70      	ldr	r3, [pc, #448]	@ (8002e84 <_Z8hwGpsOutv+0x2a0>)
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d006      	beq.n	8002cd6 <_Z8hwGpsOutv+0xf2>
				HAL_UART_Init(&huart5);
 8002cc8:	4868      	ldr	r0, [pc, #416]	@ (8002e6c <_Z8hwGpsOutv+0x288>)
 8002cca:	f009 fe0f 	bl	800c8ec <HAL_UART_Init>
				stateHwGpsEnable	= 1;
 8002cce:	4b6b      	ldr	r3, [pc, #428]	@ (8002e7c <_Z8hwGpsOutv+0x298>)
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	701a      	strb	r2, [r3, #0]
			}
			else{
				stateHwGpsEnable	= 0;
			}
			break;
 8002cd4:	e04f      	b.n	8002d76 <_Z8hwGpsOutv+0x192>
				stateHwGpsEnable	= 0;
 8002cd6:	4b69      	ldr	r3, [pc, #420]	@ (8002e7c <_Z8hwGpsOutv+0x298>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	701a      	strb	r2, [r3, #0]
			break;
 8002cdc:	e04b      	b.n	8002d76 <_Z8hwGpsOutv+0x192>

		case 1:
			availableGps	= 0;
 8002cde:	4b61      	ldr	r3, [pc, #388]	@ (8002e64 <_Z8hwGpsOutv+0x280>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	701a      	strb	r2, [r3, #0]
			countGpsAvailable++;
 8002ce4:	4b68      	ldr	r3, [pc, #416]	@ (8002e88 <_Z8hwGpsOutv+0x2a4>)
 8002ce6:	881b      	ldrh	r3, [r3, #0]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	b29a      	uxth	r2, r3
 8002cec:	4b66      	ldr	r3, [pc, #408]	@ (8002e88 <_Z8hwGpsOutv+0x2a4>)
 8002cee:	801a      	strh	r2, [r3, #0]

			if ( countGpsAvailable >= limitGpsAvailable ) {
 8002cf0:	4b65      	ldr	r3, [pc, #404]	@ (8002e88 <_Z8hwGpsOutv+0x2a4>)
 8002cf2:	881a      	ldrh	r2, [r3, #0]
 8002cf4:	4b65      	ldr	r3, [pc, #404]	@ (8002e8c <_Z8hwGpsOutv+0x2a8>)
 8002cf6:	881b      	ldrh	r3, [r3, #0]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d306      	bcc.n	8002d0a <_Z8hwGpsOutv+0x126>
				countGpsAvailable	= 0;
 8002cfc:	4b62      	ldr	r3, [pc, #392]	@ (8002e88 <_Z8hwGpsOutv+0x2a4>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	801a      	strh	r2, [r3, #0]
				stateHwGpsEnable	= 2;
 8002d02:	4b5e      	ldr	r3, [pc, #376]	@ (8002e7c <_Z8hwGpsOutv+0x298>)
 8002d04:	2202      	movs	r2, #2
 8002d06:	701a      	strb	r2, [r3, #0]
			}
			else{
				stateHwGpsEnable	= 1;
			}
			break;
 8002d08:	e035      	b.n	8002d76 <_Z8hwGpsOutv+0x192>
				stateHwGpsEnable	= 1;
 8002d0a:	4b5c      	ldr	r3, [pc, #368]	@ (8002e7c <_Z8hwGpsOutv+0x298>)
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	701a      	strb	r2, [r3, #0]
			break;
 8002d10:	e031      	b.n	8002d76 <_Z8hwGpsOutv+0x192>

		case 2:
			availableGps	= 1;
 8002d12:	4b54      	ldr	r3, [pc, #336]	@ (8002e64 <_Z8hwGpsOutv+0x280>)
 8002d14:	2201      	movs	r2, #1
 8002d16:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 8002d18:	2201      	movs	r2, #1
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	4858      	ldr	r0, [pc, #352]	@ (8002e80 <_Z8hwGpsOutv+0x29c>)
 8002d1e:	f005 fbc7 	bl	80084b0 <HAL_GPIO_WritePin>
			countGpsAvailable++;
 8002d22:	4b59      	ldr	r3, [pc, #356]	@ (8002e88 <_Z8hwGpsOutv+0x2a4>)
 8002d24:	881b      	ldrh	r3, [r3, #0]
 8002d26:	3301      	adds	r3, #1
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	4b57      	ldr	r3, [pc, #348]	@ (8002e88 <_Z8hwGpsOutv+0x2a4>)
 8002d2c:	801a      	strh	r2, [r3, #0]

			if ( countGpsAvailable >= limitGpsAvailable ) {
 8002d2e:	4b56      	ldr	r3, [pc, #344]	@ (8002e88 <_Z8hwGpsOutv+0x2a4>)
 8002d30:	881a      	ldrh	r2, [r3, #0]
 8002d32:	4b56      	ldr	r3, [pc, #344]	@ (8002e8c <_Z8hwGpsOutv+0x2a8>)
 8002d34:	881b      	ldrh	r3, [r3, #0]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d306      	bcc.n	8002d48 <_Z8hwGpsOutv+0x164>
				countGpsAvailable	= 0;
 8002d3a:	4b53      	ldr	r3, [pc, #332]	@ (8002e88 <_Z8hwGpsOutv+0x2a4>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	801a      	strh	r2, [r3, #0]
				stateHwGpsEnable	= 3;
 8002d40:	4b4e      	ldr	r3, [pc, #312]	@ (8002e7c <_Z8hwGpsOutv+0x298>)
 8002d42:	2203      	movs	r2, #3
 8002d44:	701a      	strb	r2, [r3, #0]
			}
			else{
				stateHwGpsEnable	= 2;
			}
			break;
 8002d46:	e016      	b.n	8002d76 <_Z8hwGpsOutv+0x192>
				stateHwGpsEnable	= 2;
 8002d48:	4b4c      	ldr	r3, [pc, #304]	@ (8002e7c <_Z8hwGpsOutv+0x298>)
 8002d4a:	2202      	movs	r2, #2
 8002d4c:	701a      	strb	r2, [r3, #0]
			break;
 8002d4e:	e012      	b.n	8002d76 <_Z8hwGpsOutv+0x192>

		case 3:
			if ( enableGps ){
 8002d50:	4b4c      	ldr	r3, [pc, #304]	@ (8002e84 <_Z8hwGpsOutv+0x2a0>)
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d003      	beq.n	8002d60 <_Z8hwGpsOutv+0x17c>
				stateHwGpsEnable	= 3;
 8002d58:	4b48      	ldr	r3, [pc, #288]	@ (8002e7c <_Z8hwGpsOutv+0x298>)
 8002d5a:	2203      	movs	r2, #3
 8002d5c:	701a      	strb	r2, [r3, #0]
			else{

				HAL_UART_DeInit(&huart5);
				stateHwGpsEnable	= 0;
			}
			break;
 8002d5e:	e00a      	b.n	8002d76 <_Z8hwGpsOutv+0x192>
				HAL_UART_DeInit(&huart5);
 8002d60:	4842      	ldr	r0, [pc, #264]	@ (8002e6c <_Z8hwGpsOutv+0x288>)
 8002d62:	f009 fe11 	bl	800c988 <HAL_UART_DeInit>
				stateHwGpsEnable	= 0;
 8002d66:	4b45      	ldr	r3, [pc, #276]	@ (8002e7c <_Z8hwGpsOutv+0x298>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	701a      	strb	r2, [r3, #0]
			break;
 8002d6c:	e003      	b.n	8002d76 <_Z8hwGpsOutv+0x192>
		default:
			stateHwGpsEnable	= 0;
 8002d6e:	4b43      	ldr	r3, [pc, #268]	@ (8002e7c <_Z8hwGpsOutv+0x298>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	701a      	strb	r2, [r3, #0]
			break;
 8002d74:	bf00      	nop
		}

	switch( stateConfigGps ){
 8002d76:	4b46      	ldr	r3, [pc, #280]	@ (8002e90 <_Z8hwGpsOutv+0x2ac>)
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	2b0a      	cmp	r3, #10
 8002d7c:	d86d      	bhi.n	8002e5a <_Z8hwGpsOutv+0x276>
 8002d7e:	a201      	add	r2, pc, #4	@ (adr r2, 8002d84 <_Z8hwGpsOutv+0x1a0>)
 8002d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d84:	08002db1 	.word	0x08002db1
 8002d88:	08002dc9 	.word	0x08002dc9
 8002d8c:	08002ddb 	.word	0x08002ddb
 8002d90:	08002de3 	.word	0x08002de3
 8002d94:	08002df5 	.word	0x08002df5
 8002d98:	08002dfd 	.word	0x08002dfd
 8002d9c:	08002e0f 	.word	0x08002e0f
 8002da0:	08002e17 	.word	0x08002e17
 8002da4:	08002e29 	.word	0x08002e29
 8002da8:	08002e31 	.word	0x08002e31
 8002dac:	08002e43 	.word	0x08002e43
	case 0:
		if ( availableGps ){
 8002db0:	4b2c      	ldr	r3, [pc, #176]	@ (8002e64 <_Z8hwGpsOutv+0x280>)
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d003      	beq.n	8002dc0 <_Z8hwGpsOutv+0x1dc>
			//HAL_UART_Receive_DMA(&huart5,	rxGps, sizeof(rxGps));
			stateConfigGps	= 1;
 8002db8:	4b35      	ldr	r3, [pc, #212]	@ (8002e90 <_Z8hwGpsOutv+0x2ac>)
 8002dba:	2201      	movs	r2, #1
 8002dbc:	701a      	strb	r2, [r3, #0]
		}
		else{
			stateConfigGps	= 0;
		}
		break;
 8002dbe:	e04c      	b.n	8002e5a <_Z8hwGpsOutv+0x276>
			stateConfigGps	= 0;
 8002dc0:	4b33      	ldr	r3, [pc, #204]	@ (8002e90 <_Z8hwGpsOutv+0x2ac>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	701a      	strb	r2, [r3, #0]
		break;
 8002dc6:	e048      	b.n	8002e5a <_Z8hwGpsOutv+0x276>

	case 1:
		HAL_UART_Transmit_DMA(&huart5, commandUart, sizeof(commandUart) - 1);
 8002dc8:	2219      	movs	r2, #25
 8002dca:	4932      	ldr	r1, [pc, #200]	@ (8002e94 <_Z8hwGpsOutv+0x2b0>)
 8002dcc:	4827      	ldr	r0, [pc, #156]	@ (8002e6c <_Z8hwGpsOutv+0x288>)
 8002dce:	f009 fe19 	bl	800ca04 <HAL_UART_Transmit_DMA>
		stateConfigGps	= 2;
 8002dd2:	4b2f      	ldr	r3, [pc, #188]	@ (8002e90 <_Z8hwGpsOutv+0x2ac>)
 8002dd4:	2202      	movs	r2, #2
 8002dd6:	701a      	strb	r2, [r3, #0]
		break;
 8002dd8:	e03f      	b.n	8002e5a <_Z8hwGpsOutv+0x276>

	case 2:

		stateConfigGps	= 3;
 8002dda:	4b2d      	ldr	r3, [pc, #180]	@ (8002e90 <_Z8hwGpsOutv+0x2ac>)
 8002ddc:	2203      	movs	r2, #3
 8002dde:	701a      	strb	r2, [r3, #0]
		break;
 8002de0:	e03b      	b.n	8002e5a <_Z8hwGpsOutv+0x276>

	case 3:
		HAL_UART_Transmit_DMA(&huart5, commandUart3, sizeof(commandUart2) - 1);
 8002de2:	2219      	movs	r2, #25
 8002de4:	492c      	ldr	r1, [pc, #176]	@ (8002e98 <_Z8hwGpsOutv+0x2b4>)
 8002de6:	4821      	ldr	r0, [pc, #132]	@ (8002e6c <_Z8hwGpsOutv+0x288>)
 8002de8:	f009 fe0c 	bl	800ca04 <HAL_UART_Transmit_DMA>
		stateConfigGps	= 4;
 8002dec:	4b28      	ldr	r3, [pc, #160]	@ (8002e90 <_Z8hwGpsOutv+0x2ac>)
 8002dee:	2204      	movs	r2, #4
 8002df0:	701a      	strb	r2, [r3, #0]
		break;
 8002df2:	e032      	b.n	8002e5a <_Z8hwGpsOutv+0x276>

	case 4:
		//HAL_UART_Transmit_DMA(&huart5, commandUart4, sizeof(commandUart4) - 1);
		stateConfigGps	= 5;
 8002df4:	4b26      	ldr	r3, [pc, #152]	@ (8002e90 <_Z8hwGpsOutv+0x2ac>)
 8002df6:	2205      	movs	r2, #5
 8002df8:	701a      	strb	r2, [r3, #0]
		break;
 8002dfa:	e02e      	b.n	8002e5a <_Z8hwGpsOutv+0x276>

	case 5:
		HAL_UART_Transmit_DMA(&huart5, commandUart2, sizeof(commandUart3) - 1);
 8002dfc:	2219      	movs	r2, #25
 8002dfe:	4927      	ldr	r1, [pc, #156]	@ (8002e9c <_Z8hwGpsOutv+0x2b8>)
 8002e00:	481a      	ldr	r0, [pc, #104]	@ (8002e6c <_Z8hwGpsOutv+0x288>)
 8002e02:	f009 fdff 	bl	800ca04 <HAL_UART_Transmit_DMA>
		//HAL_UART_Transmit_DMA(&huart5, commandUart5, sizeof(commandUart5) - 1);
		stateConfigGps	= 6;
 8002e06:	4b22      	ldr	r3, [pc, #136]	@ (8002e90 <_Z8hwGpsOutv+0x2ac>)
 8002e08:	2206      	movs	r2, #6
 8002e0a:	701a      	strb	r2, [r3, #0]
		break;
 8002e0c:	e025      	b.n	8002e5a <_Z8hwGpsOutv+0x276>

	case 6:
		//HAL_UART_Transmit_DMA(&huart5, commandUart6, sizeof(commandUart6) - 1);
		stateConfigGps	= 7;
 8002e0e:	4b20      	ldr	r3, [pc, #128]	@ (8002e90 <_Z8hwGpsOutv+0x2ac>)
 8002e10:	2207      	movs	r2, #7
 8002e12:	701a      	strb	r2, [r3, #0]
		break;
 8002e14:	e021      	b.n	8002e5a <_Z8hwGpsOutv+0x276>

	case 7:
		HAL_UART_Transmit_DMA(&huart5, commandUart8, sizeof(commandUart8) - 1);
 8002e16:	2211      	movs	r2, #17
 8002e18:	4921      	ldr	r1, [pc, #132]	@ (8002ea0 <_Z8hwGpsOutv+0x2bc>)
 8002e1a:	4814      	ldr	r0, [pc, #80]	@ (8002e6c <_Z8hwGpsOutv+0x288>)
 8002e1c:	f009 fdf2 	bl	800ca04 <HAL_UART_Transmit_DMA>
		//HAL_UART_Transmit_DMA(&huart5, commandUart7, sizeof(commandUart7) - 1);
		stateConfigGps	= 8;
 8002e20:	4b1b      	ldr	r3, [pc, #108]	@ (8002e90 <_Z8hwGpsOutv+0x2ac>)
 8002e22:	2208      	movs	r2, #8
 8002e24:	701a      	strb	r2, [r3, #0]
		break;
 8002e26:	e018      	b.n	8002e5a <_Z8hwGpsOutv+0x276>

	case 8:

		stateConfigGps	= 9;
 8002e28:	4b19      	ldr	r3, [pc, #100]	@ (8002e90 <_Z8hwGpsOutv+0x2ac>)
 8002e2a:	2209      	movs	r2, #9
 8002e2c:	701a      	strb	r2, [r3, #0]
		break;
 8002e2e:	e014      	b.n	8002e5a <_Z8hwGpsOutv+0x276>

	case 9:
		HAL_UART_Transmit_DMA(&huart5, commandUart9, sizeof(commandUart9) - 1);
 8002e30:	220d      	movs	r2, #13
 8002e32:	491c      	ldr	r1, [pc, #112]	@ (8002ea4 <_Z8hwGpsOutv+0x2c0>)
 8002e34:	480d      	ldr	r0, [pc, #52]	@ (8002e6c <_Z8hwGpsOutv+0x288>)
 8002e36:	f009 fde5 	bl	800ca04 <HAL_UART_Transmit_DMA>
		stateConfigGps	= 10;
 8002e3a:	4b15      	ldr	r3, [pc, #84]	@ (8002e90 <_Z8hwGpsOutv+0x2ac>)
 8002e3c:	220a      	movs	r2, #10
 8002e3e:	701a      	strb	r2, [r3, #0]
		break;
 8002e40:	e00b      	b.n	8002e5a <_Z8hwGpsOutv+0x276>
	case 10:
		if ( enableGps ){
 8002e42:	4b10      	ldr	r3, [pc, #64]	@ (8002e84 <_Z8hwGpsOutv+0x2a0>)
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d003      	beq.n	8002e52 <_Z8hwGpsOutv+0x26e>
			stateConfigGps	= 10;
 8002e4a:	4b11      	ldr	r3, [pc, #68]	@ (8002e90 <_Z8hwGpsOutv+0x2ac>)
 8002e4c:	220a      	movs	r2, #10
 8002e4e:	701a      	strb	r2, [r3, #0]
		}
		else{
			stateConfigGps	= 0;
		}
		break;
 8002e50:	e002      	b.n	8002e58 <_Z8hwGpsOutv+0x274>
			stateConfigGps	= 0;
 8002e52:	4b0f      	ldr	r3, [pc, #60]	@ (8002e90 <_Z8hwGpsOutv+0x2ac>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	701a      	strb	r2, [r3, #0]
		break;
 8002e58:	bf00      	nop
	}
}
 8002e5a:	bf00      	nop
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	200004f5 	.word	0x200004f5
 8002e64:	200004e4 	.word	0x200004e4
 8002e68:	20000adc 	.word	0x20000adc
 8002e6c:	2000083c 	.word	0x2000083c
 8002e70:	200004f6 	.word	0x200004f6
 8002e74:	200004f8 	.word	0x200004f8
 8002e78:	200004ec 	.word	0x200004ec
 8002e7c:	200004ea 	.word	0x200004ea
 8002e80:	48000c00 	.word	0x48000c00
 8002e84:	20000394 	.word	0x20000394
 8002e88:	200004e6 	.word	0x200004e6
 8002e8c:	200004e8 	.word	0x200004e8
 8002e90:	200004eb 	.word	0x200004eb
 8002e94:	2000002c 	.word	0x2000002c
 8002e98:	20000064 	.word	0x20000064
 8002e9c:	20000048 	.word	0x20000048
 8002ea0:	20000080 	.word	0x20000080
 8002ea4:	20000094 	.word	0x20000094

08002ea8 <_Z9hwLoraOutv>:

//////////
// LORA //
//////////

void hwLoraOut(){
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	af00      	add	r7, sp, #0
	 *
	 * Transmite un comando por hardware
	 *
	 */

	if ( flagTxLora ){													// Si hay una señal de transmision
 8002eac:	4b33      	ldr	r3, [pc, #204]	@ (8002f7c <_Z9hwLoraOutv+0xd4>)
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d012      	beq.n	8002eda <_Z9hwLoraOutv+0x32>
		flagTxLora	= 0;												// Reinicia señal
 8002eb4:	4b31      	ldr	r3, [pc, #196]	@ (8002f7c <_Z9hwLoraOutv+0xd4>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_DMA(&huart4, loraTxCommand0, sizeTxCommand0);	// Transmite por DMA para no estancar procesamiento
 8002eba:	4b31      	ldr	r3, [pc, #196]	@ (8002f80 <_Z9hwLoraOutv+0xd8>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a31      	ldr	r2, [pc, #196]	@ (8002f84 <_Z9hwLoraOutv+0xdc>)
 8002ec0:	7812      	ldrb	r2, [r2, #0]
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	4830      	ldr	r0, [pc, #192]	@ (8002f88 <_Z9hwLoraOutv+0xe0>)
 8002ec6:	f009 fd9d 	bl	800ca04 <HAL_UART_Transmit_DMA>
		HAL_UART_Receive_DMA(&huart4, rxLora, sizeof(rxLora));			// Inicia recepcion por DMA
 8002eca:	2201      	movs	r2, #1
 8002ecc:	492f      	ldr	r1, [pc, #188]	@ (8002f8c <_Z9hwLoraOutv+0xe4>)
 8002ece:	482e      	ldr	r0, [pc, #184]	@ (8002f88 <_Z9hwLoraOutv+0xe0>)
 8002ed0:	f009 fe14 	bl	800cafc <HAL_UART_Receive_DMA>
		flagUartGps	= 1;
 8002ed4:	4b2e      	ldr	r3, [pc, #184]	@ (8002f90 <_Z9hwLoraOutv+0xe8>)
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	701a      	strb	r2, [r3, #0]
	 * S0: Espera 500ms, indica que esta deshabilitado
	 * S1: Indica que esta deshabiltiado, espera señal de RESET
	 *
	 */

	switch ( stateResetHwLora ){
 8002eda:	4b2e      	ldr	r3, [pc, #184]	@ (8002f94 <_Z9hwLoraOutv+0xec>)
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d002      	beq.n	8002ee8 <_Z9hwLoraOutv+0x40>
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d020      	beq.n	8002f28 <_Z9hwLoraOutv+0x80>
 8002ee6:	e042      	b.n	8002f6e <_Z9hwLoraOutv+0xc6>
	// S0 - DISABLE //
	//////////////////

	case 0:

		countResetHwLora++;										// Suma 1 al contador
 8002ee8:	4b2b      	ldr	r3, [pc, #172]	@ (8002f98 <_Z9hwLoraOutv+0xf0>)
 8002eea:	881b      	ldrh	r3, [r3, #0]
 8002eec:	3301      	adds	r3, #1
 8002eee:	b29a      	uxth	r2, r3
 8002ef0:	4b29      	ldr	r3, [pc, #164]	@ (8002f98 <_Z9hwLoraOutv+0xf0>)
 8002ef2:	801a      	strh	r2, [r3, #0]
		flagEnableHwLora	= 0;								// Indica que el chip esta deshabilitado
 8002ef4:	4b29      	ldr	r3, [pc, #164]	@ (8002f9c <_Z9hwLoraOutv+0xf4>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);	// Pin en RESET
 8002efa:	2200      	movs	r2, #0
 8002efc:	2104      	movs	r1, #4
 8002efe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f02:	f005 fad5 	bl	80084b0 <HAL_GPIO_WritePin>

		if ( countResetHwLora >= resetHwLora ){					// Si pasa el limite de reset
 8002f06:	4b24      	ldr	r3, [pc, #144]	@ (8002f98 <_Z9hwLoraOutv+0xf0>)
 8002f08:	881a      	ldrh	r2, [r3, #0]
 8002f0a:	4b25      	ldr	r3, [pc, #148]	@ (8002fa0 <_Z9hwLoraOutv+0xf8>)
 8002f0c:	881b      	ldrh	r3, [r3, #0]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d306      	bcc.n	8002f20 <_Z9hwLoraOutv+0x78>
			countResetHwLora	= 0;							// Reinicia contador
 8002f12:	4b21      	ldr	r3, [pc, #132]	@ (8002f98 <_Z9hwLoraOutv+0xf0>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	801a      	strh	r2, [r3, #0]
			stateResetHwLora	= 1;							// Pasa a S1
 8002f18:	4b1e      	ldr	r3, [pc, #120]	@ (8002f94 <_Z9hwLoraOutv+0xec>)
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	701a      	strb	r2, [r3, #0]
		}
		else{													// Si no
			stateResetHwLora	= 0;							// Espera en S0
		}
		break;
 8002f1e:	e02a      	b.n	8002f76 <_Z9hwLoraOutv+0xce>
			stateResetHwLora	= 0;							// Espera en S0
 8002f20:	4b1c      	ldr	r3, [pc, #112]	@ (8002f94 <_Z9hwLoraOutv+0xec>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	701a      	strb	r2, [r3, #0]
		break;
 8002f26:	e026      	b.n	8002f76 <_Z9hwLoraOutv+0xce>
	/////////////////
	// S1 - ENABLE //
	/////////////////

	case 1:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);	// Pin en SET
 8002f28:	2201      	movs	r2, #1
 8002f2a:	2104      	movs	r1, #4
 8002f2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f30:	f005 fabe 	bl	80084b0 <HAL_GPIO_WritePin>
		flagEnableHwLora	= 1;							// Indica que el chip esta habilitado
 8002f34:	4b19      	ldr	r3, [pc, #100]	@ (8002f9c <_Z9hwLoraOutv+0xf4>)
 8002f36:	2201      	movs	r2, #1
 8002f38:	701a      	strb	r2, [r3, #0]

		if ( flagResetHwLora ){								// Si se da la señal de reinicio
 8002f3a:	4b1a      	ldr	r3, [pc, #104]	@ (8002fa4 <_Z9hwLoraOutv+0xfc>)
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d011      	beq.n	8002f66 <_Z9hwLoraOutv+0xbe>
			flagResetHwLora		= 0;						// Apaga señal
 8002f42:	4b18      	ldr	r3, [pc, #96]	@ (8002fa4 <_Z9hwLoraOutv+0xfc>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_DMA(&huart4, rxLora, sizeof(rxLora));
 8002f48:	2201      	movs	r2, #1
 8002f4a:	4910      	ldr	r1, [pc, #64]	@ (8002f8c <_Z9hwLoraOutv+0xe4>)
 8002f4c:	480e      	ldr	r0, [pc, #56]	@ (8002f88 <_Z9hwLoraOutv+0xe0>)
 8002f4e:	f009 fdd5 	bl	800cafc <HAL_UART_Receive_DMA>
			countResetHwLora2++;
 8002f52:	4b15      	ldr	r3, [pc, #84]	@ (8002fa8 <_Z9hwLoraOutv+0x100>)
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	3301      	adds	r3, #1
 8002f58:	b2da      	uxtb	r2, r3
 8002f5a:	4b13      	ldr	r3, [pc, #76]	@ (8002fa8 <_Z9hwLoraOutv+0x100>)
 8002f5c:	701a      	strb	r2, [r3, #0]
			stateResetHwLora	= 0;						// Pasa  S0
 8002f5e:	4b0d      	ldr	r3, [pc, #52]	@ (8002f94 <_Z9hwLoraOutv+0xec>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	701a      	strb	r2, [r3, #0]
		}
		else{												// Si no
			stateResetHwLora	= 1;						// Espera en S1
		}
		break;
 8002f64:	e007      	b.n	8002f76 <_Z9hwLoraOutv+0xce>
			stateResetHwLora	= 1;						// Espera en S1
 8002f66:	4b0b      	ldr	r3, [pc, #44]	@ (8002f94 <_Z9hwLoraOutv+0xec>)
 8002f68:	2201      	movs	r2, #1
 8002f6a:	701a      	strb	r2, [r3, #0]
		break;
 8002f6c:	e003      	b.n	8002f76 <_Z9hwLoraOutv+0xce>

	default:
		stateResetHwLora	= 0;
 8002f6e:	4b09      	ldr	r3, [pc, #36]	@ (8002f94 <_Z9hwLoraOutv+0xec>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	701a      	strb	r2, [r3, #0]
		break;
 8002f74:	bf00      	nop

	}
}
 8002f76:	bf00      	nop
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	200004ed 	.word	0x200004ed
 8002f80:	20001174 	.word	0x20001174
 8002f84:	20001178 	.word	0x20001178
 8002f88:	200007b4 	.word	0x200007b4
 8002f8c:	20000aec 	.word	0x20000aec
 8002f90:	200004ec 	.word	0x200004ec
 8002f94:	200004ee 	.word	0x200004ee
 8002f98:	200004f0 	.word	0x200004f0
 8002f9c:	200004ef 	.word	0x200004ef
 8002fa0:	200004f2 	.word	0x200004f2
 8002fa4:	2000053a 	.word	0x2000053a
 8002fa8:	200004f4 	.word	0x200004f4

08002fac <_Z9hwDisplayv>:
 *
 *	Accion sobre leds
 *
 */

void hwDisplay(){
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0

	/////////////////
	// FIRST DIGIT //
	/////////////////

	if ( displayPhy.firstNumber() ){
 8002fb0:	486e      	ldr	r0, [pc, #440]	@ (800316c <_Z9hwDisplayv+0x1c0>)
 8002fb2:	f7fd fd0d 	bl	80009d0 <_ZN15displayPhysical11firstNumberEv>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d005      	beq.n	8002fc8 <_Z9hwDisplayv+0x1c>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_SET);
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	2101      	movs	r1, #1
 8002fc0:	486b      	ldr	r0, [pc, #428]	@ (8003170 <_Z9hwDisplayv+0x1c4>)
 8002fc2:	f005 fa75 	bl	80084b0 <HAL_GPIO_WritePin>
 8002fc6:	e004      	b.n	8002fd2 <_Z9hwDisplayv+0x26>
	}
	else{
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_RESET);
 8002fc8:	2200      	movs	r2, #0
 8002fca:	2101      	movs	r1, #1
 8002fcc:	4868      	ldr	r0, [pc, #416]	@ (8003170 <_Z9hwDisplayv+0x1c4>)
 8002fce:	f005 fa6f 	bl	80084b0 <HAL_GPIO_WritePin>

	//////////////////
	// SECOND DIGIT //
	//////////////////

	if ( displayPhy.secondNumber() ){
 8002fd2:	4866      	ldr	r0, [pc, #408]	@ (800316c <_Z9hwDisplayv+0x1c0>)
 8002fd4:	f7fd fd08 	bl	80009e8 <_ZN15displayPhysical12secondNumberEv>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d005      	beq.n	8002fea <_Z9hwDisplayv+0x3e>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 8002fde:	2201      	movs	r2, #1
 8002fe0:	2102      	movs	r1, #2
 8002fe2:	4863      	ldr	r0, [pc, #396]	@ (8003170 <_Z9hwDisplayv+0x1c4>)
 8002fe4:	f005 fa64 	bl	80084b0 <HAL_GPIO_WritePin>
 8002fe8:	e004      	b.n	8002ff4 <_Z9hwDisplayv+0x48>
	}
	else{
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8002fea:	2200      	movs	r2, #0
 8002fec:	2102      	movs	r1, #2
 8002fee:	4860      	ldr	r0, [pc, #384]	@ (8003170 <_Z9hwDisplayv+0x1c4>)
 8002ff0:	f005 fa5e 	bl	80084b0 <HAL_GPIO_WritePin>

	/////////////////
	// THIRD DIGIT //
	/////////////////

	if ( displayPhy.thirdNumber() ){
 8002ff4:	485d      	ldr	r0, [pc, #372]	@ (800316c <_Z9hwDisplayv+0x1c0>)
 8002ff6:	f7fd fd03 	bl	8000a00 <_ZN15displayPhysical11thirdNumberEv>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d005      	beq.n	800300c <_Z9hwDisplayv+0x60>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET);
 8003000:	2201      	movs	r2, #1
 8003002:	2104      	movs	r1, #4
 8003004:	485a      	ldr	r0, [pc, #360]	@ (8003170 <_Z9hwDisplayv+0x1c4>)
 8003006:	f005 fa53 	bl	80084b0 <HAL_GPIO_WritePin>
 800300a:	e004      	b.n	8003016 <_Z9hwDisplayv+0x6a>
	}
	else{
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 800300c:	2200      	movs	r2, #0
 800300e:	2104      	movs	r1, #4
 8003010:	4857      	ldr	r0, [pc, #348]	@ (8003170 <_Z9hwDisplayv+0x1c4>)
 8003012:	f005 fa4d 	bl	80084b0 <HAL_GPIO_WritePin>

	//////////////////
	// FOURTH DIGIT //
	//////////////////

	if ( displayPhy.fourthNumber() ){
 8003016:	4855      	ldr	r0, [pc, #340]	@ (800316c <_Z9hwDisplayv+0x1c0>)
 8003018:	f7fd fcfe 	bl	8000a18 <_ZN15displayPhysical12fourthNumberEv>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d005      	beq.n	800302e <_Z9hwDisplayv+0x82>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8003022:	2201      	movs	r2, #1
 8003024:	2108      	movs	r1, #8
 8003026:	4852      	ldr	r0, [pc, #328]	@ (8003170 <_Z9hwDisplayv+0x1c4>)
 8003028:	f005 fa42 	bl	80084b0 <HAL_GPIO_WritePin>
 800302c:	e004      	b.n	8003038 <_Z9hwDisplayv+0x8c>
	}
	else{
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 800302e:	2200      	movs	r2, #0
 8003030:	2108      	movs	r1, #8
 8003032:	484f      	ldr	r0, [pc, #316]	@ (8003170 <_Z9hwDisplayv+0x1c4>)
 8003034:	f005 fa3c 	bl	80084b0 <HAL_GPIO_WritePin>

	///////////
	// A LED //
	///////////

	if ( displayPhy.aLed() ){
 8003038:	484c      	ldr	r0, [pc, #304]	@ (800316c <_Z9hwDisplayv+0x1c0>)
 800303a:	f7fd fcf9 	bl	8000a30 <_ZN15displayPhysical4aLedEv>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d006      	beq.n	8003052 <_Z9hwDisplayv+0xa6>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8,  GPIO_PIN_SET);
 8003044:	2201      	movs	r2, #1
 8003046:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800304a:	484a      	ldr	r0, [pc, #296]	@ (8003174 <_Z9hwDisplayv+0x1c8>)
 800304c:	f005 fa30 	bl	80084b0 <HAL_GPIO_WritePin>
 8003050:	e005      	b.n	800305e <_Z9hwDisplayv+0xb2>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8,  GPIO_PIN_RESET);
 8003052:	2200      	movs	r2, #0
 8003054:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003058:	4846      	ldr	r0, [pc, #280]	@ (8003174 <_Z9hwDisplayv+0x1c8>)
 800305a:	f005 fa29 	bl	80084b0 <HAL_GPIO_WritePin>

	///////////
	// B LED //
	///////////

	if ( displayPhy.bLed() ){
 800305e:	4843      	ldr	r0, [pc, #268]	@ (800316c <_Z9hwDisplayv+0x1c0>)
 8003060:	f7fd fcf2 	bl	8000a48 <_ZN15displayPhysical4bLedEv>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d006      	beq.n	8003078 <_Z9hwDisplayv+0xcc>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9,  GPIO_PIN_SET);
 800306a:	2201      	movs	r2, #1
 800306c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003070:	4840      	ldr	r0, [pc, #256]	@ (8003174 <_Z9hwDisplayv+0x1c8>)
 8003072:	f005 fa1d 	bl	80084b0 <HAL_GPIO_WritePin>
 8003076:	e005      	b.n	8003084 <_Z9hwDisplayv+0xd8>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9,  GPIO_PIN_RESET);
 8003078:	2200      	movs	r2, #0
 800307a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800307e:	483d      	ldr	r0, [pc, #244]	@ (8003174 <_Z9hwDisplayv+0x1c8>)
 8003080:	f005 fa16 	bl	80084b0 <HAL_GPIO_WritePin>

	///////////
	// C LED //
	///////////

	if ( displayPhy.cLed() ){
 8003084:	4839      	ldr	r0, [pc, #228]	@ (800316c <_Z9hwDisplayv+0x1c0>)
 8003086:	f7fd fceb 	bl	8000a60 <_ZN15displayPhysical4cLedEv>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d006      	beq.n	800309e <_Z9hwDisplayv+0xf2>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8003090:	2201      	movs	r2, #1
 8003092:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003096:	4837      	ldr	r0, [pc, #220]	@ (8003174 <_Z9hwDisplayv+0x1c8>)
 8003098:	f005 fa0a 	bl	80084b0 <HAL_GPIO_WritePin>
 800309c:	e005      	b.n	80030aa <_Z9hwDisplayv+0xfe>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 800309e:	2200      	movs	r2, #0
 80030a0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80030a4:	4833      	ldr	r0, [pc, #204]	@ (8003174 <_Z9hwDisplayv+0x1c8>)
 80030a6:	f005 fa03 	bl	80084b0 <HAL_GPIO_WritePin>

	///////////
	// D LED //
	///////////

	if ( displayPhy.dLed() ){
 80030aa:	4830      	ldr	r0, [pc, #192]	@ (800316c <_Z9hwDisplayv+0x1c0>)
 80030ac:	f7fd fce4 	bl	8000a78 <_ZN15displayPhysical4dLedEv>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d006      	beq.n	80030c4 <_Z9hwDisplayv+0x118>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 80030b6:	2201      	movs	r2, #1
 80030b8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80030bc:	482d      	ldr	r0, [pc, #180]	@ (8003174 <_Z9hwDisplayv+0x1c8>)
 80030be:	f005 f9f7 	bl	80084b0 <HAL_GPIO_WritePin>
 80030c2:	e005      	b.n	80030d0 <_Z9hwDisplayv+0x124>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 80030c4:	2200      	movs	r2, #0
 80030c6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80030ca:	482a      	ldr	r0, [pc, #168]	@ (8003174 <_Z9hwDisplayv+0x1c8>)
 80030cc:	f005 f9f0 	bl	80084b0 <HAL_GPIO_WritePin>

	///////////
	// E LED //
	///////////

	if ( displayPhy.eLed() ){
 80030d0:	4826      	ldr	r0, [pc, #152]	@ (800316c <_Z9hwDisplayv+0x1c0>)
 80030d2:	f7fd fcdd 	bl	8000a90 <_ZN15displayPhysical4eLedEv>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d006      	beq.n	80030ea <_Z9hwDisplayv+0x13e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80030dc:	2201      	movs	r2, #1
 80030de:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80030e2:	4824      	ldr	r0, [pc, #144]	@ (8003174 <_Z9hwDisplayv+0x1c8>)
 80030e4:	f005 f9e4 	bl	80084b0 <HAL_GPIO_WritePin>
 80030e8:	e005      	b.n	80030f6 <_Z9hwDisplayv+0x14a>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80030ea:	2200      	movs	r2, #0
 80030ec:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80030f0:	4820      	ldr	r0, [pc, #128]	@ (8003174 <_Z9hwDisplayv+0x1c8>)
 80030f2:	f005 f9dd 	bl	80084b0 <HAL_GPIO_WritePin>

	///////////
	// F LED //
	///////////

	if ( displayPhy.fLed() ){
 80030f6:	481d      	ldr	r0, [pc, #116]	@ (800316c <_Z9hwDisplayv+0x1c0>)
 80030f8:	f7fd fcd6 	bl	8000aa8 <_ZN15displayPhysical4fLedEv>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d006      	beq.n	8003110 <_Z9hwDisplayv+0x164>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8003102:	2201      	movs	r2, #1
 8003104:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003108:	481a      	ldr	r0, [pc, #104]	@ (8003174 <_Z9hwDisplayv+0x1c8>)
 800310a:	f005 f9d1 	bl	80084b0 <HAL_GPIO_WritePin>
 800310e:	e005      	b.n	800311c <_Z9hwDisplayv+0x170>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8003110:	2200      	movs	r2, #0
 8003112:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003116:	4817      	ldr	r0, [pc, #92]	@ (8003174 <_Z9hwDisplayv+0x1c8>)
 8003118:	f005 f9ca 	bl	80084b0 <HAL_GPIO_WritePin>

	///////////
	// G LED //
	///////////

	if ( displayPhy.gLed() ){
 800311c:	4813      	ldr	r0, [pc, #76]	@ (800316c <_Z9hwDisplayv+0x1c0>)
 800311e:	f7fd fccf 	bl	8000ac0 <_ZN15displayPhysical4gLedEv>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d006      	beq.n	8003136 <_Z9hwDisplayv+0x18a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8003128:	2201      	movs	r2, #1
 800312a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800312e:	4811      	ldr	r0, [pc, #68]	@ (8003174 <_Z9hwDisplayv+0x1c8>)
 8003130:	f005 f9be 	bl	80084b0 <HAL_GPIO_WritePin>
 8003134:	e005      	b.n	8003142 <_Z9hwDisplayv+0x196>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8003136:	2200      	movs	r2, #0
 8003138:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800313c:	480d      	ldr	r0, [pc, #52]	@ (8003174 <_Z9hwDisplayv+0x1c8>)
 800313e:	f005 f9b7 	bl	80084b0 <HAL_GPIO_WritePin>

	////////////
	// DP LED //
	////////////

	if ( displayPhy.dpLed() ){
 8003142:	480a      	ldr	r0, [pc, #40]	@ (800316c <_Z9hwDisplayv+0x1c0>)
 8003144:	f7fd fcc8 	bl	8000ad8 <_ZN15displayPhysical5dpLedEv>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d006      	beq.n	800315c <_Z9hwDisplayv+0x1b0>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 800314e:	2201      	movs	r2, #1
 8003150:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003154:	4807      	ldr	r0, [pc, #28]	@ (8003174 <_Z9hwDisplayv+0x1c8>)
 8003156:	f005 f9ab 	bl	80084b0 <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
	}
}
 800315a:	e005      	b.n	8003168 <_Z9hwDisplayv+0x1bc>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 800315c:	2200      	movs	r2, #0
 800315e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003162:	4804      	ldr	r0, [pc, #16]	@ (8003174 <_Z9hwDisplayv+0x1c8>)
 8003164:	f005 f9a4 	bl	80084b0 <HAL_GPIO_WritePin>
}
 8003168:	bf00      	nop
 800316a:	bd80      	pop	{r7, pc}
 800316c:	20001098 	.word	0x20001098
 8003170:	48001000 	.word	0x48001000
 8003174:	48000c00 	.word	0x48000c00

08003178 <_Z41__static_initialization_and_destruction_0ii>:
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2b01      	cmp	r3, #1
 8003186:	d122      	bne.n	80031ce <_Z41__static_initialization_and_destruction_0ii+0x56>
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800318e:	4293      	cmp	r3, r2
 8003190:	d11d      	bne.n	80031ce <_Z41__static_initialization_and_destruction_0ii+0x56>
uint16_t limitGpsAvailable	= 5000/superloop;
 8003192:	4b12      	ldr	r3, [pc, #72]	@ (80031dc <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	461a      	mov	r2, r3
 8003198:	f241 3388 	movw	r3, #5000	@ 0x1388
 800319c:	fb93 f3f2 	sdiv	r3, r3, r2
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	4b0f      	ldr	r3, [pc, #60]	@ (80031e0 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80031a4:	801a      	strh	r2, [r3, #0]
uint16_t resetHwLora		= 500/superloop;	// Tiempo que deshabilita chip
 80031a6:	4b0d      	ldr	r3, [pc, #52]	@ (80031dc <_Z41__static_initialization_and_destruction_0ii+0x64>)
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	461a      	mov	r2, r3
 80031ac:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80031b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80031b4:	b29a      	uxth	r2, r3
 80031b6:	4b0b      	ldr	r3, [pc, #44]	@ (80031e4 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 80031b8:	801a      	strh	r2, [r3, #0]
uint16_t limitUartGps	= 20000/superloop;
 80031ba:	4b08      	ldr	r3, [pc, #32]	@ (80031dc <_Z41__static_initialization_and_destruction_0ii+0x64>)
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	461a      	mov	r2, r3
 80031c0:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80031c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80031c8:	b29a      	uxth	r2, r3
 80031ca:	4b07      	ldr	r3, [pc, #28]	@ (80031e8 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 80031cc:	801a      	strh	r2, [r3, #0]
}
 80031ce:	bf00      	nop
 80031d0:	370c      	adds	r7, #12
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	20000395 	.word	0x20000395
 80031e0:	200004e8 	.word	0x200004e8
 80031e4:	200004f2 	.word	0x200004f2
 80031e8:	200004f8 	.word	0x200004f8

080031ec <_GLOBAL__sub_I_availableGps>:
 80031ec:	b580      	push	{r7, lr}
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80031f4:	2001      	movs	r0, #1
 80031f6:	f7ff ffbf 	bl	8003178 <_Z41__static_initialization_and_destruction_0ii>
 80031fa:	bd80      	pop	{r7, pc}

080031fc <_Z9linkInputv>:
uint16_t limitBat	= 5000/superloop;	// Tiempo que la bateria se considera en estado fijo
uint16_t countBat;						// Contador bateria

/***** INPUT *****/

void linkInput(){
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
	linkInGps();
 8003200:	f000 f94c 	bl	800349c <_Z9linkInGpsv>
	linkInLora();
 8003204:	f000 f8cc 	bl	80033a0 <_Z10linkInLorav>
	linkBoton();
 8003208:	f000 fb6a 	bl	80038e0 <_Z9linkBotonv>
	linkAnalog();
 800320c:	f000 fc16 	bl	8003a3c <_Z10linkAnalogv>
	linkBattery();
 8003210:	f000 f802 	bl	8003218 <_Z11linkBatteryv>
}
 8003214:	bf00      	nop
 8003216:	bd80      	pop	{r7, pc}

08003218 <_Z11linkBatteryv>:
 * Output:
 * 		errorHardware[6]
 *
 */

void linkBattery(){
 8003218:	b480      	push	{r7}
 800321a:	af00      	add	r7, sp, #0

	batScaled = battery *510/10000;		// Escalamiento de bateria
 800321c:	4b58      	ldr	r3, [pc, #352]	@ (8003380 <_Z11linkBatteryv+0x168>)
 800321e:	881b      	ldrh	r3, [r3, #0]
 8003220:	461a      	mov	r2, r3
 8003222:	4613      	mov	r3, r2
 8003224:	021b      	lsls	r3, r3, #8
 8003226:	1a9b      	subs	r3, r3, r2
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	4a56      	ldr	r2, [pc, #344]	@ (8003384 <_Z11linkBatteryv+0x16c>)
 800322c:	fb82 1203 	smull	r1, r2, r2, r3
 8003230:	1312      	asrs	r2, r2, #12
 8003232:	17db      	asrs	r3, r3, #31
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	4a54      	ldr	r2, [pc, #336]	@ (8003388 <_Z11linkBatteryv+0x170>)
 8003238:	6013      	str	r3, [r2, #0]

	switch ( stateBattery ){
 800323a:	4b54      	ldr	r3, [pc, #336]	@ (800338c <_Z11linkBatteryv+0x174>)
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	2b04      	cmp	r3, #4
 8003240:	f200 8095 	bhi.w	800336e <_Z11linkBatteryv+0x156>
 8003244:	a201      	add	r2, pc, #4	@ (adr r2, 800324c <_Z11linkBatteryv+0x34>)
 8003246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800324a:	bf00      	nop
 800324c:	08003261 	.word	0x08003261
 8003250:	0800328f 	.word	0x0800328f
 8003254:	080032b1 	.word	0x080032b1
 8003258:	080032ff 	.word	0x080032ff
 800325c:	08003321 	.word	0x08003321
	//////////////////////////
	// S0 -  WAIT STABILITY //
	//////////////////////////

	case 0:
		countBat++;						// Suma 1 al contador
 8003260:	4b4b      	ldr	r3, [pc, #300]	@ (8003390 <_Z11linkBatteryv+0x178>)
 8003262:	881b      	ldrh	r3, [r3, #0]
 8003264:	3301      	adds	r3, #1
 8003266:	b29a      	uxth	r2, r3
 8003268:	4b49      	ldr	r3, [pc, #292]	@ (8003390 <_Z11linkBatteryv+0x178>)
 800326a:	801a      	strh	r2, [r3, #0]

		if ( countBat >= limitBat ){	// Si pasa limite
 800326c:	4b48      	ldr	r3, [pc, #288]	@ (8003390 <_Z11linkBatteryv+0x178>)
 800326e:	881a      	ldrh	r2, [r3, #0]
 8003270:	4b48      	ldr	r3, [pc, #288]	@ (8003394 <_Z11linkBatteryv+0x17c>)
 8003272:	881b      	ldrh	r3, [r3, #0]
 8003274:	429a      	cmp	r2, r3
 8003276:	d306      	bcc.n	8003286 <_Z11linkBatteryv+0x6e>
			countBat		= 0;		// Reinicia contador
 8003278:	4b45      	ldr	r3, [pc, #276]	@ (8003390 <_Z11linkBatteryv+0x178>)
 800327a:	2200      	movs	r2, #0
 800327c:	801a      	strh	r2, [r3, #0]
			stateBattery	= 1;		// Pasa a S1
 800327e:	4b43      	ldr	r3, [pc, #268]	@ (800338c <_Z11linkBatteryv+0x174>)
 8003280:	2201      	movs	r2, #1
 8003282:	701a      	strb	r2, [r3, #0]
		}
		else{							// Si no
			stateBattery	= 0;		// Queda en S0
		}
		break;
 8003284:	e077      	b.n	8003376 <_Z11linkBatteryv+0x15e>
			stateBattery	= 0;		// Queda en S0
 8003286:	4b41      	ldr	r3, [pc, #260]	@ (800338c <_Z11linkBatteryv+0x174>)
 8003288:	2200      	movs	r2, #0
 800328a:	701a      	strb	r2, [r3, #0]
		break;
 800328c:	e073      	b.n	8003376 <_Z11linkBatteryv+0x15e>
	////////////////////////
	// S1 - CHECK BATTERY //
	////////////////////////

	case 1:
		errorHardware[6]	= 0;			// Sin error
 800328e:	4b42      	ldr	r3, [pc, #264]	@ (8003398 <_Z11linkBatteryv+0x180>)
 8003290:	2200      	movs	r2, #0
 8003292:	719a      	strb	r2, [r3, #6]

		if ( batScaled < thresholdBat ){	// Si la bateria baja del limite
 8003294:	4b3c      	ldr	r3, [pc, #240]	@ (8003388 <_Z11linkBatteryv+0x170>)
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	4b40      	ldr	r3, [pc, #256]	@ (800339c <_Z11linkBatteryv+0x184>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	429a      	cmp	r2, r3
 800329e:	da03      	bge.n	80032a8 <_Z11linkBatteryv+0x90>
			stateBattery	= 2;			// Pasa a S2
 80032a0:	4b3a      	ldr	r3, [pc, #232]	@ (800338c <_Z11linkBatteryv+0x174>)
 80032a2:	2202      	movs	r2, #2
 80032a4:	701a      	strb	r2, [r3, #0]
		}
		else{								// Si no
			stateBattery	= 1;			// Queda en S1
		}
		break;
 80032a6:	e066      	b.n	8003376 <_Z11linkBatteryv+0x15e>
			stateBattery	= 1;			// Queda en S1
 80032a8:	4b38      	ldr	r3, [pc, #224]	@ (800338c <_Z11linkBatteryv+0x174>)
 80032aa:	2201      	movs	r2, #1
 80032ac:	701a      	strb	r2, [r3, #0]
		break;
 80032ae:	e062      	b.n	8003376 <_Z11linkBatteryv+0x15e>
	//////////////////////////
	// S2 - CHECK STABILITY //
	//////////////////////////

	case 2:
		errorHardware[6]	= 0;			// Sin error
 80032b0:	4b39      	ldr	r3, [pc, #228]	@ (8003398 <_Z11linkBatteryv+0x180>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	719a      	strb	r2, [r3, #6]
		countBat++;							// Suma 1 al contador
 80032b6:	4b36      	ldr	r3, [pc, #216]	@ (8003390 <_Z11linkBatteryv+0x178>)
 80032b8:	881b      	ldrh	r3, [r3, #0]
 80032ba:	3301      	adds	r3, #1
 80032bc:	b29a      	uxth	r2, r3
 80032be:	4b34      	ldr	r3, [pc, #208]	@ (8003390 <_Z11linkBatteryv+0x178>)
 80032c0:	801a      	strh	r2, [r3, #0]

		if ( batScaled > thresholdBat ){	// Si la bateria esta Ok
 80032c2:	4b31      	ldr	r3, [pc, #196]	@ (8003388 <_Z11linkBatteryv+0x170>)
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	4b35      	ldr	r3, [pc, #212]	@ (800339c <_Z11linkBatteryv+0x184>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	dd06      	ble.n	80032dc <_Z11linkBatteryv+0xc4>
			countBat		= 0;			// Reinicia contador
 80032ce:	4b30      	ldr	r3, [pc, #192]	@ (8003390 <_Z11linkBatteryv+0x178>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	801a      	strh	r2, [r3, #0]
			stateBattery	= 1;			// Vuelve a S1
 80032d4:	4b2d      	ldr	r3, [pc, #180]	@ (800338c <_Z11linkBatteryv+0x174>)
 80032d6:	2201      	movs	r2, #1
 80032d8:	701a      	strb	r2, [r3, #0]
			stateBattery	= 3;			// Pasa a S3
		}
		else{								// Si no
			stateBattery	= 2;			// Queda en S2
		}
		break;
 80032da:	e04c      	b.n	8003376 <_Z11linkBatteryv+0x15e>
		else if ( countBat >= limitBat ){	// Si el contador pasa limite
 80032dc:	4b2c      	ldr	r3, [pc, #176]	@ (8003390 <_Z11linkBatteryv+0x178>)
 80032de:	881a      	ldrh	r2, [r3, #0]
 80032e0:	4b2c      	ldr	r3, [pc, #176]	@ (8003394 <_Z11linkBatteryv+0x17c>)
 80032e2:	881b      	ldrh	r3, [r3, #0]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d306      	bcc.n	80032f6 <_Z11linkBatteryv+0xde>
			countBat		= 0;			// Reinicia contador
 80032e8:	4b29      	ldr	r3, [pc, #164]	@ (8003390 <_Z11linkBatteryv+0x178>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	801a      	strh	r2, [r3, #0]
			stateBattery	= 3;			// Pasa a S3
 80032ee:	4b27      	ldr	r3, [pc, #156]	@ (800338c <_Z11linkBatteryv+0x174>)
 80032f0:	2203      	movs	r2, #3
 80032f2:	701a      	strb	r2, [r3, #0]
		break;
 80032f4:	e03f      	b.n	8003376 <_Z11linkBatteryv+0x15e>
			stateBattery	= 2;			// Queda en S2
 80032f6:	4b25      	ldr	r3, [pc, #148]	@ (800338c <_Z11linkBatteryv+0x174>)
 80032f8:	2202      	movs	r2, #2
 80032fa:	701a      	strb	r2, [r3, #0]
		break;
 80032fc:	e03b      	b.n	8003376 <_Z11linkBatteryv+0x15e>
	///////////////////////////////////
	// S3 - CHECK BATTERY WITH ERROR //
	///////////////////////////////////

	case 3:
		errorHardware[6]	= 1;			// Indica error
 80032fe:	4b26      	ldr	r3, [pc, #152]	@ (8003398 <_Z11linkBatteryv+0x180>)
 8003300:	2201      	movs	r2, #1
 8003302:	719a      	strb	r2, [r3, #6]

		if ( batScaled < thresholdBat ){	// Si la bateria esta baja
 8003304:	4b20      	ldr	r3, [pc, #128]	@ (8003388 <_Z11linkBatteryv+0x170>)
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	4b24      	ldr	r3, [pc, #144]	@ (800339c <_Z11linkBatteryv+0x184>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	429a      	cmp	r2, r3
 800330e:	da03      	bge.n	8003318 <_Z11linkBatteryv+0x100>
			stateBattery	= 3;			// Sigue en S3
 8003310:	4b1e      	ldr	r3, [pc, #120]	@ (800338c <_Z11linkBatteryv+0x174>)
 8003312:	2203      	movs	r2, #3
 8003314:	701a      	strb	r2, [r3, #0]
		}
		else{								// Si no
			stateBattery	= 4;			// Pasa a S4
		}
		break;
 8003316:	e02e      	b.n	8003376 <_Z11linkBatteryv+0x15e>
			stateBattery	= 4;			// Pasa a S4
 8003318:	4b1c      	ldr	r3, [pc, #112]	@ (800338c <_Z11linkBatteryv+0x174>)
 800331a:	2204      	movs	r2, #4
 800331c:	701a      	strb	r2, [r3, #0]
		break;
 800331e:	e02a      	b.n	8003376 <_Z11linkBatteryv+0x15e>
	//////////////////////////
	// S4 - CHECK STABILITY //
	//////////////////////////

	case 4:
		errorHardware[6]	= 1;			// Indica error
 8003320:	4b1d      	ldr	r3, [pc, #116]	@ (8003398 <_Z11linkBatteryv+0x180>)
 8003322:	2201      	movs	r2, #1
 8003324:	719a      	strb	r2, [r3, #6]
		countBat++;							// Suma 1 al contador
 8003326:	4b1a      	ldr	r3, [pc, #104]	@ (8003390 <_Z11linkBatteryv+0x178>)
 8003328:	881b      	ldrh	r3, [r3, #0]
 800332a:	3301      	adds	r3, #1
 800332c:	b29a      	uxth	r2, r3
 800332e:	4b18      	ldr	r3, [pc, #96]	@ (8003390 <_Z11linkBatteryv+0x178>)
 8003330:	801a      	strh	r2, [r3, #0]

		if ( batScaled < thresholdBat ){	// Si la bateria sigue baja
 8003332:	4b15      	ldr	r3, [pc, #84]	@ (8003388 <_Z11linkBatteryv+0x170>)
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	4b19      	ldr	r3, [pc, #100]	@ (800339c <_Z11linkBatteryv+0x184>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	429a      	cmp	r2, r3
 800333c:	da06      	bge.n	800334c <_Z11linkBatteryv+0x134>
			countBat		= 0;			// Reinicia contador
 800333e:	4b14      	ldr	r3, [pc, #80]	@ (8003390 <_Z11linkBatteryv+0x178>)
 8003340:	2200      	movs	r2, #0
 8003342:	801a      	strh	r2, [r3, #0]
			stateBattery	= 3;			// Vuelve a S3
 8003344:	4b11      	ldr	r3, [pc, #68]	@ (800338c <_Z11linkBatteryv+0x174>)
 8003346:	2203      	movs	r2, #3
 8003348:	701a      	strb	r2, [r3, #0]
			stateBattery	= 1;			// Pasa a S3
		}
		else{								// Si no
			stateBattery	= 4;			// Queda en S4
		}
		break;
 800334a:	e014      	b.n	8003376 <_Z11linkBatteryv+0x15e>
		else if ( countBat >= limitBat ){	// Si contador pasa limite
 800334c:	4b10      	ldr	r3, [pc, #64]	@ (8003390 <_Z11linkBatteryv+0x178>)
 800334e:	881a      	ldrh	r2, [r3, #0]
 8003350:	4b10      	ldr	r3, [pc, #64]	@ (8003394 <_Z11linkBatteryv+0x17c>)
 8003352:	881b      	ldrh	r3, [r3, #0]
 8003354:	429a      	cmp	r2, r3
 8003356:	d306      	bcc.n	8003366 <_Z11linkBatteryv+0x14e>
			countBat		= 0;			// Reinicia contador
 8003358:	4b0d      	ldr	r3, [pc, #52]	@ (8003390 <_Z11linkBatteryv+0x178>)
 800335a:	2200      	movs	r2, #0
 800335c:	801a      	strh	r2, [r3, #0]
			stateBattery	= 1;			// Pasa a S3
 800335e:	4b0b      	ldr	r3, [pc, #44]	@ (800338c <_Z11linkBatteryv+0x174>)
 8003360:	2201      	movs	r2, #1
 8003362:	701a      	strb	r2, [r3, #0]
		break;
 8003364:	e007      	b.n	8003376 <_Z11linkBatteryv+0x15e>
			stateBattery	= 4;			// Queda en S4
 8003366:	4b09      	ldr	r3, [pc, #36]	@ (800338c <_Z11linkBatteryv+0x174>)
 8003368:	2204      	movs	r2, #4
 800336a:	701a      	strb	r2, [r3, #0]
		break;
 800336c:	e003      	b.n	8003376 <_Z11linkBatteryv+0x15e>

	default:
		stateBattery	= 0;
 800336e:	4b07      	ldr	r3, [pc, #28]	@ (800338c <_Z11linkBatteryv+0x174>)
 8003370:	2200      	movs	r2, #0
 8003372:	701a      	strb	r2, [r3, #0]
		break;
 8003374:	bf00      	nop
	}
}
 8003376:	bf00      	nop
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr
 8003380:	20000444 	.word	0x20000444
 8003384:	68db8bad 	.word	0x68db8bad
 8003388:	20000530 	.word	0x20000530
 800338c:	2000052e 	.word	0x2000052e
 8003390:	20000536 	.word	0x20000536
 8003394:	20000534 	.word	0x20000534
 8003398:	200004dc 	.word	0x200004dc
 800339c:	200000a4 	.word	0x200000a4

080033a0 <_Z10linkInLorav>:
 *				INPUT	:	flagEnableHwLora
 *
 *				OUTPUT	:	flagWdLora
 */

void linkInLora(){
 80033a0:	b580      	push	{r7, lr}
 80033a2:	af00      	add	r7, sp, #0

	//////////////
	// SOFTWARE //
	//////////////

	if ( loraInput.newResponse() ){						// Si hay nueva respuesta desde el modulo lora
 80033a4:	4833      	ldr	r0, [pc, #204]	@ (8003474 <_Z10linkInLorav+0xd4>)
 80033a6:	f000 ffc3 	bl	8004330 <_ZN9loraInput11newResponseEv>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d020      	beq.n	80033f2 <_Z10linkInLorav+0x52>
		responseLora	 = loraInput.response();		// Guarda la respuesta
 80033b0:	4830      	ldr	r0, [pc, #192]	@ (8003474 <_Z10linkInLorav+0xd4>)
 80033b2:	f000 ffd0 	bl	8004356 <_ZN9loraInput8responseEv>
 80033b6:	4603      	mov	r3, r0
 80033b8:	4a2f      	ldr	r2, [pc, #188]	@ (8003478 <_Z10linkInLorav+0xd8>)
 80033ba:	6013      	str	r3, [r2, #0]
		responseLoraSize = loraInput.responseSize();	// Guarda tamaño de la respuesta
 80033bc:	482d      	ldr	r0, [pc, #180]	@ (8003474 <_Z10linkInLorav+0xd4>)
 80033be:	f000 ffd6 	bl	800436e <_ZN9loraInput12responseSizeEv>
 80033c2:	4603      	mov	r3, r0
 80033c4:	461a      	mov	r2, r3
 80033c6:	4b2d      	ldr	r3, [pc, #180]	@ (800347c <_Z10linkInLorav+0xdc>)
 80033c8:	701a      	strb	r2, [r3, #0]

		loraCheck.newResponse(responseLora, responseLoraSize);	// Inserta respuesta en modulo de checkeo de respuesta
 80033ca:	4b2b      	ldr	r3, [pc, #172]	@ (8003478 <_Z10linkInLorav+0xd8>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a2b      	ldr	r2, [pc, #172]	@ (800347c <_Z10linkInLorav+0xdc>)
 80033d0:	7812      	ldrb	r2, [r2, #0]
 80033d2:	4619      	mov	r1, r3
 80033d4:	482a      	ldr	r0, [pc, #168]	@ (8003480 <_Z10linkInLorav+0xe0>)
 80033d6:	f000 fecf 	bl	8004178 <_ZN9loraCheck11newResponseEPhh>
		loraTimeWd.setInput();									// Indica al watchdog que llego mensaje
 80033da:	482a      	ldr	r0, [pc, #168]	@ (8003484 <_Z10linkInLorav+0xe4>)
 80033dc:	f000 fe85 	bl	80040ea <_ZN9wdTimeout8setInputEv>
		qttyMessagesInputs++;									// Contador de respuestas recibidas
 80033e0:	4b29      	ldr	r3, [pc, #164]	@ (8003488 <_Z10linkInLorav+0xe8>)
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	3301      	adds	r3, #1
 80033e6:	b2da      	uxtb	r2, r3
 80033e8:	4b27      	ldr	r3, [pc, #156]	@ (8003488 <_Z10linkInLorav+0xe8>)
 80033ea:	701a      	strb	r2, [r3, #0]
		flagUartGps	= 1;
 80033ec:	4b27      	ldr	r3, [pc, #156]	@ (800348c <_Z10linkInLorav+0xec>)
 80033ee:	2201      	movs	r2, #1
 80033f0:	701a      	strb	r2, [r3, #0]

	//////////////
	// WATCHDOG //
	//////////////

	switch ( stateWdLora ){
 80033f2:	4b27      	ldr	r3, [pc, #156]	@ (8003490 <_Z10linkInLorav+0xf0>)
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d031      	beq.n	800345e <_Z10linkInLorav+0xbe>
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	dc36      	bgt.n	800346c <_Z10linkInLorav+0xcc>
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d002      	beq.n	8003408 <_Z10linkInLorav+0x68>
 8003402:	2b01      	cmp	r3, #1
 8003404:	d012      	beq.n	800342c <_Z10linkInLorav+0x8c>
		flagWdLora	= 1;			// Reinicia chip por hw
		stateWdLora	= 0;			// Vuelve a S0
		break;

	default:
		break;
 8003406:	e031      	b.n	800346c <_Z10linkInLorav+0xcc>
		flagWdLora	= 0;			// Reinicia indicador de reset
 8003408:	4b22      	ldr	r3, [pc, #136]	@ (8003494 <_Z10linkInLorav+0xf4>)
 800340a:	2200      	movs	r2, #0
 800340c:	701a      	strb	r2, [r3, #0]
		if ( flagEnableHwLora ){	// Si el chip esta habilitado
 800340e:	4b22      	ldr	r3, [pc, #136]	@ (8003498 <_Z10linkInLorav+0xf8>)
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d006      	beq.n	8003424 <_Z10linkInLorav+0x84>
			loraTimeWd.setOutput();	// Indica que salio un mensaje
 8003416:	481b      	ldr	r0, [pc, #108]	@ (8003484 <_Z10linkInLorav+0xe4>)
 8003418:	f000 fe37 	bl	800408a <_ZN9wdTimeout9setOutputEv>
			stateWdLora = 1;		// Pasa a S1
 800341c:	4b1c      	ldr	r3, [pc, #112]	@ (8003490 <_Z10linkInLorav+0xf0>)
 800341e:	2201      	movs	r2, #1
 8003420:	701a      	strb	r2, [r3, #0]
		break;
 8003422:	e024      	b.n	800346e <_Z10linkInLorav+0xce>
			stateWdLora = 0;		// Espera en S0
 8003424:	4b1a      	ldr	r3, [pc, #104]	@ (8003490 <_Z10linkInLorav+0xf0>)
 8003426:	2200      	movs	r2, #0
 8003428:	701a      	strb	r2, [r3, #0]
		break;
 800342a:	e020      	b.n	800346e <_Z10linkInLorav+0xce>
		loraTimeWd.addOne();			// Suma 1 al wd
 800342c:	4815      	ldr	r0, [pc, #84]	@ (8003484 <_Z10linkInLorav+0xe4>)
 800342e:	f000 fe3c 	bl	80040aa <_ZN9wdTimeout6addOneEv>
		if ( loraTimeWd.timeOut() ){	// Si se cumple timeout
 8003432:	4814      	ldr	r0, [pc, #80]	@ (8003484 <_Z10linkInLorav+0xe4>)
 8003434:	f000 fe6d 	bl	8004112 <_ZN9wdTimeout7timeOutEv>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d003      	beq.n	8003446 <_Z10linkInLorav+0xa6>
			stateWdLora = 2;			// Pasa a S2
 800343e:	4b14      	ldr	r3, [pc, #80]	@ (8003490 <_Z10linkInLorav+0xf0>)
 8003440:	2202      	movs	r2, #2
 8003442:	701a      	strb	r2, [r3, #0]
		break;
 8003444:	e013      	b.n	800346e <_Z10linkInLorav+0xce>
		else if ( flagEnableHwLora ){	// Si sigue habilitado por hw
 8003446:	4b14      	ldr	r3, [pc, #80]	@ (8003498 <_Z10linkInLorav+0xf8>)
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d003      	beq.n	8003456 <_Z10linkInLorav+0xb6>
			stateWdLora = 1;			// Espera en S1
 800344e:	4b10      	ldr	r3, [pc, #64]	@ (8003490 <_Z10linkInLorav+0xf0>)
 8003450:	2201      	movs	r2, #1
 8003452:	701a      	strb	r2, [r3, #0]
		break;
 8003454:	e00b      	b.n	800346e <_Z10linkInLorav+0xce>
			stateWdLora	= 0;			// Pasa a S0
 8003456:	4b0e      	ldr	r3, [pc, #56]	@ (8003490 <_Z10linkInLorav+0xf0>)
 8003458:	2200      	movs	r2, #0
 800345a:	701a      	strb	r2, [r3, #0]
		break;
 800345c:	e007      	b.n	800346e <_Z10linkInLorav+0xce>
		flagWdLora	= 1;			// Reinicia chip por hw
 800345e:	4b0d      	ldr	r3, [pc, #52]	@ (8003494 <_Z10linkInLorav+0xf4>)
 8003460:	2201      	movs	r2, #1
 8003462:	701a      	strb	r2, [r3, #0]
		stateWdLora	= 0;			// Vuelve a S0
 8003464:	4b0a      	ldr	r3, [pc, #40]	@ (8003490 <_Z10linkInLorav+0xf0>)
 8003466:	2200      	movs	r2, #0
 8003468:	701a      	strb	r2, [r3, #0]
		break;
 800346a:	e000      	b.n	800346e <_Z10linkInLorav+0xce>
		break;
 800346c:	bf00      	nop
	}
}
 800346e:	bf00      	nop
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	20000b30 	.word	0x20000b30
 8003478:	20000508 	.word	0x20000508
 800347c:	2000050c 	.word	0x2000050c
 8003480:	20000b70 	.word	0x20000b70
 8003484:	20001084 	.word	0x20001084
 8003488:	2000050d 	.word	0x2000050d
 800348c:	200004ec 	.word	0x200004ec
 8003490:	2000050f 	.word	0x2000050f
 8003494:	20000539 	.word	0x20000539
 8003498:	200004ef 	.word	0x200004ef

0800349c <_Z9linkInGpsv>:
 *				stopGps		|	Indicador detener GPS
 *				warning[]	|	Indica que no hay gps validos
 *
 */

void linkInGps(){
 800349c:	b580      	push	{r7, lr}
 800349e:	af00      	add	r7, sp, #0

	switch ( stateGpsLink ){
 80034a0:	4b45      	ldr	r3, [pc, #276]	@ (80035b8 <_Z9linkInGpsv+0x11c>)
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	2b05      	cmp	r3, #5
 80034a6:	f200 8204 	bhi.w	80038b2 <_Z9linkInGpsv+0x416>
 80034aa:	a201      	add	r2, pc, #4	@ (adr r2, 80034b0 <_Z9linkInGpsv+0x14>)
 80034ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b0:	080034c9 	.word	0x080034c9
 80034b4:	080034e7 	.word	0x080034e7
 80034b8:	0800354b 	.word	0x0800354b
 80034bc:	08003571 	.word	0x08003571
 80034c0:	08003595 	.word	0x08003595
 80034c4:	080035e5 	.word	0x080035e5
	/////////////////////////
	// S0 - WAIT FOR START //
	/////////////////////////

	case 0:
		if ( startGps ){			// Si se inicia GPS
 80034c8:	4b3c      	ldr	r3, [pc, #240]	@ (80035bc <_Z9linkInGpsv+0x120>)
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d006      	beq.n	80034de <_Z9linkInGpsv+0x42>
			startGps		= 0;	// Reinicia indicador
 80034d0:	4b3a      	ldr	r3, [pc, #232]	@ (80035bc <_Z9linkInGpsv+0x120>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	701a      	strb	r2, [r3, #0]
			stateGpsLink	= 1;	// Pasa a S1
 80034d6:	4b38      	ldr	r3, [pc, #224]	@ (80035b8 <_Z9linkInGpsv+0x11c>)
 80034d8:	2201      	movs	r2, #1
 80034da:	701a      	strb	r2, [r3, #0]
		}
		else{						// Si no
			stateGpsLink	= 0;	// Espera en S0
		}
		break;
 80034dc:	e1e9      	b.n	80038b2 <_Z9linkInGpsv+0x416>
			stateGpsLink	= 0;	// Espera en S0
 80034de:	4b36      	ldr	r3, [pc, #216]	@ (80035b8 <_Z9linkInGpsv+0x11c>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	701a      	strb	r2, [r3, #0]
		break;
 80034e4:	e1e5      	b.n	80038b2 <_Z9linkInGpsv+0x416>
	///////////////////////////
	// S1 - WAIT FOR MESSAGE //
	///////////////////////////

	case 1:
		countGpsLink++;								// Suma 1 al contador
 80034e6:	4b36      	ldr	r3, [pc, #216]	@ (80035c0 <_Z9linkInGpsv+0x124>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	3301      	adds	r3, #1
 80034ec:	4a34      	ldr	r2, [pc, #208]	@ (80035c0 <_Z9linkInGpsv+0x124>)
 80034ee:	6013      	str	r3, [r2, #0]
		gpsNewMessage	= 0;						// Reinicia flag nuevo mensaje
 80034f0:	4b34      	ldr	r3, [pc, #208]	@ (80035c4 <_Z9linkInGpsv+0x128>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	701a      	strb	r2, [r3, #0]

		if ( gpsInput.getNewMessage() ){			// Si llega nuevo mensaje
 80034f6:	4834      	ldr	r0, [pc, #208]	@ (80035c8 <_Z9linkInGpsv+0x12c>)
 80034f8:	f7fe fe99 	bl	800222e <_ZN8gpsInput13getNewMessageEv>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d009      	beq.n	8003516 <_Z9linkInGpsv+0x7a>
			gpsNewMessage	= 1;					// Marca flag de nuevo mensaje
 8003502:	4b30      	ldr	r3, [pc, #192]	@ (80035c4 <_Z9linkInGpsv+0x128>)
 8003504:	2201      	movs	r2, #1
 8003506:	701a      	strb	r2, [r3, #0]
			gpsValid		= gpsInput.getValid();	// Copia mensaje valido
 8003508:	482f      	ldr	r0, [pc, #188]	@ (80035c8 <_Z9linkInGpsv+0x12c>)
 800350a:	f7fe fe7a 	bl	8002202 <_ZN8gpsInput8getValidEv>
 800350e:	4603      	mov	r3, r0
 8003510:	461a      	mov	r2, r3
 8003512:	4b2e      	ldr	r3, [pc, #184]	@ (80035cc <_Z9linkInGpsv+0x130>)
 8003514:	701a      	strb	r2, [r3, #0]
		}

		if ( countGpsLink >= limitGpsLink ){		// Si pasa limite de 5 min
 8003516:	4b2a      	ldr	r3, [pc, #168]	@ (80035c0 <_Z9linkInGpsv+0x124>)
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	4b2d      	ldr	r3, [pc, #180]	@ (80035d0 <_Z9linkInGpsv+0x134>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	429a      	cmp	r2, r3
 8003520:	db03      	blt.n	800352a <_Z9linkInGpsv+0x8e>
			stateGpsLink	= 2;					// Cierra en S2
 8003522:	4b25      	ldr	r3, [pc, #148]	@ (80035b8 <_Z9linkInGpsv+0x11c>)
 8003524:	2202      	movs	r2, #2
 8003526:	701a      	strb	r2, [r3, #0]
			stateGpsLink	= 4;					// Pasa a S4
		}*/
		else{										// Si no
			stateGpsLink	= 1;					// Espera
		}
		break;
 8003528:	e1c3      	b.n	80038b2 <_Z9linkInGpsv+0x416>
		else if ( gpsNewMessage && gpsValid ){		// Si llega mensaje valido
 800352a:	4b26      	ldr	r3, [pc, #152]	@ (80035c4 <_Z9linkInGpsv+0x128>)
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d007      	beq.n	8003542 <_Z9linkInGpsv+0xa6>
 8003532:	4b26      	ldr	r3, [pc, #152]	@ (80035cc <_Z9linkInGpsv+0x130>)
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d003      	beq.n	8003542 <_Z9linkInGpsv+0xa6>
			stateGpsLink	= 3;					// Pasa a S3
 800353a:	4b1f      	ldr	r3, [pc, #124]	@ (80035b8 <_Z9linkInGpsv+0x11c>)
 800353c:	2203      	movs	r2, #3
 800353e:	701a      	strb	r2, [r3, #0]
		break;
 8003540:	e1b7      	b.n	80038b2 <_Z9linkInGpsv+0x416>
			stateGpsLink	= 1;					// Espera
 8003542:	4b1d      	ldr	r3, [pc, #116]	@ (80035b8 <_Z9linkInGpsv+0x11c>)
 8003544:	2201      	movs	r2, #1
 8003546:	701a      	strb	r2, [r3, #0]
		break;
 8003548:	e1b3      	b.n	80038b2 <_Z9linkInGpsv+0x416>
	///////////////////////
	// S2 - STOP MEASURE //
	///////////////////////

	case 2:
		savedGps			= 0;	//  Reinicia indicador coordenadas guardadas
 800354a:	4b22      	ldr	r3, [pc, #136]	@ (80035d4 <_Z9linkInGpsv+0x138>)
 800354c:	2200      	movs	r2, #0
 800354e:	701a      	strb	r2, [r3, #0]
		countValidMsgGps	= 0;	//	Reinicia contador mensajes validos
 8003550:	4b21      	ldr	r3, [pc, #132]	@ (80035d8 <_Z9linkInGpsv+0x13c>)
 8003552:	2200      	movs	r2, #0
 8003554:	701a      	strb	r2, [r3, #0]
		countInvalidMsgGps	= 0;	//	Reinicia contador mensajes invalidos
 8003556:	4b21      	ldr	r3, [pc, #132]	@ (80035dc <_Z9linkInGpsv+0x140>)
 8003558:	2200      	movs	r2, #0
 800355a:	701a      	strb	r2, [r3, #0]
		countGpsLink		= 0;	//	Reinicia contador de espera mensajes gps
 800355c:	4b18      	ldr	r3, [pc, #96]	@ (80035c0 <_Z9linkInGpsv+0x124>)
 800355e:	2200      	movs	r2, #0
 8003560:	601a      	str	r2, [r3, #0]
		stopGps				= 1;	//	Fija apagado de GPS
 8003562:	4b1f      	ldr	r3, [pc, #124]	@ (80035e0 <_Z9linkInGpsv+0x144>)
 8003564:	2201      	movs	r2, #1
 8003566:	701a      	strb	r2, [r3, #0]
		stateGpsLink		= 0;	//	Vuelve a S0
 8003568:	4b13      	ldr	r3, [pc, #76]	@ (80035b8 <_Z9linkInGpsv+0x11c>)
 800356a:	2200      	movs	r2, #0
 800356c:	701a      	strb	r2, [r3, #0]
		break;
 800356e:	e1a0      	b.n	80038b2 <_Z9linkInGpsv+0x416>
	////////////////////////////
	// S3 - NEW VALID MESSAGE //
	////////////////////////////

	case 3:
		countValidMsgGps++;				// Suma 1 a mensaje valids nuevos
 8003570:	4b19      	ldr	r3, [pc, #100]	@ (80035d8 <_Z9linkInGpsv+0x13c>)
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	3301      	adds	r3, #1
 8003576:	b2da      	uxtb	r2, r3
 8003578:	4b17      	ldr	r3, [pc, #92]	@ (80035d8 <_Z9linkInGpsv+0x13c>)
 800357a:	701a      	strb	r2, [r3, #0]

		if ( countValidMsgGps >= 4 ){	// Si es mayor a 10 mensajes
 800357c:	4b16      	ldr	r3, [pc, #88]	@ (80035d8 <_Z9linkInGpsv+0x13c>)
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	2b03      	cmp	r3, #3
 8003582:	d903      	bls.n	800358c <_Z9linkInGpsv+0xf0>
			stateGpsLink	= 5;		// Pasa a S5
 8003584:	4b0c      	ldr	r3, [pc, #48]	@ (80035b8 <_Z9linkInGpsv+0x11c>)
 8003586:	2205      	movs	r2, #5
 8003588:	701a      	strb	r2, [r3, #0]
		}
		else{							// Si no
			stateGpsLink	= 1;		// Vuelve a S5
		}
		break;
 800358a:	e192      	b.n	80038b2 <_Z9linkInGpsv+0x416>
			stateGpsLink	= 1;		// Vuelve a S5
 800358c:	4b0a      	ldr	r3, [pc, #40]	@ (80035b8 <_Z9linkInGpsv+0x11c>)
 800358e:	2201      	movs	r2, #1
 8003590:	701a      	strb	r2, [r3, #0]
		break;
 8003592:	e18e      	b.n	80038b2 <_Z9linkInGpsv+0x416>
	//////////////////////////////
	// S4 - NEW INVALID MESSAGE //
	//////////////////////////////

	case 4:
		countInvalidMsgGps++;				// Suma 1 a mensaje invalido nuevos
 8003594:	4b11      	ldr	r3, [pc, #68]	@ (80035dc <_Z9linkInGpsv+0x140>)
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	3301      	adds	r3, #1
 800359a:	b2da      	uxtb	r2, r3
 800359c:	4b0f      	ldr	r3, [pc, #60]	@ (80035dc <_Z9linkInGpsv+0x140>)
 800359e:	701a      	strb	r2, [r3, #0]

		if ( countInvalidMsgGps >= 30 ){	// Si es mayor a 10 mensajes
 80035a0:	4b0e      	ldr	r3, [pc, #56]	@ (80035dc <_Z9linkInGpsv+0x140>)
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	2b1d      	cmp	r3, #29
 80035a6:	d903      	bls.n	80035b0 <_Z9linkInGpsv+0x114>
			stateGpsLink	= 2;			// Pasa a S2
 80035a8:	4b03      	ldr	r3, [pc, #12]	@ (80035b8 <_Z9linkInGpsv+0x11c>)
 80035aa:	2202      	movs	r2, #2
 80035ac:	701a      	strb	r2, [r3, #0]
		}
		else{								// Si no
			stateGpsLink	= 1;			// Pasa a S1
		}
		break;
 80035ae:	e180      	b.n	80038b2 <_Z9linkInGpsv+0x416>
			stateGpsLink	= 1;			// Pasa a S1
 80035b0:	4b01      	ldr	r3, [pc, #4]	@ (80035b8 <_Z9linkInGpsv+0x11c>)
 80035b2:	2201      	movs	r2, #1
 80035b4:	701a      	strb	r2, [r3, #0]
		break;
 80035b6:	e17c      	b.n	80038b2 <_Z9linkInGpsv+0x416>
 80035b8:	200004fa 	.word	0x200004fa
 80035bc:	20000393 	.word	0x20000393
 80035c0:	200004fc 	.word	0x200004fc
 80035c4:	200004fb 	.word	0x200004fb
 80035c8:	20000a44 	.word	0x20000a44
 80035cc:	20000ae8 	.word	0x20000ae8
 80035d0:	20000500 	.word	0x20000500
 80035d4:	20000aea 	.word	0x20000aea
 80035d8:	20000504 	.word	0x20000504
 80035dc:	20000505 	.word	0x20000505
 80035e0:	20000ae9 	.word	0x20000ae9
	////////////////////////////////
	// S5 - SAVE LATITUD/LONGITUD //
	////////////////////////////////

	case 5:
		savedGps	= 1;										// Indica que se guardó valor correctamente
 80035e4:	4bb4      	ldr	r3, [pc, #720]	@ (80038b8 <_Z9linkInGpsv+0x41c>)
 80035e6:	2201      	movs	r2, #1
 80035e8:	701a      	strb	r2, [r3, #0]

		latitud =	(gpsInput.latitud[0] - '0')*1000;			// Guarda unidad de mil latitud
 80035ea:	4bb4      	ldr	r3, [pc, #720]	@ (80038bc <_Z9linkInGpsv+0x420>)
 80035ec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80035f0:	3b30      	subs	r3, #48	@ 0x30
 80035f2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80035f6:	fb02 f303 	mul.w	r3, r2, r3
 80035fa:	ee07 3a90 	vmov	s15, r3
 80035fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003602:	4baf      	ldr	r3, [pc, #700]	@ (80038c0 <_Z9linkInGpsv+0x424>)
 8003604:	edc3 7a00 	vstr	s15, [r3]
		latitud +=	(gpsInput.latitud[1] - '0')*100;			// Guarda centena de latitud
 8003608:	4bac      	ldr	r3, [pc, #688]	@ (80038bc <_Z9linkInGpsv+0x420>)
 800360a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800360e:	3b30      	subs	r3, #48	@ 0x30
 8003610:	2264      	movs	r2, #100	@ 0x64
 8003612:	fb02 f303 	mul.w	r3, r2, r3
 8003616:	ee07 3a90 	vmov	s15, r3
 800361a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800361e:	4ba8      	ldr	r3, [pc, #672]	@ (80038c0 <_Z9linkInGpsv+0x424>)
 8003620:	edd3 7a00 	vldr	s15, [r3]
 8003624:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003628:	4ba5      	ldr	r3, [pc, #660]	@ (80038c0 <_Z9linkInGpsv+0x424>)
 800362a:	edc3 7a00 	vstr	s15, [r3]
		latitud +=	(gpsInput.latitud[2] - '0')*10;				// Guarda decena de latitud
 800362e:	4ba3      	ldr	r3, [pc, #652]	@ (80038bc <_Z9linkInGpsv+0x420>)
 8003630:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003634:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8003638:	4613      	mov	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	4413      	add	r3, r2
 800363e:	005b      	lsls	r3, r3, #1
 8003640:	ee07 3a90 	vmov	s15, r3
 8003644:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003648:	4b9d      	ldr	r3, [pc, #628]	@ (80038c0 <_Z9linkInGpsv+0x424>)
 800364a:	edd3 7a00 	vldr	s15, [r3]
 800364e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003652:	4b9b      	ldr	r3, [pc, #620]	@ (80038c0 <_Z9linkInGpsv+0x424>)
 8003654:	edc3 7a00 	vstr	s15, [r3]
		latitud +=	(gpsInput.latitud[3] - '0')*1;				// Guarda unidad de latitud
 8003658:	4b98      	ldr	r3, [pc, #608]	@ (80038bc <_Z9linkInGpsv+0x420>)
 800365a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800365e:	3b30      	subs	r3, #48	@ 0x30
 8003660:	ee07 3a90 	vmov	s15, r3
 8003664:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003668:	4b95      	ldr	r3, [pc, #596]	@ (80038c0 <_Z9linkInGpsv+0x424>)
 800366a:	edd3 7a00 	vldr	s15, [r3]
 800366e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003672:	4b93      	ldr	r3, [pc, #588]	@ (80038c0 <_Z9linkInGpsv+0x424>)
 8003674:	edc3 7a00 	vstr	s15, [r3]
		latitud +=	( float(gpsInput.latitud[5]) - '0')/10;		// Guarda decima de latitud
 8003678:	4b90      	ldr	r3, [pc, #576]	@ (80038bc <_Z9linkInGpsv+0x420>)
 800367a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800367e:	ee07 3a90 	vmov	s15, r3
 8003682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003686:	ed9f 7a8f 	vldr	s14, [pc, #572]	@ 80038c4 <_Z9linkInGpsv+0x428>
 800368a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800368e:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8003692:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003696:	4b8a      	ldr	r3, [pc, #552]	@ (80038c0 <_Z9linkInGpsv+0x424>)
 8003698:	edd3 7a00 	vldr	s15, [r3]
 800369c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036a0:	4b87      	ldr	r3, [pc, #540]	@ (80038c0 <_Z9linkInGpsv+0x424>)
 80036a2:	edc3 7a00 	vstr	s15, [r3]
		latitud +=	( float(gpsInput.latitud[6]) - '0')/100;	// Guarda centecina de latitud
 80036a6:	4b85      	ldr	r3, [pc, #532]	@ (80038bc <_Z9linkInGpsv+0x420>)
 80036a8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80036ac:	ee07 3a90 	vmov	s15, r3
 80036b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036b4:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 80038c4 <_Z9linkInGpsv+0x428>
 80036b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80036bc:	eddf 6a82 	vldr	s13, [pc, #520]	@ 80038c8 <_Z9linkInGpsv+0x42c>
 80036c0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80036c4:	4b7e      	ldr	r3, [pc, #504]	@ (80038c0 <_Z9linkInGpsv+0x424>)
 80036c6:	edd3 7a00 	vldr	s15, [r3]
 80036ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036ce:	4b7c      	ldr	r3, [pc, #496]	@ (80038c0 <_Z9linkInGpsv+0x424>)
 80036d0:	edc3 7a00 	vstr	s15, [r3]
		latitud +=	( float(gpsInput.latitud[7]) - '0')/1000;	// Guarda milecima de latitud
 80036d4:	4b79      	ldr	r3, [pc, #484]	@ (80038bc <_Z9linkInGpsv+0x420>)
 80036d6:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 80036da:	ee07 3a90 	vmov	s15, r3
 80036de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036e2:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 80038c4 <_Z9linkInGpsv+0x428>
 80036e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80036ea:	eddf 6a78 	vldr	s13, [pc, #480]	@ 80038cc <_Z9linkInGpsv+0x430>
 80036ee:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80036f2:	4b73      	ldr	r3, [pc, #460]	@ (80038c0 <_Z9linkInGpsv+0x424>)
 80036f4:	edd3 7a00 	vldr	s15, [r3]
 80036f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036fc:	4b70      	ldr	r3, [pc, #448]	@ (80038c0 <_Z9linkInGpsv+0x424>)
 80036fe:	edc3 7a00 	vstr	s15, [r3]
		latitud +=	( float(gpsInput.latitud[8]) - '0')/10000;	// Guarda decima de milecima de latitud
 8003702:	4b6e      	ldr	r3, [pc, #440]	@ (80038bc <_Z9linkInGpsv+0x420>)
 8003704:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8003708:	ee07 3a90 	vmov	s15, r3
 800370c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003710:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 80038c4 <_Z9linkInGpsv+0x428>
 8003714:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003718:	eddf 6a6d 	vldr	s13, [pc, #436]	@ 80038d0 <_Z9linkInGpsv+0x434>
 800371c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003720:	4b67      	ldr	r3, [pc, #412]	@ (80038c0 <_Z9linkInGpsv+0x424>)
 8003722:	edd3 7a00 	vldr	s15, [r3]
 8003726:	ee77 7a27 	vadd.f32	s15, s14, s15
 800372a:	4b65      	ldr	r3, [pc, #404]	@ (80038c0 <_Z9linkInGpsv+0x424>)
 800372c:	edc3 7a00 	vstr	s15, [r3]

		longitud =	(gpsInput.longitud[0] - '0')*10000;			// Guarda decena de mil longitud
 8003730:	4b62      	ldr	r3, [pc, #392]	@ (80038bc <_Z9linkInGpsv+0x420>)
 8003732:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8003736:	3b30      	subs	r3, #48	@ 0x30
 8003738:	f242 7210 	movw	r2, #10000	@ 0x2710
 800373c:	fb02 f303 	mul.w	r3, r2, r3
 8003740:	ee07 3a90 	vmov	s15, r3
 8003744:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003748:	4b62      	ldr	r3, [pc, #392]	@ (80038d4 <_Z9linkInGpsv+0x438>)
 800374a:	edc3 7a00 	vstr	s15, [r3]
		longitud +=	(gpsInput.longitud[1] - '0')*1000;			// Guarda unidad de mil longitud
 800374e:	4b5b      	ldr	r3, [pc, #364]	@ (80038bc <_Z9linkInGpsv+0x420>)
 8003750:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8003754:	3b30      	subs	r3, #48	@ 0x30
 8003756:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800375a:	fb02 f303 	mul.w	r3, r2, r3
 800375e:	ee07 3a90 	vmov	s15, r3
 8003762:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003766:	4b5b      	ldr	r3, [pc, #364]	@ (80038d4 <_Z9linkInGpsv+0x438>)
 8003768:	edd3 7a00 	vldr	s15, [r3]
 800376c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003770:	4b58      	ldr	r3, [pc, #352]	@ (80038d4 <_Z9linkInGpsv+0x438>)
 8003772:	edc3 7a00 	vstr	s15, [r3]
		longitud +=	(gpsInput.longitud[2] - '0')*100;			// Guarda centecima de longitud
 8003776:	4b51      	ldr	r3, [pc, #324]	@ (80038bc <_Z9linkInGpsv+0x420>)
 8003778:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800377c:	3b30      	subs	r3, #48	@ 0x30
 800377e:	2264      	movs	r2, #100	@ 0x64
 8003780:	fb02 f303 	mul.w	r3, r2, r3
 8003784:	ee07 3a90 	vmov	s15, r3
 8003788:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800378c:	4b51      	ldr	r3, [pc, #324]	@ (80038d4 <_Z9linkInGpsv+0x438>)
 800378e:	edd3 7a00 	vldr	s15, [r3]
 8003792:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003796:	4b4f      	ldr	r3, [pc, #316]	@ (80038d4 <_Z9linkInGpsv+0x438>)
 8003798:	edc3 7a00 	vstr	s15, [r3]
		longitud +=	(gpsInput.longitud[3] - '0')*10;			// Guarda decena de longitud
 800379c:	4b47      	ldr	r3, [pc, #284]	@ (80038bc <_Z9linkInGpsv+0x420>)
 800379e:	f893 304f 	ldrb.w	r3, [r3, #79]	@ 0x4f
 80037a2:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80037a6:	4613      	mov	r3, r2
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	4413      	add	r3, r2
 80037ac:	005b      	lsls	r3, r3, #1
 80037ae:	ee07 3a90 	vmov	s15, r3
 80037b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037b6:	4b47      	ldr	r3, [pc, #284]	@ (80038d4 <_Z9linkInGpsv+0x438>)
 80037b8:	edd3 7a00 	vldr	s15, [r3]
 80037bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037c0:	4b44      	ldr	r3, [pc, #272]	@ (80038d4 <_Z9linkInGpsv+0x438>)
 80037c2:	edc3 7a00 	vstr	s15, [r3]
		longitud +=	(gpsInput.longitud[4] - '0')*1;				// Guarda unidad de longitud
 80037c6:	4b3d      	ldr	r3, [pc, #244]	@ (80038bc <_Z9linkInGpsv+0x420>)
 80037c8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80037cc:	3b30      	subs	r3, #48	@ 0x30
 80037ce:	ee07 3a90 	vmov	s15, r3
 80037d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037d6:	4b3f      	ldr	r3, [pc, #252]	@ (80038d4 <_Z9linkInGpsv+0x438>)
 80037d8:	edd3 7a00 	vldr	s15, [r3]
 80037dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037e0:	4b3c      	ldr	r3, [pc, #240]	@ (80038d4 <_Z9linkInGpsv+0x438>)
 80037e2:	edc3 7a00 	vstr	s15, [r3]
		longitud +=	( float(gpsInput.longitud[6]) - '0')/10;	// Guarda decima de longitud
 80037e6:	4b35      	ldr	r3, [pc, #212]	@ (80038bc <_Z9linkInGpsv+0x420>)
 80037e8:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 80037ec:	ee07 3a90 	vmov	s15, r3
 80037f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037f4:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 80038c4 <_Z9linkInGpsv+0x428>
 80037f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80037fc:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8003800:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003804:	4b33      	ldr	r3, [pc, #204]	@ (80038d4 <_Z9linkInGpsv+0x438>)
 8003806:	edd3 7a00 	vldr	s15, [r3]
 800380a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800380e:	4b31      	ldr	r3, [pc, #196]	@ (80038d4 <_Z9linkInGpsv+0x438>)
 8003810:	edc3 7a00 	vstr	s15, [r3]
		longitud +=	( float(gpsInput.longitud[7]) - '0')/100;	// Guarda centecima de longitud
 8003814:	4b29      	ldr	r3, [pc, #164]	@ (80038bc <_Z9linkInGpsv+0x420>)
 8003816:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800381a:	ee07 3a90 	vmov	s15, r3
 800381e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003822:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 80038c4 <_Z9linkInGpsv+0x428>
 8003826:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800382a:	eddf 6a27 	vldr	s13, [pc, #156]	@ 80038c8 <_Z9linkInGpsv+0x42c>
 800382e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003832:	4b28      	ldr	r3, [pc, #160]	@ (80038d4 <_Z9linkInGpsv+0x438>)
 8003834:	edd3 7a00 	vldr	s15, [r3]
 8003838:	ee77 7a27 	vadd.f32	s15, s14, s15
 800383c:	4b25      	ldr	r3, [pc, #148]	@ (80038d4 <_Z9linkInGpsv+0x438>)
 800383e:	edc3 7a00 	vstr	s15, [r3]
		longitud +=	( float(gpsInput.longitud[8]) - '0')/1000;	// Guarda milesima de longitud
 8003842:	4b1e      	ldr	r3, [pc, #120]	@ (80038bc <_Z9linkInGpsv+0x420>)
 8003844:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003848:	ee07 3a90 	vmov	s15, r3
 800384c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003850:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 80038c4 <_Z9linkInGpsv+0x428>
 8003854:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003858:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 80038cc <_Z9linkInGpsv+0x430>
 800385c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003860:	4b1c      	ldr	r3, [pc, #112]	@ (80038d4 <_Z9linkInGpsv+0x438>)
 8003862:	edd3 7a00 	vldr	s15, [r3]
 8003866:	ee77 7a27 	vadd.f32	s15, s14, s15
 800386a:	4b1a      	ldr	r3, [pc, #104]	@ (80038d4 <_Z9linkInGpsv+0x438>)
 800386c:	edc3 7a00 	vstr	s15, [r3]
		longitud +=	( float(gpsInput.longitud[9]) - '0')/10000;	// Guarda decima de milesima de longitud
 8003870:	4b12      	ldr	r3, [pc, #72]	@ (80038bc <_Z9linkInGpsv+0x420>)
 8003872:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8003876:	ee07 3a90 	vmov	s15, r3
 800387a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800387e:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 80038c4 <_Z9linkInGpsv+0x428>
 8003882:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003886:	eddf 6a12 	vldr	s13, [pc, #72]	@ 80038d0 <_Z9linkInGpsv+0x434>
 800388a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800388e:	4b11      	ldr	r3, [pc, #68]	@ (80038d4 <_Z9linkInGpsv+0x438>)
 8003890:	edd3 7a00 	vldr	s15, [r3]
 8003894:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003898:	4b0e      	ldr	r3, [pc, #56]	@ (80038d4 <_Z9linkInGpsv+0x438>)
 800389a:	edc3 7a00 	vstr	s15, [r3]

		countSavedGps++;										// Contador de veces que se guardó un valor correctamente
 800389e:	4b0e      	ldr	r3, [pc, #56]	@ (80038d8 <_Z9linkInGpsv+0x43c>)
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	3301      	adds	r3, #1
 80038a4:	b2da      	uxtb	r2, r3
 80038a6:	4b0c      	ldr	r3, [pc, #48]	@ (80038d8 <_Z9linkInGpsv+0x43c>)
 80038a8:	701a      	strb	r2, [r3, #0]
		stateGpsLink	= 2;									// Pasa a S2
 80038aa:	4b0c      	ldr	r3, [pc, #48]	@ (80038dc <_Z9linkInGpsv+0x440>)
 80038ac:	2202      	movs	r2, #2
 80038ae:	701a      	strb	r2, [r3, #0]
		break;
 80038b0:	bf00      	nop
	}

}
 80038b2:	bf00      	nop
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	20000aea 	.word	0x20000aea
 80038bc:	20000a44 	.word	0x20000a44
 80038c0:	20000ae0 	.word	0x20000ae0
 80038c4:	42400000 	.word	0x42400000
 80038c8:	42c80000 	.word	0x42c80000
 80038cc:	447a0000 	.word	0x447a0000
 80038d0:	461c4000 	.word	0x461c4000
 80038d4:	20000ae4 	.word	0x20000ae4
 80038d8:	20000506 	.word	0x20000506
 80038dc:	200004fa 	.word	0x200004fa

080038e0 <_Z9linkBotonv>:
 *	INPUT	:	flagBoton
 *	OUTPUT	:	displayPhy.enable
 */


void linkBoton(){
 80038e0:	b580      	push	{r7, lr}
 80038e2:	af00      	add	r7, sp, #0

	switch ( stateEnableDisplay ){
 80038e4:	4b1b      	ldr	r3, [pc, #108]	@ (8003954 <_Z9linkBotonv+0x74>)
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d002      	beq.n	80038f2 <_Z9linkBotonv+0x12>
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d013      	beq.n	8003918 <_Z9linkBotonv+0x38>
 80038f0:	e029      	b.n	8003946 <_Z9linkBotonv+0x66>
	//////////////////////
	// S0 - WAIT BUTTON //
	//////////////////////

	case 0:
		displayPhy.enable(0);			//	Inhabilita display
 80038f2:	2100      	movs	r1, #0
 80038f4:	4818      	ldr	r0, [pc, #96]	@ (8003958 <_Z9linkBotonv+0x78>)
 80038f6:	f7fc fe9d 	bl	8000634 <_ZN15displayPhysical6enableEb>
		countEnableDisplay	= 0;		//	Reinicia contador
 80038fa:	4b18      	ldr	r3, [pc, #96]	@ (800395c <_Z9linkBotonv+0x7c>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	601a      	str	r2, [r3, #0]

		if ( flagBoton ){				//	Si se presiona el boton
 8003900:	4b17      	ldr	r3, [pc, #92]	@ (8003960 <_Z9linkBotonv+0x80>)
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d003      	beq.n	8003910 <_Z9linkBotonv+0x30>
			stateEnableDisplay	= 1;	//	Pasa a S1
 8003908:	4b12      	ldr	r3, [pc, #72]	@ (8003954 <_Z9linkBotonv+0x74>)
 800390a:	2201      	movs	r2, #1
 800390c:	701a      	strb	r2, [r3, #0]
		}
		else{							//	Si no
			stateEnableDisplay	= 0;	//	Espera en S0
		}
		break;
 800390e:	e01e      	b.n	800394e <_Z9linkBotonv+0x6e>
			stateEnableDisplay	= 0;	//	Espera en S0
 8003910:	4b10      	ldr	r3, [pc, #64]	@ (8003954 <_Z9linkBotonv+0x74>)
 8003912:	2200      	movs	r2, #0
 8003914:	701a      	strb	r2, [r3, #0]
		break;
 8003916:	e01a      	b.n	800394e <_Z9linkBotonv+0x6e>
	/////////////////
	// S1 - ENABLE //
	/////////////////

	case 1:
		displayPhy.enable(1);							// Habilita display
 8003918:	2101      	movs	r1, #1
 800391a:	480f      	ldr	r0, [pc, #60]	@ (8003958 <_Z9linkBotonv+0x78>)
 800391c:	f7fc fe8a 	bl	8000634 <_ZN15displayPhysical6enableEb>

		countEnableDisplay++;							// Suma 1 al contador
 8003920:	4b0e      	ldr	r3, [pc, #56]	@ (800395c <_Z9linkBotonv+0x7c>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	3301      	adds	r3, #1
 8003926:	4a0d      	ldr	r2, [pc, #52]	@ (800395c <_Z9linkBotonv+0x7c>)
 8003928:	6013      	str	r3, [r2, #0]

		if ( countEnableDisplay > limitEnableDisplay ){	// Si llega al limite
 800392a:	4b0c      	ldr	r3, [pc, #48]	@ (800395c <_Z9linkBotonv+0x7c>)
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	4b0d      	ldr	r3, [pc, #52]	@ (8003964 <_Z9linkBotonv+0x84>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	429a      	cmp	r2, r3
 8003934:	dd03      	ble.n	800393e <_Z9linkBotonv+0x5e>
			stateEnableDisplay	= 0;					// Vuelve a S0
 8003936:	4b07      	ldr	r3, [pc, #28]	@ (8003954 <_Z9linkBotonv+0x74>)
 8003938:	2200      	movs	r2, #0
 800393a:	701a      	strb	r2, [r3, #0]
		}
		else{											// Si no
			stateEnableDisplay	= 1;					// Espera en S1
		}
		break;
 800393c:	e007      	b.n	800394e <_Z9linkBotonv+0x6e>
			stateEnableDisplay	= 1;					// Espera en S1
 800393e:	4b05      	ldr	r3, [pc, #20]	@ (8003954 <_Z9linkBotonv+0x74>)
 8003940:	2201      	movs	r2, #1
 8003942:	701a      	strb	r2, [r3, #0]
		break;
 8003944:	e003      	b.n	800394e <_Z9linkBotonv+0x6e>

	default:
		stateEnableDisplay	= 0;
 8003946:	4b03      	ldr	r3, [pc, #12]	@ (8003954 <_Z9linkBotonv+0x74>)
 8003948:	2200      	movs	r2, #0
 800394a:	701a      	strb	r2, [r3, #0]
		break;
 800394c:	bf00      	nop

	}
}
 800394e:	bf00      	nop
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	20000518 	.word	0x20000518
 8003958:	20001098 	.word	0x20001098
 800395c:	20000510 	.word	0x20000510
 8003960:	20000a40 	.word	0x20000a40
 8003964:	20000514 	.word	0x20000514

08003968 <_Z7adc2PPMth>:
 *	MODE 2	:	ADC interno A1
 *	MODE 3	:	ADC externo B1
 *	MODE 4	:	ADC interno B1
 */

uint16_t adc2PPM( uint16_t signal, uint8_t mode){
 8003968:	b480      	push	{r7}
 800396a:	b085      	sub	sp, #20
 800396c:	af00      	add	r7, sp, #0
 800396e:	4603      	mov	r3, r0
 8003970:	460a      	mov	r2, r1
 8003972:	80fb      	strh	r3, [r7, #6]
 8003974:	4613      	mov	r3, r2
 8003976:	717b      	strb	r3, [r7, #5]
	uint16_t result;

	switch ( mode ){
 8003978:	797b      	ldrb	r3, [r7, #5]
 800397a:	3b01      	subs	r3, #1
 800397c:	2b03      	cmp	r3, #3
 800397e:	d84a      	bhi.n	8003a16 <_Z7adc2PPMth+0xae>
 8003980:	a201      	add	r2, pc, #4	@ (adr r2, 8003988 <_Z7adc2PPMth+0x20>)
 8003982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003986:	bf00      	nop
 8003988:	08003999 	.word	0x08003999
 800398c:	080039c1 	.word	0x080039c1
 8003990:	080039c7 	.word	0x080039c7
 8003994:	080039ef 	.word	0x080039ef
	////////////
	// MODE 1 //
	////////////

	case 1:
		if ( signal > groundAlphaA){
 8003998:	4b24      	ldr	r3, [pc, #144]	@ (8003a2c <_Z7adc2PPMth+0xc4>)
 800399a:	881b      	ldrh	r3, [r3, #0]
 800399c:	88fa      	ldrh	r2, [r7, #6]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d905      	bls.n	80039ae <_Z7adc2PPMth+0x46>
			result	= signal - groundAlphaA;
 80039a2:	4b22      	ldr	r3, [pc, #136]	@ (8003a2c <_Z7adc2PPMth+0xc4>)
 80039a4:	881b      	ldrh	r3, [r3, #0]
 80039a6:	88fa      	ldrh	r2, [r7, #6]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	81fb      	strh	r3, [r7, #14]
 80039ac:	e001      	b.n	80039b2 <_Z7adc2PPMth+0x4a>
		}
		else{
			result	= 0;
 80039ae:	2300      	movs	r3, #0
 80039b0:	81fb      	strh	r3, [r7, #14]
		}
		result	= result/curveAlphaA;
 80039b2:	4b1f      	ldr	r3, [pc, #124]	@ (8003a30 <_Z7adc2PPMth+0xc8>)
 80039b4:	881b      	ldrh	r3, [r3, #0]
 80039b6:	89fa      	ldrh	r2, [r7, #14]
 80039b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039bc:	81fb      	strh	r3, [r7, #14]
		break;
 80039be:	e02d      	b.n	8003a1c <_Z7adc2PPMth+0xb4>
	////////////
	// MODE 2 //
	////////////

	case 2:
		result = signal;//(signal - groundAlphaA)/curveAlphaA;
 80039c0:	88fb      	ldrh	r3, [r7, #6]
 80039c2:	81fb      	strh	r3, [r7, #14]
		break;
 80039c4:	e02a      	b.n	8003a1c <_Z7adc2PPMth+0xb4>
	////////////
	// MODE 3 //
	////////////

	case 3:
		if ( signal > groundAlphaB){
 80039c6:	4b1b      	ldr	r3, [pc, #108]	@ (8003a34 <_Z7adc2PPMth+0xcc>)
 80039c8:	881b      	ldrh	r3, [r3, #0]
 80039ca:	88fa      	ldrh	r2, [r7, #6]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d905      	bls.n	80039dc <_Z7adc2PPMth+0x74>
			result	= signal - groundAlphaB;
 80039d0:	4b18      	ldr	r3, [pc, #96]	@ (8003a34 <_Z7adc2PPMth+0xcc>)
 80039d2:	881b      	ldrh	r3, [r3, #0]
 80039d4:	88fa      	ldrh	r2, [r7, #6]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	81fb      	strh	r3, [r7, #14]
 80039da:	e001      	b.n	80039e0 <_Z7adc2PPMth+0x78>
		}
		else{
			result	= 0;
 80039dc:	2300      	movs	r3, #0
 80039de:	81fb      	strh	r3, [r7, #14]
		}
		result	= result/curveAlphaB;
 80039e0:	4b15      	ldr	r3, [pc, #84]	@ (8003a38 <_Z7adc2PPMth+0xd0>)
 80039e2:	881b      	ldrh	r3, [r3, #0]
 80039e4:	89fa      	ldrh	r2, [r7, #14]
 80039e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ea:	81fb      	strh	r3, [r7, #14]
		break;
 80039ec:	e016      	b.n	8003a1c <_Z7adc2PPMth+0xb4>
	////////////
	// MODE 4 //
	////////////

	case 4:
		if ( signal > groundAlphaB){
 80039ee:	4b11      	ldr	r3, [pc, #68]	@ (8003a34 <_Z7adc2PPMth+0xcc>)
 80039f0:	881b      	ldrh	r3, [r3, #0]
 80039f2:	88fa      	ldrh	r2, [r7, #6]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d905      	bls.n	8003a04 <_Z7adc2PPMth+0x9c>
			result	= signal - groundAlphaB;
 80039f8:	4b0e      	ldr	r3, [pc, #56]	@ (8003a34 <_Z7adc2PPMth+0xcc>)
 80039fa:	881b      	ldrh	r3, [r3, #0]
 80039fc:	88fa      	ldrh	r2, [r7, #6]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	81fb      	strh	r3, [r7, #14]
 8003a02:	e001      	b.n	8003a08 <_Z7adc2PPMth+0xa0>
		}
		else{
			result	= 0;
 8003a04:	2300      	movs	r3, #0
 8003a06:	81fb      	strh	r3, [r7, #14]
		}
		result	= result/curveAlphaB;
 8003a08:	4b0b      	ldr	r3, [pc, #44]	@ (8003a38 <_Z7adc2PPMth+0xd0>)
 8003a0a:	881b      	ldrh	r3, [r3, #0]
 8003a0c:	89fa      	ldrh	r2, [r7, #14]
 8003a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a12:	81fb      	strh	r3, [r7, #14]
		break;
 8003a14:	e002      	b.n	8003a1c <_Z7adc2PPMth+0xb4>

	default:
		result	= 0;
 8003a16:	2300      	movs	r3, #0
 8003a18:	81fb      	strh	r3, [r7, #14]
		break;
 8003a1a:	bf00      	nop
	}

	return result;
 8003a1c:	89fb      	ldrh	r3, [r7, #14]
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3714      	adds	r7, #20
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	20000456 	.word	0x20000456
 8003a30:	20000458 	.word	0x20000458
 8003a34:	2000045a 	.word	0x2000045a
 8003a38:	2000045c 	.word	0x2000045c

08003a3c <_Z10linkAnalogv>:
 *				flagAlarm_PPM,
 *				flagAlarm_TEMP
 *				flagAlarm_HUM
 */

void linkAnalog(){
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	af00      	add	r7, sp, #0

	/////////////////
	// CALIBRATION //
	/////////////////

	switch ( stateCalibration ){
 8003a40:	4b67      	ldr	r3, [pc, #412]	@ (8003be0 <_Z10linkAnalogv+0x1a4>)
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d002      	beq.n	8003a4e <_Z10linkAnalogv+0x12>
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d01d      	beq.n	8003a88 <_Z10linkAnalogv+0x4c>
 8003a4c:	e018      	b.n	8003a80 <_Z10linkAnalogv+0x44>
	///////////////////////////////
	// S0 - WAIT FOR CALIBRATION //
	///////////////////////////////

	case 0:
		countCalibration++;								// Suma 1 al contador
 8003a4e:	4b65      	ldr	r3, [pc, #404]	@ (8003be4 <_Z10linkAnalogv+0x1a8>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	3301      	adds	r3, #1
 8003a54:	4a63      	ldr	r2, [pc, #396]	@ (8003be4 <_Z10linkAnalogv+0x1a8>)
 8003a56:	6013      	str	r3, [r2, #0]
		enableSensors	= 0;							// Deshabilita sensores
 8003a58:	4b63      	ldr	r3, [pc, #396]	@ (8003be8 <_Z10linkAnalogv+0x1ac>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	701a      	strb	r2, [r3, #0]

		if ( countCalibration >= limitCalibration ){	// Si se cumple el tiempo de calibracion
 8003a5e:	4b61      	ldr	r3, [pc, #388]	@ (8003be4 <_Z10linkAnalogv+0x1a8>)
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	4b62      	ldr	r3, [pc, #392]	@ (8003bec <_Z10linkAnalogv+0x1b0>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	db06      	blt.n	8003a78 <_Z10linkAnalogv+0x3c>
			enableSensors		= 1;					// Habilita sensores
 8003a6a:	4b5f      	ldr	r3, [pc, #380]	@ (8003be8 <_Z10linkAnalogv+0x1ac>)
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	701a      	strb	r2, [r3, #0]
			stateCalibration	= 1;					// Pasa a S1
 8003a70:	4b5b      	ldr	r3, [pc, #364]	@ (8003be0 <_Z10linkAnalogv+0x1a4>)
 8003a72:	2201      	movs	r2, #1
 8003a74:	701a      	strb	r2, [r3, #0]
		}
		else{											// Si no
			stateCalibration	= 0;					// Espera en S0
		}
		break;
 8003a76:	e008      	b.n	8003a8a <_Z10linkAnalogv+0x4e>
			stateCalibration	= 0;					// Espera en S0
 8003a78:	4b59      	ldr	r3, [pc, #356]	@ (8003be0 <_Z10linkAnalogv+0x1a4>)
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	701a      	strb	r2, [r3, #0]
		break;
 8003a7e:	e004      	b.n	8003a8a <_Z10linkAnalogv+0x4e>
	////////////////////
	case 1:
		break;

	default:
		stateCalibration	= 0;
 8003a80:	4b57      	ldr	r3, [pc, #348]	@ (8003be0 <_Z10linkAnalogv+0x1a4>)
 8003a82:	2200      	movs	r2, #0
 8003a84:	701a      	strb	r2, [r3, #0]
		break;
 8003a86:	e000      	b.n	8003a8a <_Z10linkAnalogv+0x4e>
		break;
 8003a88:	bf00      	nop

	////////////
	// A1 HCL //
	////////////

	if ( !errorHardware[5] ){										// Si esta habilitado el ADC
 8003a8a:	4b59      	ldr	r3, [pc, #356]	@ (8003bf0 <_Z10linkAnalogv+0x1b4>)
 8003a8c:	795b      	ldrb	r3, [r3, #5]
 8003a8e:	f083 0301 	eor.w	r3, r3, #1
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00a      	beq.n	8003aae <_Z10linkAnalogv+0x72>
		alpha_A1_PPM = adc2PPM(alphaA, 1);// * enableSensors;			// Convierte en PPM
 8003a98:	4b56      	ldr	r3, [pc, #344]	@ (8003bf4 <_Z10linkAnalogv+0x1b8>)
 8003a9a:	881b      	ldrh	r3, [r3, #0]
 8003a9c:	2101      	movs	r1, #1
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7ff ff62 	bl	8003968 <_Z7adc2PPMth>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	4b53      	ldr	r3, [pc, #332]	@ (8003bf8 <_Z10linkAnalogv+0x1bc>)
 8003aaa:	801a      	strh	r2, [r3, #0]
 8003aac:	e009      	b.n	8003ac2 <_Z10linkAnalogv+0x86>
	}
	else{															// Si no esta habiltiado el ADC
		alpha_A1_PPM = adc2PPM(alphaAnalog_A, 2); //* enableSensors;	// Convierte en PPM
 8003aae:	4b53      	ldr	r3, [pc, #332]	@ (8003bfc <_Z10linkAnalogv+0x1c0>)
 8003ab0:	881b      	ldrh	r3, [r3, #0]
 8003ab2:	2102      	movs	r1, #2
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7ff ff57 	bl	8003968 <_Z7adc2PPMth>
 8003aba:	4603      	mov	r3, r0
 8003abc:	461a      	mov	r2, r3
 8003abe:	4b4e      	ldr	r3, [pc, #312]	@ (8003bf8 <_Z10linkAnalogv+0x1bc>)
 8003ac0:	801a      	strh	r2, [r3, #0]
	}

	if ( alpha_A1_PPM > 50 && enableSensors){		// Si pasa de 5 ppm
 8003ac2:	4b4d      	ldr	r3, [pc, #308]	@ (8003bf8 <_Z10linkAnalogv+0x1bc>)
 8003ac4:	881b      	ldrh	r3, [r3, #0]
 8003ac6:	2b32      	cmp	r3, #50	@ 0x32
 8003ac8:	d907      	bls.n	8003ada <_Z10linkAnalogv+0x9e>
 8003aca:	4b47      	ldr	r3, [pc, #284]	@ (8003be8 <_Z10linkAnalogv+0x1ac>)
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d003      	beq.n	8003ada <_Z10linkAnalogv+0x9e>
		flagAlarm_PPM	= 1;						// Indica alarma
 8003ad2:	4b4b      	ldr	r3, [pc, #300]	@ (8003c00 <_Z10linkAnalogv+0x1c4>)
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	701a      	strb	r2, [r3, #0]
 8003ad8:	e002      	b.n	8003ae0 <_Z10linkAnalogv+0xa4>
	}
	else{											// Si no
		flagAlarm_PPM	= 0;						// No hay alarma
 8003ada:	4b49      	ldr	r3, [pc, #292]	@ (8003c00 <_Z10linkAnalogv+0x1c4>)
 8003adc:	2200      	movs	r2, #0
 8003ade:	701a      	strb	r2, [r3, #0]

	////////////
	// B1 HCL //
	////////////

	if ( !errorHardware[5] ){										// Si esta habitado el ADC
 8003ae0:	4b43      	ldr	r3, [pc, #268]	@ (8003bf0 <_Z10linkAnalogv+0x1b4>)
 8003ae2:	795b      	ldrb	r3, [r3, #5]
 8003ae4:	f083 0301 	eor.w	r3, r3, #1
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d011      	beq.n	8003b12 <_Z10linkAnalogv+0xd6>
		alpha_B1_PPM = adc2PPM(alphaB, 3); //* enableSensors;			// Convierte en PPM
 8003aee:	4b45      	ldr	r3, [pc, #276]	@ (8003c04 <_Z10linkAnalogv+0x1c8>)
 8003af0:	881b      	ldrh	r3, [r3, #0]
 8003af2:	2103      	movs	r1, #3
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7ff ff37 	bl	8003968 <_Z7adc2PPMth>
 8003afa:	4603      	mov	r3, r0
 8003afc:	461a      	mov	r2, r3
 8003afe:	4b42      	ldr	r3, [pc, #264]	@ (8003c08 <_Z10linkAnalogv+0x1cc>)
 8003b00:	801a      	strh	r2, [r3, #0]
		displayLink.inputDisplay(alpha_B1_PPM, 2);
 8003b02:	4b41      	ldr	r3, [pc, #260]	@ (8003c08 <_Z10linkAnalogv+0x1cc>)
 8003b04:	881b      	ldrh	r3, [r3, #0]
 8003b06:	2202      	movs	r2, #2
 8003b08:	4619      	mov	r1, r3
 8003b0a:	4840      	ldr	r0, [pc, #256]	@ (8003c0c <_Z10linkAnalogv+0x1d0>)
 8003b0c:	f7fc fcf2 	bl	80004f4 <_ZN11displayLink12inputDisplayEih>
 8003b10:	e010      	b.n	8003b34 <_Z10linkAnalogv+0xf8>
	}
	else{															// Si no esta habilitado el ADC
		alpha_B1_PPM = adc2PPM(alphaAnalog_B, 4); //* enableSensors;	// Convierte en PPM
 8003b12:	4b3f      	ldr	r3, [pc, #252]	@ (8003c10 <_Z10linkAnalogv+0x1d4>)
 8003b14:	881b      	ldrh	r3, [r3, #0]
 8003b16:	2104      	movs	r1, #4
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f7ff ff25 	bl	8003968 <_Z7adc2PPMth>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	461a      	mov	r2, r3
 8003b22:	4b39      	ldr	r3, [pc, #228]	@ (8003c08 <_Z10linkAnalogv+0x1cc>)
 8003b24:	801a      	strh	r2, [r3, #0]
		displayLink.inputDisplay(alpha_B1_PPM, 2);
 8003b26:	4b38      	ldr	r3, [pc, #224]	@ (8003c08 <_Z10linkAnalogv+0x1cc>)
 8003b28:	881b      	ldrh	r3, [r3, #0]
 8003b2a:	2202      	movs	r2, #2
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	4837      	ldr	r0, [pc, #220]	@ (8003c0c <_Z10linkAnalogv+0x1d0>)
 8003b30:	f7fc fce0 	bl	80004f4 <_ZN11displayLink12inputDisplayEih>
	}

	if ( alpha_B1_PPM > 50 && enableSensors ){		// Si pasa de 5 ppm
 8003b34:	4b34      	ldr	r3, [pc, #208]	@ (8003c08 <_Z10linkAnalogv+0x1cc>)
 8003b36:	881b      	ldrh	r3, [r3, #0]
 8003b38:	2b32      	cmp	r3, #50	@ 0x32
 8003b3a:	d907      	bls.n	8003b4c <_Z10linkAnalogv+0x110>
 8003b3c:	4b2a      	ldr	r3, [pc, #168]	@ (8003be8 <_Z10linkAnalogv+0x1ac>)
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d003      	beq.n	8003b4c <_Z10linkAnalogv+0x110>
		flagAlarm_PPM	= 1;						// Indica alarma
 8003b44:	4b2e      	ldr	r3, [pc, #184]	@ (8003c00 <_Z10linkAnalogv+0x1c4>)
 8003b46:	2201      	movs	r2, #1
 8003b48:	701a      	strb	r2, [r3, #0]
 8003b4a:	e002      	b.n	8003b52 <_Z10linkAnalogv+0x116>
	}
	else{											// Si no
		flagAlarm_PPM	= 0;						// No hay alarma
 8003b4c:	4b2c      	ldr	r3, [pc, #176]	@ (8003c00 <_Z10linkAnalogv+0x1c4>)
 8003b4e:	2200      	movs	r2, #0
 8003b50:	701a      	strb	r2, [r3, #0]

	//////////////
	// TEMP HUM //
	///////////////

	if ( !errorHardware[1] ){			// Si hay sensor externo
 8003b52:	4b27      	ldr	r3, [pc, #156]	@ (8003bf0 <_Z10linkAnalogv+0x1b4>)
 8003b54:	785b      	ldrb	r3, [r3, #1]
 8003b56:	f083 0301 	eor.w	r3, r3, #1
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d008      	beq.n	8003b72 <_Z10linkAnalogv+0x136>
		tempApp	= tempExtern;			// Copia temperatura
 8003b60:	4b2c      	ldr	r3, [pc, #176]	@ (8003c14 <_Z10linkAnalogv+0x1d8>)
 8003b62:	881a      	ldrh	r2, [r3, #0]
 8003b64:	4b2c      	ldr	r3, [pc, #176]	@ (8003c18 <_Z10linkAnalogv+0x1dc>)
 8003b66:	801a      	strh	r2, [r3, #0]
		humApp	= humExtern;			// Copia humedad
 8003b68:	4b2c      	ldr	r3, [pc, #176]	@ (8003c1c <_Z10linkAnalogv+0x1e0>)
 8003b6a:	881a      	ldrh	r2, [r3, #0]
 8003b6c:	4b2c      	ldr	r3, [pc, #176]	@ (8003c20 <_Z10linkAnalogv+0x1e4>)
 8003b6e:	801a      	strh	r2, [r3, #0]
 8003b70:	e015      	b.n	8003b9e <_Z10linkAnalogv+0x162>
	}
	else if ( !errorHardware[0] ){	// Si hay sensor interno
 8003b72:	4b1f      	ldr	r3, [pc, #124]	@ (8003bf0 <_Z10linkAnalogv+0x1b4>)
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	f083 0301 	eor.w	r3, r3, #1
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d008      	beq.n	8003b92 <_Z10linkAnalogv+0x156>
		tempApp	= tempIntern;			// Copia temperatura
 8003b80:	4b28      	ldr	r3, [pc, #160]	@ (8003c24 <_Z10linkAnalogv+0x1e8>)
 8003b82:	881a      	ldrh	r2, [r3, #0]
 8003b84:	4b24      	ldr	r3, [pc, #144]	@ (8003c18 <_Z10linkAnalogv+0x1dc>)
 8003b86:	801a      	strh	r2, [r3, #0]
		humApp	= humIntern;			// Copia humedad
 8003b88:	4b27      	ldr	r3, [pc, #156]	@ (8003c28 <_Z10linkAnalogv+0x1ec>)
 8003b8a:	881a      	ldrh	r2, [r3, #0]
 8003b8c:	4b24      	ldr	r3, [pc, #144]	@ (8003c20 <_Z10linkAnalogv+0x1e4>)
 8003b8e:	801a      	strh	r2, [r3, #0]
 8003b90:	e005      	b.n	8003b9e <_Z10linkAnalogv+0x162>
	}
	else{								// Si no hay ninguno de ambos sensores
		tempApp	= 0;					// Copia 0
 8003b92:	4b21      	ldr	r3, [pc, #132]	@ (8003c18 <_Z10linkAnalogv+0x1dc>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	801a      	strh	r2, [r3, #0]
		humApp	= 0;					// Copia 0
 8003b98:	4b21      	ldr	r3, [pc, #132]	@ (8003c20 <_Z10linkAnalogv+0x1e4>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	801a      	strh	r2, [r3, #0]

	////////////
	// ALARMS //
	////////////

	if ( tempApp > 60 || tempApp < 5 ){	// Si pasa limite de sensores
 8003b9e:	4b1e      	ldr	r3, [pc, #120]	@ (8003c18 <_Z10linkAnalogv+0x1dc>)
 8003ba0:	881b      	ldrh	r3, [r3, #0]
 8003ba2:	2b3c      	cmp	r3, #60	@ 0x3c
 8003ba4:	d803      	bhi.n	8003bae <_Z10linkAnalogv+0x172>
 8003ba6:	4b1c      	ldr	r3, [pc, #112]	@ (8003c18 <_Z10linkAnalogv+0x1dc>)
 8003ba8:	881b      	ldrh	r3, [r3, #0]
 8003baa:	2b04      	cmp	r3, #4
 8003bac:	d803      	bhi.n	8003bb6 <_Z10linkAnalogv+0x17a>
		warningHardware[0]	= 1;			// Indica alarma
 8003bae:	4b1f      	ldr	r3, [pc, #124]	@ (8003c2c <_Z10linkAnalogv+0x1f0>)
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	701a      	strb	r2, [r3, #0]
 8003bb4:	e002      	b.n	8003bbc <_Z10linkAnalogv+0x180>
	}
	else{								// Si no
		warningHardware[0]	= 0;			// No hay alarma
 8003bb6:	4b1d      	ldr	r3, [pc, #116]	@ (8003c2c <_Z10linkAnalogv+0x1f0>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	701a      	strb	r2, [r3, #0]
	}

	if ( humApp < 5 || humApp > 90){	// Si pasa limite de sensores
 8003bbc:	4b18      	ldr	r3, [pc, #96]	@ (8003c20 <_Z10linkAnalogv+0x1e4>)
 8003bbe:	881b      	ldrh	r3, [r3, #0]
 8003bc0:	2b04      	cmp	r3, #4
 8003bc2:	d903      	bls.n	8003bcc <_Z10linkAnalogv+0x190>
 8003bc4:	4b16      	ldr	r3, [pc, #88]	@ (8003c20 <_Z10linkAnalogv+0x1e4>)
 8003bc6:	881b      	ldrh	r3, [r3, #0]
 8003bc8:	2b5a      	cmp	r3, #90	@ 0x5a
 8003bca:	d903      	bls.n	8003bd4 <_Z10linkAnalogv+0x198>
		warningHardware[1]	= 1;			// Indica alarma
 8003bcc:	4b17      	ldr	r3, [pc, #92]	@ (8003c2c <_Z10linkAnalogv+0x1f0>)
 8003bce:	2201      	movs	r2, #1
 8003bd0:	705a      	strb	r2, [r3, #1]
 8003bd2:	e003      	b.n	8003bdc <_Z10linkAnalogv+0x1a0>
	}
	else{								// Si no
		warningHardware[1]	= 0;			// No hay alarma
 8003bd4:	4b15      	ldr	r3, [pc, #84]	@ (8003c2c <_Z10linkAnalogv+0x1f0>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	705a      	strb	r2, [r3, #1]
	}
}
 8003bda:	bf00      	nop
 8003bdc:	bf00      	nop
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	20000522 	.word	0x20000522
 8003be4:	20000524 	.word	0x20000524
 8003be8:	2000052c 	.word	0x2000052c
 8003bec:	20000528 	.word	0x20000528
 8003bf0:	200004dc 	.word	0x200004dc
 8003bf4:	2000043e 	.word	0x2000043e
 8003bf8:	2000051a 	.word	0x2000051a
 8003bfc:	20000446 	.word	0x20000446
 8003c00:	2000052d 	.word	0x2000052d
 8003c04:	20000440 	.word	0x20000440
 8003c08:	2000051c 	.word	0x2000051c
 8003c0c:	20001090 	.word	0x20001090
 8003c10:	20000448 	.word	0x20000448
 8003c14:	20000424 	.word	0x20000424
 8003c18:	2000051e 	.word	0x2000051e
 8003c1c:	20000426 	.word	0x20000426
 8003c20:	20000520 	.word	0x20000520
 8003c24:	20000420 	.word	0x20000420
 8003c28:	20000422 	.word	0x20000422
 8003c2c:	200004d4 	.word	0x200004d4

08003c30 <_Z41__static_initialization_and_destruction_0ii>:
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d127      	bne.n	8003c90 <_Z41__static_initialization_and_destruction_0ii+0x60>
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d122      	bne.n	8003c90 <_Z41__static_initialization_and_destruction_0ii+0x60>
long int limitGpsLink	= 360000/superloop;	// Limite de tiempo esperando mensajes validos
 8003c4a:	4b14      	ldr	r3, [pc, #80]	@ (8003c9c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	461a      	mov	r2, r3
 8003c50:	4b13      	ldr	r3, [pc, #76]	@ (8003ca0 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8003c52:	fb93 f3f2 	sdiv	r3, r3, r2
 8003c56:	4a13      	ldr	r2, [pc, #76]	@ (8003ca4 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8003c58:	6013      	str	r3, [r2, #0]
int limitEnableDisplay		= 3000/superloop;	//	Limite de display habilitado
 8003c5a:	4b10      	ldr	r3, [pc, #64]	@ (8003c9c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	461a      	mov	r2, r3
 8003c60:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8003c64:	fb93 f3f2 	sdiv	r3, r3, r2
 8003c68:	4a0f      	ldr	r2, [pc, #60]	@ (8003ca8 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8003c6a:	6013      	str	r3, [r2, #0]
long limitCalibration	= 900000/superloop;	// Limite de calibracion
 8003c6c:	4b0b      	ldr	r3, [pc, #44]	@ (8003c9c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	461a      	mov	r2, r3
 8003c72:	4b0e      	ldr	r3, [pc, #56]	@ (8003cac <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003c74:	fb93 f3f2 	sdiv	r3, r3, r2
 8003c78:	4a0d      	ldr	r2, [pc, #52]	@ (8003cb0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8003c7a:	6013      	str	r3, [r2, #0]
uint16_t limitBat	= 5000/superloop;	// Tiempo que la bateria se considera en estado fijo
 8003c7c:	4b07      	ldr	r3, [pc, #28]	@ (8003c9c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	461a      	mov	r2, r3
 8003c82:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003c86:	fb93 f3f2 	sdiv	r3, r3, r2
 8003c8a:	b29a      	uxth	r2, r3
 8003c8c:	4b09      	ldr	r3, [pc, #36]	@ (8003cb4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8003c8e:	801a      	strh	r2, [r3, #0]
}
 8003c90:	bf00      	nop
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr
 8003c9c:	20000395 	.word	0x20000395
 8003ca0:	00057e40 	.word	0x00057e40
 8003ca4:	20000500 	.word	0x20000500
 8003ca8:	20000514 	.word	0x20000514
 8003cac:	000dbba0 	.word	0x000dbba0
 8003cb0:	20000528 	.word	0x20000528
 8003cb4:	20000534 	.word	0x20000534

08003cb8 <_GLOBAL__sub_I_stateGpsLink>:
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003cc0:	2001      	movs	r0, #1
 8003cc2:	f7ff ffb5 	bl	8003c30 <_Z41__static_initialization_and_destruction_0ii>
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <_Z10linkOutputv>:
extern wdTimeout loraTimeWd;	// Watchdog de Lorawan
extern bool flagTxLora;			// Indica que se envía un mensaje

/***** OUTPUT *****/

void linkOutput(){
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	af00      	add	r7, sp, #0
	linkOutLora();
 8003ccc:	f000 f806 	bl	8003cdc <_Z11linkOutLorav>
	linkOutGps();
 8003cd0:	f000 f81e 	bl	8003d10 <_Z10linkOutGpsv>
	linkOutDisplay();
 8003cd4:	f000 f83a 	bl	8003d4c <_Z14linkOutDisplayv>
}
 8003cd8:	bf00      	nop
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <_Z11linkOutLorav>:
/************************
 *****	LORA OUTPUT *****
 ************************
 *
 */
void linkOutLora(){
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	af00      	add	r7, sp, #0

	//////////////
	// SOFTWARE //
	//////////////

	if ( flagTxLora ){				// Si sale un comando
 8003ce0:	4b07      	ldr	r3, [pc, #28]	@ (8003d00 <_Z11linkOutLorav+0x24>)
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d002      	beq.n	8003cee <_Z11linkOutLorav+0x12>
		loraTimeWd.setOutput();		// Se indica a wd
 8003ce8:	4806      	ldr	r0, [pc, #24]	@ (8003d04 <_Z11linkOutLorav+0x28>)
 8003cea:	f000 f9ce 	bl	800408a <_ZN9wdTimeout9setOutputEv>

	//////////////
	// HARDWARE //
	//////////////

	if ( flagWdLora ){			// Si vence wd
 8003cee:	4b06      	ldr	r3, [pc, #24]	@ (8003d08 <_Z11linkOutLorav+0x2c>)
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d002      	beq.n	8003cfc <_Z11linkOutLorav+0x20>
		flagResetHwLora	= 1;	// Reinicia chip
 8003cf6:	4b05      	ldr	r3, [pc, #20]	@ (8003d0c <_Z11linkOutLorav+0x30>)
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	701a      	strb	r2, [r3, #0]
	}
}
 8003cfc:	bf00      	nop
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	200004ed 	.word	0x200004ed
 8003d04:	20001084 	.word	0x20001084
 8003d08:	20000539 	.word	0x20000539
 8003d0c:	2000053a 	.word	0x2000053a

08003d10 <_Z10linkOutGpsv>:

/**********************
 ***** GPS OUTPUT *****
 **********************
 */
void linkOutGps(){
 8003d10:	b480      	push	{r7}
 8003d12:	af00      	add	r7, sp, #0

	if ( startGps ){		// Si se inicia Gps
 8003d14:	4b0a      	ldr	r3, [pc, #40]	@ (8003d40 <_Z10linkOutGpsv+0x30>)
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d002      	beq.n	8003d22 <_Z10linkOutGpsv+0x12>
		enableGps	= 1;	// Habilita gps
 8003d1c:	4b09      	ldr	r3, [pc, #36]	@ (8003d44 <_Z10linkOutGpsv+0x34>)
 8003d1e:	2201      	movs	r2, #1
 8003d20:	701a      	strb	r2, [r3, #0]
	}

	if ( stopGps ){			// Si se detiene gps
 8003d22:	4b09      	ldr	r3, [pc, #36]	@ (8003d48 <_Z10linkOutGpsv+0x38>)
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d005      	beq.n	8003d36 <_Z10linkOutGpsv+0x26>
		stopGps		= 0;	// Reinicia Flag
 8003d2a:	4b07      	ldr	r3, [pc, #28]	@ (8003d48 <_Z10linkOutGpsv+0x38>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	701a      	strb	r2, [r3, #0]
		enableGps	= 0;	// Deshabilita gps
 8003d30:	4b04      	ldr	r3, [pc, #16]	@ (8003d44 <_Z10linkOutGpsv+0x34>)
 8003d32:	2200      	movs	r2, #0
 8003d34:	701a      	strb	r2, [r3, #0]
	}
}
 8003d36:	bf00      	nop
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr
 8003d40:	20000393 	.word	0x20000393
 8003d44:	20000394 	.word	0x20000394
 8003d48:	20000ae9 	.word	0x20000ae9

08003d4c <_Z14linkOutDisplayv>:
 *	Interactua con physical layer a traves de displayPhy
 *	La instancia  displayLink contiene los valores en cada digito del display
 *	Incluye el punto
 *
 */
void linkOutDisplay(){
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	af00      	add	r7, sp, #0

	digit	= displayPhy.next();					// Copia el valor del digito que se desplegara
 8003d50:	4812      	ldr	r0, [pc, #72]	@ (8003d9c <_Z14linkOutDisplayv+0x50>)
 8003d52:	f7fc fc97 	bl	8000684 <_ZN15displayPhysical4nextEv>
 8003d56:	4603      	mov	r3, r0
 8003d58:	461a      	mov	r2, r3
 8003d5a:	4b11      	ldr	r3, [pc, #68]	@ (8003da0 <_Z14linkOutDisplayv+0x54>)
 8003d5c:	701a      	strb	r2, [r3, #0]

	digit	= displayLink.numberInDigit( digit );	// Indica valor en Display
 8003d5e:	4b10      	ldr	r3, [pc, #64]	@ (8003da0 <_Z14linkOutDisplayv+0x54>)
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	4619      	mov	r1, r3
 8003d64:	480f      	ldr	r0, [pc, #60]	@ (8003da4 <_Z14linkOutDisplayv+0x58>)
 8003d66:	f7fc fc35 	bl	80005d4 <_ZN11displayLink13numberInDigitEh>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	4b0c      	ldr	r3, [pc, #48]	@ (8003da0 <_Z14linkOutDisplayv+0x54>)
 8003d70:	701a      	strb	r2, [r3, #0]
	displayPhy.setNumber(digit);					// Inserta numero en capa fisica
 8003d72:	4b0b      	ldr	r3, [pc, #44]	@ (8003da0 <_Z14linkOutDisplayv+0x54>)
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	4619      	mov	r1, r3
 8003d78:	4808      	ldr	r0, [pc, #32]	@ (8003d9c <_Z14linkOutDisplayv+0x50>)
 8003d7a:	f7fc fc8f 	bl	800069c <_ZN15displayPhysical9setNumberEh>

	digit	= displayLink.dotPosition();			// Guarda valor del digito con punto
 8003d7e:	4809      	ldr	r0, [pc, #36]	@ (8003da4 <_Z14linkOutDisplayv+0x58>)
 8003d80:	f7fc fbac 	bl	80004dc <_ZN11displayLink11dotPositionEv>
 8003d84:	4603      	mov	r3, r0
 8003d86:	461a      	mov	r2, r3
 8003d88:	4b05      	ldr	r3, [pc, #20]	@ (8003da0 <_Z14linkOutDisplayv+0x54>)
 8003d8a:	701a      	strb	r2, [r3, #0]
	displayPhy.setDot( digit );						// Inserta punto en digito indicado
 8003d8c:	4b04      	ldr	r3, [pc, #16]	@ (8003da0 <_Z14linkOutDisplayv+0x54>)
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	4619      	mov	r1, r3
 8003d92:	4802      	ldr	r0, [pc, #8]	@ (8003d9c <_Z14linkOutDisplayv+0x50>)
 8003d94:	f7fc fc67 	bl	8000666 <_ZN15displayPhysical6setDotEh>

}
 8003d98:	bf00      	nop
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	20001098 	.word	0x20001098
 8003da0:	20000538 	.word	0x20000538
 8003da4:	20001090 	.word	0x20001090

08003da8 <_Z12setupLoraAppv>:

rn2903Command macSetCh8;
rn2903Command macSetCh9;
rn2903Command macSetCh10;

void setupLoraApp(){
 8003da8:	b480      	push	{r7}
 8003daa:	af00      	add	r7, sp, #0
	///////////////
	// SYS RESET //
	///////////////

	sysReset.command		= sysReset_RN2903;
 8003dac:	4b57      	ldr	r3, [pc, #348]	@ (8003f0c <_Z12setupLoraAppv+0x164>)
 8003dae:	4a58      	ldr	r2, [pc, #352]	@ (8003f10 <_Z12setupLoraAppv+0x168>)
 8003db0:	605a      	str	r2, [r3, #4]
	sysReset.size			= sizeof( sysReset_RN2903 );
 8003db2:	4b56      	ldr	r3, [pc, #344]	@ (8003f0c <_Z12setupLoraAppv+0x164>)
 8003db4:	220c      	movs	r2, #12
 8003db6:	701a      	strb	r2, [r3, #0]
	sysReset.responseSize	= 1;
 8003db8:	4b54      	ldr	r3, [pc, #336]	@ (8003f0c <_Z12setupLoraAppv+0x164>)
 8003dba:	2201      	movs	r2, #1
 8003dbc:	721a      	strb	r2, [r3, #8]

	///////////////////
	// RADIO SET MOD //
	///////////////////

	radioSetMod.command		= radioSetMod_RN2903;
 8003dbe:	4b55      	ldr	r3, [pc, #340]	@ (8003f14 <_Z12setupLoraAppv+0x16c>)
 8003dc0:	4a55      	ldr	r2, [pc, #340]	@ (8003f18 <_Z12setupLoraAppv+0x170>)
 8003dc2:	605a      	str	r2, [r3, #4]
	radioSetMod.size		= sizeof( radioSetMod_RN2903 ) - 1;
 8003dc4:	4b53      	ldr	r3, [pc, #332]	@ (8003f14 <_Z12setupLoraAppv+0x16c>)
 8003dc6:	2214      	movs	r2, #20
 8003dc8:	701a      	strb	r2, [r3, #0]
	radioSetMod.responseSize= 3;
 8003dca:	4b52      	ldr	r3, [pc, #328]	@ (8003f14 <_Z12setupLoraAppv+0x16c>)
 8003dcc:	2203      	movs	r2, #3
 8003dce:	721a      	strb	r2, [r3, #8]

	//////////////////
	// RADIO SET SF //
	//////////////////

	radioSetSf.command		= radioSetSf_RN2903;
 8003dd0:	4b52      	ldr	r3, [pc, #328]	@ (8003f1c <_Z12setupLoraAppv+0x174>)
 8003dd2:	4a53      	ldr	r2, [pc, #332]	@ (8003f20 <_Z12setupLoraAppv+0x178>)
 8003dd4:	605a      	str	r2, [r3, #4]
	radioSetSf.size			= sizeof( radioSetSf_RN2903 ) - 1;
 8003dd6:	4b51      	ldr	r3, [pc, #324]	@ (8003f1c <_Z12setupLoraAppv+0x174>)
 8003dd8:	2213      	movs	r2, #19
 8003dda:	701a      	strb	r2, [r3, #0]
	radioSetSf.responseSize	= 3;
 8003ddc:	4b4f      	ldr	r3, [pc, #316]	@ (8003f1c <_Z12setupLoraAppv+0x174>)
 8003dde:	2203      	movs	r2, #3
 8003de0:	721a      	strb	r2, [r3, #8]

	//////////////////
	// RADIO SET BW //
	//////////////////

	radioSetBw.command		= radioSetBw_RN2903;
 8003de2:	4b50      	ldr	r3, [pc, #320]	@ (8003f24 <_Z12setupLoraAppv+0x17c>)
 8003de4:	4a50      	ldr	r2, [pc, #320]	@ (8003f28 <_Z12setupLoraAppv+0x180>)
 8003de6:	605a      	str	r2, [r3, #4]
	radioSetBw.size			= sizeof( radioSetBw_RN2903 ) - 1;
 8003de8:	4b4e      	ldr	r3, [pc, #312]	@ (8003f24 <_Z12setupLoraAppv+0x17c>)
 8003dea:	2212      	movs	r2, #18
 8003dec:	701a      	strb	r2, [r3, #0]
	radioSetBw.responseSize = 3;
 8003dee:	4b4d      	ldr	r3, [pc, #308]	@ (8003f24 <_Z12setupLoraAppv+0x17c>)
 8003df0:	2203      	movs	r2, #3
 8003df2:	721a      	strb	r2, [r3, #8]

	///////////////////
	// RADIO SET PWR //
	///////////////////

	radioSetPwr.command		= radioSetPwr_RN2903;
 8003df4:	4b4d      	ldr	r3, [pc, #308]	@ (8003f2c <_Z12setupLoraAppv+0x184>)
 8003df6:	4a4e      	ldr	r2, [pc, #312]	@ (8003f30 <_Z12setupLoraAppv+0x188>)
 8003df8:	605a      	str	r2, [r3, #4]
	radioSetPwr.size		= sizeof( radioSetPwr_RN2903 ) - 1;
 8003dfa:	4b4c      	ldr	r3, [pc, #304]	@ (8003f2c <_Z12setupLoraAppv+0x184>)
 8003dfc:	2212      	movs	r2, #18
 8003dfe:	701a      	strb	r2, [r3, #0]
	radioSetPwr.responseSize= 3;
 8003e00:	4b4a      	ldr	r3, [pc, #296]	@ (8003f2c <_Z12setupLoraAppv+0x184>)
 8003e02:	2203      	movs	r2, #3
 8003e04:	721a      	strb	r2, [r3, #8]

	////////////////////
	// MAC SET DEVEUI //
	////////////////////

	macSetDeveui.command	= macSetDevEui_RN2903;
 8003e06:	4b4b      	ldr	r3, [pc, #300]	@ (8003f34 <_Z12setupLoraAppv+0x18c>)
 8003e08:	4a4b      	ldr	r2, [pc, #300]	@ (8003f38 <_Z12setupLoraAppv+0x190>)
 8003e0a:	605a      	str	r2, [r3, #4]
	macSetDeveui.size		= sizeof( macSetDevEui_RN2903 ) - 1;
 8003e0c:	4b49      	ldr	r3, [pc, #292]	@ (8003f34 <_Z12setupLoraAppv+0x18c>)
 8003e0e:	2221      	movs	r2, #33	@ 0x21
 8003e10:	701a      	strb	r2, [r3, #0]
	macSetDeveui.responseSize	= 3;
 8003e12:	4b48      	ldr	r3, [pc, #288]	@ (8003f34 <_Z12setupLoraAppv+0x18c>)
 8003e14:	2203      	movs	r2, #3
 8003e16:	721a      	strb	r2, [r3, #8]

	/////////////////////////
	// MAC SET NETWORK KEY //
	/////////////////////////

	macSetNwkskey.command	= macSetNwkskey_RN2903;
 8003e18:	4b48      	ldr	r3, [pc, #288]	@ (8003f3c <_Z12setupLoraAppv+0x194>)
 8003e1a:	4a49      	ldr	r2, [pc, #292]	@ (8003f40 <_Z12setupLoraAppv+0x198>)
 8003e1c:	605a      	str	r2, [r3, #4]
	macSetNwkskey.size		= sizeof( macSetNwkskey_RN2903 ) - 1;
 8003e1e:	4b47      	ldr	r3, [pc, #284]	@ (8003f3c <_Z12setupLoraAppv+0x194>)
 8003e20:	2232      	movs	r2, #50	@ 0x32
 8003e22:	701a      	strb	r2, [r3, #0]
	macSetNwkskey.responseSize	= 3;
 8003e24:	4b45      	ldr	r3, [pc, #276]	@ (8003f3c <_Z12setupLoraAppv+0x194>)
 8003e26:	2203      	movs	r2, #3
 8003e28:	721a      	strb	r2, [r3, #8]

	//////////////////////
	// MAC SET APPS KEY //
	//////////////////////

	macSetAppskey.command	= macSetAppskey_RN2903;
 8003e2a:	4b46      	ldr	r3, [pc, #280]	@ (8003f44 <_Z12setupLoraAppv+0x19c>)
 8003e2c:	4a46      	ldr	r2, [pc, #280]	@ (8003f48 <_Z12setupLoraAppv+0x1a0>)
 8003e2e:	605a      	str	r2, [r3, #4]
	macSetAppskey.size		= sizeof( macSetAppskey_RN2903 ) - 1;
 8003e30:	4b44      	ldr	r3, [pc, #272]	@ (8003f44 <_Z12setupLoraAppv+0x19c>)
 8003e32:	2232      	movs	r2, #50	@ 0x32
 8003e34:	701a      	strb	r2, [r3, #0]
	macSetAppskey.responseSize	= 3;
 8003e36:	4b43      	ldr	r3, [pc, #268]	@ (8003f44 <_Z12setupLoraAppv+0x19c>)
 8003e38:	2203      	movs	r2, #3
 8003e3a:	721a      	strb	r2, [r3, #8]

	/////////////////////////
	// MAC SET DEV ADDRESS //
	/////////////////////////

	macSetDevAddr.command		= macSetDevAddr_RN2903;
 8003e3c:	4b43      	ldr	r3, [pc, #268]	@ (8003f4c <_Z12setupLoraAppv+0x1a4>)
 8003e3e:	4a44      	ldr	r2, [pc, #272]	@ (8003f50 <_Z12setupLoraAppv+0x1a8>)
 8003e40:	605a      	str	r2, [r3, #4]
	macSetDevAddr.size			= sizeof ( macSetDevAddr_RN2903 ) - 1;
 8003e42:	4b42      	ldr	r3, [pc, #264]	@ (8003f4c <_Z12setupLoraAppv+0x1a4>)
 8003e44:	221a      	movs	r2, #26
 8003e46:	701a      	strb	r2, [r3, #0]
	macSetDevAddr.responseSize	= 2;
 8003e48:	4b40      	ldr	r3, [pc, #256]	@ (8003f4c <_Z12setupLoraAppv+0x1a4>)
 8003e4a:	2202      	movs	r2, #2
 8003e4c:	721a      	strb	r2, [r3, #8]

	///////////////////
	// MAC JOIN OTAA //
	///////////////////

	macJoinOtaa.command			= macJoinOtaa_RN2903;
 8003e4e:	4b41      	ldr	r3, [pc, #260]	@ (8003f54 <_Z12setupLoraAppv+0x1ac>)
 8003e50:	4a41      	ldr	r2, [pc, #260]	@ (8003f58 <_Z12setupLoraAppv+0x1b0>)
 8003e52:	605a      	str	r2, [r3, #4]
	macJoinOtaa.size			= sizeof ( macJoinOtaa_RN2903 ) - 1;
 8003e54:	4b3f      	ldr	r3, [pc, #252]	@ (8003f54 <_Z12setupLoraAppv+0x1ac>)
 8003e56:	220f      	movs	r2, #15
 8003e58:	701a      	strb	r2, [r3, #0]
	macJoinOtaa.responseSize	= 7;
 8003e5a:	4b3e      	ldr	r3, [pc, #248]	@ (8003f54 <_Z12setupLoraAppv+0x1ac>)
 8003e5c:	2207      	movs	r2, #7
 8003e5e:	721a      	strb	r2, [r3, #8]

	//////////////////
	// MAC JOIN ABP //
	//////////////////

	macJoinAbp.command		= macJoinAbp_RN2903;
 8003e60:	4b3e      	ldr	r3, [pc, #248]	@ (8003f5c <_Z12setupLoraAppv+0x1b4>)
 8003e62:	4a3f      	ldr	r2, [pc, #252]	@ (8003f60 <_Z12setupLoraAppv+0x1b8>)
 8003e64:	605a      	str	r2, [r3, #4]
	macJoinAbp.size			= sizeof( macJoinAbp_RN2903 ) - 1;
 8003e66:	4b3d      	ldr	r3, [pc, #244]	@ (8003f5c <_Z12setupLoraAppv+0x1b4>)
 8003e68:	220e      	movs	r2, #14
 8003e6a:	701a      	strb	r2, [r3, #0]
	macJoinAbp.responseSize	= 2;
 8003e6c:	4b3b      	ldr	r3, [pc, #236]	@ (8003f5c <_Z12setupLoraAppv+0x1b4>)
 8003e6e:	2202      	movs	r2, #2
 8003e70:	721a      	strb	r2, [r3, #8]

	//////////////////
	// MAC SET SYNC //
	//////////////////

	macSetSync.command		= macSetSync_RN2903;
 8003e72:	4b3c      	ldr	r3, [pc, #240]	@ (8003f64 <_Z12setupLoraAppv+0x1bc>)
 8003e74:	4a3c      	ldr	r2, [pc, #240]	@ (8003f68 <_Z12setupLoraAppv+0x1c0>)
 8003e76:	605a      	str	r2, [r3, #4]
	macSetSync.size			= sizeof( macSetSync_RN2903 ) - 1;
 8003e78:	4b3a      	ldr	r3, [pc, #232]	@ (8003f64 <_Z12setupLoraAppv+0x1bc>)
 8003e7a:	2211      	movs	r2, #17
 8003e7c:	701a      	strb	r2, [r3, #0]
	macSetSync.responseSize	= 3;
 8003e7e:	4b39      	ldr	r3, [pc, #228]	@ (8003f64 <_Z12setupLoraAppv+0x1bc>)
 8003e80:	2203      	movs	r2, #3
 8003e82:	721a      	strb	r2, [r3, #8]

	//////////////
	// MAC SAVE //
	//////////////

	macSave.command			= macSave_RN2903;
 8003e84:	4b39      	ldr	r3, [pc, #228]	@ (8003f6c <_Z12setupLoraAppv+0x1c4>)
 8003e86:	4a3a      	ldr	r2, [pc, #232]	@ (8003f70 <_Z12setupLoraAppv+0x1c8>)
 8003e88:	605a      	str	r2, [r3, #4]
	macSave.size			= sizeof( macSave_RN2903 ) - 1;
 8003e8a:	4b38      	ldr	r3, [pc, #224]	@ (8003f6c <_Z12setupLoraAppv+0x1c4>)
 8003e8c:	220a      	movs	r2, #10
 8003e8e:	701a      	strb	r2, [r3, #0]
	macSave.responseSize	= 3;
 8003e90:	4b36      	ldr	r3, [pc, #216]	@ (8003f6c <_Z12setupLoraAppv+0x1c4>)
 8003e92:	2203      	movs	r2, #3
 8003e94:	721a      	strb	r2, [r3, #8]

	/////////////////
	// MAC TX DATA //
	/////////////////

	 macTxData.command		= macTxData_RN2903;
 8003e96:	4b37      	ldr	r3, [pc, #220]	@ (8003f74 <_Z12setupLoraAppv+0x1cc>)
 8003e98:	4a37      	ldr	r2, [pc, #220]	@ (8003f78 <_Z12setupLoraAppv+0x1d0>)
 8003e9a:	605a      	str	r2, [r3, #4]
	 macTxData.size			= sizeof( macTxData_RN2903 ) - 1;
 8003e9c:	4b35      	ldr	r3, [pc, #212]	@ (8003f74 <_Z12setupLoraAppv+0x1cc>)
 8003e9e:	2219      	movs	r2, #25
 8003ea0:	701a      	strb	r2, [r3, #0]
	 macTxData.responseSize	= 14;
 8003ea2:	4b34      	ldr	r3, [pc, #208]	@ (8003f74 <_Z12setupLoraAppv+0x1cc>)
 8003ea4:	220e      	movs	r2, #14
 8003ea6:	721a      	strb	r2, [r3, #8]

	 /////////////////
	 // MAC TX DATA //
	 /////////////////

	 macTxGps.command		= macTxGps_RN2903;
 8003ea8:	4b34      	ldr	r3, [pc, #208]	@ (8003f7c <_Z12setupLoraAppv+0x1d4>)
 8003eaa:	4a35      	ldr	r2, [pc, #212]	@ (8003f80 <_Z12setupLoraAppv+0x1d8>)
 8003eac:	605a      	str	r2, [r3, #4]
	 macTxGps.size			= sizeof( macTxGps_RN2903 ) - 1;
 8003eae:	4b33      	ldr	r3, [pc, #204]	@ (8003f7c <_Z12setupLoraAppv+0x1d4>)
 8003eb0:	2219      	movs	r2, #25
 8003eb2:	701a      	strb	r2, [r3, #0]
	 macTxGps.responseSize	= 14;
 8003eb4:	4b31      	ldr	r3, [pc, #196]	@ (8003f7c <_Z12setupLoraAppv+0x1d4>)
 8003eb6:	220e      	movs	r2, #14
 8003eb8:	721a      	strb	r2, [r3, #8]

	 /////////////////
	 // MAC TX DATA //
	 /////////////////

	  macTxSys.command		= macTxSys_RN2903;
 8003eba:	4b32      	ldr	r3, [pc, #200]	@ (8003f84 <_Z12setupLoraAppv+0x1dc>)
 8003ebc:	4a32      	ldr	r2, [pc, #200]	@ (8003f88 <_Z12setupLoraAppv+0x1e0>)
 8003ebe:	605a      	str	r2, [r3, #4]
	  macTxSys.size			= sizeof( macTxSys_RN2903 ) - 1;
 8003ec0:	4b30      	ldr	r3, [pc, #192]	@ (8003f84 <_Z12setupLoraAppv+0x1dc>)
 8003ec2:	2215      	movs	r2, #21
 8003ec4:	701a      	strb	r2, [r3, #0]
	  macTxSys.responseSize	= 14;
 8003ec6:	4b2f      	ldr	r3, [pc, #188]	@ (8003f84 <_Z12setupLoraAppv+0x1dc>)
 8003ec8:	220e      	movs	r2, #14
 8003eca:	721a      	strb	r2, [r3, #8]

	  //////////////////
	  // MAC SET CH 8 //
	  //////////////////

	  macSetCh8.command		= macSetCh8_RN2903;
 8003ecc:	4b2f      	ldr	r3, [pc, #188]	@ (8003f8c <_Z12setupLoraAppv+0x1e4>)
 8003ece:	4a30      	ldr	r2, [pc, #192]	@ (8003f90 <_Z12setupLoraAppv+0x1e8>)
 8003ed0:	605a      	str	r2, [r3, #4]
	  macSetCh8.size		= sizeof( macSetCh8_RN2903 ) - 1;
 8003ed2:	4b2e      	ldr	r3, [pc, #184]	@ (8003f8c <_Z12setupLoraAppv+0x1e4>)
 8003ed4:	2219      	movs	r2, #25
 8003ed6:	701a      	strb	r2, [r3, #0]
	  macSetCh8.responseSize	= 9;
 8003ed8:	4b2c      	ldr	r3, [pc, #176]	@ (8003f8c <_Z12setupLoraAppv+0x1e4>)
 8003eda:	2209      	movs	r2, #9
 8003edc:	721a      	strb	r2, [r3, #8]

	  //////////////////
	  // MAC SET CH 9 //
	  //////////////////

	  macSetCh9.command		= macSetCh9_RN2903;
 8003ede:	4b2d      	ldr	r3, [pc, #180]	@ (8003f94 <_Z12setupLoraAppv+0x1ec>)
 8003ee0:	4a2d      	ldr	r2, [pc, #180]	@ (8003f98 <_Z12setupLoraAppv+0x1f0>)
 8003ee2:	605a      	str	r2, [r3, #4]
	  macSetCh9.size		= sizeof( macSetCh9_RN2903 ) - 1;
 8003ee4:	4b2b      	ldr	r3, [pc, #172]	@ (8003f94 <_Z12setupLoraAppv+0x1ec>)
 8003ee6:	2219      	movs	r2, #25
 8003ee8:	701a      	strb	r2, [r3, #0]
	  macSetCh9.responseSize	= 9;
 8003eea:	4b2a      	ldr	r3, [pc, #168]	@ (8003f94 <_Z12setupLoraAppv+0x1ec>)
 8003eec:	2209      	movs	r2, #9
 8003eee:	721a      	strb	r2, [r3, #8]

	  ///////////////////
	  // MAC SET CH 10 //
	  ///////////////////
	  macSetCh10.command		= macSetCh10_RN2903;
 8003ef0:	4b2a      	ldr	r3, [pc, #168]	@ (8003f9c <_Z12setupLoraAppv+0x1f4>)
 8003ef2:	4a2b      	ldr	r2, [pc, #172]	@ (8003fa0 <_Z12setupLoraAppv+0x1f8>)
 8003ef4:	605a      	str	r2, [r3, #4]
	  macSetCh10.size			= sizeof( macSetCh10_RN2903 ) - 1;
 8003ef6:	4b29      	ldr	r3, [pc, #164]	@ (8003f9c <_Z12setupLoraAppv+0x1f4>)
 8003ef8:	221a      	movs	r2, #26
 8003efa:	701a      	strb	r2, [r3, #0]
	  macSetCh10.responseSize	= 9;
 8003efc:	4b27      	ldr	r3, [pc, #156]	@ (8003f9c <_Z12setupLoraAppv+0x1f4>)
 8003efe:	2209      	movs	r2, #9
 8003f00:	721a      	strb	r2, [r3, #8]

}
 8003f02:	bf00      	nop
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr
 8003f0c:	2000053c 	.word	0x2000053c
 8003f10:	200001a8 	.word	0x200001a8
 8003f14:	20000548 	.word	0x20000548
 8003f18:	200001b4 	.word	0x200001b4
 8003f1c:	20000554 	.word	0x20000554
 8003f20:	200001cc 	.word	0x200001cc
 8003f24:	20000560 	.word	0x20000560
 8003f28:	200001e0 	.word	0x200001e0
 8003f2c:	2000056c 	.word	0x2000056c
 8003f30:	200001f4 	.word	0x200001f4
 8003f34:	20000578 	.word	0x20000578
 8003f38:	20000208 	.word	0x20000208
 8003f3c:	20000590 	.word	0x20000590
 8003f40:	20000248 	.word	0x20000248
 8003f44:	2000059c 	.word	0x2000059c
 8003f48:	2000027c 	.word	0x2000027c
 8003f4c:	20000584 	.word	0x20000584
 8003f50:	2000022c 	.word	0x2000022c
 8003f54:	200005a8 	.word	0x200005a8
 8003f58:	200002b0 	.word	0x200002b0
 8003f5c:	200005b4 	.word	0x200005b4
 8003f60:	200002c0 	.word	0x200002c0
 8003f64:	200005c0 	.word	0x200005c0
 8003f68:	200002d0 	.word	0x200002d0
 8003f6c:	200005cc 	.word	0x200005cc
 8003f70:	200002e4 	.word	0x200002e4
 8003f74:	200005d8 	.word	0x200005d8
 8003f78:	200002f0 	.word	0x200002f0
 8003f7c:	200005e4 	.word	0x200005e4
 8003f80:	2000030c 	.word	0x2000030c
 8003f84:	200005f0 	.word	0x200005f0
 8003f88:	20000328 	.word	0x20000328
 8003f8c:	200005fc 	.word	0x200005fc
 8003f90:	20000340 	.word	0x20000340
 8003f94:	20000608 	.word	0x20000608
 8003f98:	2000035c 	.word	0x2000035c
 8003f9c:	20000614 	.word	0x20000614
 8003fa0:	20000378 	.word	0x20000378

08003fa4 <_ZN10loraRutine10addCommandEP13rn2903Command>:

/////////////////
// ADD COMMAND //
/////////////////

void loraRutine::addCommand ( rn2903Command *command ){
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
	this->listCommands[ this->sizeList ]	= command;	// AÑADE PUNTERO A LISTA
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f893 3191 	ldrb.w	r3, [r3, #401]	@ 0x191
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	683a      	ldr	r2, [r7, #0]
 8003fba:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	this->sizeList++;									// Suma 1 al largo de lista
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f893 3191 	ldrb.w	r3, [r3, #401]	@ 0x191
 8003fc4:	3301      	adds	r3, #1
 8003fc6:	b2da      	uxtb	r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f883 2191 	strb.w	r2, [r3, #401]	@ 0x191
}
 8003fce:	bf00      	nop
 8003fd0:	370c      	adds	r7, #12
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr

08003fda <_ZN10loraRutine7commandEv>:

/////////////
// COMMAND //
/////////////

rn2903Command *loraRutine::command(){
 8003fda:	b480      	push	{r7}
 8003fdc:	b085      	sub	sp, #20
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
	uint8_t count	= this->actual;			// Copia elemento actual de rutina
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8003fe8:	73fb      	strb	r3, [r7, #15]

	this->actual++;							// Suma 1 al elemento actuañ
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	b2da      	uxtb	r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f883 2192 	strb.w	r2, [r3, #402]	@ 0x192

	if (this->actual >= this->sizeList){	// Si es el ultimo de la lista
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f893 2192 	ldrb.w	r2, [r3, #402]	@ 0x192
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f893 3191 	ldrb.w	r3, [r3, #401]	@ 0x191
 8004006:	429a      	cmp	r2, r3
 8004008:	d307      	bcc.n	800401a <_ZN10loraRutine7commandEv+0x40>
		this->actual	= 0;				// Reinicia la lista
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 2192 	strb.w	r2, [r3, #402]	@ 0x192
		this->stopped	= 1;				// Indica que es el ultimo elemento
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2201      	movs	r2, #1
 8004016:	f883 2190 	strb.w	r2, [r3, #400]	@ 0x190
	}
	return this->listCommands[count];		// Retorta puntero
 800401a:	7bfa      	ldrb	r2, [r7, #15]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 8004022:	4618      	mov	r0, r3
 8004024:	3714      	adds	r7, #20
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr

0800402e <_ZN10loraRutine5resetEv>:

///////////
// RESET //
///////////

void loraRutine::reset(){
 800402e:	b480      	push	{r7}
 8004030:	b083      	sub	sp, #12
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
	this->actual	= 0;	// Reinicia contador de lista
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 2192 	strb.w	r2, [r3, #402]	@ 0x192
	this->stopped	= 0;	// No esta en el ultimo elemento
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 2190 	strb.w	r2, [r3, #400]	@ 0x190
}
 8004046:	bf00      	nop
 8004048:	370c      	adds	r7, #12
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr

08004052 <_ZN10loraRutine6finishEv>:

////////////
// FINISH //
////////////
bool loraRutine::finish(){
 8004052:	b480      	push	{r7}
 8004054:	b083      	sub	sp, #12
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
	return this->stopped;	// Indica si es el ultimo elemento
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f893 3190 	ldrb.w	r3, [r3, #400]	@ 0x190

}
 8004060:	4618      	mov	r0, r3
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <_ZN9wdTimeoutC1El>:
 *		5.- newMessage:	Indica si se recibió un mensaje
 *		6.- timeout:	Indica si hubo un timeout
 *
 */

wdTimeout::wdTimeout( long limit ){	// Constructor
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
	this->limit	= limit;			// Se debe fijar el limite de timeout
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	683a      	ldr	r2, [r7, #0]
 800407a:	609a      	str	r2, [r3, #8]
}
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4618      	mov	r0, r3
 8004080:	370c      	adds	r7, #12
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr

0800408a <_ZN9wdTimeout9setOutputEv>:

////////////////
// SET OUTPUT //
////////////////

void wdTimeout::setOutput(){	//
 800408a:	b480      	push	{r7}
 800408c:	b083      	sub	sp, #12
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
	this->flagOutput	= 1;	// Indica que salió un comando
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2201      	movs	r2, #1
 8004096:	705a      	strb	r2, [r3, #1]
	this->counter		= 0;	// Reinicia contador
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	605a      	str	r2, [r3, #4]
}
 800409e:	bf00      	nop
 80040a0:	370c      	adds	r7, #12
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr

080040aa <_ZN9wdTimeout6addOneEv>:

/////////////
// ADD ONE //
/////////////

void wdTimeout::addOne(){
 80040aa:	b480      	push	{r7}
 80040ac:	b083      	sub	sp, #12
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]
	if ( this->flagOutput ){			// Si salió un comando
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	785b      	ldrb	r3, [r3, #1]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d004      	beq.n	80040c4 <_ZN9wdTimeout6addOneEv+0x1a>
		this->counter++;				// Suma uno al contador
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	1c5a      	adds	r2, r3, #1
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	605a      	str	r2, [r3, #4]
	}

	if (this->counter >= this->limit ){	// Si pasa el límite
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685a      	ldr	r2, [r3, #4]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	db03      	blt.n	80040d8 <_ZN9wdTimeout6addOneEv+0x2e>
		this->flagTimeout	= 1;		// Se considera timeout
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	709a      	strb	r2, [r3, #2]
	}
	else{								// Si no
		this->flagTimeout	= 0;		// No indica timeout
	}
}
 80040d6:	e002      	b.n	80040de <_ZN9wdTimeout6addOneEv+0x34>
		this->flagTimeout	= 0;		// No indica timeout
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	709a      	strb	r2, [r3, #2]
}
 80040de:	bf00      	nop
 80040e0:	370c      	adds	r7, #12
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr

080040ea <_ZN9wdTimeout8setInputEv>:

///////////////
// SET INPUT //
///////////////

void wdTimeout::setInput(){
 80040ea:	b480      	push	{r7}
 80040ec:	b083      	sub	sp, #12
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
	this->flagInput		= this->flagOutput;		// Copia indicador salida de comando )
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	785a      	ldrb	r2, [r3, #1]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	701a      	strb	r2, [r3, #0]
												// Si hay multiples respuestas toma sentido
	this->flagOutput	= 0;					// Reinicia indicador de salida comando
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	705a      	strb	r2, [r3, #1]
	this->counter		= 0;					// Reinicia contador
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	605a      	str	r2, [r3, #4]
}
 8004106:	bf00      	nop
 8004108:	370c      	adds	r7, #12
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr

08004112 <_ZN9wdTimeout7timeOutEv>:

/////////////
// TIMEOUT //
/////////////

bool wdTimeout::timeOut(){
 8004112:	b480      	push	{r7}
 8004114:	b085      	sub	sp, #20
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
	bool flag			= this->flagTimeout;	// Copia indicador timeout
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	789b      	ldrb	r3, [r3, #2]
 800411e:	73fb      	strb	r3, [r7, #15]
	this->flagTimeout	= 0;					// Reinicia indicador timeout
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	709a      	strb	r2, [r3, #2]
	return flag;								// Retorna valor guardado
 8004126:	7bfb      	ldrb	r3, [r7, #15]
}
 8004128:	4618      	mov	r0, r3
 800412a:	3714      	adds	r7, #20
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <_ZN9loraCheck18setResponsePointerEPPhh>:

//////////////////////////
// SET RESPONSE POINTER //
//////////////////////////

void loraCheck::setResponsePointer( uint8_t *pointer[], uint8_t sizeIdealResponses ){
 8004134:	b480      	push	{r7}
 8004136:	b085      	sub	sp, #20
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	4613      	mov	r3, r2
 8004140:	71fb      	strb	r3, [r7, #7]
	this->idealResponses		= &pointer[0];
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	68ba      	ldr	r2, [r7, #8]
 8004146:	609a      	str	r2, [r3, #8]
	this->sizeIdealResponses	= sizeIdealResponses;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	79fa      	ldrb	r2, [r7, #7]
 800414c:	731a      	strb	r2, [r3, #12]
}
 800414e:	bf00      	nop
 8004150:	3714      	adds	r7, #20
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr

0800415a <_ZN9loraCheck17setIdealResponsesEh>:

////////////////////////
// SET IDEAL RESPONSE //
////////////////////////

void loraCheck::setIdealResponses( uint8_t qtty ){
 800415a:	b480      	push	{r7}
 800415c:	b083      	sub	sp, #12
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
 8004162:	460b      	mov	r3, r1
 8004164:	70fb      	strb	r3, [r7, #3]
	this->qtty				= qtty;				// Copia el largo del arreglo
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	78fa      	ldrb	r2, [r7, #3]
 800416a:	705a      	strb	r2, [r3, #1]
}
 800416c:	bf00      	nop
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <_ZN9loraCheck11newResponseEPhh>:

//////////////////
// NEW RESPONSE //
//////////////////

void loraCheck::newResponse( uint8_t *response, uint8_t sizeResponse ){
 8004178:	b480      	push	{r7}
 800417a:	b087      	sub	sp, #28
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	4613      	mov	r3, r2
 8004184:	71fb      	strb	r3, [r7, #7]
	this->realResponse	= response;			// Copia la respuesta entregada por el modulo
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	68ba      	ldr	r2, [r7, #8]
 800418a:	611a      	str	r2, [r3, #16]
	this->sizeResponse	= sizeResponse;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	79fa      	ldrb	r2, [r7, #7]
 8004190:	701a      	strb	r2, [r3, #0]

	uint8_t i;	// Crea variable auxiliar
	uint8_t j;

	for( i = 0; i < this->qtty; i++ ){								// Recorre el arreglo con for
 8004192:	2300      	movs	r3, #0
 8004194:	75fb      	strb	r3, [r7, #23]
 8004196:	e029      	b.n	80041ec <_ZN9loraCheck11newResponseEPhh+0x74>
		for ( j = 0; j < this->sizeResponse; j++ ){
 8004198:	2300      	movs	r3, #0
 800419a:	75bb      	strb	r3, [r7, #22]
 800419c:	e01a      	b.n	80041d4 <_ZN9loraCheck11newResponseEPhh+0x5c>
			if ( *(this->idealResponses[i] + j) == this->realResponse[j]){
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	689a      	ldr	r2, [r3, #8]
 80041a2:	7dfb      	ldrb	r3, [r7, #23]
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	4413      	add	r3, r2
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	7dbb      	ldrb	r3, [r7, #22]
 80041ac:	4413      	add	r3, r2
 80041ae:	781a      	ldrb	r2, [r3, #0]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6919      	ldr	r1, [r3, #16]
 80041b4:	7dbb      	ldrb	r3, [r7, #22]
 80041b6:	440b      	add	r3, r1
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d103      	bne.n	80041c6 <_ZN9loraCheck11newResponseEPhh+0x4e>
				this->flagCorrect	= 1;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2201      	movs	r2, #1
 80041c2:	70da      	strb	r2, [r3, #3]
 80041c4:	e003      	b.n	80041ce <_ZN9loraCheck11newResponseEPhh+0x56>
			}
			else{
				this->flagCorrect	= 0;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	70da      	strb	r2, [r3, #3]
				break;
 80041cc:	e007      	b.n	80041de <_ZN9loraCheck11newResponseEPhh+0x66>
		for ( j = 0; j < this->sizeResponse; j++ ){
 80041ce:	7dbb      	ldrb	r3, [r7, #22]
 80041d0:	3301      	adds	r3, #1
 80041d2:	75bb      	strb	r3, [r7, #22]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	7dba      	ldrb	r2, [r7, #22]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d3df      	bcc.n	800419e <_ZN9loraCheck11newResponseEPhh+0x26>
			}
		}
		if (this->flagCorrect){
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	78db      	ldrb	r3, [r3, #3]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d108      	bne.n	80041f8 <_ZN9loraCheck11newResponseEPhh+0x80>
	for( i = 0; i < this->qtty; i++ ){								// Recorre el arreglo con for
 80041e6:	7dfb      	ldrb	r3, [r7, #23]
 80041e8:	3301      	adds	r3, #1
 80041ea:	75fb      	strb	r3, [r7, #23]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	785b      	ldrb	r3, [r3, #1]
 80041f0:	7dfa      	ldrb	r2, [r7, #23]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d3d0      	bcc.n	8004198 <_ZN9loraCheck11newResponseEPhh+0x20>
 80041f6:	e000      	b.n	80041fa <_ZN9loraCheck11newResponseEPhh+0x82>
			break;
 80041f8:	bf00      	nop
		}
	}

	this->position	= i;											// Copia posicion final
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	7dfa      	ldrb	r2, [r7, #23]
 80041fe:	709a      	strb	r2, [r3, #2]
	this->flagCheck	= 1;											// Indica que hay nuevo resultado
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2201      	movs	r2, #1
 8004204:	711a      	strb	r2, [r3, #4]
}
 8004206:	bf00      	nop
 8004208:	371c      	adds	r7, #28
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr

08004212 <_ZN9loraCheck5checkEv>:

////////////////////
// CHECK RESPONSE //
////////////////////

bool loraCheck::check(){
 8004212:	b480      	push	{r7}
 8004214:	b085      	sub	sp, #20
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
	bool flag;							// Crea variable auxiliar
	flag			= this->flagCheck;	// Copia resultado de flag
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	791b      	ldrb	r3, [r3, #4]
 800421e:	73fb      	strb	r3, [r7, #15]
	this->flagCheck	= 0;				// Reinicia el indicador de nuevo resultado
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	711a      	strb	r2, [r3, #4]

	return 	flag;						// Entrega resultado
 8004226:	7bfb      	ldrb	r3, [r7, #15]
}
 8004228:	4618      	mov	r0, r3
 800422a:	3714      	adds	r7, #20
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <_ZN9loraCheck8responseEv>:

//////////////
// RESPONSE //
//////////////

uint8_t loraCheck::response(){
 8004234:	b480      	push	{r7}
 8004236:	b085      	sub	sp, #20
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
	uint8_t	finalResult;				// Crea variable auxiliar
	uint8_t i;

	if (this->flagCorrect){				// Si hubo respuesta correcta
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	78db      	ldrb	r3, [r3, #3]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d003      	beq.n	800424c <_ZN9loraCheck8responseEv+0x18>
		finalResult	= this->position;	// Copia posición
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	789b      	ldrb	r3, [r3, #2]
 8004248:	73fb      	strb	r3, [r7, #15]
 800424a:	e001      	b.n	8004250 <_ZN9loraCheck8responseEv+0x1c>
	}
	else{								// Si no
		finalResult	= 99;				// Entrega 99
 800424c:	2363      	movs	r3, #99	@ 0x63
 800424e:	73fb      	strb	r3, [r7, #15]
	}
	finalResult = this->position;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	789b      	ldrb	r3, [r3, #2]
 8004254:	73fb      	strb	r3, [r7, #15]

	if ( this->sizeResponse > 30 ){
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	2b1e      	cmp	r3, #30
 800425c:	d91c      	bls.n	8004298 <_ZN9loraCheck8responseEv+0x64>
		for (i = 0; i < this->sizeResponse-1; i++){
 800425e:	2300      	movs	r3, #0
 8004260:	73bb      	strb	r3, [r7, #14]
 8004262:	e013      	b.n	800428c <_ZN9loraCheck8responseEv+0x58>
			if ( this->realResponse[i] == 'R' && this->realResponse[i+1] == 'N'){
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	691a      	ldr	r2, [r3, #16]
 8004268:	7bbb      	ldrb	r3, [r7, #14]
 800426a:	4413      	add	r3, r2
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	2b52      	cmp	r3, #82	@ 0x52
 8004270:	d109      	bne.n	8004286 <_ZN9loraCheck8responseEv+0x52>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	691a      	ldr	r2, [r3, #16]
 8004276:	7bbb      	ldrb	r3, [r7, #14]
 8004278:	3301      	adds	r3, #1
 800427a:	4413      	add	r3, r2
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	2b4e      	cmp	r3, #78	@ 0x4e
 8004280:	d101      	bne.n	8004286 <_ZN9loraCheck8responseEv+0x52>
				finalResult	= 98;
 8004282:	2362      	movs	r3, #98	@ 0x62
 8004284:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < this->sizeResponse-1; i++){
 8004286:	7bbb      	ldrb	r3, [r7, #14]
 8004288:	3301      	adds	r3, #1
 800428a:	73bb      	strb	r3, [r7, #14]
 800428c:	7bba      	ldrb	r2, [r7, #14]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	3b01      	subs	r3, #1
 8004294:	429a      	cmp	r2, r3
 8004296:	dbe5      	blt.n	8004264 <_ZN9loraCheck8responseEv+0x30>
			}
		}
	}

	return finalResult;					// Retorna decisión
 8004298:	7bfb      	ldrb	r3, [r7, #15]
}
 800429a:	4618      	mov	r0, r3
 800429c:	3714      	adds	r7, #20
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr

080042a6 <_ZN9loraInput12insertBufferEPhh>:

///////////////////
// INSERT BUFFER //
///////////////////

void loraInput::insertBuffer(uint8_t *buffer, uint8_t sizeBuffer){
 80042a6:	b480      	push	{r7}
 80042a8:	b085      	sub	sp, #20
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	60f8      	str	r0, [r7, #12]
 80042ae:	60b9      	str	r1, [r7, #8]
 80042b0:	4613      	mov	r3, r2
 80042b2:	71fb      	strb	r3, [r7, #7]
	this->buffer		= buffer;		// Guarda puntero inicial del buffer
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	68ba      	ldr	r2, [r7, #8]
 80042b8:	605a      	str	r2, [r3, #4]
	this->sizeBuffer	= sizeBuffer;	// Guarda tamaño del buffer
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	79fa      	ldrb	r2, [r7, #7]
 80042be:	721a      	strb	r2, [r3, #8]
}
 80042c0:	bf00      	nop
 80042c2:	3714      	adds	r7, #20
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <_ZN9loraInput13insertElementEh>:

////////////////////
// INSERT ELEMENT //
////////////////////

void loraInput::insertElement(uint8_t element){
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	460b      	mov	r3, r1
 80042d6:	70fb      	strb	r3, [r7, #3]
	if (element == '\n'){							// Si llega un salto de linea
 80042d8:	78fb      	ldrb	r3, [r7, #3]
 80042da:	2b0a      	cmp	r3, #10
 80042dc:	d10c      	bne.n	80042f8 <_ZN9loraInput13insertElementEh+0x2c>
		this->sizeResponse		= this->count;		// Guarda tamaño de la respuesta
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	781a      	ldrb	r2, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
		this->count				= 0;				// Reinicia contador
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	701a      	strb	r2, [r3, #0]
		this->flagNewResponse	= 1;				// Indica que llego mensaje nuevo
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2201      	movs	r2, #1
 80042f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
			this->count	= 0;						// Reinicia buffer
		}
		this->buffer[this->count]	= element;	// Copia elemento en buffer
		this->count++;
	}
}
 80042f6:	e015      	b.n	8004324 <_ZN9loraInput13insertElementEh+0x58>
		if (this->count >= this->sizeBuffer){		// Si el contador se pasa del buffero
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	781a      	ldrb	r2, [r3, #0]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	7a1b      	ldrb	r3, [r3, #8]
 8004300:	429a      	cmp	r2, r3
 8004302:	d302      	bcc.n	800430a <_ZN9loraInput13insertElementEh+0x3e>
			this->count	= 0;						// Reinicia buffer
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	701a      	strb	r2, [r3, #0]
		this->buffer[this->count]	= element;	// Copia elemento en buffer
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	7812      	ldrb	r2, [r2, #0]
 8004312:	4413      	add	r3, r2
 8004314:	78fa      	ldrb	r2, [r7, #3]
 8004316:	701a      	strb	r2, [r3, #0]
		this->count++;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	3301      	adds	r3, #1
 800431e:	b2da      	uxtb	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	701a      	strb	r2, [r3, #0]
}
 8004324:	bf00      	nop
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <_ZN9loraInput11newResponseEv>:

//////////////////
// NEW RESPONSE //
//////////////////

bool loraInput::newResponse(){						// Se reinicia cuando es consultado
 8004330:	b480      	push	{r7}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
	bool flag				= this->flagNewResponse;	// Copia flag de nuevo mensaje
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800433e:	73fb      	strb	r3, [r7, #15]
	this->flagNewResponse	= 0;						// Reinicia flag
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
	return flag;										// Retorna respuesta guardada
 8004348:	7bfb      	ldrb	r3, [r7, #15]
}
 800434a:	4618      	mov	r0, r3
 800434c:	3714      	adds	r7, #20
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr

08004356 <_ZN9loraInput8responseEv>:

//////////////
// RESPONSE //
//////////////

uint8_t* loraInput::response(){	//
 8004356:	b480      	push	{r7}
 8004358:	b083      	sub	sp, #12
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
	return this->buffer;		// Entrega la respuesta final
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
}
 8004362:	4618      	mov	r0, r3
 8004364:	370c      	adds	r7, #12
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr

0800436e <_ZN9loraInput12responseSizeEv>:

uint8_t loraInput::responseSize(){
 800436e:	b480      	push	{r7}
 8004370:	b083      	sub	sp, #12
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
	return this->sizeResponse;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
}
 800437c:	4618      	mov	r0, r3
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <_ZN10loraSelect10setCommandEPhhh>:

/////////////////
// SET COMMAND //
/////////////////

void loraSelect::setCommand( uint8_t *command, uint8_t sizeCommand, uint8_t qtty ){
 8004388:	b480      	push	{r7}
 800438a:	b085      	sub	sp, #20
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	4611      	mov	r1, r2
 8004394:	461a      	mov	r2, r3
 8004396:	460b      	mov	r3, r1
 8004398:	71fb      	strb	r3, [r7, #7]
 800439a:	4613      	mov	r3, r2
 800439c:	71bb      	strb	r3, [r7, #6]
	this->command		= command;		//	Copia comando
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	68ba      	ldr	r2, [r7, #8]
 80043a2:	601a      	str	r2, [r3, #0]
	this->commandSize	= sizeCommand;	//	Copia lista de respuestas
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	79fa      	ldrb	r2, [r7, #7]
 80043a8:	711a      	strb	r2, [r3, #4]
	this->qtty			= qtty;			//	Copia cantidad de respeustas
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	79ba      	ldrb	r2, [r7, #6]
 80043ae:	715a      	strb	r2, [r3, #5]
	this->flagNew		= 1;			//	Indica que hay nuevo comando
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2201      	movs	r2, #1
 80043b4:	71da      	strb	r2, [r3, #7]
}
 80043b6:	bf00      	nop
 80043b8:	3714      	adds	r7, #20
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr

080043c2 <_ZN10loraSelect10newCommandEv>:

/////////////////
// NEW COMMAND //
/////////////////

bool loraSelect::newCommand(){
 80043c2:	b480      	push	{r7}
 80043c4:	b085      	sub	sp, #20
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
	bool flag = this->flagNew;								// Crea variable
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	79db      	ldrb	r3, [r3, #7]
 80043ce:	73fb      	strb	r3, [r7, #15]
	this->flagNew	= 0;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	71da      	strb	r2, [r3, #7]

	return flag;							// Retorna salida
 80043d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3714      	adds	r7, #20
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <_ZN10loraSelect10getCommandEv>:

/////////////////
// GET COMMAND //
/////////////////

uint8_t	*loraSelect::getCommand(){
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
	return this->command;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <_ZN10loraSelect14getCommandSizeEv>:

///////////////////
// GET RESPONSES //
///////////////////

uint8_t loraSelect::getCommandSize(){
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
	return this->commandSize;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	791b      	ldrb	r3, [r3, #4]
}
 8004408:	4618      	mov	r0, r3
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <_ZN10loraSelect13qttyResponsesEv>:

////////////////////////
// QUANTITY RESPONSES //
////////////////////////

uint8_t loraSelect::qttyResponses(){
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
	return this->qtty;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	795b      	ldrb	r3, [r3, #5]
}
 8004420:	4618      	mov	r0, r3
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <_ZN12loraDecision10setRetriesEh>:

//////////////////
// SET RETRIES  //
//////////////////

void loraDecision::setRetries( uint8_t retries ){
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	460b      	mov	r3, r1
 8004436:	70fb      	strb	r3, [r7, #3]
	this->retries	= retries;					//
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	78fa      	ldrb	r2, [r7, #3]
 800443c:	701a      	strb	r2, [r3, #0]
}
 800443e:	bf00      	nop
 8004440:	370c      	adds	r7, #12
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr

0800444a <_ZN12loraDecision8responseEh>:
//////////////
// RESPONSE //
//////////////


void loraDecision::response ( uint8_t position ){
 800444a:	b480      	push	{r7}
 800444c:	b083      	sub	sp, #12
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
 8004452:	460b      	mov	r3, r1
 8004454:	70fb      	strb	r3, [r7, #3]
	this->position	= position;					//	Copia posicion
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	78fa      	ldrb	r2, [r7, #3]
 800445a:	705a      	strb	r2, [r3, #1]

	if ( position == 0 || position == 12 ){						//	Si no hay error
 800445c:	78fb      	ldrb	r3, [r7, #3]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d002      	beq.n	8004468 <_ZN12loraDecision8responseEh+0x1e>
 8004462:	78fb      	ldrb	r3, [r7, #3]
 8004464:	2b0c      	cmp	r3, #12
 8004466:	d10f      	bne.n	8004488 <_ZN12loraDecision8responseEh+0x3e>
		this->flagCorrect	= 1;				//	Indica que la respuesta es correcta
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	70da      	strb	r2, [r3, #3]
		this->flagEnable	= 1;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2201      	movs	r2, #1
 8004472:	719a      	strb	r2, [r3, #6]
		this->flagBurn		= 0;				//	Reinicia flag quemado
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	711a      	strb	r2, [r3, #4]
		this->flagRepeat	= 0;				//	Reinicia flag repetir
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	715a      	strb	r2, [r3, #5]
		this->count			= 0;				//	Reinicia contador
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	709a      	strb	r2, [r3, #2]
		else{									//	Si no pasa  limite
			this->flagBurn		= 0;			//	No esta quemado
			this->flagRepeat	= 1;			//	Solicita repetir
		}
	}
}
 8004486:	e054      	b.n	8004532 <_ZN12loraDecision8responseEh+0xe8>
	else if ( position == 10 ){
 8004488:	78fb      	ldrb	r3, [r7, #3]
 800448a:	2b0a      	cmp	r3, #10
 800448c:	d10f      	bne.n	80044ae <_ZN12loraDecision8responseEh+0x64>
		this->flagCorrect	= 0;				//	Indica que la respuesta es correcta
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	70da      	strb	r2, [r3, #3]
		this->flagEnable	= 1;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	719a      	strb	r2, [r3, #6]
		this->flagBurn		= 1;				//	Reinicia flag quemado
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2201      	movs	r2, #1
 800449e:	711a      	strb	r2, [r3, #4]
		this->flagRepeat	= 0;				//	Reinicia flag repetir
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	715a      	strb	r2, [r3, #5]
		this->count			= 0;				//	Reinicia contador
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	709a      	strb	r2, [r3, #2]
}
 80044ac:	e041      	b.n	8004532 <_ZN12loraDecision8responseEh+0xe8>
	else if ( position < 98 ){
 80044ae:	78fb      	ldrb	r3, [r7, #3]
 80044b0:	2b61      	cmp	r3, #97	@ 0x61
 80044b2:	d80f      	bhi.n	80044d4 <_ZN12loraDecision8responseEh+0x8a>
		this->flagCorrect	= 1;				//	Indica que la respuesta es correcta
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	70da      	strb	r2, [r3, #3]
		this->flagEnable	= 1;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2201      	movs	r2, #1
 80044be:	719a      	strb	r2, [r3, #6]
		this->flagBurn		= 0;				//	Reinicia flag quemado
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	711a      	strb	r2, [r3, #4]
		this->flagRepeat	= 0;				//	Reinicia flag repetir
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	715a      	strb	r2, [r3, #5]
		this->count			= 0;				//	Reinicia contador
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	709a      	strb	r2, [r3, #2]
}
 80044d2:	e02e      	b.n	8004532 <_ZN12loraDecision8responseEh+0xe8>
	else if ( position == 98 ){
 80044d4:	78fb      	ldrb	r3, [r7, #3]
 80044d6:	2b62      	cmp	r3, #98	@ 0x62
 80044d8:	d10f      	bne.n	80044fa <_ZN12loraDecision8responseEh+0xb0>
		this->flagCorrect	= 0;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	70da      	strb	r2, [r3, #3]
		this->flagBurn		= 0;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	711a      	strb	r2, [r3, #4]
		this->flagRepeat	= 0;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	715a      	strb	r2, [r3, #5]
		this->count			= 0;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	709a      	strb	r2, [r3, #2]
		this->flagEnable	= 1;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2201      	movs	r2, #1
 80044f6:	719a      	strb	r2, [r3, #6]
}
 80044f8:	e01b      	b.n	8004532 <_ZN12loraDecision8responseEh+0xe8>
		this->flagCorrect	= 0;				//	Reinicia flag correcto
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	70da      	strb	r2, [r3, #3]
		this->count++;							//	Suma uno al contador
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	789b      	ldrb	r3, [r3, #2]
 8004504:	3301      	adds	r3, #1
 8004506:	b2da      	uxtb	r2, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	709a      	strb	r2, [r3, #2]
		if ( this->count >= this->retries ){	//	Si pasa limite de reintentos
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	789a      	ldrb	r2, [r3, #2]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	429a      	cmp	r2, r3
 8004516:	d306      	bcc.n	8004526 <_ZN12loraDecision8responseEh+0xdc>
			this->flagBurn		= 1;			//	Indica que esta quemado
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	711a      	strb	r2, [r3, #4]
			this->flagRepeat	= 0;			//	No hay que repetir
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	715a      	strb	r2, [r3, #5]
}
 8004524:	e005      	b.n	8004532 <_ZN12loraDecision8responseEh+0xe8>
			this->flagBurn		= 0;			//	No esta quemado
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	711a      	strb	r2, [r3, #4]
			this->flagRepeat	= 1;			//	Solicita repetir
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	715a      	strb	r2, [r3, #5]
}
 8004532:	bf00      	nop
 8004534:	370c      	adds	r7, #12
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr

0800453e <_ZN12loraDecision5resetEv>:

///////////
// RESET //
///////////

void loraDecision::reset(){
 800453e:	b480      	push	{r7}
 8004540:	b083      	sub	sp, #12
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
	this->flagCorrect	= 0;	//	Reinicia indicador de msj correcto
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	70da      	strb	r2, [r3, #3]
	this->flagBurn		= 0;	//	Reinicia indicador de msj quemado
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	711a      	strb	r2, [r3, #4]
	this->flagRepeat	= 0;	//	Reinicia indicador de repetir mensaje
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	715a      	strb	r2, [r3, #5]
	this->count			= 0;	//	Reinicia contador
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	709a      	strb	r2, [r3, #2]
}
 800455e:	bf00      	nop
 8004560:	370c      	adds	r7, #12
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr

0800456a <_ZN12loraDecision7disableEv>:

void loraDecision::disable(){
 800456a:	b480      	push	{r7}
 800456c:	b083      	sub	sp, #12
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
	this->flagEnable	= 0;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	719a      	strb	r2, [r3, #6]
}
 8004578:	bf00      	nop
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <_ZN12loraDecision6enableEv>:

bool loraDecision::enable(){
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
	return this->flagEnable;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	799b      	ldrb	r3, [r3, #6]
}
 8004590:	4618      	mov	r0, r3
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr

0800459c <_ZN12loraDecision7correctEv>:

/////////////
// CORRECT //
/////////////

bool loraDecision::correct(){
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
	return this->flagCorrect;	//
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	78db      	ldrb	r3, [r3, #3]
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr

080045b4 <_ZN12loraDecision4burnEv>:

//////////
// BURN //
//////////

bool loraDecision::burn(){
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
	return this->flagBurn;		//
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	791b      	ldrb	r3, [r3, #4]
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <_ZN12fifoCommandsC1Ev>:
////////////////////////
// FIFO COMMAND CLASS //
////////////////////////


class fifoCommands{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f103 022f 	add.w	r2, r3, #47	@ 0x2f
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	605a      	str	r2, [r3, #4]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f103 0239 	add.w	r2, r3, #57	@ 0x39
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	609a      	str	r2, [r3, #8]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f103 0243 	add.w	r2, r3, #67	@ 0x43
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	60da      	str	r2, [r3, #12]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f103 024d 	add.w	r2, r3, #77	@ 0x4d
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	611a      	str	r2, [r3, #16]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f103 0257 	add.w	r2, r3, #87	@ 0x57
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	615a      	str	r2, [r3, #20]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f103 0261 	add.w	r2, r3, #97	@ 0x61
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	619a      	str	r2, [r3, #24]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f103 026b 	add.w	r2, r3, #107	@ 0x6b
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	61da      	str	r2, [r3, #28]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f103 0275 	add.w	r2, r3, #117	@ 0x75
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	621a      	str	r2, [r3, #32]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f103 027f 	add.w	r2, r3, #127	@ 0x7f
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	625a      	str	r2, [r3, #36]	@ 0x24
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f103 0289 	add.w	r2, r3, #137	@ 0x89
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	629a      	str	r2, [r3, #40]	@ 0x28
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4618      	mov	r0, r3
 800463c:	370c      	adds	r7, #12
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
	...

08004648 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800464c:	f001 fb25 	bl	8005c9a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004650:	f000 f8e8 	bl	8004824 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004654:	f000 fb62 	bl	8004d1c <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8004658:	f000 fb06 	bl	8004c68 <_ZL11MX_DMA_Initv>
  MX_UART4_Init();
 800465c:	f000 fa9c 	bl	8004b98 <_ZL13MX_UART4_Initv>
  MX_UART5_Init();
 8004660:	f000 face 	bl	8004c00 <_ZL13MX_UART5_Initv>
  MX_I2C1_Init();
 8004664:	f000 fa0a 	bl	8004a7c <_ZL12MX_I2C1_Initv>
  MX_TIM6_Init();
 8004668:	f000 fa56 	bl	8004b18 <_ZL12MX_TIM6_Initv>
  MX_ADC1_Init();
 800466c:	f000 f956 	bl	800491c <_ZL12MX_ADC1_Initv>
  MX_IWDG_Init();
 8004670:	f000 f930 	bl	80048d4 <_ZL12MX_IWDG_Initv>

  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT	(&htim6);
 8004674:	484b      	ldr	r0, [pc, #300]	@ (80047a4 <main+0x15c>)
 8004676:	f007 fe5f 	bl	800c338 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_DMA	(&huart4,	rxLora, sizeof(rxLora));
 800467a:	2201      	movs	r2, #1
 800467c:	494a      	ldr	r1, [pc, #296]	@ (80047a8 <main+0x160>)
 800467e:	484b      	ldr	r0, [pc, #300]	@ (80047ac <main+0x164>)
 8004680:	f008 fa3c 	bl	800cafc <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA	(&huart5,	rxGps, sizeof(rxGps));
 8004684:	2202      	movs	r2, #2
 8004686:	494a      	ldr	r1, [pc, #296]	@ (80047b0 <main+0x168>)
 8004688:	484a      	ldr	r0, [pc, #296]	@ (80047b4 <main+0x16c>)
 800468a:	f008 fa37 	bl	800cafc <HAL_UART_Receive_DMA>
  HAL_ADC_Start_DMA		(&hadc1, analog, 3);
 800468e:	2203      	movs	r2, #3
 8004690:	4949      	ldr	r1, [pc, #292]	@ (80047b8 <main+0x170>)
 8004692:	484a      	ldr	r0, [pc, #296]	@ (80047bc <main+0x174>)
 8004694:	f001 fef4 	bl	8006480 <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setupLoraApp();
 8004698:	f7ff fb86 	bl	8003da8 <_Z12setupLoraAppv>

  chSetRN2903.addCommand( &macSetCh8 );
 800469c:	4948      	ldr	r1, [pc, #288]	@ (80047c0 <main+0x178>)
 800469e:	4849      	ldr	r0, [pc, #292]	@ (80047c4 <main+0x17c>)
 80046a0:	f7ff fc80 	bl	8003fa4 <_ZN10loraRutine10addCommandEP13rn2903Command>
  chSetRN2903.addCommand( &macSetCh9 );
 80046a4:	4948      	ldr	r1, [pc, #288]	@ (80047c8 <main+0x180>)
 80046a6:	4847      	ldr	r0, [pc, #284]	@ (80047c4 <main+0x17c>)
 80046a8:	f7ff fc7c 	bl	8003fa4 <_ZN10loraRutine10addCommandEP13rn2903Command>
  chSetRN2903.addCommand( &macSetCh10 );
 80046ac:	4947      	ldr	r1, [pc, #284]	@ (80047cc <main+0x184>)
 80046ae:	4845      	ldr	r0, [pc, #276]	@ (80047c4 <main+0x17c>)
 80046b0:	f7ff fc78 	bl	8003fa4 <_ZN10loraRutine10addCommandEP13rn2903Command>

  setupRN2903.addCommand( &radioSetMod	);
 80046b4:	4946      	ldr	r1, [pc, #280]	@ (80047d0 <main+0x188>)
 80046b6:	4847      	ldr	r0, [pc, #284]	@ (80047d4 <main+0x18c>)
 80046b8:	f7ff fc74 	bl	8003fa4 <_ZN10loraRutine10addCommandEP13rn2903Command>
  setupRN2903.addCommand( &radioSetSf 	);
 80046bc:	4946      	ldr	r1, [pc, #280]	@ (80047d8 <main+0x190>)
 80046be:	4845      	ldr	r0, [pc, #276]	@ (80047d4 <main+0x18c>)
 80046c0:	f7ff fc70 	bl	8003fa4 <_ZN10loraRutine10addCommandEP13rn2903Command>
  setupRN2903.addCommand( &radioSetBw 	);
 80046c4:	4945      	ldr	r1, [pc, #276]	@ (80047dc <main+0x194>)
 80046c6:	4843      	ldr	r0, [pc, #268]	@ (80047d4 <main+0x18c>)
 80046c8:	f7ff fc6c 	bl	8003fa4 <_ZN10loraRutine10addCommandEP13rn2903Command>
  setupRN2903.addCommand( &radioSetPwr 	);
 80046cc:	4944      	ldr	r1, [pc, #272]	@ (80047e0 <main+0x198>)
 80046ce:	4841      	ldr	r0, [pc, #260]	@ (80047d4 <main+0x18c>)
 80046d0:	f7ff fc68 	bl	8003fa4 <_ZN10loraRutine10addCommandEP13rn2903Command>

  setupRN2903.addCommand( &macSetDeveui );
 80046d4:	4943      	ldr	r1, [pc, #268]	@ (80047e4 <main+0x19c>)
 80046d6:	483f      	ldr	r0, [pc, #252]	@ (80047d4 <main+0x18c>)
 80046d8:	f7ff fc64 	bl	8003fa4 <_ZN10loraRutine10addCommandEP13rn2903Command>
  setupRN2903.addCommand( &macSetDevAddr );
 80046dc:	4942      	ldr	r1, [pc, #264]	@ (80047e8 <main+0x1a0>)
 80046de:	483d      	ldr	r0, [pc, #244]	@ (80047d4 <main+0x18c>)
 80046e0:	f7ff fc60 	bl	8003fa4 <_ZN10loraRutine10addCommandEP13rn2903Command>
  setupRN2903.addCommand( &macSetNwkskey );
 80046e4:	4941      	ldr	r1, [pc, #260]	@ (80047ec <main+0x1a4>)
 80046e6:	483b      	ldr	r0, [pc, #236]	@ (80047d4 <main+0x18c>)
 80046e8:	f7ff fc5c 	bl	8003fa4 <_ZN10loraRutine10addCommandEP13rn2903Command>
  setupRN2903.addCommand( &macSetAppskey );
 80046ec:	4940      	ldr	r1, [pc, #256]	@ (80047f0 <main+0x1a8>)
 80046ee:	4839      	ldr	r0, [pc, #228]	@ (80047d4 <main+0x18c>)
 80046f0:	f7ff fc58 	bl	8003fa4 <_ZN10loraRutine10addCommandEP13rn2903Command>
  setupRN2903.addCommand( &macJoinAbp );
 80046f4:	493f      	ldr	r1, [pc, #252]	@ (80047f4 <main+0x1ac>)
 80046f6:	4837      	ldr	r0, [pc, #220]	@ (80047d4 <main+0x18c>)
 80046f8:	f7ff fc54 	bl	8003fa4 <_ZN10loraRutine10addCommandEP13rn2903Command>
  setupRN2903.addCommand( &macSetSync );
 80046fc:	493e      	ldr	r1, [pc, #248]	@ (80047f8 <main+0x1b0>)
 80046fe:	4835      	ldr	r0, [pc, #212]	@ (80047d4 <main+0x18c>)
 8004700:	f7ff fc50 	bl	8003fa4 <_ZN10loraRutine10addCommandEP13rn2903Command>
  setupRN2903.addCommand( &macSave );
 8004704:	493d      	ldr	r1, [pc, #244]	@ (80047fc <main+0x1b4>)
 8004706:	4833      	ldr	r0, [pc, #204]	@ (80047d4 <main+0x18c>)
 8004708:	f7ff fc4c 	bl	8003fa4 <_ZN10loraRutine10addCommandEP13rn2903Command>

  loopRN2903.addCommand( &macTxData );
 800470c:	493c      	ldr	r1, [pc, #240]	@ (8004800 <main+0x1b8>)
 800470e:	483d      	ldr	r0, [pc, #244]	@ (8004804 <main+0x1bc>)
 8004710:	f7ff fc48 	bl	8003fa4 <_ZN10loraRutine10addCommandEP13rn2903Command>
  loopRN2903.addCommand( &macTxData );
 8004714:	493a      	ldr	r1, [pc, #232]	@ (8004800 <main+0x1b8>)
 8004716:	483b      	ldr	r0, [pc, #236]	@ (8004804 <main+0x1bc>)
 8004718:	f7ff fc44 	bl	8003fa4 <_ZN10loraRutine10addCommandEP13rn2903Command>

  loraCheck.setResponsePointer( rxCommand, 13);
 800471c:	220d      	movs	r2, #13
 800471e:	493a      	ldr	r1, [pc, #232]	@ (8004808 <main+0x1c0>)
 8004720:	483a      	ldr	r0, [pc, #232]	@ (800480c <main+0x1c4>)
 8004722:	f7ff fd07 	bl	8004134 <_ZN9loraCheck18setResponsePointerEPPhh>
  loraDecision.setRetries(3);
 8004726:	2103      	movs	r1, #3
 8004728:	4839      	ldr	r0, [pc, #228]	@ (8004810 <main+0x1c8>)
 800472a:	f7ff fe7f 	bl	800442c <_ZN12loraDecision10setRetriesEh>

  loraInput.insertBuffer( bufferLoraIn, sizeof(bufferLoraIn));
 800472e:	2232      	movs	r2, #50	@ 0x32
 8004730:	4938      	ldr	r1, [pc, #224]	@ (8004814 <main+0x1cc>)
 8004732:	4839      	ldr	r0, [pc, #228]	@ (8004818 <main+0x1d0>)
 8004734:	f7ff fdb7 	bl	80042a6 <_ZN9loraInput12insertBufferEPhh>
  //displayLink.inputDisplay(8888, 3);
  //
  HAL_IWDG_Init(&hiwdg);
 8004738:	4838      	ldr	r0, [pc, #224]	@ (800481c <main+0x1d4>)
 800473a:	f006 f966 	bl	800aa0a <HAL_IWDG_Init>
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800473e:	2201      	movs	r2, #1
 8004740:	2110      	movs	r1, #16
 8004742:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004746:	f003 feb3 	bl	80084b0 <HAL_GPIO_WritePin>

	  hwInput();
 800474a:	f7fd fd7c 	bl	8002246 <_Z7hwInputv>
	  linkInput();
 800474e:	f7fe fd55 	bl	80031fc <_Z9linkInputv>
	  tcpInput();
 8004752:	f001 f8a3 	bl	800589c <_Z8tcpInputv>
	  app();
 8004756:	f7fc fa47 	bl	8000be8 <_Z3appv>
	  tcpOutput();
 800475a:	f001 f9db 	bl	8005b14 <_Z9tcpOutputv>
	  linkOutput();
 800475e:	f7ff fab3 	bl	8003cc8 <_Z10linkOutputv>
	  hwOutput();
 8004762:	f7fe fa35 	bl	8002bd0 <_Z8hwOutputv>

	  /* USER CODE END WHILE */

	  /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8004766:	2200      	movs	r2, #0
 8004768:	2110      	movs	r1, #16
 800476a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800476e:	f003 fe9f 	bl	80084b0 <HAL_GPIO_WritePin>

	  HAL_SuspendTick();
 8004772:	f001 fb07 	bl	8005d84 <HAL_SuspendTick>
	  HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8004776:	2101      	movs	r1, #1
 8004778:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800477c:	f006 f99c 	bl	800aab8 <HAL_PWR_EnterSLEEPMode>

	  while (!flagSuperloop){	// SI NO SE HA CUMPLIDO L TIMER
 8004780:	bf00      	nop
 8004782:	4b27      	ldr	r3, [pc, #156]	@ (8004820 <main+0x1d8>)
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	f083 0301 	eor.w	r3, r3, #1
 800478a:	b2db      	uxtb	r3, r3
 800478c:	2b00      	cmp	r3, #0
 800478e:	d1f8      	bne.n	8004782 <main+0x13a>
	  }							// ESPERA ETERNAMENTE
	  flagSuperloop	= 0;		// REINICIA FLAG
 8004790:	4b23      	ldr	r3, [pc, #140]	@ (8004820 <main+0x1d8>)
 8004792:	2200      	movs	r2, #0
 8004794:	701a      	strb	r2, [r3, #0]

	  HAL_ResumeTick();
 8004796:	f001 fb05 	bl	8005da4 <HAL_ResumeTick>

	  HAL_IWDG_Refresh(&hiwdg);
 800479a:	4820      	ldr	r0, [pc, #128]	@ (800481c <main+0x1d4>)
 800479c:	f006 f97b 	bl	800aa96 <HAL_IWDG_Refresh>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80047a0:	e7cd      	b.n	800473e <main+0xf6>
 80047a2:	bf00      	nop
 80047a4:	200009e4 	.word	0x200009e4
 80047a8:	20000aec 	.word	0x20000aec
 80047ac:	200007b4 	.word	0x200007b4
 80047b0:	20000adc 	.word	0x20000adc
 80047b4:	2000083c 	.word	0x2000083c
 80047b8:	20001140 	.word	0x20001140
 80047bc:	20000620 	.word	0x20000620
 80047c0:	200005fc 	.word	0x200005fc
 80047c4:	20000d28 	.word	0x20000d28
 80047c8:	20000608 	.word	0x20000608
 80047cc:	20000614 	.word	0x20000614
 80047d0:	20000548 	.word	0x20000548
 80047d4:	20000b94 	.word	0x20000b94
 80047d8:	20000554 	.word	0x20000554
 80047dc:	20000560 	.word	0x20000560
 80047e0:	2000056c 	.word	0x2000056c
 80047e4:	20000578 	.word	0x20000578
 80047e8:	20000584 	.word	0x20000584
 80047ec:	20000590 	.word	0x20000590
 80047f0:	2000059c 	.word	0x2000059c
 80047f4:	200005b4 	.word	0x200005b4
 80047f8:	200005c0 	.word	0x200005c0
 80047fc:	200005cc 	.word	0x200005cc
 8004800:	200005d8 	.word	0x200005d8
 8004804:	20000ebc 	.word	0x20000ebc
 8004808:	20000170 	.word	0x20000170
 800480c:	20000b70 	.word	0x20000b70
 8004810:	20000b84 	.word	0x20000b84
 8004814:	20001050 	.word	0x20001050
 8004818:	20000b30 	.word	0x20000b30
 800481c:	20000a30 	.word	0x20000a30
 8004820:	2000113c 	.word	0x2000113c

08004824 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b096      	sub	sp, #88	@ 0x58
 8004828:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800482a:	f107 0314 	add.w	r3, r7, #20
 800482e:	2244      	movs	r2, #68	@ 0x44
 8004830:	2100      	movs	r1, #0
 8004832:	4618      	mov	r0, r3
 8004834:	f009 fbf9 	bl	800e02a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004838:	463b      	mov	r3, r7
 800483a:	2200      	movs	r2, #0
 800483c:	601a      	str	r2, [r3, #0]
 800483e:	605a      	str	r2, [r3, #4]
 8004840:	609a      	str	r2, [r3, #8]
 8004842:	60da      	str	r2, [r3, #12]
 8004844:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8004846:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800484a:	f006 f977 	bl	800ab3c <HAL_PWREx_ControlVoltageScaling>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	bf14      	ite	ne
 8004854:	2301      	movne	r3, #1
 8004856:	2300      	moveq	r3, #0
 8004858:	b2db      	uxtb	r3, r3
 800485a:	2b00      	cmp	r3, #0
 800485c:	d001      	beq.n	8004862 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 800485e:	f000 fb8d 	bl	8004f7c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8004862:	2303      	movs	r3, #3
 8004864:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004866:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800486a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800486c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004870:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004872:	2340      	movs	r3, #64	@ 0x40
 8004874:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004876:	2300      	movs	r3, #0
 8004878:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800487a:	f107 0314 	add.w	r3, r7, #20
 800487e:	4618      	mov	r0, r3
 8004880:	f006 f9fa 	bl	800ac78 <HAL_RCC_OscConfig>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	bf14      	ite	ne
 800488a:	2301      	movne	r3, #1
 800488c:	2300      	moveq	r3, #0
 800488e:	b2db      	uxtb	r3, r3
 8004890:	2b00      	cmp	r3, #0
 8004892:	d001      	beq.n	8004898 <_Z18SystemClock_Configv+0x74>
  {
    Error_Handler();
 8004894:	f000 fb72 	bl	8004f7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004898:	230f      	movs	r3, #15
 800489a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800489c:	2302      	movs	r3, #2
 800489e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80048a0:	2300      	movs	r3, #0
 80048a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80048a4:	2300      	movs	r3, #0
 80048a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80048a8:	2300      	movs	r3, #0
 80048aa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80048ac:	463b      	mov	r3, r7
 80048ae:	2100      	movs	r1, #0
 80048b0:	4618      	mov	r0, r3
 80048b2:	f006 fdfb 	bl	800b4ac <HAL_RCC_ClockConfig>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	bf14      	ite	ne
 80048bc:	2301      	movne	r3, #1
 80048be:	2300      	moveq	r3, #0
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d001      	beq.n	80048ca <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 80048c6:	f000 fb59 	bl	8004f7c <Error_Handler>
  }
}
 80048ca:	bf00      	nop
 80048cc:	3758      	adds	r7, #88	@ 0x58
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
	...

080048d4 <_ZL12MX_IWDG_Initv>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
void MX_IWDG_Init(void)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IWDG_Init 0 */

  /* USER CODE END IWDG_Init 0 */

  /* Initialize the IWDG peripheral */
  hiwdg.Instance = IWDG;
 80048d8:	4b0e      	ldr	r3, [pc, #56]	@ (8004914 <_ZL12MX_IWDG_Initv+0x40>)
 80048da:	4a0f      	ldr	r2, [pc, #60]	@ (8004918 <_ZL12MX_IWDG_Initv+0x44>)
 80048dc:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 80048de:	4b0d      	ldr	r3, [pc, #52]	@ (8004914 <_ZL12MX_IWDG_Initv+0x40>)
 80048e0:	2200      	movs	r2, #0
 80048e2:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 1399;
 80048e4:	4b0b      	ldr	r3, [pc, #44]	@ (8004914 <_ZL12MX_IWDG_Initv+0x40>)
 80048e6:	f240 5277 	movw	r2, #1399	@ 0x577
 80048ea:	609a      	str	r2, [r3, #8]
  hiwdg.Init.Window	= 1390;
 80048ec:	4b09      	ldr	r3, [pc, #36]	@ (8004914 <_ZL12MX_IWDG_Initv+0x40>)
 80048ee:	f240 526e 	movw	r2, #1390	@ 0x56e
 80048f2:	60da      	str	r2, [r3, #12]

  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80048f4:	4807      	ldr	r0, [pc, #28]	@ (8004914 <_ZL12MX_IWDG_Initv+0x40>)
 80048f6:	f006 f888 	bl	800aa0a <HAL_IWDG_Init>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	bf14      	ite	ne
 8004900:	2301      	movne	r3, #1
 8004902:	2300      	moveq	r3, #0
 8004904:	b2db      	uxtb	r3, r3
 8004906:	2b00      	cmp	r3, #0
 8004908:	d001      	beq.n	800490e <_ZL12MX_IWDG_Initv+0x3a>
  {
    Error_Handler();
 800490a:	f000 fb37 	bl	8004f7c <Error_Handler>
  }

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
}
 800490e:	bf00      	nop
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	20000a30 	.word	0x20000a30
 8004918:	40003000 	.word	0x40003000

0800491c <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b08a      	sub	sp, #40	@ 0x28
 8004920:	af00      	add	r7, sp, #0
	  /* USER CODE BEGIN ADC1_Init 0 */

	  /* USER CODE END ADC1_Init 0 */

	  ADC_MultiModeTypeDef multimode = {0};
 8004922:	f107 031c 	add.w	r3, r7, #28
 8004926:	2200      	movs	r2, #0
 8004928:	601a      	str	r2, [r3, #0]
 800492a:	605a      	str	r2, [r3, #4]
 800492c:	609a      	str	r2, [r3, #8]
	  ADC_ChannelConfTypeDef sConfig = {0};
 800492e:	1d3b      	adds	r3, r7, #4
 8004930:	2200      	movs	r2, #0
 8004932:	601a      	str	r2, [r3, #0]
 8004934:	605a      	str	r2, [r3, #4]
 8004936:	609a      	str	r2, [r3, #8]
 8004938:	60da      	str	r2, [r3, #12]
 800493a:	611a      	str	r2, [r3, #16]
 800493c:	615a      	str	r2, [r3, #20]

	  /* USER CODE END ADC1_Init 1 */

	  /** Common config
	  */
	  hadc1.Instance = ADC1;
 800493e:	4b4a      	ldr	r3, [pc, #296]	@ (8004a68 <_ZL12MX_ADC1_Initv+0x14c>)
 8004940:	4a4a      	ldr	r2, [pc, #296]	@ (8004a6c <_ZL12MX_ADC1_Initv+0x150>)
 8004942:	601a      	str	r2, [r3, #0]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8004944:	4b48      	ldr	r3, [pc, #288]	@ (8004a68 <_ZL12MX_ADC1_Initv+0x14c>)
 8004946:	2200      	movs	r2, #0
 8004948:	605a      	str	r2, [r3, #4]
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800494a:	4b47      	ldr	r3, [pc, #284]	@ (8004a68 <_ZL12MX_ADC1_Initv+0x14c>)
 800494c:	2200      	movs	r2, #0
 800494e:	609a      	str	r2, [r3, #8]
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004950:	4b45      	ldr	r3, [pc, #276]	@ (8004a68 <_ZL12MX_ADC1_Initv+0x14c>)
 8004952:	2200      	movs	r2, #0
 8004954:	60da      	str	r2, [r3, #12]
	  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004956:	4b44      	ldr	r3, [pc, #272]	@ (8004a68 <_ZL12MX_ADC1_Initv+0x14c>)
 8004958:	2201      	movs	r2, #1
 800495a:	611a      	str	r2, [r3, #16]
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800495c:	4b42      	ldr	r3, [pc, #264]	@ (8004a68 <_ZL12MX_ADC1_Initv+0x14c>)
 800495e:	2204      	movs	r2, #4
 8004960:	615a      	str	r2, [r3, #20]
	  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004962:	4b41      	ldr	r3, [pc, #260]	@ (8004a68 <_ZL12MX_ADC1_Initv+0x14c>)
 8004964:	2200      	movs	r2, #0
 8004966:	761a      	strb	r2, [r3, #24]
	  hadc1.Init.ContinuousConvMode = ENABLE;
 8004968:	4b3f      	ldr	r3, [pc, #252]	@ (8004a68 <_ZL12MX_ADC1_Initv+0x14c>)
 800496a:	2201      	movs	r2, #1
 800496c:	765a      	strb	r2, [r3, #25]
	  hadc1.Init.NbrOfConversion = 3;
 800496e:	4b3e      	ldr	r3, [pc, #248]	@ (8004a68 <_ZL12MX_ADC1_Initv+0x14c>)
 8004970:	2203      	movs	r2, #3
 8004972:	61da      	str	r2, [r3, #28]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004974:	4b3c      	ldr	r3, [pc, #240]	@ (8004a68 <_ZL12MX_ADC1_Initv+0x14c>)
 8004976:	2200      	movs	r2, #0
 8004978:	f883 2020 	strb.w	r2, [r3, #32]
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800497c:	4b3a      	ldr	r3, [pc, #232]	@ (8004a68 <_ZL12MX_ADC1_Initv+0x14c>)
 800497e:	2200      	movs	r2, #0
 8004980:	629a      	str	r2, [r3, #40]	@ 0x28
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004982:	4b39      	ldr	r3, [pc, #228]	@ (8004a68 <_ZL12MX_ADC1_Initv+0x14c>)
 8004984:	2200      	movs	r2, #0
 8004986:	62da      	str	r2, [r3, #44]	@ 0x2c
	  hadc1.Init.DMAContinuousRequests = DISABLE;
 8004988:	4b37      	ldr	r3, [pc, #220]	@ (8004a68 <_ZL12MX_ADC1_Initv+0x14c>)
 800498a:	2200      	movs	r2, #0
 800498c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004990:	4b35      	ldr	r3, [pc, #212]	@ (8004a68 <_ZL12MX_ADC1_Initv+0x14c>)
 8004992:	2200      	movs	r2, #0
 8004994:	635a      	str	r2, [r3, #52]	@ 0x34
	  hadc1.Init.OversamplingMode = DISABLE;
 8004996:	4b34      	ldr	r3, [pc, #208]	@ (8004a68 <_ZL12MX_ADC1_Initv+0x14c>)
 8004998:	2200      	movs	r2, #0
 800499a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800499e:	4832      	ldr	r0, [pc, #200]	@ (8004a68 <_ZL12MX_ADC1_Initv+0x14c>)
 80049a0:	f001 fc1a 	bl	80061d8 <HAL_ADC_Init>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	bf14      	ite	ne
 80049aa:	2301      	movne	r3, #1
 80049ac:	2300      	moveq	r3, #0
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d001      	beq.n	80049b8 <_ZL12MX_ADC1_Initv+0x9c>
	  {
	    Error_Handler();
 80049b4:	f000 fae2 	bl	8004f7c <Error_Handler>
	  }

	  /** Configure the ADC multi-mode
	  */
	  multimode.Mode = ADC_MODE_INDEPENDENT;
 80049b8:	2300      	movs	r3, #0
 80049ba:	61fb      	str	r3, [r7, #28]
	  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80049bc:	f107 031c 	add.w	r3, r7, #28
 80049c0:	4619      	mov	r1, r3
 80049c2:	4829      	ldr	r0, [pc, #164]	@ (8004a68 <_ZL12MX_ADC1_Initv+0x14c>)
 80049c4:	f002 fdce 	bl	8007564 <HAL_ADCEx_MultiModeConfigChannel>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	bf14      	ite	ne
 80049ce:	2301      	movne	r3, #1
 80049d0:	2300      	moveq	r3, #0
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d001      	beq.n	80049dc <_ZL12MX_ADC1_Initv+0xc0>
	  {
	    Error_Handler();
 80049d8:	f000 fad0 	bl	8004f7c <Error_Handler>
	  }

	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_1;
 80049dc:	4b24      	ldr	r3, [pc, #144]	@ (8004a70 <_ZL12MX_ADC1_Initv+0x154>)
 80049de:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 80049e0:	2306      	movs	r3, #6
 80049e2:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 80049e4:	2303      	movs	r3, #3
 80049e6:	60fb      	str	r3, [r7, #12]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80049e8:	237f      	movs	r3, #127	@ 0x7f
 80049ea:	613b      	str	r3, [r7, #16]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80049ec:	2304      	movs	r3, #4
 80049ee:	617b      	str	r3, [r7, #20]
	  sConfig.Offset = 0;
 80049f0:	2300      	movs	r3, #0
 80049f2:	61bb      	str	r3, [r7, #24]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80049f4:	1d3b      	adds	r3, r7, #4
 80049f6:	4619      	mov	r1, r3
 80049f8:	481b      	ldr	r0, [pc, #108]	@ (8004a68 <_ZL12MX_ADC1_Initv+0x14c>)
 80049fa:	f002 f835 	bl	8006a68 <HAL_ADC_ConfigChannel>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	bf14      	ite	ne
 8004a04:	2301      	movne	r3, #1
 8004a06:	2300      	moveq	r3, #0
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d001      	beq.n	8004a12 <_ZL12MX_ADC1_Initv+0xf6>
	  {
	    Error_Handler();
 8004a0e:	f000 fab5 	bl	8004f7c <Error_Handler>
	  }

	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_2;
 8004a12:	4b18      	ldr	r3, [pc, #96]	@ (8004a74 <_ZL12MX_ADC1_Initv+0x158>)
 8004a14:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004a16:	230c      	movs	r3, #12
 8004a18:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004a1a:	1d3b      	adds	r3, r7, #4
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	4812      	ldr	r0, [pc, #72]	@ (8004a68 <_ZL12MX_ADC1_Initv+0x14c>)
 8004a20:	f002 f822 	bl	8006a68 <HAL_ADC_ConfigChannel>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	bf14      	ite	ne
 8004a2a:	2301      	movne	r3, #1
 8004a2c:	2300      	moveq	r3, #0
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d001      	beq.n	8004a38 <_ZL12MX_ADC1_Initv+0x11c>
	  {
	    Error_Handler();
 8004a34:	f000 faa2 	bl	8004f7c <Error_Handler>
	  }

	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_3;
 8004a38:	4b0f      	ldr	r3, [pc, #60]	@ (8004a78 <_ZL12MX_ADC1_Initv+0x15c>)
 8004a3a:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_3;
 8004a3c:	2312      	movs	r3, #18
 8004a3e:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004a40:	1d3b      	adds	r3, r7, #4
 8004a42:	4619      	mov	r1, r3
 8004a44:	4808      	ldr	r0, [pc, #32]	@ (8004a68 <_ZL12MX_ADC1_Initv+0x14c>)
 8004a46:	f002 f80f 	bl	8006a68 <HAL_ADC_ConfigChannel>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	bf14      	ite	ne
 8004a50:	2301      	movne	r3, #1
 8004a52:	2300      	moveq	r3, #0
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d001      	beq.n	8004a5e <_ZL12MX_ADC1_Initv+0x142>
	  {
	    Error_Handler();
 8004a5a:	f000 fa8f 	bl	8004f7c <Error_Handler>
	  }
	  /* USER CODE BEGIN ADC1_Init 2 */

	  /* USER CODE END ADC1_Init 2 */
}
 8004a5e:	bf00      	nop
 8004a60:	3728      	adds	r7, #40	@ 0x28
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	20000620 	.word	0x20000620
 8004a6c:	50040000 	.word	0x50040000
 8004a70:	04300002 	.word	0x04300002
 8004a74:	08600004 	.word	0x08600004
 8004a78:	0c900008 	.word	0x0c900008

08004a7c <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004a80:	4b22      	ldr	r3, [pc, #136]	@ (8004b0c <_ZL12MX_I2C1_Initv+0x90>)
 8004a82:	4a23      	ldr	r2, [pc, #140]	@ (8004b10 <_ZL12MX_I2C1_Initv+0x94>)
 8004a84:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8004a86:	4b21      	ldr	r3, [pc, #132]	@ (8004b0c <_ZL12MX_I2C1_Initv+0x90>)
 8004a88:	4a22      	ldr	r2, [pc, #136]	@ (8004b14 <_ZL12MX_I2C1_Initv+0x98>)
 8004a8a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004a8c:	4b1f      	ldr	r3, [pc, #124]	@ (8004b0c <_ZL12MX_I2C1_Initv+0x90>)
 8004a8e:	2200      	movs	r2, #0
 8004a90:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004a92:	4b1e      	ldr	r3, [pc, #120]	@ (8004b0c <_ZL12MX_I2C1_Initv+0x90>)
 8004a94:	2201      	movs	r2, #1
 8004a96:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004a98:	4b1c      	ldr	r3, [pc, #112]	@ (8004b0c <_ZL12MX_I2C1_Initv+0x90>)
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004a9e:	4b1b      	ldr	r3, [pc, #108]	@ (8004b0c <_ZL12MX_I2C1_Initv+0x90>)
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004aa4:	4b19      	ldr	r3, [pc, #100]	@ (8004b0c <_ZL12MX_I2C1_Initv+0x90>)
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004aaa:	4b18      	ldr	r3, [pc, #96]	@ (8004b0c <_ZL12MX_I2C1_Initv+0x90>)
 8004aac:	2200      	movs	r2, #0
 8004aae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004ab0:	4b16      	ldr	r3, [pc, #88]	@ (8004b0c <_ZL12MX_I2C1_Initv+0x90>)
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004ab6:	4815      	ldr	r0, [pc, #84]	@ (8004b0c <_ZL12MX_I2C1_Initv+0x90>)
 8004ab8:	f003 fd12 	bl	80084e0 <HAL_I2C_Init>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	bf14      	ite	ne
 8004ac2:	2301      	movne	r3, #1
 8004ac4:	2300      	moveq	r3, #0
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d001      	beq.n	8004ad0 <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 8004acc:	f000 fa56 	bl	8004f7c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004ad0:	2100      	movs	r1, #0
 8004ad2:	480e      	ldr	r0, [pc, #56]	@ (8004b0c <_ZL12MX_I2C1_Initv+0x90>)
 8004ad4:	f005 ff02 	bl	800a8dc <HAL_I2CEx_ConfigAnalogFilter>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	bf14      	ite	ne
 8004ade:	2301      	movne	r3, #1
 8004ae0:	2300      	moveq	r3, #0
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d001      	beq.n	8004aec <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 8004ae8:	f000 fa48 	bl	8004f7c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004aec:	2100      	movs	r1, #0
 8004aee:	4807      	ldr	r0, [pc, #28]	@ (8004b0c <_ZL12MX_I2C1_Initv+0x90>)
 8004af0:	f005 ff3f 	bl	800a972 <HAL_I2CEx_ConfigDigitalFilter>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	bf14      	ite	ne
 8004afa:	2301      	movne	r3, #1
 8004afc:	2300      	moveq	r3, #0
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d001      	beq.n	8004b08 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 8004b04:	f000 fa3a 	bl	8004f7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004b08:	bf00      	nop
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	200006d0 	.word	0x200006d0
 8004b10:	40005400 	.word	0x40005400
 8004b14:	2000090e 	.word	0x2000090e

08004b18 <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b1e:	1d3b      	adds	r3, r7, #4
 8004b20:	2200      	movs	r2, #0
 8004b22:	601a      	str	r2, [r3, #0]
 8004b24:	605a      	str	r2, [r3, #4]
 8004b26:	609a      	str	r2, [r3, #8]

	  /* USER CODE BEGIN TIM6_Init 1 */

	  /* USER CODE END TIM6_Init 1 */
	  htim6.Instance = TIM6;
 8004b28:	4b19      	ldr	r3, [pc, #100]	@ (8004b90 <_ZL12MX_TIM6_Initv+0x78>)
 8004b2a:	4a1a      	ldr	r2, [pc, #104]	@ (8004b94 <_ZL12MX_TIM6_Initv+0x7c>)
 8004b2c:	601a      	str	r2, [r3, #0]
	  htim6.Init.Prescaler = 1;
 8004b2e:	4b18      	ldr	r3, [pc, #96]	@ (8004b90 <_ZL12MX_TIM6_Initv+0x78>)
 8004b30:	2201      	movs	r2, #1
 8004b32:	605a      	str	r2, [r3, #4]
	  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b34:	4b16      	ldr	r3, [pc, #88]	@ (8004b90 <_ZL12MX_TIM6_Initv+0x78>)
 8004b36:	2200      	movs	r2, #0
 8004b38:	609a      	str	r2, [r3, #8]
	  htim6.Init.Period = 7999;
 8004b3a:	4b15      	ldr	r3, [pc, #84]	@ (8004b90 <_ZL12MX_TIM6_Initv+0x78>)
 8004b3c:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8004b40:	60da      	str	r2, [r3, #12]
	  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b42:	4b13      	ldr	r3, [pc, #76]	@ (8004b90 <_ZL12MX_TIM6_Initv+0x78>)
 8004b44:	2200      	movs	r2, #0
 8004b46:	619a      	str	r2, [r3, #24]
	  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004b48:	4811      	ldr	r0, [pc, #68]	@ (8004b90 <_ZL12MX_TIM6_Initv+0x78>)
 8004b4a:	f007 fb9d 	bl	800c288 <HAL_TIM_Base_Init>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	bf14      	ite	ne
 8004b54:	2301      	movne	r3, #1
 8004b56:	2300      	moveq	r3, #0
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d001      	beq.n	8004b62 <_ZL12MX_TIM6_Initv+0x4a>
	  {
	    Error_Handler();
 8004b5e:	f000 fa0d 	bl	8004f7c <Error_Handler>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b62:	2300      	movs	r3, #0
 8004b64:	607b      	str	r3, [r7, #4]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b66:	2300      	movs	r3, #0
 8004b68:	60fb      	str	r3, [r7, #12]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004b6a:	1d3b      	adds	r3, r7, #4
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	4808      	ldr	r0, [pc, #32]	@ (8004b90 <_ZL12MX_TIM6_Initv+0x78>)
 8004b70:	f007 fe16 	bl	800c7a0 <HAL_TIMEx_MasterConfigSynchronization>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	bf14      	ite	ne
 8004b7a:	2301      	movne	r3, #1
 8004b7c:	2300      	moveq	r3, #0
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d001      	beq.n	8004b88 <_ZL12MX_TIM6_Initv+0x70>
	  {
	    Error_Handler();
 8004b84:	f000 f9fa 	bl	8004f7c <Error_Handler>
	  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004b88:	bf00      	nop
 8004b8a:	3710      	adds	r7, #16
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	200009e4 	.word	0x200009e4
 8004b94:	40001000 	.word	0x40001000

08004b98 <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8004b9c:	4b16      	ldr	r3, [pc, #88]	@ (8004bf8 <_ZL13MX_UART4_Initv+0x60>)
 8004b9e:	4a17      	ldr	r2, [pc, #92]	@ (8004bfc <_ZL13MX_UART4_Initv+0x64>)
 8004ba0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 57600;
 8004ba2:	4b15      	ldr	r3, [pc, #84]	@ (8004bf8 <_ZL13MX_UART4_Initv+0x60>)
 8004ba4:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8004ba8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8004baa:	4b13      	ldr	r3, [pc, #76]	@ (8004bf8 <_ZL13MX_UART4_Initv+0x60>)
 8004bac:	2200      	movs	r2, #0
 8004bae:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004bb0:	4b11      	ldr	r3, [pc, #68]	@ (8004bf8 <_ZL13MX_UART4_Initv+0x60>)
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8004bb6:	4b10      	ldr	r3, [pc, #64]	@ (8004bf8 <_ZL13MX_UART4_Initv+0x60>)
 8004bb8:	2200      	movs	r2, #0
 8004bba:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004bbc:	4b0e      	ldr	r3, [pc, #56]	@ (8004bf8 <_ZL13MX_UART4_Initv+0x60>)
 8004bbe:	220c      	movs	r2, #12
 8004bc0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8004bf8 <_ZL13MX_UART4_Initv+0x60>)
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8004bf8 <_ZL13MX_UART4_Initv+0x60>)
 8004bca:	2200      	movs	r2, #0
 8004bcc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004bce:	4b0a      	ldr	r3, [pc, #40]	@ (8004bf8 <_ZL13MX_UART4_Initv+0x60>)
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004bd4:	4b08      	ldr	r3, [pc, #32]	@ (8004bf8 <_ZL13MX_UART4_Initv+0x60>)
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8004bda:	4807      	ldr	r0, [pc, #28]	@ (8004bf8 <_ZL13MX_UART4_Initv+0x60>)
 8004bdc:	f007 fe86 	bl	800c8ec <HAL_UART_Init>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	bf14      	ite	ne
 8004be6:	2301      	movne	r3, #1
 8004be8:	2300      	moveq	r3, #0
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d001      	beq.n	8004bf4 <_ZL13MX_UART4_Initv+0x5c>
  {
    Error_Handler();
 8004bf0:	f000 f9c4 	bl	8004f7c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8004bf4:	bf00      	nop
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	200007b4 	.word	0x200007b4
 8004bfc:	40004c00 	.word	0x40004c00

08004c00 <_ZL13MX_UART5_Initv>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8004c04:	4b16      	ldr	r3, [pc, #88]	@ (8004c60 <_ZL13MX_UART5_Initv+0x60>)
 8004c06:	4a17      	ldr	r2, [pc, #92]	@ (8004c64 <_ZL13MX_UART5_Initv+0x64>)
 8004c08:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8004c0a:	4b15      	ldr	r3, [pc, #84]	@ (8004c60 <_ZL13MX_UART5_Initv+0x60>)
 8004c0c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004c10:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8004c12:	4b13      	ldr	r3, [pc, #76]	@ (8004c60 <_ZL13MX_UART5_Initv+0x60>)
 8004c14:	2200      	movs	r2, #0
 8004c16:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8004c18:	4b11      	ldr	r3, [pc, #68]	@ (8004c60 <_ZL13MX_UART5_Initv+0x60>)
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity =  UART_PARITY_NONE;
 8004c1e:	4b10      	ldr	r3, [pc, #64]	@ (8004c60 <_ZL13MX_UART5_Initv+0x60>)
 8004c20:	2200      	movs	r2, #0
 8004c22:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8004c24:	4b0e      	ldr	r3, [pc, #56]	@ (8004c60 <_ZL13MX_UART5_Initv+0x60>)
 8004c26:	220c      	movs	r2, #12
 8004c28:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004c2a:	4b0d      	ldr	r3, [pc, #52]	@ (8004c60 <_ZL13MX_UART5_Initv+0x60>)
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8004c30:	4b0b      	ldr	r3, [pc, #44]	@ (8004c60 <_ZL13MX_UART5_Initv+0x60>)
 8004c32:	2200      	movs	r2, #0
 8004c34:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004c36:	4b0a      	ldr	r3, [pc, #40]	@ (8004c60 <_ZL13MX_UART5_Initv+0x60>)
 8004c38:	2200      	movs	r2, #0
 8004c3a:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004c3c:	4b08      	ldr	r3, [pc, #32]	@ (8004c60 <_ZL13MX_UART5_Initv+0x60>)
 8004c3e:	2200      	movs	r2, #0
 8004c40:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8004c42:	4807      	ldr	r0, [pc, #28]	@ (8004c60 <_ZL13MX_UART5_Initv+0x60>)
 8004c44:	f007 fe52 	bl	800c8ec <HAL_UART_Init>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	bf14      	ite	ne
 8004c4e:	2301      	movne	r3, #1
 8004c50:	2300      	moveq	r3, #0
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d001      	beq.n	8004c5c <_ZL13MX_UART5_Initv+0x5c>
  {
    Error_Handler();
 8004c58:	f000 f990 	bl	8004f7c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8004c5c:	bf00      	nop
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	2000083c 	.word	0x2000083c
 8004c64:	40005000 	.word	0x40005000

08004c68 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004c6e:	4b2a      	ldr	r3, [pc, #168]	@ (8004d18 <_ZL11MX_DMA_Initv+0xb0>)
 8004c70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c72:	4a29      	ldr	r2, [pc, #164]	@ (8004d18 <_ZL11MX_DMA_Initv+0xb0>)
 8004c74:	f043 0302 	orr.w	r3, r3, #2
 8004c78:	6493      	str	r3, [r2, #72]	@ 0x48
 8004c7a:	4b27      	ldr	r3, [pc, #156]	@ (8004d18 <_ZL11MX_DMA_Initv+0xb0>)
 8004c7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c7e:	f003 0302 	and.w	r3, r3, #2
 8004c82:	607b      	str	r3, [r7, #4]
 8004c84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004c86:	4b24      	ldr	r3, [pc, #144]	@ (8004d18 <_ZL11MX_DMA_Initv+0xb0>)
 8004c88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c8a:	4a23      	ldr	r2, [pc, #140]	@ (8004d18 <_ZL11MX_DMA_Initv+0xb0>)
 8004c8c:	f043 0301 	orr.w	r3, r3, #1
 8004c90:	6493      	str	r3, [r2, #72]	@ 0x48
 8004c92:	4b21      	ldr	r3, [pc, #132]	@ (8004d18 <_ZL11MX_DMA_Initv+0xb0>)
 8004c94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c96:	f003 0301 	and.w	r3, r3, #1
 8004c9a:	603b      	str	r3, [r7, #0]
 8004c9c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	2100      	movs	r1, #0
 8004ca2:	200b      	movs	r0, #11
 8004ca4:	f002 fe0d 	bl	80078c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004ca8:	200b      	movs	r0, #11
 8004caa:	f002 fe26 	bl	80078fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8004cae:	2200      	movs	r2, #0
 8004cb0:	2100      	movs	r1, #0
 8004cb2:	2010      	movs	r0, #16
 8004cb4:	f002 fe05 	bl	80078c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8004cb8:	2010      	movs	r0, #16
 8004cba:	f002 fe1e 	bl	80078fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	2100      	movs	r1, #0
 8004cc2:	2011      	movs	r0, #17
 8004cc4:	f002 fdfd 	bl	80078c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8004cc8:	2011      	movs	r0, #17
 8004cca:	f002 fe16 	bl	80078fa <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8004cce:	2200      	movs	r2, #0
 8004cd0:	2100      	movs	r1, #0
 8004cd2:	2038      	movs	r0, #56	@ 0x38
 8004cd4:	f002 fdf5 	bl	80078c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8004cd8:	2038      	movs	r0, #56	@ 0x38
 8004cda:	f002 fe0e 	bl	80078fa <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 8004cde:	2200      	movs	r2, #0
 8004ce0:	2100      	movs	r1, #0
 8004ce2:	2039      	movs	r0, #57	@ 0x39
 8004ce4:	f002 fded 	bl	80078c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8004ce8:	2039      	movs	r0, #57	@ 0x39
 8004cea:	f002 fe06 	bl	80078fa <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 8004cee:	2200      	movs	r2, #0
 8004cf0:	2100      	movs	r1, #0
 8004cf2:	203a      	movs	r0, #58	@ 0x3a
 8004cf4:	f002 fde5 	bl	80078c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8004cf8:	203a      	movs	r0, #58	@ 0x3a
 8004cfa:	f002 fdfe 	bl	80078fa <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 8004cfe:	2200      	movs	r2, #0
 8004d00:	2100      	movs	r1, #0
 8004d02:	203c      	movs	r0, #60	@ 0x3c
 8004d04:	f002 fddd 	bl	80078c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8004d08:	203c      	movs	r0, #60	@ 0x3c
 8004d0a:	f002 fdf6 	bl	80078fa <HAL_NVIC_EnableIRQ>

}
 8004d0e:	bf00      	nop
 8004d10:	3708      	adds	r7, #8
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	40021000 	.word	0x40021000

08004d1c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b08c      	sub	sp, #48	@ 0x30
 8004d20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d22:	f107 031c 	add.w	r3, r7, #28
 8004d26:	2200      	movs	r2, #0
 8004d28:	601a      	str	r2, [r3, #0]
 8004d2a:	605a      	str	r2, [r3, #4]
 8004d2c:	609a      	str	r2, [r3, #8]
 8004d2e:	60da      	str	r2, [r3, #12]
 8004d30:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004d32:	4b4b      	ldr	r3, [pc, #300]	@ (8004e60 <_ZL12MX_GPIO_Initv+0x144>)
 8004d34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d36:	4a4a      	ldr	r2, [pc, #296]	@ (8004e60 <_ZL12MX_GPIO_Initv+0x144>)
 8004d38:	f043 0310 	orr.w	r3, r3, #16
 8004d3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004d3e:	4b48      	ldr	r3, [pc, #288]	@ (8004e60 <_ZL12MX_GPIO_Initv+0x144>)
 8004d40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d42:	f003 0310 	and.w	r3, r3, #16
 8004d46:	61bb      	str	r3, [r7, #24]
 8004d48:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d4a:	4b45      	ldr	r3, [pc, #276]	@ (8004e60 <_ZL12MX_GPIO_Initv+0x144>)
 8004d4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d4e:	4a44      	ldr	r2, [pc, #272]	@ (8004e60 <_ZL12MX_GPIO_Initv+0x144>)
 8004d50:	f043 0304 	orr.w	r3, r3, #4
 8004d54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004d56:	4b42      	ldr	r3, [pc, #264]	@ (8004e60 <_ZL12MX_GPIO_Initv+0x144>)
 8004d58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d5a:	f003 0304 	and.w	r3, r3, #4
 8004d5e:	617b      	str	r3, [r7, #20]
 8004d60:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004d62:	4b3f      	ldr	r3, [pc, #252]	@ (8004e60 <_ZL12MX_GPIO_Initv+0x144>)
 8004d64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d66:	4a3e      	ldr	r2, [pc, #248]	@ (8004e60 <_ZL12MX_GPIO_Initv+0x144>)
 8004d68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004d6e:	4b3c      	ldr	r3, [pc, #240]	@ (8004e60 <_ZL12MX_GPIO_Initv+0x144>)
 8004d70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d76:	613b      	str	r3, [r7, #16]
 8004d78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d7a:	4b39      	ldr	r3, [pc, #228]	@ (8004e60 <_ZL12MX_GPIO_Initv+0x144>)
 8004d7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d7e:	4a38      	ldr	r2, [pc, #224]	@ (8004e60 <_ZL12MX_GPIO_Initv+0x144>)
 8004d80:	f043 0301 	orr.w	r3, r3, #1
 8004d84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004d86:	4b36      	ldr	r3, [pc, #216]	@ (8004e60 <_ZL12MX_GPIO_Initv+0x144>)
 8004d88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d8a:	f003 0301 	and.w	r3, r3, #1
 8004d8e:	60fb      	str	r3, [r7, #12]
 8004d90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004d92:	4b33      	ldr	r3, [pc, #204]	@ (8004e60 <_ZL12MX_GPIO_Initv+0x144>)
 8004d94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d96:	4a32      	ldr	r2, [pc, #200]	@ (8004e60 <_ZL12MX_GPIO_Initv+0x144>)
 8004d98:	f043 0308 	orr.w	r3, r3, #8
 8004d9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004d9e:	4b30      	ldr	r3, [pc, #192]	@ (8004e60 <_ZL12MX_GPIO_Initv+0x144>)
 8004da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004da2:	f003 0308 	and.w	r3, r3, #8
 8004da6:	60bb      	str	r3, [r7, #8]
 8004da8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004daa:	4b2d      	ldr	r3, [pc, #180]	@ (8004e60 <_ZL12MX_GPIO_Initv+0x144>)
 8004dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dae:	4a2c      	ldr	r2, [pc, #176]	@ (8004e60 <_ZL12MX_GPIO_Initv+0x144>)
 8004db0:	f043 0302 	orr.w	r3, r3, #2
 8004db4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004db6:	4b2a      	ldr	r3, [pc, #168]	@ (8004e60 <_ZL12MX_GPIO_Initv+0x144>)
 8004db8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dba:	f003 0302 	and.w	r3, r3, #2
 8004dbe:	607b      	str	r3, [r7, #4]
 8004dc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	210f      	movs	r1, #15
 8004dc6:	4827      	ldr	r0, [pc, #156]	@ (8004e64 <_ZL12MX_GPIO_Initv+0x148>)
 8004dc8:	f003 fb72 	bl	80084b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8004dcc:	2200      	movs	r2, #0
 8004dce:	2174      	movs	r1, #116	@ 0x74
 8004dd0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004dd4:	f003 fb6c 	bl	80084b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2 | GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f64f 7105 	movw	r1, #65285	@ 0xff05
 8004dde:	4822      	ldr	r0, [pc, #136]	@ (8004e68 <_ZL12MX_GPIO_Initv+0x14c>)
 8004de0:	f003 fb66 	bl	80084b0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE3 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_1;
 8004de4:	230f      	movs	r3, #15
 8004de6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004de8:	2301      	movs	r3, #1
 8004dea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dec:	2300      	movs	r3, #0
 8004dee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004df0:	2300      	movs	r3, #0
 8004df2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004df4:	f107 031c 	add.w	r3, r7, #28
 8004df8:	4619      	mov	r1, r3
 8004dfa:	481a      	ldr	r0, [pc, #104]	@ (8004e64 <_ZL12MX_GPIO_Initv+0x148>)
 8004dfc:	f003 f8bc 	bl	8007f78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8004e00:	2374      	movs	r3, #116	@ 0x74
 8004e02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e04:	2301      	movs	r3, #1
 8004e06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e10:	f107 031c 	add.w	r3, r7, #28
 8004e14:	4619      	mov	r1, r3
 8004e16:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004e1a:	f003 f8ad 	bl	8007f78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004e1e:	2308      	movs	r3, #8
 8004e20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004e22:	2300      	movs	r3, #0
 8004e24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e26:	2300      	movs	r3, #0
 8004e28:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e2a:	f107 031c 	add.w	r3, r7, #28
 8004e2e:	4619      	mov	r1, r3
 8004e30:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004e34:	f003 f8a0 	bl	8007f78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8004e38:	f64f 7301 	movw	r3, #65281	@ 0xff01
 8004e3c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e42:	2300      	movs	r3, #0
 8004e44:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e46:	2300      	movs	r3, #0
 8004e48:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004e4a:	f107 031c 	add.w	r3, r7, #28
 8004e4e:	4619      	mov	r1, r3
 8004e50:	4805      	ldr	r0, [pc, #20]	@ (8004e68 <_ZL12MX_GPIO_Initv+0x14c>)
 8004e52:	f003 f891 	bl	8007f78 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004e56:	bf00      	nop
 8004e58:	3730      	adds	r7, #48	@ 0x30
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	40021000 	.word	0x40021000
 8004e64:	48001000 	.word	0x48001000
 8004e68:	48000c00 	.word	0x48000c00

08004e6c <HAL_ADC_ConvCpltCallback>:


// when DMA conversion is completed, HAL_ADC_ConvCpltCallback function
// will interrupt the processor. You can find this function in
// Drivers>STM32F4xx_HAL_Drivers>stm32f4xx_hal_adc.c file as __weak attribute
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
	// I set adc_conv_complete_flag variable to 1 when,
	// HAL_ADC_ConvCpltCallback function is call.
	if ( hadc->Instance == ADC1 ){
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a05      	ldr	r2, [pc, #20]	@ (8004e90 <HAL_ADC_ConvCpltCallback+0x24>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d102      	bne.n	8004e84 <HAL_ADC_ConvCpltCallback+0x18>
		flagAnalog = 1;
 8004e7e:	4b05      	ldr	r3, [pc, #20]	@ (8004e94 <HAL_ADC_ConvCpltCallback+0x28>)
 8004e80:	2201      	movs	r2, #1
 8004e82:	701a      	strb	r2, [r3, #0]
	}
	//HAL_ADC_Start_DMA(&hadc1, (uint32_t *) analog, 3);
}
 8004e84:	bf00      	nop
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr
 8004e90:	50040000 	.word	0x50040000
 8004e94:	2000114c 	.word	0x2000114c

08004e98 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == UART4){
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a15      	ldr	r2, [pc, #84]	@ (8004efc <HAL_UART_RxCpltCallback+0x64>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d10a      	bne.n	8004ec0 <HAL_UART_RxCpltCallback+0x28>
		loraIn.insertElement(rxLora[0]);
 8004eaa:	4b15      	ldr	r3, [pc, #84]	@ (8004f00 <HAL_UART_RxCpltCallback+0x68>)
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	4619      	mov	r1, r3
 8004eb0:	4814      	ldr	r0, [pc, #80]	@ (8004f04 <HAL_UART_RxCpltCallback+0x6c>)
 8004eb2:	f7fc fd99 	bl	80019e8 <_ZN8fifoUart13insertElementEh>
		HAL_UART_Receive_DMA(&huart4, rxLora, sizeof(rxLora));
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	4911      	ldr	r1, [pc, #68]	@ (8004f00 <HAL_UART_RxCpltCallback+0x68>)
 8004eba:	4813      	ldr	r0, [pc, #76]	@ (8004f08 <HAL_UART_RxCpltCallback+0x70>)
 8004ebc:	f007 fe1e 	bl	800cafc <HAL_UART_Receive_DMA>
	}

	if(huart->Instance == UART5){
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a11      	ldr	r2, [pc, #68]	@ (8004f0c <HAL_UART_RxCpltCallback+0x74>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d114      	bne.n	8004ef4 <HAL_UART_RxCpltCallback+0x5c>
		gpsIn.insertElement(rxGps[0]);
 8004eca:	4b11      	ldr	r3, [pc, #68]	@ (8004f10 <HAL_UART_RxCpltCallback+0x78>)
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	4619      	mov	r1, r3
 8004ed0:	4810      	ldr	r0, [pc, #64]	@ (8004f14 <HAL_UART_RxCpltCallback+0x7c>)
 8004ed2:	f7fc fd89 	bl	80019e8 <_ZN8fifoUart13insertElementEh>
		gpsIn.insertElement(rxGps[1]);
 8004ed6:	4b0e      	ldr	r3, [pc, #56]	@ (8004f10 <HAL_UART_RxCpltCallback+0x78>)
 8004ed8:	785b      	ldrb	r3, [r3, #1]
 8004eda:	4619      	mov	r1, r3
 8004edc:	480d      	ldr	r0, [pc, #52]	@ (8004f14 <HAL_UART_RxCpltCallback+0x7c>)
 8004ede:	f7fc fd83 	bl	80019e8 <_ZN8fifoUart13insertElementEh>
		//HAL_UARTEx_ReceiveToIdle_DMA(&huart5, rxGps, sizeof(rxGps));
		//__HAL_UART_ENABLE_IT(&huart5, UART_IT_IDLE);
		HAL_UART_Receive_DMA(&huart5, rxGps, sizeof(rxGps));
 8004ee2:	2202      	movs	r2, #2
 8004ee4:	490a      	ldr	r1, [pc, #40]	@ (8004f10 <HAL_UART_RxCpltCallback+0x78>)
 8004ee6:	480c      	ldr	r0, [pc, #48]	@ (8004f18 <HAL_UART_RxCpltCallback+0x80>)
 8004ee8:	f007 fe08 	bl	800cafc <HAL_UART_Receive_DMA>
		__HAL_UART_CLEAR_IDLEFLAG(&huart5);
 8004eec:	4b0a      	ldr	r3, [pc, #40]	@ (8004f18 <HAL_UART_RxCpltCallback+0x80>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	2210      	movs	r2, #16
 8004ef2:	621a      	str	r2, [r3, #32]
		//__HAL_UART_ENABLE_IT(&huart5, UART_IT_IDLE);
	}
}
 8004ef4:	bf00      	nop
 8004ef6:	3708      	adds	r7, #8
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	40004c00 	.word	0x40004c00
 8004f00:	20000aec 	.word	0x20000aec
 8004f04:	20000af0 	.word	0x20000af0
 8004f08:	200007b4 	.word	0x200007b4
 8004f0c:	40005000 	.word	0x40005000
 8004f10:	20000adc 	.word	0x20000adc
 8004f14:	20000a9c 	.word	0x20000a9c
 8004f18:	2000083c 	.word	0x2000083c

08004f1c <HAL_TIM_PeriodElapsedCallback>:

/////////////////////////
// TIMER 6 - SUPERLOOP //
/////////////////////////

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6){
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a05      	ldr	r2, [pc, #20]	@ (8004f40 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d102      	bne.n	8004f34 <HAL_TIM_PeriodElapsedCallback+0x18>
		flagSuperloop	= 1;
 8004f2e:	4b05      	ldr	r3, [pc, #20]	@ (8004f44 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8004f30:	2201      	movs	r2, #1
 8004f32:	701a      	strb	r2, [r3, #0]
	}
}
 8004f34:	bf00      	nop
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr
 8004f40:	40001000 	.word	0x40001000
 8004f44:	2000113c 	.word	0x2000113c

08004f48 <HAL_I2C_MasterTxCpltCallback>:
///////////////////////
// I2C INTERRUPTIONS //
///////////////////////

void HAL_I2C_MasterTxCpltCallback (I2C_HandleTypeDef *hi2c)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b083      	sub	sp, #12
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
	flagI2C_DMA	= 1;;
 8004f50:	4b04      	ldr	r3, [pc, #16]	@ (8004f64 <HAL_I2C_MasterTxCpltCallback+0x1c>)
 8004f52:	2201      	movs	r2, #1
 8004f54:	701a      	strb	r2, [r3, #0]
}
 8004f56:	bf00      	nop
 8004f58:	370c      	adds	r7, #12
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	200010a7 	.word	0x200010a7

08004f68 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback (I2C_HandleTypeDef * hi2c)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]

}
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004f80:	b672      	cpsid	i
}
 8004f82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004f84:	bf00      	nop
 8004f86:	e7fd      	b.n	8004f84 <Error_Handler+0x8>

08004f88 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d115      	bne.n	8004fc4 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d110      	bne.n	8004fc4 <_Z41__static_initialization_and_destruction_0ii+0x3c>
gpsInput gpsInput;		// Instancia de gpsInput
 8004fa2:	480a      	ldr	r0, [pc, #40]	@ (8004fcc <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8004fa4:	f7fc fda8 	bl	8001af8 <_ZN8gpsInputC1Ev>
fifoUart	gpsIn;		//
 8004fa8:	4809      	ldr	r0, [pc, #36]	@ (8004fd0 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8004faa:	f7fc fd0d 	bl	80019c8 <_ZN8fifoUartC1Ev>
fifoUart loraIn;			// FIFO que recibe los datos
 8004fae:	4809      	ldr	r0, [pc, #36]	@ (8004fd4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8004fb0:	f7fc fd0a 	bl	80019c8 <_ZN8fifoUartC1Ev>
wdTimeout loraTimeWd(4000);
 8004fb4:	f44f 617a 	mov.w	r1, #4000	@ 0xfa0
 8004fb8:	4807      	ldr	r0, [pc, #28]	@ (8004fd8 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8004fba:	f7ff f857 	bl	800406c <_ZN9wdTimeoutC1El>
fifoCommands fifoContent;
 8004fbe:	4807      	ldr	r0, [pc, #28]	@ (8004fdc <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8004fc0:	f7ff fb04 	bl	80045cc <_ZN12fifoCommandsC1Ev>
}
 8004fc4:	bf00      	nop
 8004fc6:	3708      	adds	r7, #8
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	20000a44 	.word	0x20000a44
 8004fd0:	20000a9c 	.word	0x20000a9c
 8004fd4:	20000af0 	.word	0x20000af0
 8004fd8:	20001084 	.word	0x20001084
 8004fdc:	200010a8 	.word	0x200010a8

08004fe0 <_GLOBAL__sub_I_hadc1>:
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8004fe8:	2001      	movs	r0, #1
 8004fea:	f7ff ffcd 	bl	8004f88 <_Z41__static_initialization_and_destruction_0ii>
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ff6:	4b0f      	ldr	r3, [pc, #60]	@ (8005034 <HAL_MspInit+0x44>)
 8004ff8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ffa:	4a0e      	ldr	r2, [pc, #56]	@ (8005034 <HAL_MspInit+0x44>)
 8004ffc:	f043 0301 	orr.w	r3, r3, #1
 8005000:	6613      	str	r3, [r2, #96]	@ 0x60
 8005002:	4b0c      	ldr	r3, [pc, #48]	@ (8005034 <HAL_MspInit+0x44>)
 8005004:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005006:	f003 0301 	and.w	r3, r3, #1
 800500a:	607b      	str	r3, [r7, #4]
 800500c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800500e:	4b09      	ldr	r3, [pc, #36]	@ (8005034 <HAL_MspInit+0x44>)
 8005010:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005012:	4a08      	ldr	r2, [pc, #32]	@ (8005034 <HAL_MspInit+0x44>)
 8005014:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005018:	6593      	str	r3, [r2, #88]	@ 0x58
 800501a:	4b06      	ldr	r3, [pc, #24]	@ (8005034 <HAL_MspInit+0x44>)
 800501c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800501e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005022:	603b      	str	r3, [r7, #0]
 8005024:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005026:	bf00      	nop
 8005028:	370c      	adds	r7, #12
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop
 8005034:	40021000 	.word	0x40021000

08005038 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b0ac      	sub	sp, #176	@ 0xb0
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005040:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8005044:	2200      	movs	r2, #0
 8005046:	601a      	str	r2, [r3, #0]
 8005048:	605a      	str	r2, [r3, #4]
 800504a:	609a      	str	r2, [r3, #8]
 800504c:	60da      	str	r2, [r3, #12]
 800504e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005050:	f107 0310 	add.w	r3, r7, #16
 8005054:	228c      	movs	r2, #140	@ 0x8c
 8005056:	2100      	movs	r1, #0
 8005058:	4618      	mov	r0, r3
 800505a:	f008 ffe6 	bl	800e02a <memset>
  if(hadc->Instance==ADC1)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a40      	ldr	r2, [pc, #256]	@ (8005164 <HAL_ADC_MspInit+0x12c>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d179      	bne.n	800515c <HAL_ADC_MspInit+0x124>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8005068:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800506c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800506e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8005072:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8005076:	2303      	movs	r3, #3
 8005078:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800507a:	2301      	movs	r3, #1
 800507c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800507e:	2308      	movs	r3, #8
 8005080:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8005082:	2302      	movs	r3, #2
 8005084:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8005086:	2302      	movs	r3, #2
 8005088:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800508a:	2302      	movs	r3, #2
 800508c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800508e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005092:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005094:	f107 0310 	add.w	r3, r7, #16
 8005098:	4618      	mov	r0, r3
 800509a:	f006 fc2b 	bl	800b8f4 <HAL_RCCEx_PeriphCLKConfig>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d001      	beq.n	80050a8 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80050a4:	f7ff ff6a 	bl	8004f7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80050a8:	4b2f      	ldr	r3, [pc, #188]	@ (8005168 <HAL_ADC_MspInit+0x130>)
 80050aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050ac:	4a2e      	ldr	r2, [pc, #184]	@ (8005168 <HAL_ADC_MspInit+0x130>)
 80050ae:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80050b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80050b4:	4b2c      	ldr	r3, [pc, #176]	@ (8005168 <HAL_ADC_MspInit+0x130>)
 80050b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80050bc:	60fb      	str	r3, [r7, #12]
 80050be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80050c0:	4b29      	ldr	r3, [pc, #164]	@ (8005168 <HAL_ADC_MspInit+0x130>)
 80050c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050c4:	4a28      	ldr	r2, [pc, #160]	@ (8005168 <HAL_ADC_MspInit+0x130>)
 80050c6:	f043 0304 	orr.w	r3, r3, #4
 80050ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80050cc:	4b26      	ldr	r3, [pc, #152]	@ (8005168 <HAL_ADC_MspInit+0x130>)
 80050ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050d0:	f003 0304 	and.w	r3, r3, #4
 80050d4:	60bb      	str	r3, [r7, #8]
 80050d6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80050d8:	2307      	movs	r3, #7
 80050da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80050de:	2303      	movs	r3, #3
 80050e0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050e4:	2300      	movs	r3, #0
 80050e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80050ea:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80050ee:	4619      	mov	r1, r3
 80050f0:	481e      	ldr	r0, [pc, #120]	@ (800516c <HAL_ADC_MspInit+0x134>)
 80050f2:	f002 ff41 	bl	8007f78 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80050f6:	4b1e      	ldr	r3, [pc, #120]	@ (8005170 <HAL_ADC_MspInit+0x138>)
 80050f8:	4a1e      	ldr	r2, [pc, #120]	@ (8005174 <HAL_ADC_MspInit+0x13c>)
 80050fa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80050fc:	4b1c      	ldr	r3, [pc, #112]	@ (8005170 <HAL_ADC_MspInit+0x138>)
 80050fe:	2200      	movs	r2, #0
 8005100:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005102:	4b1b      	ldr	r3, [pc, #108]	@ (8005170 <HAL_ADC_MspInit+0x138>)
 8005104:	2200      	movs	r2, #0
 8005106:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005108:	4b19      	ldr	r3, [pc, #100]	@ (8005170 <HAL_ADC_MspInit+0x138>)
 800510a:	2200      	movs	r2, #0
 800510c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800510e:	4b18      	ldr	r3, [pc, #96]	@ (8005170 <HAL_ADC_MspInit+0x138>)
 8005110:	2280      	movs	r2, #128	@ 0x80
 8005112:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005114:	4b16      	ldr	r3, [pc, #88]	@ (8005170 <HAL_ADC_MspInit+0x138>)
 8005116:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800511a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800511c:	4b14      	ldr	r3, [pc, #80]	@ (8005170 <HAL_ADC_MspInit+0x138>)
 800511e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005122:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005124:	4b12      	ldr	r3, [pc, #72]	@ (8005170 <HAL_ADC_MspInit+0x138>)
 8005126:	2220      	movs	r2, #32
 8005128:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800512a:	4b11      	ldr	r3, [pc, #68]	@ (8005170 <HAL_ADC_MspInit+0x138>)
 800512c:	2200      	movs	r2, #0
 800512e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005130:	480f      	ldr	r0, [pc, #60]	@ (8005170 <HAL_ADC_MspInit+0x138>)
 8005132:	f002 fc0b 	bl	800794c <HAL_DMA_Init>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d001      	beq.n	8005140 <HAL_ADC_MspInit+0x108>
    {
      Error_Handler();
 800513c:	f7ff ff1e 	bl	8004f7c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4a0b      	ldr	r2, [pc, #44]	@ (8005170 <HAL_ADC_MspInit+0x138>)
 8005144:	651a      	str	r2, [r3, #80]	@ 0x50
 8005146:	4a0a      	ldr	r2, [pc, #40]	@ (8005170 <HAL_ADC_MspInit+0x138>)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800514c:	2200      	movs	r2, #0
 800514e:	2100      	movs	r1, #0
 8005150:	2012      	movs	r0, #18
 8005152:	f002 fbb6 	bl	80078c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8005156:	2012      	movs	r0, #18
 8005158:	f002 fbcf 	bl	80078fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800515c:	bf00      	nop
 800515e:	37b0      	adds	r7, #176	@ 0xb0
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}
 8005164:	50040000 	.word	0x50040000
 8005168:	40021000 	.word	0x40021000
 800516c:	48000800 	.word	0x48000800
 8005170:	20000688 	.word	0x20000688
 8005174:	40020008 	.word	0x40020008

08005178 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b0ac      	sub	sp, #176	@ 0xb0
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005180:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8005184:	2200      	movs	r2, #0
 8005186:	601a      	str	r2, [r3, #0]
 8005188:	605a      	str	r2, [r3, #4]
 800518a:	609a      	str	r2, [r3, #8]
 800518c:	60da      	str	r2, [r3, #12]
 800518e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005190:	f107 0310 	add.w	r3, r7, #16
 8005194:	228c      	movs	r2, #140	@ 0x8c
 8005196:	2100      	movs	r1, #0
 8005198:	4618      	mov	r0, r3
 800519a:	f008 ff46 	bl	800e02a <memset>
  if(hi2c->Instance==I2C1)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a52      	ldr	r2, [pc, #328]	@ (80052ec <HAL_I2C_MspInit+0x174>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	f040 809d 	bne.w	80052e4 <HAL_I2C_MspInit+0x16c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80051aa:	2340      	movs	r3, #64	@ 0x40
 80051ac:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80051ae:	2300      	movs	r3, #0
 80051b0:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80051b2:	f107 0310 	add.w	r3, r7, #16
 80051b6:	4618      	mov	r0, r3
 80051b8:	f006 fb9c 	bl	800b8f4 <HAL_RCCEx_PeriphCLKConfig>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d001      	beq.n	80051c6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80051c2:	f7ff fedb 	bl	8004f7c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80051c6:	4b4a      	ldr	r3, [pc, #296]	@ (80052f0 <HAL_I2C_MspInit+0x178>)
 80051c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051ca:	4a49      	ldr	r2, [pc, #292]	@ (80052f0 <HAL_I2C_MspInit+0x178>)
 80051cc:	f043 0302 	orr.w	r3, r3, #2
 80051d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80051d2:	4b47      	ldr	r3, [pc, #284]	@ (80052f0 <HAL_I2C_MspInit+0x178>)
 80051d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051d6:	f003 0302 	and.w	r3, r3, #2
 80051da:	60fb      	str	r3, [r7, #12]
 80051dc:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80051de:	23c0      	movs	r3, #192	@ 0xc0
 80051e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80051e4:	2312      	movs	r3, #18
 80051e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051ea:	2300      	movs	r3, #0
 80051ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051f0:	2303      	movs	r3, #3
 80051f2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80051f6:	2304      	movs	r3, #4
 80051f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051fc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8005200:	4619      	mov	r1, r3
 8005202:	483c      	ldr	r0, [pc, #240]	@ (80052f4 <HAL_I2C_MspInit+0x17c>)
 8005204:	f002 feb8 	bl	8007f78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005208:	4b39      	ldr	r3, [pc, #228]	@ (80052f0 <HAL_I2C_MspInit+0x178>)
 800520a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800520c:	4a38      	ldr	r2, [pc, #224]	@ (80052f0 <HAL_I2C_MspInit+0x178>)
 800520e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005212:	6593      	str	r3, [r2, #88]	@ 0x58
 8005214:	4b36      	ldr	r3, [pc, #216]	@ (80052f0 <HAL_I2C_MspInit+0x178>)
 8005216:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005218:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800521c:	60bb      	str	r3, [r7, #8]
 800521e:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8005220:	4b35      	ldr	r3, [pc, #212]	@ (80052f8 <HAL_I2C_MspInit+0x180>)
 8005222:	4a36      	ldr	r2, [pc, #216]	@ (80052fc <HAL_I2C_MspInit+0x184>)
 8005224:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_3;
 8005226:	4b34      	ldr	r3, [pc, #208]	@ (80052f8 <HAL_I2C_MspInit+0x180>)
 8005228:	2203      	movs	r2, #3
 800522a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800522c:	4b32      	ldr	r3, [pc, #200]	@ (80052f8 <HAL_I2C_MspInit+0x180>)
 800522e:	2200      	movs	r2, #0
 8005230:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005232:	4b31      	ldr	r3, [pc, #196]	@ (80052f8 <HAL_I2C_MspInit+0x180>)
 8005234:	2200      	movs	r2, #0
 8005236:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005238:	4b2f      	ldr	r3, [pc, #188]	@ (80052f8 <HAL_I2C_MspInit+0x180>)
 800523a:	2280      	movs	r2, #128	@ 0x80
 800523c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800523e:	4b2e      	ldr	r3, [pc, #184]	@ (80052f8 <HAL_I2C_MspInit+0x180>)
 8005240:	2200      	movs	r2, #0
 8005242:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005244:	4b2c      	ldr	r3, [pc, #176]	@ (80052f8 <HAL_I2C_MspInit+0x180>)
 8005246:	2200      	movs	r2, #0
 8005248:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800524a:	4b2b      	ldr	r3, [pc, #172]	@ (80052f8 <HAL_I2C_MspInit+0x180>)
 800524c:	2200      	movs	r2, #0
 800524e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005250:	4b29      	ldr	r3, [pc, #164]	@ (80052f8 <HAL_I2C_MspInit+0x180>)
 8005252:	2200      	movs	r2, #0
 8005254:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8005256:	4828      	ldr	r0, [pc, #160]	@ (80052f8 <HAL_I2C_MspInit+0x180>)
 8005258:	f002 fb78 	bl	800794c <HAL_DMA_Init>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d001      	beq.n	8005266 <HAL_I2C_MspInit+0xee>
    {
      Error_Handler();
 8005262:	f7ff fe8b 	bl	8004f7c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a23      	ldr	r2, [pc, #140]	@ (80052f8 <HAL_I2C_MspInit+0x180>)
 800526a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800526c:	4a22      	ldr	r2, [pc, #136]	@ (80052f8 <HAL_I2C_MspInit+0x180>)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8005272:	4b23      	ldr	r3, [pc, #140]	@ (8005300 <HAL_I2C_MspInit+0x188>)
 8005274:	4a23      	ldr	r2, [pc, #140]	@ (8005304 <HAL_I2C_MspInit+0x18c>)
 8005276:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_3;
 8005278:	4b21      	ldr	r3, [pc, #132]	@ (8005300 <HAL_I2C_MspInit+0x188>)
 800527a:	2203      	movs	r2, #3
 800527c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800527e:	4b20      	ldr	r3, [pc, #128]	@ (8005300 <HAL_I2C_MspInit+0x188>)
 8005280:	2210      	movs	r2, #16
 8005282:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005284:	4b1e      	ldr	r3, [pc, #120]	@ (8005300 <HAL_I2C_MspInit+0x188>)
 8005286:	2200      	movs	r2, #0
 8005288:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800528a:	4b1d      	ldr	r3, [pc, #116]	@ (8005300 <HAL_I2C_MspInit+0x188>)
 800528c:	2280      	movs	r2, #128	@ 0x80
 800528e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005290:	4b1b      	ldr	r3, [pc, #108]	@ (8005300 <HAL_I2C_MspInit+0x188>)
 8005292:	2200      	movs	r2, #0
 8005294:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005296:	4b1a      	ldr	r3, [pc, #104]	@ (8005300 <HAL_I2C_MspInit+0x188>)
 8005298:	2200      	movs	r2, #0
 800529a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800529c:	4b18      	ldr	r3, [pc, #96]	@ (8005300 <HAL_I2C_MspInit+0x188>)
 800529e:	2200      	movs	r2, #0
 80052a0:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80052a2:	4b17      	ldr	r3, [pc, #92]	@ (8005300 <HAL_I2C_MspInit+0x188>)
 80052a4:	2200      	movs	r2, #0
 80052a6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80052a8:	4815      	ldr	r0, [pc, #84]	@ (8005300 <HAL_I2C_MspInit+0x188>)
 80052aa:	f002 fb4f 	bl	800794c <HAL_DMA_Init>
 80052ae:	4603      	mov	r3, r0
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d001      	beq.n	80052b8 <HAL_I2C_MspInit+0x140>
    {
      Error_Handler();
 80052b4:	f7ff fe62 	bl	8004f7c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a11      	ldr	r2, [pc, #68]	@ (8005300 <HAL_I2C_MspInit+0x188>)
 80052bc:	639a      	str	r2, [r3, #56]	@ 0x38
 80052be:	4a10      	ldr	r2, [pc, #64]	@ (8005300 <HAL_I2C_MspInit+0x188>)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80052c4:	2200      	movs	r2, #0
 80052c6:	2100      	movs	r1, #0
 80052c8:	201f      	movs	r0, #31
 80052ca:	f002 fafa 	bl	80078c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80052ce:	201f      	movs	r0, #31
 80052d0:	f002 fb13 	bl	80078fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80052d4:	2200      	movs	r2, #0
 80052d6:	2100      	movs	r1, #0
 80052d8:	2020      	movs	r0, #32
 80052da:	f002 faf2 	bl	80078c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80052de:	2020      	movs	r0, #32
 80052e0:	f002 fb0b 	bl	80078fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80052e4:	bf00      	nop
 80052e6:	37b0      	adds	r7, #176	@ 0xb0
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	40005400 	.word	0x40005400
 80052f0:	40021000 	.word	0x40021000
 80052f4:	48000400 	.word	0x48000400
 80052f8:	20000724 	.word	0x20000724
 80052fc:	40020080 	.word	0x40020080
 8005300:	2000076c 	.word	0x2000076c
 8005304:	4002006c 	.word	0x4002006c

08005308 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b084      	sub	sp, #16
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a0d      	ldr	r2, [pc, #52]	@ (800534c <HAL_TIM_Base_MspInit+0x44>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d113      	bne.n	8005342 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800531a:	4b0d      	ldr	r3, [pc, #52]	@ (8005350 <HAL_TIM_Base_MspInit+0x48>)
 800531c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800531e:	4a0c      	ldr	r2, [pc, #48]	@ (8005350 <HAL_TIM_Base_MspInit+0x48>)
 8005320:	f043 0310 	orr.w	r3, r3, #16
 8005324:	6593      	str	r3, [r2, #88]	@ 0x58
 8005326:	4b0a      	ldr	r3, [pc, #40]	@ (8005350 <HAL_TIM_Base_MspInit+0x48>)
 8005328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800532a:	f003 0310 	and.w	r3, r3, #16
 800532e:	60fb      	str	r3, [r7, #12]
 8005330:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8005332:	2200      	movs	r2, #0
 8005334:	2100      	movs	r1, #0
 8005336:	2036      	movs	r0, #54	@ 0x36
 8005338:	f002 fac3 	bl	80078c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800533c:	2036      	movs	r0, #54	@ 0x36
 800533e:	f002 fadc 	bl	80078fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8005342:	bf00      	nop
 8005344:	3710      	adds	r7, #16
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	40001000 	.word	0x40001000
 8005350:	40021000 	.word	0x40021000

08005354 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b0b0      	sub	sp, #192	@ 0xc0
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800535c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8005360:	2200      	movs	r2, #0
 8005362:	601a      	str	r2, [r3, #0]
 8005364:	605a      	str	r2, [r3, #4]
 8005366:	609a      	str	r2, [r3, #8]
 8005368:	60da      	str	r2, [r3, #12]
 800536a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800536c:	f107 0320 	add.w	r3, r7, #32
 8005370:	228c      	movs	r2, #140	@ 0x8c
 8005372:	2100      	movs	r1, #0
 8005374:	4618      	mov	r0, r3
 8005376:	f008 fe58 	bl	800e02a <memset>
  if(huart->Instance==UART4)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a4d      	ldr	r2, [pc, #308]	@ (80054b4 <HAL_UART_MspInit+0x160>)
 8005380:	4293      	cmp	r3, r2
 8005382:	f040 80a3 	bne.w	80054cc <HAL_UART_MspInit+0x178>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8005386:	2308      	movs	r3, #8
 8005388:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800538a:	2300      	movs	r3, #0
 800538c:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800538e:	f107 0320 	add.w	r3, r7, #32
 8005392:	4618      	mov	r0, r3
 8005394:	f006 faae 	bl	800b8f4 <HAL_RCCEx_PeriphCLKConfig>
 8005398:	4603      	mov	r3, r0
 800539a:	2b00      	cmp	r3, #0
 800539c:	d001      	beq.n	80053a2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800539e:	f7ff fded 	bl	8004f7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80053a2:	4b45      	ldr	r3, [pc, #276]	@ (80054b8 <HAL_UART_MspInit+0x164>)
 80053a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053a6:	4a44      	ldr	r2, [pc, #272]	@ (80054b8 <HAL_UART_MspInit+0x164>)
 80053a8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80053ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80053ae:	4b42      	ldr	r3, [pc, #264]	@ (80054b8 <HAL_UART_MspInit+0x164>)
 80053b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80053b6:	61fb      	str	r3, [r7, #28]
 80053b8:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053ba:	4b3f      	ldr	r3, [pc, #252]	@ (80054b8 <HAL_UART_MspInit+0x164>)
 80053bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053be:	4a3e      	ldr	r2, [pc, #248]	@ (80054b8 <HAL_UART_MspInit+0x164>)
 80053c0:	f043 0301 	orr.w	r3, r3, #1
 80053c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80053c6:	4b3c      	ldr	r3, [pc, #240]	@ (80054b8 <HAL_UART_MspInit+0x164>)
 80053c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053ca:	f003 0301 	and.w	r3, r3, #1
 80053ce:	61bb      	str	r3, [r7, #24]
 80053d0:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80053d2:	2303      	movs	r3, #3
 80053d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053d8:	2302      	movs	r3, #2
 80053da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053de:	2300      	movs	r3, #0
 80053e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053e4:	2303      	movs	r3, #3
 80053e6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80053ea:	2308      	movs	r3, #8
 80053ec:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053f0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80053f4:	4619      	mov	r1, r3
 80053f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80053fa:	f002 fdbd 	bl	8007f78 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Channel5;
 80053fe:	4b2f      	ldr	r3, [pc, #188]	@ (80054bc <HAL_UART_MspInit+0x168>)
 8005400:	4a2f      	ldr	r2, [pc, #188]	@ (80054c0 <HAL_UART_MspInit+0x16c>)
 8005402:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_2;
 8005404:	4b2d      	ldr	r3, [pc, #180]	@ (80054bc <HAL_UART_MspInit+0x168>)
 8005406:	2202      	movs	r2, #2
 8005408:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800540a:	4b2c      	ldr	r3, [pc, #176]	@ (80054bc <HAL_UART_MspInit+0x168>)
 800540c:	2200      	movs	r2, #0
 800540e:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005410:	4b2a      	ldr	r3, [pc, #168]	@ (80054bc <HAL_UART_MspInit+0x168>)
 8005412:	2200      	movs	r2, #0
 8005414:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005416:	4b29      	ldr	r3, [pc, #164]	@ (80054bc <HAL_UART_MspInit+0x168>)
 8005418:	2280      	movs	r2, #128	@ 0x80
 800541a:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800541c:	4b27      	ldr	r3, [pc, #156]	@ (80054bc <HAL_UART_MspInit+0x168>)
 800541e:	2200      	movs	r2, #0
 8005420:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005422:	4b26      	ldr	r3, [pc, #152]	@ (80054bc <HAL_UART_MspInit+0x168>)
 8005424:	2200      	movs	r2, #0
 8005426:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8005428:	4b24      	ldr	r3, [pc, #144]	@ (80054bc <HAL_UART_MspInit+0x168>)
 800542a:	2200      	movs	r2, #0
 800542c:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800542e:	4b23      	ldr	r3, [pc, #140]	@ (80054bc <HAL_UART_MspInit+0x168>)
 8005430:	2200      	movs	r2, #0
 8005432:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8005434:	4821      	ldr	r0, [pc, #132]	@ (80054bc <HAL_UART_MspInit+0x168>)
 8005436:	f002 fa89 	bl	800794c <HAL_DMA_Init>
 800543a:	4603      	mov	r3, r0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d001      	beq.n	8005444 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 8005440:	f7ff fd9c 	bl	8004f7c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4a1d      	ldr	r2, [pc, #116]	@ (80054bc <HAL_UART_MspInit+0x168>)
 8005448:	675a      	str	r2, [r3, #116]	@ 0x74
 800544a:	4a1c      	ldr	r2, [pc, #112]	@ (80054bc <HAL_UART_MspInit+0x168>)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA2_Channel3;
 8005450:	4b1c      	ldr	r3, [pc, #112]	@ (80054c4 <HAL_UART_MspInit+0x170>)
 8005452:	4a1d      	ldr	r2, [pc, #116]	@ (80054c8 <HAL_UART_MspInit+0x174>)
 8005454:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_2;
 8005456:	4b1b      	ldr	r3, [pc, #108]	@ (80054c4 <HAL_UART_MspInit+0x170>)
 8005458:	2202      	movs	r2, #2
 800545a:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800545c:	4b19      	ldr	r3, [pc, #100]	@ (80054c4 <HAL_UART_MspInit+0x170>)
 800545e:	2210      	movs	r2, #16
 8005460:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005462:	4b18      	ldr	r3, [pc, #96]	@ (80054c4 <HAL_UART_MspInit+0x170>)
 8005464:	2200      	movs	r2, #0
 8005466:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005468:	4b16      	ldr	r3, [pc, #88]	@ (80054c4 <HAL_UART_MspInit+0x170>)
 800546a:	2280      	movs	r2, #128	@ 0x80
 800546c:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800546e:	4b15      	ldr	r3, [pc, #84]	@ (80054c4 <HAL_UART_MspInit+0x170>)
 8005470:	2200      	movs	r2, #0
 8005472:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005474:	4b13      	ldr	r3, [pc, #76]	@ (80054c4 <HAL_UART_MspInit+0x170>)
 8005476:	2200      	movs	r2, #0
 8005478:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800547a:	4b12      	ldr	r3, [pc, #72]	@ (80054c4 <HAL_UART_MspInit+0x170>)
 800547c:	2200      	movs	r2, #0
 800547e:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005480:	4b10      	ldr	r3, [pc, #64]	@ (80054c4 <HAL_UART_MspInit+0x170>)
 8005482:	2200      	movs	r2, #0
 8005484:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8005486:	480f      	ldr	r0, [pc, #60]	@ (80054c4 <HAL_UART_MspInit+0x170>)
 8005488:	f002 fa60 	bl	800794c <HAL_DMA_Init>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d001      	beq.n	8005496 <HAL_UART_MspInit+0x142>
    {
      Error_Handler();
 8005492:	f7ff fd73 	bl	8004f7c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a0a      	ldr	r2, [pc, #40]	@ (80054c4 <HAL_UART_MspInit+0x170>)
 800549a:	671a      	str	r2, [r3, #112]	@ 0x70
 800549c:	4a09      	ldr	r2, [pc, #36]	@ (80054c4 <HAL_UART_MspInit+0x170>)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80054a2:	2200      	movs	r2, #0
 80054a4:	2100      	movs	r1, #0
 80054a6:	2034      	movs	r0, #52	@ 0x34
 80054a8:	f002 fa0b 	bl	80078c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80054ac:	2034      	movs	r0, #52	@ 0x34
 80054ae:	f002 fa24 	bl	80078fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 80054b2:	e0c9      	b.n	8005648 <HAL_UART_MspInit+0x2f4>
 80054b4:	40004c00 	.word	0x40004c00
 80054b8:	40021000 	.word	0x40021000
 80054bc:	200008c4 	.word	0x200008c4
 80054c0:	40020458 	.word	0x40020458
 80054c4:	2000090c 	.word	0x2000090c
 80054c8:	40020430 	.word	0x40020430
  else if(huart->Instance==UART5)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a5f      	ldr	r2, [pc, #380]	@ (8005650 <HAL_UART_MspInit+0x2fc>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	f040 80b8 	bne.w	8005648 <HAL_UART_MspInit+0x2f4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80054d8:	2310      	movs	r3, #16
 80054da:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_HSI;
 80054dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80054e0:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80054e2:	f107 0320 	add.w	r3, r7, #32
 80054e6:	4618      	mov	r0, r3
 80054e8:	f006 fa04 	bl	800b8f4 <HAL_RCCEx_PeriphCLKConfig>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d001      	beq.n	80054f6 <HAL_UART_MspInit+0x1a2>
      Error_Handler();
 80054f2:	f7ff fd43 	bl	8004f7c <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 80054f6:	4b57      	ldr	r3, [pc, #348]	@ (8005654 <HAL_UART_MspInit+0x300>)
 80054f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054fa:	4a56      	ldr	r2, [pc, #344]	@ (8005654 <HAL_UART_MspInit+0x300>)
 80054fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005500:	6593      	str	r3, [r2, #88]	@ 0x58
 8005502:	4b54      	ldr	r3, [pc, #336]	@ (8005654 <HAL_UART_MspInit+0x300>)
 8005504:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005506:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800550a:	617b      	str	r3, [r7, #20]
 800550c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800550e:	4b51      	ldr	r3, [pc, #324]	@ (8005654 <HAL_UART_MspInit+0x300>)
 8005510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005512:	4a50      	ldr	r2, [pc, #320]	@ (8005654 <HAL_UART_MspInit+0x300>)
 8005514:	f043 0304 	orr.w	r3, r3, #4
 8005518:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800551a:	4b4e      	ldr	r3, [pc, #312]	@ (8005654 <HAL_UART_MspInit+0x300>)
 800551c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800551e:	f003 0304 	and.w	r3, r3, #4
 8005522:	613b      	str	r3, [r7, #16]
 8005524:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005526:	4b4b      	ldr	r3, [pc, #300]	@ (8005654 <HAL_UART_MspInit+0x300>)
 8005528:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800552a:	4a4a      	ldr	r2, [pc, #296]	@ (8005654 <HAL_UART_MspInit+0x300>)
 800552c:	f043 0308 	orr.w	r3, r3, #8
 8005530:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005532:	4b48      	ldr	r3, [pc, #288]	@ (8005654 <HAL_UART_MspInit+0x300>)
 8005534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005536:	f003 0308 	and.w	r3, r3, #8
 800553a:	60fb      	str	r3, [r7, #12]
 800553c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800553e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005542:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005546:	2302      	movs	r3, #2
 8005548:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800554c:	2300      	movs	r3, #0
 800554e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005552:	2303      	movs	r3, #3
 8005554:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8005558:	2308      	movs	r3, #8
 800555a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800555e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8005562:	4619      	mov	r1, r3
 8005564:	483c      	ldr	r0, [pc, #240]	@ (8005658 <HAL_UART_MspInit+0x304>)
 8005566:	f002 fd07 	bl	8007f78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800556a:	2304      	movs	r3, #4
 800556c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005570:	2302      	movs	r3, #2
 8005572:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005576:	2300      	movs	r3, #0
 8005578:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800557c:	2303      	movs	r3, #3
 800557e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8005582:	2308      	movs	r3, #8
 8005584:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005588:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800558c:	4619      	mov	r1, r3
 800558e:	4833      	ldr	r0, [pc, #204]	@ (800565c <HAL_UART_MspInit+0x308>)
 8005590:	f002 fcf2 	bl	8007f78 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA2_Channel2;
 8005594:	4b32      	ldr	r3, [pc, #200]	@ (8005660 <HAL_UART_MspInit+0x30c>)
 8005596:	4a33      	ldr	r2, [pc, #204]	@ (8005664 <HAL_UART_MspInit+0x310>)
 8005598:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_2;
 800559a:	4b31      	ldr	r3, [pc, #196]	@ (8005660 <HAL_UART_MspInit+0x30c>)
 800559c:	2202      	movs	r2, #2
 800559e:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80055a0:	4b2f      	ldr	r3, [pc, #188]	@ (8005660 <HAL_UART_MspInit+0x30c>)
 80055a2:	2200      	movs	r2, #0
 80055a4:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80055a6:	4b2e      	ldr	r3, [pc, #184]	@ (8005660 <HAL_UART_MspInit+0x30c>)
 80055a8:	2200      	movs	r2, #0
 80055aa:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80055ac:	4b2c      	ldr	r3, [pc, #176]	@ (8005660 <HAL_UART_MspInit+0x30c>)
 80055ae:	2280      	movs	r2, #128	@ 0x80
 80055b0:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80055b2:	4b2b      	ldr	r3, [pc, #172]	@ (8005660 <HAL_UART_MspInit+0x30c>)
 80055b4:	2200      	movs	r2, #0
 80055b6:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80055b8:	4b29      	ldr	r3, [pc, #164]	@ (8005660 <HAL_UART_MspInit+0x30c>)
 80055ba:	2200      	movs	r2, #0
 80055bc:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 80055be:	4b28      	ldr	r3, [pc, #160]	@ (8005660 <HAL_UART_MspInit+0x30c>)
 80055c0:	2200      	movs	r2, #0
 80055c2:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 80055c4:	4b26      	ldr	r3, [pc, #152]	@ (8005660 <HAL_UART_MspInit+0x30c>)
 80055c6:	2200      	movs	r2, #0
 80055c8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 80055ca:	4825      	ldr	r0, [pc, #148]	@ (8005660 <HAL_UART_MspInit+0x30c>)
 80055cc:	f002 f9be 	bl	800794c <HAL_DMA_Init>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d001      	beq.n	80055da <HAL_UART_MspInit+0x286>
      Error_Handler();
 80055d6:	f7ff fcd1 	bl	8004f7c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a20      	ldr	r2, [pc, #128]	@ (8005660 <HAL_UART_MspInit+0x30c>)
 80055de:	675a      	str	r2, [r3, #116]	@ 0x74
 80055e0:	4a1f      	ldr	r2, [pc, #124]	@ (8005660 <HAL_UART_MspInit+0x30c>)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_uart5_tx.Instance = DMA2_Channel1;
 80055e6:	4b20      	ldr	r3, [pc, #128]	@ (8005668 <HAL_UART_MspInit+0x314>)
 80055e8:	4a20      	ldr	r2, [pc, #128]	@ (800566c <HAL_UART_MspInit+0x318>)
 80055ea:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Request = DMA_REQUEST_2;
 80055ec:	4b1e      	ldr	r3, [pc, #120]	@ (8005668 <HAL_UART_MspInit+0x314>)
 80055ee:	2202      	movs	r2, #2
 80055f0:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80055f2:	4b1d      	ldr	r3, [pc, #116]	@ (8005668 <HAL_UART_MspInit+0x314>)
 80055f4:	2210      	movs	r2, #16
 80055f6:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80055f8:	4b1b      	ldr	r3, [pc, #108]	@ (8005668 <HAL_UART_MspInit+0x314>)
 80055fa:	2200      	movs	r2, #0
 80055fc:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 80055fe:	4b1a      	ldr	r3, [pc, #104]	@ (8005668 <HAL_UART_MspInit+0x314>)
 8005600:	2280      	movs	r2, #128	@ 0x80
 8005602:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005604:	4b18      	ldr	r3, [pc, #96]	@ (8005668 <HAL_UART_MspInit+0x314>)
 8005606:	2200      	movs	r2, #0
 8005608:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800560a:	4b17      	ldr	r3, [pc, #92]	@ (8005668 <HAL_UART_MspInit+0x314>)
 800560c:	2200      	movs	r2, #0
 800560e:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8005610:	4b15      	ldr	r3, [pc, #84]	@ (8005668 <HAL_UART_MspInit+0x314>)
 8005612:	2200      	movs	r2, #0
 8005614:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005616:	4b14      	ldr	r3, [pc, #80]	@ (8005668 <HAL_UART_MspInit+0x314>)
 8005618:	2200      	movs	r2, #0
 800561a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 800561c:	4812      	ldr	r0, [pc, #72]	@ (8005668 <HAL_UART_MspInit+0x314>)
 800561e:	f002 f995 	bl	800794c <HAL_DMA_Init>
 8005622:	4603      	mov	r3, r0
 8005624:	2b00      	cmp	r3, #0
 8005626:	d001      	beq.n	800562c <HAL_UART_MspInit+0x2d8>
      Error_Handler();
 8005628:	f7ff fca8 	bl	8004f7c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4a0e      	ldr	r2, [pc, #56]	@ (8005668 <HAL_UART_MspInit+0x314>)
 8005630:	671a      	str	r2, [r3, #112]	@ 0x70
 8005632:	4a0d      	ldr	r2, [pc, #52]	@ (8005668 <HAL_UART_MspInit+0x314>)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8005638:	2200      	movs	r2, #0
 800563a:	2100      	movs	r1, #0
 800563c:	2035      	movs	r0, #53	@ 0x35
 800563e:	f002 f940 	bl	80078c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8005642:	2035      	movs	r0, #53	@ 0x35
 8005644:	f002 f959 	bl	80078fa <HAL_NVIC_EnableIRQ>
}
 8005648:	bf00      	nop
 800564a:	37c0      	adds	r7, #192	@ 0xc0
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}
 8005650:	40005000 	.word	0x40005000
 8005654:	40021000 	.word	0x40021000
 8005658:	48000800 	.word	0x48000800
 800565c:	48000c00 	.word	0x48000c00
 8005660:	20000954 	.word	0x20000954
 8005664:	4002041c 	.word	0x4002041c
 8005668:	2000099c 	.word	0x2000099c
 800566c:	40020408 	.word	0x40020408

08005670 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  if(huart->Instance==UART4)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a20      	ldr	r2, [pc, #128]	@ (8005700 <HAL_UART_MspDeInit+0x90>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d118      	bne.n	80056b4 <HAL_UART_MspDeInit+0x44>
  {
  /* USER CODE BEGIN UART4_MspDeInit 0 */

  /* USER CODE END UART4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART4_CLK_DISABLE();
 8005682:	4b20      	ldr	r3, [pc, #128]	@ (8005704 <HAL_UART_MspDeInit+0x94>)
 8005684:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005686:	4a1f      	ldr	r2, [pc, #124]	@ (8005704 <HAL_UART_MspDeInit+0x94>)
 8005688:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800568c:	6593      	str	r3, [r2, #88]	@ 0x58

    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1);
 800568e:	2103      	movs	r1, #3
 8005690:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005694:	f002 fe02 	bl	800829c <HAL_GPIO_DeInit>

    /* UART4 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800569c:	4618      	mov	r0, r3
 800569e:	f002 fa0d 	bl	8007abc <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056a6:	4618      	mov	r0, r3
 80056a8:	f002 fa08 	bl	8007abc <HAL_DMA_DeInit>

    /* UART4 interrupt DeInit */
    HAL_NVIC_DisableIRQ(UART4_IRQn);
 80056ac:	2034      	movs	r0, #52	@ 0x34
 80056ae:	f002 f932 	bl	8007916 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN UART5_MspDeInit 1 */

  /* USER CODE END UART5_MspDeInit 1 */
  }

}
 80056b2:	e020      	b.n	80056f6 <HAL_UART_MspDeInit+0x86>
  else if(huart->Instance==UART5)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a13      	ldr	r2, [pc, #76]	@ (8005708 <HAL_UART_MspDeInit+0x98>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d11b      	bne.n	80056f6 <HAL_UART_MspDeInit+0x86>
    __HAL_RCC_UART5_CLK_DISABLE();
 80056be:	4b11      	ldr	r3, [pc, #68]	@ (8005704 <HAL_UART_MspDeInit+0x94>)
 80056c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056c2:	4a10      	ldr	r2, [pc, #64]	@ (8005704 <HAL_UART_MspDeInit+0x94>)
 80056c4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80056c8:	6593      	str	r3, [r2, #88]	@ 0x58
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_12);
 80056ca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80056ce:	480f      	ldr	r0, [pc, #60]	@ (800570c <HAL_UART_MspDeInit+0x9c>)
 80056d0:	f002 fde4 	bl	800829c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_2);
 80056d4:	2104      	movs	r1, #4
 80056d6:	480e      	ldr	r0, [pc, #56]	@ (8005710 <HAL_UART_MspDeInit+0xa0>)
 80056d8:	f002 fde0 	bl	800829c <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056e0:	4618      	mov	r0, r3
 80056e2:	f002 f9eb 	bl	8007abc <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056ea:	4618      	mov	r0, r3
 80056ec:	f002 f9e6 	bl	8007abc <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(UART5_IRQn);
 80056f0:	2035      	movs	r0, #53	@ 0x35
 80056f2:	f002 f910 	bl	8007916 <HAL_NVIC_DisableIRQ>
}
 80056f6:	bf00      	nop
 80056f8:	3708      	adds	r7, #8
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}
 80056fe:	bf00      	nop
 8005700:	40004c00 	.word	0x40004c00
 8005704:	40021000 	.word	0x40021000
 8005708:	40005000 	.word	0x40005000
 800570c:	48000800 	.word	0x48000800
 8005710:	48000c00 	.word	0x48000c00

08005714 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005714:	b480      	push	{r7}
 8005716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005718:	bf00      	nop
 800571a:	e7fd      	b.n	8005718 <NMI_Handler+0x4>

0800571c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800571c:	b480      	push	{r7}
 800571e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005720:	bf00      	nop
 8005722:	e7fd      	b.n	8005720 <HardFault_Handler+0x4>

08005724 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005724:	b480      	push	{r7}
 8005726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005728:	bf00      	nop
 800572a:	e7fd      	b.n	8005728 <MemManage_Handler+0x4>

0800572c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800572c:	b480      	push	{r7}
 800572e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005730:	bf00      	nop
 8005732:	e7fd      	b.n	8005730 <BusFault_Handler+0x4>

08005734 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005734:	b480      	push	{r7}
 8005736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005738:	bf00      	nop
 800573a:	e7fd      	b.n	8005738 <UsageFault_Handler+0x4>

0800573c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800573c:	b480      	push	{r7}
 800573e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005740:	bf00      	nop
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr

0800574a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800574a:	b480      	push	{r7}
 800574c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800574e:	bf00      	nop
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr

08005758 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005758:	b480      	push	{r7}
 800575a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800575c:	bf00      	nop
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr

08005766 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005766:	b580      	push	{r7, lr}
 8005768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800576a:	f000 faeb 	bl	8005d44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800576e:	bf00      	nop
 8005770:	bd80      	pop	{r7, pc}
	...

08005774 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005778:	4802      	ldr	r0, [pc, #8]	@ (8005784 <DMA1_Channel1_IRQHandler+0x10>)
 800577a:	f002 fb10 	bl	8007d9e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800577e:	bf00      	nop
 8005780:	bd80      	pop	{r7, pc}
 8005782:	bf00      	nop
 8005784:	20000688 	.word	0x20000688

08005788 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800578c:	4802      	ldr	r0, [pc, #8]	@ (8005798 <DMA1_Channel6_IRQHandler+0x10>)
 800578e:	f002 fb06 	bl	8007d9e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8005792:	bf00      	nop
 8005794:	bd80      	pop	{r7, pc}
 8005796:	bf00      	nop
 8005798:	2000076c 	.word	0x2000076c

0800579c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80057a0:	4802      	ldr	r0, [pc, #8]	@ (80057ac <DMA1_Channel7_IRQHandler+0x10>)
 80057a2:	f002 fafc 	bl	8007d9e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80057a6:	bf00      	nop
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop
 80057ac:	20000724 	.word	0x20000724

080057b0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80057b4:	4802      	ldr	r0, [pc, #8]	@ (80057c0 <ADC1_2_IRQHandler+0x10>)
 80057b6:	f000 ff1f 	bl	80065f8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80057ba:	bf00      	nop
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop
 80057c0:	20000620 	.word	0x20000620

080057c4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80057c8:	4802      	ldr	r0, [pc, #8]	@ (80057d4 <I2C1_EV_IRQHandler+0x10>)
 80057ca:	f003 fa43 	bl	8008c54 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80057ce:	bf00      	nop
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	200006d0 	.word	0x200006d0

080057d8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80057dc:	4802      	ldr	r0, [pc, #8]	@ (80057e8 <I2C1_ER_IRQHandler+0x10>)
 80057de:	f003 fa53 	bl	8008c88 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80057e2:	bf00      	nop
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	200006d0 	.word	0x200006d0

080057ec <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80057f0:	4802      	ldr	r0, [pc, #8]	@ (80057fc <UART4_IRQHandler+0x10>)
 80057f2:	f007 f9cf 	bl	800cb94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80057f6:	bf00      	nop
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	200007b4 	.word	0x200007b4

08005800 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8005804:	4802      	ldr	r0, [pc, #8]	@ (8005810 <UART5_IRQHandler+0x10>)
 8005806:	f007 f9c5 	bl	800cb94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800580a:	bf00      	nop
 800580c:	bd80      	pop	{r7, pc}
 800580e:	bf00      	nop
 8005810:	2000083c 	.word	0x2000083c

08005814 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005818:	4802      	ldr	r0, [pc, #8]	@ (8005824 <TIM6_DAC_IRQHandler+0x10>)
 800581a:	f006 fdfd 	bl	800c418 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800581e:	bf00      	nop
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop
 8005824:	200009e4 	.word	0x200009e4

08005828 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 800582c:	4802      	ldr	r0, [pc, #8]	@ (8005838 <DMA2_Channel1_IRQHandler+0x10>)
 800582e:	f002 fab6 	bl	8007d9e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8005832:	bf00      	nop
 8005834:	bd80      	pop	{r7, pc}
 8005836:	bf00      	nop
 8005838:	2000099c 	.word	0x2000099c

0800583c <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8005840:	4802      	ldr	r0, [pc, #8]	@ (800584c <DMA2_Channel2_IRQHandler+0x10>)
 8005842:	f002 faac 	bl	8007d9e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8005846:	bf00      	nop
 8005848:	bd80      	pop	{r7, pc}
 800584a:	bf00      	nop
 800584c:	20000954 	.word	0x20000954

08005850 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8005854:	4802      	ldr	r0, [pc, #8]	@ (8005860 <DMA2_Channel3_IRQHandler+0x10>)
 8005856:	f002 faa2 	bl	8007d9e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 800585a:	bf00      	nop
 800585c:	bd80      	pop	{r7, pc}
 800585e:	bf00      	nop
 8005860:	2000090c 	.word	0x2000090c

08005864 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8005868:	4802      	ldr	r0, [pc, #8]	@ (8005874 <DMA2_Channel5_IRQHandler+0x10>)
 800586a:	f002 fa98 	bl	8007d9e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 800586e:	bf00      	nop
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	200008c4 	.word	0x200008c4

08005878 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8005878:	b480      	push	{r7}
 800587a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800587c:	4b06      	ldr	r3, [pc, #24]	@ (8005898 <SystemInit+0x20>)
 800587e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005882:	4a05      	ldr	r2, [pc, #20]	@ (8005898 <SystemInit+0x20>)
 8005884:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005888:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800588c:	bf00      	nop
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr
 8005896:	bf00      	nop
 8005898:	e000ed00 	.word	0xe000ed00

0800589c <_Z8tcpInputv>:
uint32_t limitTcpSys	= 21600000/superloop;	// Limite para fijar datos system
bool flagSetSys;							// Indica que se debe enviar system

/*****	INPUT	*****/

void tcpInput(){
 800589c:	b580      	push	{r7, lr}
 800589e:	af00      	add	r7, sp, #0
	tcpData();
 80058a0:	f000 f840 	bl	8005924 <_Z7tcpDatav>
	tcpSystem();
 80058a4:	f000 f806 	bl	80058b4 <_Z9tcpSystemv>
	tcpGps();
 80058a8:	f000 f89a 	bl	80059e0 <_Z6tcpGpsv>
	tcpInLora();
 80058ac:	f000 f872 	bl	8005994 <_Z9tcpInLorav>
}
 80058b0:	bf00      	nop
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <_Z9tcpSystemv>:
 *
 *	OUTPUT	:	flagSetSys | Indica que se debe enviar un paquete con datos del sistema
 *
 */

void tcpSystem(){
 80058b4:	b480      	push	{r7}
 80058b6:	af00      	add	r7, sp, #0
	switch( stateTcpSys ){
 80058b8:	4b16      	ldr	r3, [pc, #88]	@ (8005914 <_Z9tcpSystemv+0x60>)
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d002      	beq.n	80058c6 <_Z9tcpSystemv+0x12>
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d013      	beq.n	80058ec <_Z9tcpSystemv+0x38>
 80058c4:	e01c      	b.n	8005900 <_Z9tcpSystemv+0x4c>
	/////////////////////////
	// S0 - WAIT FOR LIMIT //
	/////////////////////////

	case 0:
		countTcpSys++;						// Suma 1 al contador
 80058c6:	4b14      	ldr	r3, [pc, #80]	@ (8005918 <_Z9tcpSystemv+0x64>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	3301      	adds	r3, #1
 80058cc:	4a12      	ldr	r2, [pc, #72]	@ (8005918 <_Z9tcpSystemv+0x64>)
 80058ce:	6013      	str	r3, [r2, #0]

		if ( countTcpSys >= limitTcpSys ){	// Si pasa el limite
 80058d0:	4b11      	ldr	r3, [pc, #68]	@ (8005918 <_Z9tcpSystemv+0x64>)
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	4b11      	ldr	r3, [pc, #68]	@ (800591c <_Z9tcpSystemv+0x68>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	429a      	cmp	r2, r3
 80058da:	d303      	bcc.n	80058e4 <_Z9tcpSystemv+0x30>
			stateTcpSys	= 1;				// Pasa a S1
 80058dc:	4b0d      	ldr	r3, [pc, #52]	@ (8005914 <_Z9tcpSystemv+0x60>)
 80058de:	2201      	movs	r2, #1
 80058e0:	701a      	strb	r2, [r3, #0]
		}
		else{								// Si no
			stateTcpSys	= 0;				// Espera en S0
		}
		break;
 80058e2:	e011      	b.n	8005908 <_Z9tcpSystemv+0x54>
			stateTcpSys	= 0;				// Espera en S0
 80058e4:	4b0b      	ldr	r3, [pc, #44]	@ (8005914 <_Z9tcpSystemv+0x60>)
 80058e6:	2200      	movs	r2, #0
 80058e8:	701a      	strb	r2, [r3, #0]
		break;
 80058ea:	e00d      	b.n	8005908 <_Z9tcpSystemv+0x54>
	///////////////////
	// S1 - SET DATA //
	///////////////////

	case 1:
		flagSetSys	= 1;	// Indica que se debe enviar datos
 80058ec:	4b0c      	ldr	r3, [pc, #48]	@ (8005920 <_Z9tcpSystemv+0x6c>)
 80058ee:	2201      	movs	r2, #1
 80058f0:	701a      	strb	r2, [r3, #0]
		countTcpSys	= 0;	// Reinicia contador
 80058f2:	4b09      	ldr	r3, [pc, #36]	@ (8005918 <_Z9tcpSystemv+0x64>)
 80058f4:	2200      	movs	r2, #0
 80058f6:	601a      	str	r2, [r3, #0]
		stateTcpSys	= 0;	// Vuelve a S0
 80058f8:	4b06      	ldr	r3, [pc, #24]	@ (8005914 <_Z9tcpSystemv+0x60>)
 80058fa:	2200      	movs	r2, #0
 80058fc:	701a      	strb	r2, [r3, #0]
		break;
 80058fe:	e003      	b.n	8005908 <_Z9tcpSystemv+0x54>

	default:
		stateTcpSys	= 0;
 8005900:	4b04      	ldr	r3, [pc, #16]	@ (8005914 <_Z9tcpSystemv+0x60>)
 8005902:	2200      	movs	r2, #0
 8005904:	701a      	strb	r2, [r3, #0]
		break;
 8005906:	bf00      	nop
	}
}
 8005908:	bf00      	nop
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr
 8005912:	bf00      	nop
 8005914:	20001165 	.word	0x20001165
 8005918:	20001168 	.word	0x20001168
 800591c:	2000116c 	.word	0x2000116c
 8005920:	20001170 	.word	0x20001170

08005924 <_Z7tcpDatav>:
 *
 *	OUTPUT	:	flagSetData | Indica que se debe enviar
 *
 */

void tcpData(){
 8005924:	b480      	push	{r7}
 8005926:	af00      	add	r7, sp, #0
	switch( stateTcpData ){
 8005928:	4b16      	ldr	r3, [pc, #88]	@ (8005984 <_Z7tcpDatav+0x60>)
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d002      	beq.n	8005936 <_Z7tcpDatav+0x12>
 8005930:	2b01      	cmp	r3, #1
 8005932:	d013      	beq.n	800595c <_Z7tcpDatav+0x38>
 8005934:	e01c      	b.n	8005970 <_Z7tcpDatav+0x4c>
	/////////////////////////
	// S0 - WAIT FOR LIMIT //
	/////////////////////////

	case 0:
		countTcpData++;							// Suma 1 al contador
 8005936:	4b14      	ldr	r3, [pc, #80]	@ (8005988 <_Z7tcpDatav+0x64>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	3301      	adds	r3, #1
 800593c:	4a12      	ldr	r2, [pc, #72]	@ (8005988 <_Z7tcpDatav+0x64>)
 800593e:	6013      	str	r3, [r2, #0]

		if ( countTcpData >= limitTcpData ){	// Si pasa el limite
 8005940:	4b11      	ldr	r3, [pc, #68]	@ (8005988 <_Z7tcpDatav+0x64>)
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	4b11      	ldr	r3, [pc, #68]	@ (800598c <_Z7tcpDatav+0x68>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	429a      	cmp	r2, r3
 800594a:	d303      	bcc.n	8005954 <_Z7tcpDatav+0x30>
			stateTcpData	= 1;				// Pasa a S1
 800594c:	4b0d      	ldr	r3, [pc, #52]	@ (8005984 <_Z7tcpDatav+0x60>)
 800594e:	2201      	movs	r2, #1
 8005950:	701a      	strb	r2, [r3, #0]
		}
		else{									// Si no
			stateTcpData	= 0;				// Espera en S0
		}
		break;
 8005952:	e011      	b.n	8005978 <_Z7tcpDatav+0x54>
			stateTcpData	= 0;				// Espera en S0
 8005954:	4b0b      	ldr	r3, [pc, #44]	@ (8005984 <_Z7tcpDatav+0x60>)
 8005956:	2200      	movs	r2, #0
 8005958:	701a      	strb	r2, [r3, #0]
		break;
 800595a:	e00d      	b.n	8005978 <_Z7tcpDatav+0x54>
	///////////////////
	// S1 - SET DATA //
	///////////////////

	case 1:
		flagSetData		= 1;	// Indica que se debe enviar datos
 800595c:	4b0c      	ldr	r3, [pc, #48]	@ (8005990 <_Z7tcpDatav+0x6c>)
 800595e:	2201      	movs	r2, #1
 8005960:	701a      	strb	r2, [r3, #0]
		countTcpData	= 0;	// Reinicia contador
 8005962:	4b09      	ldr	r3, [pc, #36]	@ (8005988 <_Z7tcpDatav+0x64>)
 8005964:	2200      	movs	r2, #0
 8005966:	601a      	str	r2, [r3, #0]

		stateTcpData	= 0;	// Vuelve a S0
 8005968:	4b06      	ldr	r3, [pc, #24]	@ (8005984 <_Z7tcpDatav+0x60>)
 800596a:	2200      	movs	r2, #0
 800596c:	701a      	strb	r2, [r3, #0]
		break;
 800596e:	e003      	b.n	8005978 <_Z7tcpDatav+0x54>

	default:
		stateTcpData	= 0;
 8005970:	4b04      	ldr	r3, [pc, #16]	@ (8005984 <_Z7tcpDatav+0x60>)
 8005972:	2200      	movs	r2, #0
 8005974:	701a      	strb	r2, [r3, #0]
		break;
 8005976:	bf00      	nop
	}
}
 8005978:	bf00      	nop
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop
 8005984:	20001159 	.word	0x20001159
 8005988:	2000115c 	.word	0x2000115c
 800598c:	20001160 	.word	0x20001160
 8005990:	20001164 	.word	0x20001164

08005994 <_Z9tcpInLorav>:
 *
 *	OUTPUT	:	loraDecision.response()
 *				loraDecision.disable()
 */

void tcpInLora(){
 8005994:	b580      	push	{r7, lr}
 8005996:	af00      	add	r7, sp, #0
	if ( loraCheck.check() ){					// Si hay respuesta nueva
 8005998:	480d      	ldr	r0, [pc, #52]	@ (80059d0 <_Z9tcpInLorav+0x3c>)
 800599a:	f7fe fc3a 	bl	8004212 <_ZN9loraCheck5checkEv>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d00c      	beq.n	80059be <_Z9tcpInLorav+0x2a>
		busTcpLora	= loraCheck.response();		// Copia el codigo de respuesta
 80059a4:	480a      	ldr	r0, [pc, #40]	@ (80059d0 <_Z9tcpInLorav+0x3c>)
 80059a6:	f7fe fc45 	bl	8004234 <_ZN9loraCheck8responseEv>
 80059aa:	4603      	mov	r3, r0
 80059ac:	461a      	mov	r2, r3
 80059ae:	4b09      	ldr	r3, [pc, #36]	@ (80059d4 <_Z9tcpInLorav+0x40>)
 80059b0:	701a      	strb	r2, [r3, #0]
		loraDecision.response( busTcpLora );	// Inserta en lora Decision
 80059b2:	4b08      	ldr	r3, [pc, #32]	@ (80059d4 <_Z9tcpInLorav+0x40>)
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	4619      	mov	r1, r3
 80059b8:	4807      	ldr	r0, [pc, #28]	@ (80059d8 <_Z9tcpInLorav+0x44>)
 80059ba:	f7fe fd46 	bl	800444a <_ZN12loraDecision8responseEh>
			busTcpLora	= 6;
		}*/

	}

	if ( flagWdLora ){			// Si hay WD
 80059be:	4b07      	ldr	r3, [pc, #28]	@ (80059dc <_Z9tcpInLorav+0x48>)
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d002      	beq.n	80059cc <_Z9tcpInLorav+0x38>
		loraDecision.disable();	// Deshabilita tcp y app
 80059c6:	4804      	ldr	r0, [pc, #16]	@ (80059d8 <_Z9tcpInLorav+0x44>)
 80059c8:	f7fe fdcf 	bl	800456a <_ZN12loraDecision7disableEv>
	}
}
 80059cc:	bf00      	nop
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	20000b70 	.word	0x20000b70
 80059d4:	20001158 	.word	0x20001158
 80059d8:	20000b84 	.word	0x20000b84
 80059dc:	20000539 	.word	0x20000539

080059e0 <_Z6tcpGpsv>:
 *
 *	OUTPUT	:	flagGpsSaved
 *				startGps
 */

void tcpGps(){
 80059e0:	b480      	push	{r7}
 80059e2:	af00      	add	r7, sp, #0
	switch ( stateGpsTcp ){
 80059e4:	4b22      	ldr	r3, [pc, #136]	@ (8005a70 <_Z6tcpGpsv+0x90>)
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	2b02      	cmp	r3, #2
 80059ea:	d021      	beq.n	8005a30 <_Z6tcpGpsv+0x50>
 80059ec:	2b02      	cmp	r3, #2
 80059ee:	dc38      	bgt.n	8005a62 <_Z6tcpGpsv+0x82>
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d002      	beq.n	80059fa <_Z6tcpGpsv+0x1a>
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d014      	beq.n	8005a22 <_Z6tcpGpsv+0x42>
			stateGpsTcp	= 2;				// Se queda en S2
		}
		break;

	default:
		break;
 80059f8:	e033      	b.n	8005a62 <_Z6tcpGpsv+0x82>
		if ( savedGps ){		// Si se guardó un valor de GPS
 80059fa:	4b1e      	ldr	r3, [pc, #120]	@ (8005a74 <_Z6tcpGpsv+0x94>)
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d003      	beq.n	8005a0a <_Z6tcpGpsv+0x2a>
			stateGpsTcp	= 1;	// Pasa a S1
 8005a02:	4b1b      	ldr	r3, [pc, #108]	@ (8005a70 <_Z6tcpGpsv+0x90>)
 8005a04:	2201      	movs	r2, #1
 8005a06:	701a      	strb	r2, [r3, #0]
		break;
 8005a08:	e02c      	b.n	8005a64 <_Z6tcpGpsv+0x84>
		else if( stopGps ){		// Si se paró la recepcion de datos
 8005a0a:	4b1b      	ldr	r3, [pc, #108]	@ (8005a78 <_Z6tcpGpsv+0x98>)
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d003      	beq.n	8005a1a <_Z6tcpGpsv+0x3a>
			stateGpsTcp	= 2;	// Pasa a S2
 8005a12:	4b17      	ldr	r3, [pc, #92]	@ (8005a70 <_Z6tcpGpsv+0x90>)
 8005a14:	2202      	movs	r2, #2
 8005a16:	701a      	strb	r2, [r3, #0]
		break;
 8005a18:	e024      	b.n	8005a64 <_Z6tcpGpsv+0x84>
			stateGpsTcp	= 0;	// Espera en S0
 8005a1a:	4b15      	ldr	r3, [pc, #84]	@ (8005a70 <_Z6tcpGpsv+0x90>)
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	701a      	strb	r2, [r3, #0]
		break;
 8005a20:	e020      	b.n	8005a64 <_Z6tcpGpsv+0x84>
		flagGpsSaved	= 1;	// Indica que se guardó un mensaje
 8005a22:	4b16      	ldr	r3, [pc, #88]	@ (8005a7c <_Z6tcpGpsv+0x9c>)
 8005a24:	2201      	movs	r2, #1
 8005a26:	701a      	strb	r2, [r3, #0]
		stateGpsTcp		= 2;	// Pasa a S3
 8005a28:	4b11      	ldr	r3, [pc, #68]	@ (8005a70 <_Z6tcpGpsv+0x90>)
 8005a2a:	2202      	movs	r2, #2
 8005a2c:	701a      	strb	r2, [r3, #0]
		break;
 8005a2e:	e019      	b.n	8005a64 <_Z6tcpGpsv+0x84>
		countGpsTcp++;						// Suma 1 al contador
 8005a30:	4b13      	ldr	r3, [pc, #76]	@ (8005a80 <_Z6tcpGpsv+0xa0>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	3301      	adds	r3, #1
 8005a36:	4a12      	ldr	r2, [pc, #72]	@ (8005a80 <_Z6tcpGpsv+0xa0>)
 8005a38:	6013      	str	r3, [r2, #0]
		if ( countGpsTcp >= limitGpsTcp ){	// Si pasa el limite
 8005a3a:	4b11      	ldr	r3, [pc, #68]	@ (8005a80 <_Z6tcpGpsv+0xa0>)
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	4b11      	ldr	r3, [pc, #68]	@ (8005a84 <_Z6tcpGpsv+0xa4>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d309      	bcc.n	8005a5a <_Z6tcpGpsv+0x7a>
			startGps	= 1;				// Indica inicio de medicion gps
 8005a46:	4b10      	ldr	r3, [pc, #64]	@ (8005a88 <_Z6tcpGpsv+0xa8>)
 8005a48:	2201      	movs	r2, #1
 8005a4a:	701a      	strb	r2, [r3, #0]
			countGpsTcp	= 0;				// Reinicia contador
 8005a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8005a80 <_Z6tcpGpsv+0xa0>)
 8005a4e:	2200      	movs	r2, #0
 8005a50:	601a      	str	r2, [r3, #0]
			stateGpsTcp	= 0;				// Vuelve a S0
 8005a52:	4b07      	ldr	r3, [pc, #28]	@ (8005a70 <_Z6tcpGpsv+0x90>)
 8005a54:	2200      	movs	r2, #0
 8005a56:	701a      	strb	r2, [r3, #0]
		break;
 8005a58:	e004      	b.n	8005a64 <_Z6tcpGpsv+0x84>
			stateGpsTcp	= 2;				// Se queda en S2
 8005a5a:	4b05      	ldr	r3, [pc, #20]	@ (8005a70 <_Z6tcpGpsv+0x90>)
 8005a5c:	2202      	movs	r2, #2
 8005a5e:	701a      	strb	r2, [r3, #0]
		break;
 8005a60:	e000      	b.n	8005a64 <_Z6tcpGpsv+0x84>
		break;
 8005a62:	bf00      	nop
	}
}
 8005a64:	bf00      	nop
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr
 8005a6e:	bf00      	nop
 8005a70:	2000114d 	.word	0x2000114d
 8005a74:	20000aea 	.word	0x20000aea
 8005a78:	20000ae9 	.word	0x20000ae9
 8005a7c:	2000114e 	.word	0x2000114e
 8005a80:	20001150 	.word	0x20001150
 8005a84:	20001154 	.word	0x20001154
 8005a88:	20000393 	.word	0x20000393

08005a8c <_Z41__static_initialization_and_destruction_0ii>:
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d11f      	bne.n	8005adc <_Z41__static_initialization_and_destruction_0ii+0x50>
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d11a      	bne.n	8005adc <_Z41__static_initialization_and_destruction_0ii+0x50>
uint32_t limitGpsTcp = 43200000/superloop;// Tiempo que esta apagado GPS
 8005aa6:	4b10      	ldr	r3, [pc, #64]	@ (8005ae8 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	461a      	mov	r2, r3
 8005aac:	4b0f      	ldr	r3, [pc, #60]	@ (8005aec <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8005aae:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	4b0e      	ldr	r3, [pc, #56]	@ (8005af0 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8005ab6:	601a      	str	r2, [r3, #0]
uint32_t limitTcpData	= 120000/superloop;	// Limite para fijar datos
 8005ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8005ae8 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	461a      	mov	r2, r3
 8005abe:	4b0d      	ldr	r3, [pc, #52]	@ (8005af4 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8005ac0:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	4b0c      	ldr	r3, [pc, #48]	@ (8005af8 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8005ac8:	601a      	str	r2, [r3, #0]
uint32_t limitTcpSys	= 21600000/superloop;	// Limite para fijar datos system
 8005aca:	4b07      	ldr	r3, [pc, #28]	@ (8005ae8 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	461a      	mov	r2, r3
 8005ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8005afc <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8005ad2:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	4b09      	ldr	r3, [pc, #36]	@ (8005b00 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8005ada:	601a      	str	r2, [r3, #0]
}
 8005adc:	bf00      	nop
 8005ade:	370c      	adds	r7, #12
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr
 8005ae8:	20000395 	.word	0x20000395
 8005aec:	02932e00 	.word	0x02932e00
 8005af0:	20001154 	.word	0x20001154
 8005af4:	0001d4c0 	.word	0x0001d4c0
 8005af8:	20001160 	.word	0x20001160
 8005afc:	01499700 	.word	0x01499700
 8005b00:	2000116c 	.word	0x2000116c

08005b04 <_GLOBAL__sub_I_stateGpsTcp>:
 8005b04:	b580      	push	{r7, lr}
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8005b0c:	2001      	movs	r0, #1
 8005b0e:	f7ff ffbd 	bl	8005a8c <_Z41__static_initialization_and_destruction_0ii>
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <_Z9tcpOutputv>:
uint16_t countTcpLoraOut;							// Contador para esperar
const uint16_t limitTcpLoraOut	= 1000/superloop;	// Limite para enviar comando

/*****	OUTPUT	*****/

void tcpOutput(){
 8005b14:	b580      	push	{r7, lr}
 8005b16:	af00      	add	r7, sp, #0
	tcpOutLora();
 8005b18:	f000 f802 	bl	8005b20 <_Z10tcpOutLorav>
}
 8005b1c:	bf00      	nop
 8005b1e:	bd80      	pop	{r7, pc}

08005b20 <_Z10tcpOutLorav>:

void tcpOutLora(){
 8005b20:	b580      	push	{r7, lr}
 8005b22:	af00      	add	r7, sp, #0
	switch( stateTpcLoraOut ){
 8005b24:	4b2a      	ldr	r3, [pc, #168]	@ (8005bd0 <_Z10tcpOutLorav+0xb0>)
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	2b02      	cmp	r3, #2
 8005b2a:	d028      	beq.n	8005b7e <_Z10tcpOutLorav+0x5e>
 8005b2c:	2b02      	cmp	r3, #2
 8005b2e:	dc48      	bgt.n	8005bc2 <_Z10tcpOutLorav+0xa2>
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d002      	beq.n	8005b3a <_Z10tcpOutLorav+0x1a>
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d00e      	beq.n	8005b56 <_Z10tcpOutLorav+0x36>
 8005b38:	e043      	b.n	8005bc2 <_Z10tcpOutLorav+0xa2>
	///////////////////////
	// S0 - WAIT COMMAND //
	///////////////////////

	case 0:
		if ( loraSelect.newCommand() ){	// Si hay nuevo comando
 8005b3a:	4826      	ldr	r0, [pc, #152]	@ (8005bd4 <_Z10tcpOutLorav+0xb4>)
 8005b3c:	f7fe fc41 	bl	80043c2 <_ZN10loraSelect10newCommandEv>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d003      	beq.n	8005b4e <_Z10tcpOutLorav+0x2e>
 			stateTpcLoraOut	= 1;		// Pasa a S1
 8005b46:	4b22      	ldr	r3, [pc, #136]	@ (8005bd0 <_Z10tcpOutLorav+0xb0>)
 8005b48:	2201      	movs	r2, #1
 8005b4a:	701a      	strb	r2, [r3, #0]
		}
		else{							// Si no
			stateTpcLoraOut	= 0;		// Queda en S0
		}
		break;
 8005b4c:	e03d      	b.n	8005bca <_Z10tcpOutLorav+0xaa>
			stateTpcLoraOut	= 0;		// Queda en S0
 8005b4e:	4b20      	ldr	r3, [pc, #128]	@ (8005bd0 <_Z10tcpOutLorav+0xb0>)
 8005b50:	2200      	movs	r2, #0
 8005b52:	701a      	strb	r2, [r3, #0]
		break;
 8005b54:	e039      	b.n	8005bca <_Z10tcpOutLorav+0xaa>
	////////////////////////
	// S1 - WAIT FOR SEND //
	////////////////////////

	case 1:
		countTcpLoraOut++;							// Suma 1 al contador
 8005b56:	4b20      	ldr	r3, [pc, #128]	@ (8005bd8 <_Z10tcpOutLorav+0xb8>)
 8005b58:	881b      	ldrh	r3, [r3, #0]
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	b29a      	uxth	r2, r3
 8005b5e:	4b1e      	ldr	r3, [pc, #120]	@ (8005bd8 <_Z10tcpOutLorav+0xb8>)
 8005b60:	801a      	strh	r2, [r3, #0]

		if ( countTcpLoraOut >= limitTcpLoraOut ){	// Si llega al limite
 8005b62:	4b1d      	ldr	r3, [pc, #116]	@ (8005bd8 <_Z10tcpOutLorav+0xb8>)
 8005b64:	881a      	ldrh	r2, [r3, #0]
 8005b66:	4b1d      	ldr	r3, [pc, #116]	@ (8005bdc <_Z10tcpOutLorav+0xbc>)
 8005b68:	881b      	ldrh	r3, [r3, #0]
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d303      	bcc.n	8005b76 <_Z10tcpOutLorav+0x56>
			stateTpcLoraOut	= 2;					// Pasa a S2
 8005b6e:	4b18      	ldr	r3, [pc, #96]	@ (8005bd0 <_Z10tcpOutLorav+0xb0>)
 8005b70:	2202      	movs	r2, #2
 8005b72:	701a      	strb	r2, [r3, #0]
		}
		else{										// Si no
			stateTpcLoraOut	= 1;					// Queda en S1
		}
		break;
 8005b74:	e029      	b.n	8005bca <_Z10tcpOutLorav+0xaa>
			stateTpcLoraOut	= 1;					// Queda en S1
 8005b76:	4b16      	ldr	r3, [pc, #88]	@ (8005bd0 <_Z10tcpOutLorav+0xb0>)
 8005b78:	2201      	movs	r2, #1
 8005b7a:	701a      	strb	r2, [r3, #0]
		break;
 8005b7c:	e025      	b.n	8005bca <_Z10tcpOutLorav+0xaa>
	/////////////////////////////
	// S2 - CONFIG BY TRANSMIT //
	/////////////////////////////

	case 2:
		countTcpLoraOut	= 0;										// Reinicia contador
 8005b7e:	4b16      	ldr	r3, [pc, #88]	@ (8005bd8 <_Z10tcpOutLorav+0xb8>)
 8005b80:	2200      	movs	r2, #0
 8005b82:	801a      	strh	r2, [r3, #0]

		loraTxCommand0 	= loraSelect.getCommand();					// Guarda comando
 8005b84:	4813      	ldr	r0, [pc, #76]	@ (8005bd4 <_Z10tcpOutLorav+0xb4>)
 8005b86:	f7fe fc2d 	bl	80043e4 <_ZN10loraSelect10getCommandEv>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	4a14      	ldr	r2, [pc, #80]	@ (8005be0 <_Z10tcpOutLorav+0xc0>)
 8005b8e:	6013      	str	r3, [r2, #0]
		sizeTxCommand0	= loraSelect.getCommandSize();				// Guarda tamaño de comando
 8005b90:	4810      	ldr	r0, [pc, #64]	@ (8005bd4 <_Z10tcpOutLorav+0xb4>)
 8005b92:	f7fe fc33 	bl	80043fc <_ZN10loraSelect14getCommandSizeEv>
 8005b96:	4603      	mov	r3, r0
 8005b98:	461a      	mov	r2, r3
 8005b9a:	4b12      	ldr	r3, [pc, #72]	@ (8005be4 <_Z10tcpOutLorav+0xc4>)
 8005b9c:	701a      	strb	r2, [r3, #0]

		loraCheck.setIdealResponses( loraSelect.qttyResponses() );	// Guarda largo de lista de respuestas
 8005b9e:	480d      	ldr	r0, [pc, #52]	@ (8005bd4 <_Z10tcpOutLorav+0xb4>)
 8005ba0:	f7fe fc38 	bl	8004414 <_ZN10loraSelect13qttyResponsesEv>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	4619      	mov	r1, r3
 8005ba8:	480f      	ldr	r0, [pc, #60]	@ (8005be8 <_Z10tcpOutLorav+0xc8>)
 8005baa:	f7fe fad6 	bl	800415a <_ZN9loraCheck17setIdealResponsesEh>
		loraDecision.reset();										// Reinicia TCP
 8005bae:	480f      	ldr	r0, [pc, #60]	@ (8005bec <_Z10tcpOutLorav+0xcc>)
 8005bb0:	f7fe fcc5 	bl	800453e <_ZN12loraDecision5resetEv>
		flagTxLora	= 1;											// Transmite
 8005bb4:	4b0e      	ldr	r3, [pc, #56]	@ (8005bf0 <_Z10tcpOutLorav+0xd0>)
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	701a      	strb	r2, [r3, #0]
		stateTpcLoraOut	= 0;										// Vuelve a S0
 8005bba:	4b05      	ldr	r3, [pc, #20]	@ (8005bd0 <_Z10tcpOutLorav+0xb0>)
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	701a      	strb	r2, [r3, #0]
		break;
 8005bc0:	e003      	b.n	8005bca <_Z10tcpOutLorav+0xaa>

	default:
		stateTpcLoraOut	= 0;
 8005bc2:	4b03      	ldr	r3, [pc, #12]	@ (8005bd0 <_Z10tcpOutLorav+0xb0>)
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	701a      	strb	r2, [r3, #0]
		break;
 8005bc8:	bf00      	nop
	}

}
 8005bca:	bf00      	nop
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	bf00      	nop
 8005bd0:	20001179 	.word	0x20001179
 8005bd4:	20000b8c 	.word	0x20000b8c
 8005bd8:	2000117a 	.word	0x2000117a
 8005bdc:	2000117c 	.word	0x2000117c
 8005be0:	20001174 	.word	0x20001174
 8005be4:	20001178 	.word	0x20001178
 8005be8:	20000b70 	.word	0x20000b70
 8005bec:	20000b84 	.word	0x20000b84
 8005bf0:	200004ed 	.word	0x200004ed

08005bf4 <_Z41__static_initialization_and_destruction_0ii>:
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	6039      	str	r1, [r7, #0]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d10e      	bne.n	8005c22 <_Z41__static_initialization_and_destruction_0ii+0x2e>
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d109      	bne.n	8005c22 <_Z41__static_initialization_and_destruction_0ii+0x2e>
const uint16_t limitTcpLoraOut	= 1000/superloop;	// Limite para enviar comando
 8005c0e:	4b08      	ldr	r3, [pc, #32]	@ (8005c30 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	461a      	mov	r2, r3
 8005c14:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005c18:	fb93 f3f2 	sdiv	r3, r3, r2
 8005c1c:	b29a      	uxth	r2, r3
 8005c1e:	4b05      	ldr	r3, [pc, #20]	@ (8005c34 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8005c20:	801a      	strh	r2, [r3, #0]
}
 8005c22:	bf00      	nop
 8005c24:	370c      	adds	r7, #12
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr
 8005c2e:	bf00      	nop
 8005c30:	20000395 	.word	0x20000395
 8005c34:	2000117c 	.word	0x2000117c

08005c38 <_GLOBAL__sub_I_loraTxCommand0>:
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8005c40:	2001      	movs	r0, #1
 8005c42:	f7ff ffd7 	bl	8005bf4 <_Z41__static_initialization_and_destruction_0ii>
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8005c48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005c80 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005c4c:	f7ff fe14 	bl	8005878 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005c50:	480c      	ldr	r0, [pc, #48]	@ (8005c84 <LoopForever+0x6>)
  ldr r1, =_edata
 8005c52:	490d      	ldr	r1, [pc, #52]	@ (8005c88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005c54:	4a0d      	ldr	r2, [pc, #52]	@ (8005c8c <LoopForever+0xe>)
  movs r3, #0
 8005c56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005c58:	e002      	b.n	8005c60 <LoopCopyDataInit>

08005c5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005c5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005c5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005c5e:	3304      	adds	r3, #4

08005c60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005c60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005c62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005c64:	d3f9      	bcc.n	8005c5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005c66:	4a0a      	ldr	r2, [pc, #40]	@ (8005c90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005c68:	4c0a      	ldr	r4, [pc, #40]	@ (8005c94 <LoopForever+0x16>)
  movs r3, #0
 8005c6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005c6c:	e001      	b.n	8005c72 <LoopFillZerobss>

08005c6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005c6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005c70:	3204      	adds	r2, #4

08005c72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005c72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005c74:	d3fb      	bcc.n	8005c6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005c76:	f008 f9e1 	bl	800e03c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005c7a:	f7fe fce5 	bl	8004648 <main>

08005c7e <LoopForever>:

LoopForever:
    b LoopForever
 8005c7e:	e7fe      	b.n	8005c7e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8005c80:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8005c84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005c88:	200003a4 	.word	0x200003a4
  ldr r2, =_sidata
 8005c8c:	0800e118 	.word	0x0800e118
  ldr r2, =_sbss
 8005c90:	200003a4 	.word	0x200003a4
  ldr r4, =_ebss
 8005c94:	20001184 	.word	0x20001184

08005c98 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005c98:	e7fe      	b.n	8005c98 <ADC3_IRQHandler>

08005c9a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005c9a:	b580      	push	{r7, lr}
 8005c9c:	b082      	sub	sp, #8
 8005c9e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005ca4:	2003      	movs	r0, #3
 8005ca6:	f001 fe01 	bl	80078ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005caa:	200f      	movs	r0, #15
 8005cac:	f000 f80e 	bl	8005ccc <HAL_InitTick>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d002      	beq.n	8005cbc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	71fb      	strb	r3, [r7, #7]
 8005cba:	e001      	b.n	8005cc0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005cbc:	f7ff f998 	bl	8004ff0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005cc0:	79fb      	ldrb	r3, [r7, #7]
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3708      	adds	r7, #8
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
	...

08005ccc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b084      	sub	sp, #16
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8005cd8:	4b17      	ldr	r3, [pc, #92]	@ (8005d38 <HAL_InitTick+0x6c>)
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d023      	beq.n	8005d28 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8005ce0:	4b16      	ldr	r3, [pc, #88]	@ (8005d3c <HAL_InitTick+0x70>)
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	4b14      	ldr	r3, [pc, #80]	@ (8005d38 <HAL_InitTick+0x6c>)
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	4619      	mov	r1, r3
 8005cea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005cee:	fbb3 f3f1 	udiv	r3, r3, r1
 8005cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f001 fe1b 	bl	8007932 <HAL_SYSTICK_Config>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d10f      	bne.n	8005d22 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2b0f      	cmp	r3, #15
 8005d06:	d809      	bhi.n	8005d1c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005d08:	2200      	movs	r2, #0
 8005d0a:	6879      	ldr	r1, [r7, #4]
 8005d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d10:	f001 fdd7 	bl	80078c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005d14:	4a0a      	ldr	r2, [pc, #40]	@ (8005d40 <HAL_InitTick+0x74>)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6013      	str	r3, [r2, #0]
 8005d1a:	e007      	b.n	8005d2c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	73fb      	strb	r3, [r7, #15]
 8005d20:	e004      	b.n	8005d2c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	73fb      	strb	r3, [r7, #15]
 8005d26:	e001      	b.n	8005d2c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3710      	adds	r7, #16
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop
 8005d38:	200003a0 	.word	0x200003a0
 8005d3c:	20000398 	.word	0x20000398
 8005d40:	2000039c 	.word	0x2000039c

08005d44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005d44:	b480      	push	{r7}
 8005d46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005d48:	4b06      	ldr	r3, [pc, #24]	@ (8005d64 <HAL_IncTick+0x20>)
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	4b06      	ldr	r3, [pc, #24]	@ (8005d68 <HAL_IncTick+0x24>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4413      	add	r3, r2
 8005d54:	4a04      	ldr	r2, [pc, #16]	@ (8005d68 <HAL_IncTick+0x24>)
 8005d56:	6013      	str	r3, [r2, #0]
}
 8005d58:	bf00      	nop
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr
 8005d62:	bf00      	nop
 8005d64:	200003a0 	.word	0x200003a0
 8005d68:	20001180 	.word	0x20001180

08005d6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	af00      	add	r7, sp, #0
  return uwTick;
 8005d70:	4b03      	ldr	r3, [pc, #12]	@ (8005d80 <HAL_GetTick+0x14>)
 8005d72:	681b      	ldr	r3, [r3, #0]
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr
 8005d7e:	bf00      	nop
 8005d80:	20001180 	.word	0x20001180

08005d84 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8005d84:	b480      	push	{r7}
 8005d86:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8005d88:	4b05      	ldr	r3, [pc, #20]	@ (8005da0 <HAL_SuspendTick+0x1c>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a04      	ldr	r2, [pc, #16]	@ (8005da0 <HAL_SuspendTick+0x1c>)
 8005d8e:	f023 0302 	bic.w	r3, r3, #2
 8005d92:	6013      	str	r3, [r2, #0]
}
 8005d94:	bf00      	nop
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr
 8005d9e:	bf00      	nop
 8005da0:	e000e010 	.word	0xe000e010

08005da4 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8005da4:	b480      	push	{r7}
 8005da6:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8005da8:	4b05      	ldr	r3, [pc, #20]	@ (8005dc0 <HAL_ResumeTick+0x1c>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a04      	ldr	r2, [pc, #16]	@ (8005dc0 <HAL_ResumeTick+0x1c>)
 8005dae:	f043 0302 	orr.w	r3, r3, #2
 8005db2:	6013      	str	r3, [r2, #0]
}
 8005db4:	bf00      	nop
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr
 8005dbe:	bf00      	nop
 8005dc0:	e000e010 	.word	0xe000e010

08005dc4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	431a      	orrs	r2, r3
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	609a      	str	r2, [r3, #8]
}
 8005dde:	bf00      	nop
 8005de0:	370c      	adds	r7, #12
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr

08005dea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005dea:	b480      	push	{r7}
 8005dec:	b083      	sub	sp, #12
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	6078      	str	r0, [r7, #4]
 8005df2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	431a      	orrs	r2, r3
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	609a      	str	r2, [r3, #8]
}
 8005e04:	bf00      	nop
 8005e06:	370c      	adds	r7, #12
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	370c      	adds	r7, #12
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr

08005e2c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b087      	sub	sp, #28
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	60f8      	str	r0, [r7, #12]
 8005e34:	60b9      	str	r1, [r7, #8]
 8005e36:	607a      	str	r2, [r7, #4]
 8005e38:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	3360      	adds	r3, #96	@ 0x60
 8005e3e:	461a      	mov	r2, r3
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	4413      	add	r3, r2
 8005e46:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	4b08      	ldr	r3, [pc, #32]	@ (8005e70 <LL_ADC_SetOffset+0x44>)
 8005e4e:	4013      	ands	r3, r2
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8005e56:	683a      	ldr	r2, [r7, #0]
 8005e58:	430a      	orrs	r2, r1
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005e64:	bf00      	nop
 8005e66:	371c      	adds	r7, #28
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr
 8005e70:	03fff000 	.word	0x03fff000

08005e74 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b085      	sub	sp, #20
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	3360      	adds	r3, #96	@ 0x60
 8005e82:	461a      	mov	r2, r3
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	4413      	add	r3, r2
 8005e8a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3714      	adds	r7, #20
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b087      	sub	sp, #28
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	3360      	adds	r3, #96	@ 0x60
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	4413      	add	r3, r2
 8005eb8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	431a      	orrs	r2, r3
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8005eca:	bf00      	nop
 8005ecc:	371c      	adds	r7, #28
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr

08005ed6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8005ed6:	b480      	push	{r7}
 8005ed8:	b083      	sub	sp, #12
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
 8005ede:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	695b      	ldr	r3, [r3, #20]
 8005ee4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	431a      	orrs	r2, r3
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	615a      	str	r2, [r3, #20]
}
 8005ef0:	bf00      	nop
 8005ef2:	370c      	adds	r7, #12
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr

08005efc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b083      	sub	sp, #12
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d101      	bne.n	8005f14 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005f10:	2301      	movs	r3, #1
 8005f12:	e000      	b.n	8005f16 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	370c      	adds	r7, #12
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr

08005f22 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005f22:	b480      	push	{r7}
 8005f24:	b087      	sub	sp, #28
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	60f8      	str	r0, [r7, #12]
 8005f2a:	60b9      	str	r1, [r7, #8]
 8005f2c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	3330      	adds	r3, #48	@ 0x30
 8005f32:	461a      	mov	r2, r3
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	0a1b      	lsrs	r3, r3, #8
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	f003 030c 	and.w	r3, r3, #12
 8005f3e:	4413      	add	r3, r2
 8005f40:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	f003 031f 	and.w	r3, r3, #31
 8005f4c:	211f      	movs	r1, #31
 8005f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8005f52:	43db      	mvns	r3, r3
 8005f54:	401a      	ands	r2, r3
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	0e9b      	lsrs	r3, r3, #26
 8005f5a:	f003 011f 	and.w	r1, r3, #31
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	f003 031f 	and.w	r3, r3, #31
 8005f64:	fa01 f303 	lsl.w	r3, r1, r3
 8005f68:	431a      	orrs	r2, r3
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005f6e:	bf00      	nop
 8005f70:	371c      	adds	r7, #28
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr

08005f7a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005f7a:	b480      	push	{r7}
 8005f7c:	b083      	sub	sp, #12
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f86:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d101      	bne.n	8005f92 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e000      	b.n	8005f94 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8005f92:	2300      	movs	r3, #0
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b087      	sub	sp, #28
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	60b9      	str	r1, [r7, #8]
 8005faa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	3314      	adds	r3, #20
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	0e5b      	lsrs	r3, r3, #25
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	f003 0304 	and.w	r3, r3, #4
 8005fbc:	4413      	add	r3, r2
 8005fbe:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	0d1b      	lsrs	r3, r3, #20
 8005fc8:	f003 031f 	and.w	r3, r3, #31
 8005fcc:	2107      	movs	r1, #7
 8005fce:	fa01 f303 	lsl.w	r3, r1, r3
 8005fd2:	43db      	mvns	r3, r3
 8005fd4:	401a      	ands	r2, r3
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	0d1b      	lsrs	r3, r3, #20
 8005fda:	f003 031f 	and.w	r3, r3, #31
 8005fde:	6879      	ldr	r1, [r7, #4]
 8005fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8005fe4:	431a      	orrs	r2, r3
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005fea:	bf00      	nop
 8005fec:	371c      	adds	r7, #28
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr
	...

08005ff8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b085      	sub	sp, #20
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	60f8      	str	r0, [r7, #12]
 8006000:	60b9      	str	r1, [r7, #8]
 8006002:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006010:	43db      	mvns	r3, r3
 8006012:	401a      	ands	r2, r3
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f003 0318 	and.w	r3, r3, #24
 800601a:	4908      	ldr	r1, [pc, #32]	@ (800603c <LL_ADC_SetChannelSingleDiff+0x44>)
 800601c:	40d9      	lsrs	r1, r3
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	400b      	ands	r3, r1
 8006022:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006026:	431a      	orrs	r2, r3
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800602e:	bf00      	nop
 8006030:	3714      	adds	r7, #20
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr
 800603a:	bf00      	nop
 800603c:	0007ffff 	.word	0x0007ffff

08006040 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006040:	b480      	push	{r7}
 8006042:	b083      	sub	sp, #12
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	f003 031f 	and.w	r3, r3, #31
}
 8006050:	4618      	mov	r0, r3
 8006052:	370c      	adds	r7, #12
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr

0800605c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 800606c:	4618      	mov	r0, r3
 800606e:	370c      	adds	r7, #12
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8006088:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	6093      	str	r3, [r2, #8]
}
 8006090:	bf00      	nop
 8006092:	370c      	adds	r7, #12
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr

0800609c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80060ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060b0:	d101      	bne.n	80060b6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80060b2:	2301      	movs	r3, #1
 80060b4:	e000      	b.n	80060b8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	370c      	adds	r7, #12
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80060d4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80060d8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80060e0:	bf00      	nop
 80060e2:	370c      	adds	r7, #12
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006100:	d101      	bne.n	8006106 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006102:	2301      	movs	r3, #1
 8006104:	e000      	b.n	8006108 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006106:	2300      	movs	r3, #0
}
 8006108:	4618      	mov	r0, r3
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006114:	b480      	push	{r7}
 8006116:	b083      	sub	sp, #12
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006124:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006128:	f043 0201 	orr.w	r2, r3, #1
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8006130:	bf00      	nop
 8006132:	370c      	adds	r7, #12
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr

0800613c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800613c:	b480      	push	{r7}
 800613e:	b083      	sub	sp, #12
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	f003 0301 	and.w	r3, r3, #1
 800614c:	2b01      	cmp	r3, #1
 800614e:	d101      	bne.n	8006154 <LL_ADC_IsEnabled+0x18>
 8006150:	2301      	movs	r3, #1
 8006152:	e000      	b.n	8006156 <LL_ADC_IsEnabled+0x1a>
 8006154:	2300      	movs	r3, #0
}
 8006156:	4618      	mov	r0, r3
 8006158:	370c      	adds	r7, #12
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr

08006162 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8006162:	b480      	push	{r7}
 8006164:	b083      	sub	sp, #12
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006172:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006176:	f043 0204 	orr.w	r2, r3, #4
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800617e:	bf00      	nop
 8006180:	370c      	adds	r7, #12
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr

0800618a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800618a:	b480      	push	{r7}
 800618c:	b083      	sub	sp, #12
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	f003 0304 	and.w	r3, r3, #4
 800619a:	2b04      	cmp	r3, #4
 800619c:	d101      	bne.n	80061a2 <LL_ADC_REG_IsConversionOngoing+0x18>
 800619e:	2301      	movs	r3, #1
 80061a0:	e000      	b.n	80061a4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80061a2:	2300      	movs	r3, #0
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	370c      	adds	r7, #12
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr

080061b0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b083      	sub	sp, #12
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	f003 0308 	and.w	r3, r3, #8
 80061c0:	2b08      	cmp	r3, #8
 80061c2:	d101      	bne.n	80061c8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80061c4:	2301      	movs	r3, #1
 80061c6:	e000      	b.n	80061ca <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80061c8:	2300      	movs	r3, #0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	370c      	adds	r7, #12
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr
	...

080061d8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80061d8:	b590      	push	{r4, r7, lr}
 80061da:	b089      	sub	sp, #36	@ 0x24
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80061e0:	2300      	movs	r3, #0
 80061e2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80061e4:	2300      	movs	r3, #0
 80061e6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d101      	bne.n	80061f2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	e133      	b.n	800645a <HAL_ADC_Init+0x282>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	691b      	ldr	r3, [r3, #16]
 80061f6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d109      	bne.n	8006214 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f7fe ff19 	bl	8005038 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4618      	mov	r0, r3
 800621a:	f7ff ff3f 	bl	800609c <LL_ADC_IsDeepPowerDownEnabled>
 800621e:	4603      	mov	r3, r0
 8006220:	2b00      	cmp	r3, #0
 8006222:	d004      	beq.n	800622e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4618      	mov	r0, r3
 800622a:	f7ff ff25 	bl	8006078 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4618      	mov	r0, r3
 8006234:	f7ff ff5a 	bl	80060ec <LL_ADC_IsInternalRegulatorEnabled>
 8006238:	4603      	mov	r3, r0
 800623a:	2b00      	cmp	r3, #0
 800623c:	d115      	bne.n	800626a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4618      	mov	r0, r3
 8006244:	f7ff ff3e 	bl	80060c4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006248:	4b86      	ldr	r3, [pc, #536]	@ (8006464 <HAL_ADC_Init+0x28c>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	099b      	lsrs	r3, r3, #6
 800624e:	4a86      	ldr	r2, [pc, #536]	@ (8006468 <HAL_ADC_Init+0x290>)
 8006250:	fba2 2303 	umull	r2, r3, r2, r3
 8006254:	099b      	lsrs	r3, r3, #6
 8006256:	3301      	adds	r3, #1
 8006258:	005b      	lsls	r3, r3, #1
 800625a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800625c:	e002      	b.n	8006264 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	3b01      	subs	r3, #1
 8006262:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d1f9      	bne.n	800625e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4618      	mov	r0, r3
 8006270:	f7ff ff3c 	bl	80060ec <LL_ADC_IsInternalRegulatorEnabled>
 8006274:	4603      	mov	r3, r0
 8006276:	2b00      	cmp	r3, #0
 8006278:	d10d      	bne.n	8006296 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800627e:	f043 0210 	orr.w	r2, r3, #16
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800628a:	f043 0201 	orr.w	r2, r3, #1
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4618      	mov	r0, r3
 800629c:	f7ff ff75 	bl	800618a <LL_ADC_REG_IsConversionOngoing>
 80062a0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062a6:	f003 0310 	and.w	r3, r3, #16
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	f040 80cc 	bne.w	8006448 <HAL_ADC_Init+0x270>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	f040 80c8 	bne.w	8006448 <HAL_ADC_Init+0x270>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062bc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80062c0:	f043 0202 	orr.w	r2, r3, #2
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4618      	mov	r0, r3
 80062ce:	f7ff ff35 	bl	800613c <LL_ADC_IsEnabled>
 80062d2:	4603      	mov	r3, r0
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d115      	bne.n	8006304 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80062d8:	4864      	ldr	r0, [pc, #400]	@ (800646c <HAL_ADC_Init+0x294>)
 80062da:	f7ff ff2f 	bl	800613c <LL_ADC_IsEnabled>
 80062de:	4604      	mov	r4, r0
 80062e0:	4863      	ldr	r0, [pc, #396]	@ (8006470 <HAL_ADC_Init+0x298>)
 80062e2:	f7ff ff2b 	bl	800613c <LL_ADC_IsEnabled>
 80062e6:	4603      	mov	r3, r0
 80062e8:	431c      	orrs	r4, r3
 80062ea:	4862      	ldr	r0, [pc, #392]	@ (8006474 <HAL_ADC_Init+0x29c>)
 80062ec:	f7ff ff26 	bl	800613c <LL_ADC_IsEnabled>
 80062f0:	4603      	mov	r3, r0
 80062f2:	4323      	orrs	r3, r4
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d105      	bne.n	8006304 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	4619      	mov	r1, r3
 80062fe:	485e      	ldr	r0, [pc, #376]	@ (8006478 <HAL_ADC_Init+0x2a0>)
 8006300:	f7ff fd60 	bl	8005dc4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	7e5b      	ldrb	r3, [r3, #25]
 8006308:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800630e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8006314:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800631a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006322:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006324:	4313      	orrs	r3, r2
 8006326:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800632e:	2b01      	cmp	r3, #1
 8006330:	d106      	bne.n	8006340 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006336:	3b01      	subs	r3, #1
 8006338:	045b      	lsls	r3, r3, #17
 800633a:	69ba      	ldr	r2, [r7, #24]
 800633c:	4313      	orrs	r3, r2
 800633e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006344:	2b00      	cmp	r3, #0
 8006346:	d009      	beq.n	800635c <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800634c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006354:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006356:	69ba      	ldr	r2, [r7, #24]
 8006358:	4313      	orrs	r3, r2
 800635a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	68da      	ldr	r2, [r3, #12]
 8006362:	4b46      	ldr	r3, [pc, #280]	@ (800647c <HAL_ADC_Init+0x2a4>)
 8006364:	4013      	ands	r3, r2
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	6812      	ldr	r2, [r2, #0]
 800636a:	69b9      	ldr	r1, [r7, #24]
 800636c:	430b      	orrs	r3, r1
 800636e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4618      	mov	r0, r3
 8006376:	f7ff ff1b 	bl	80061b0 <LL_ADC_INJ_IsConversionOngoing>
 800637a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d140      	bne.n	8006404 <HAL_ADC_Init+0x22c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d13d      	bne.n	8006404 <HAL_ADC_Init+0x22c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	7e1b      	ldrb	r3, [r3, #24]
 8006390:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8006392:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800639a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800639c:	4313      	orrs	r3, r2
 800639e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	68db      	ldr	r3, [r3, #12]
 80063a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80063aa:	f023 0306 	bic.w	r3, r3, #6
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	6812      	ldr	r2, [r2, #0]
 80063b2:	69b9      	ldr	r1, [r7, #24]
 80063b4:	430b      	orrs	r3, r1
 80063b6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d118      	bne.n	80063f4 <HAL_ADC_Init+0x21c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	691b      	ldr	r3, [r3, #16]
 80063c8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80063cc:	f023 0304 	bic.w	r3, r3, #4
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80063d8:	4311      	orrs	r1, r2
 80063da:	687a      	ldr	r2, [r7, #4]
 80063dc:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80063de:	4311      	orrs	r1, r2
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80063e4:	430a      	orrs	r2, r1
 80063e6:	431a      	orrs	r2, r3
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f042 0201 	orr.w	r2, r2, #1
 80063f0:	611a      	str	r2, [r3, #16]
 80063f2:	e007      	b.n	8006404 <HAL_ADC_Init+0x22c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	691a      	ldr	r2, [r3, #16]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f022 0201 	bic.w	r2, r2, #1
 8006402:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	691b      	ldr	r3, [r3, #16]
 8006408:	2b01      	cmp	r3, #1
 800640a:	d10c      	bne.n	8006426 <HAL_ADC_Init+0x24e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006412:	f023 010f 	bic.w	r1, r3, #15
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	69db      	ldr	r3, [r3, #28]
 800641a:	1e5a      	subs	r2, r3, #1
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	430a      	orrs	r2, r1
 8006422:	631a      	str	r2, [r3, #48]	@ 0x30
 8006424:	e007      	b.n	8006436 <HAL_ADC_Init+0x25e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f022 020f 	bic.w	r2, r2, #15
 8006434:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800643a:	f023 0303 	bic.w	r3, r3, #3
 800643e:	f043 0201 	orr.w	r2, r3, #1
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	659a      	str	r2, [r3, #88]	@ 0x58
 8006446:	e007      	b.n	8006458 <HAL_ADC_Init+0x280>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800644c:	f043 0210 	orr.w	r2, r3, #16
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8006458:	7ffb      	ldrb	r3, [r7, #31]
}
 800645a:	4618      	mov	r0, r3
 800645c:	3724      	adds	r7, #36	@ 0x24
 800645e:	46bd      	mov	sp, r7
 8006460:	bd90      	pop	{r4, r7, pc}
 8006462:	bf00      	nop
 8006464:	20000398 	.word	0x20000398
 8006468:	053e2d63 	.word	0x053e2d63
 800646c:	50040000 	.word	0x50040000
 8006470:	50040100 	.word	0x50040100
 8006474:	50040200 	.word	0x50040200
 8006478:	50040300 	.word	0x50040300
 800647c:	fff0c007 	.word	0xfff0c007

08006480 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b086      	sub	sp, #24
 8006484:	af00      	add	r7, sp, #0
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	60b9      	str	r1, [r7, #8]
 800648a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800648c:	4853      	ldr	r0, [pc, #332]	@ (80065dc <HAL_ADC_Start_DMA+0x15c>)
 800648e:	f7ff fdd7 	bl	8006040 <LL_ADC_GetMultimode>
 8006492:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4618      	mov	r0, r3
 800649a:	f7ff fe76 	bl	800618a <LL_ADC_REG_IsConversionOngoing>
 800649e:	4603      	mov	r3, r0
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	f040 8093 	bne.w	80065cc <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d101      	bne.n	80064b4 <HAL_ADC_Start_DMA+0x34>
 80064b0:	2302      	movs	r3, #2
 80064b2:	e08e      	b.n	80065d2 <HAL_ADC_Start_DMA+0x152>
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a47      	ldr	r2, [pc, #284]	@ (80065e0 <HAL_ADC_Start_DMA+0x160>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d008      	beq.n	80064d8 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d005      	beq.n	80064d8 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	2b05      	cmp	r3, #5
 80064d0:	d002      	beq.n	80064d8 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	2b09      	cmp	r3, #9
 80064d6:	d172      	bne.n	80065be <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80064d8:	68f8      	ldr	r0, [r7, #12]
 80064da:	f000 fed1 	bl	8007280 <ADC_Enable>
 80064de:	4603      	mov	r3, r0
 80064e0:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80064e2:	7dfb      	ldrb	r3, [r7, #23]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d165      	bne.n	80065b4 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064ec:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80064f0:	f023 0301 	bic.w	r3, r3, #1
 80064f4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	659a      	str	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a38      	ldr	r2, [pc, #224]	@ (80065e4 <HAL_ADC_Start_DMA+0x164>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d002      	beq.n	800650c <HAL_ADC_Start_DMA+0x8c>
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	e000      	b.n	800650e <HAL_ADC_Start_DMA+0x8e>
 800650c:	4b36      	ldr	r3, [pc, #216]	@ (80065e8 <HAL_ADC_Start_DMA+0x168>)
 800650e:	68fa      	ldr	r2, [r7, #12]
 8006510:	6812      	ldr	r2, [r2, #0]
 8006512:	4293      	cmp	r3, r2
 8006514:	d002      	beq.n	800651c <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d105      	bne.n	8006528 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006520:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800652c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006530:	2b00      	cmp	r3, #0
 8006532:	d006      	beq.n	8006542 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006538:	f023 0206 	bic.w	r2, r3, #6
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006540:	e002      	b.n	8006548 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2200      	movs	r2, #0
 8006546:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800654c:	4a27      	ldr	r2, [pc, #156]	@ (80065ec <HAL_ADC_Start_DMA+0x16c>)
 800654e:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006554:	4a26      	ldr	r2, [pc, #152]	@ (80065f0 <HAL_ADC_Start_DMA+0x170>)
 8006556:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800655c:	4a25      	ldr	r2, [pc, #148]	@ (80065f4 <HAL_ADC_Start_DMA+0x174>)
 800655e:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	221c      	movs	r2, #28
 8006566:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2200      	movs	r2, #0
 800656c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	685a      	ldr	r2, [r3, #4]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f042 0210 	orr.w	r2, r2, #16
 800657e:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	68da      	ldr	r2, [r3, #12]
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f042 0201 	orr.w	r2, r2, #1
 800658e:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	3340      	adds	r3, #64	@ 0x40
 800659a:	4619      	mov	r1, r3
 800659c:	68ba      	ldr	r2, [r7, #8]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f001 fb1e 	bl	8007be0 <HAL_DMA_Start_IT>
 80065a4:	4603      	mov	r3, r0
 80065a6:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4618      	mov	r0, r3
 80065ae:	f7ff fdd8 	bl	8006162 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80065b2:	e00d      	b.n	80065d0 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2200      	movs	r2, #0
 80065b8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      if (tmp_hal_status == HAL_OK)
 80065bc:	e008      	b.n	80065d0 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2200      	movs	r2, #0
 80065c6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 80065ca:	e001      	b.n	80065d0 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80065cc:	2302      	movs	r3, #2
 80065ce:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80065d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3718      	adds	r7, #24
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop
 80065dc:	50040300 	.word	0x50040300
 80065e0:	50040200 	.word	0x50040200
 80065e4:	50040100 	.word	0x50040100
 80065e8:	50040000 	.word	0x50040000
 80065ec:	0800738d 	.word	0x0800738d
 80065f0:	08007465 	.word	0x08007465
 80065f4:	08007481 	.word	0x08007481

080065f8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b08a      	sub	sp, #40	@ 0x28
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8006600:	2300      	movs	r3, #0
 8006602:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006614:	4882      	ldr	r0, [pc, #520]	@ (8006820 <HAL_ADC_IRQHandler+0x228>)
 8006616:	f7ff fd13 	bl	8006040 <LL_ADC_GetMultimode>
 800661a:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800661c:	69fb      	ldr	r3, [r7, #28]
 800661e:	f003 0302 	and.w	r3, r3, #2
 8006622:	2b00      	cmp	r3, #0
 8006624:	d017      	beq.n	8006656 <HAL_ADC_IRQHandler+0x5e>
 8006626:	69bb      	ldr	r3, [r7, #24]
 8006628:	f003 0302 	and.w	r3, r3, #2
 800662c:	2b00      	cmp	r3, #0
 800662e:	d012      	beq.n	8006656 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006634:	f003 0310 	and.w	r3, r3, #16
 8006638:	2b00      	cmp	r3, #0
 800663a:	d105      	bne.n	8006648 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006640:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f000 ff81 	bl	8007550 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	2202      	movs	r2, #2
 8006654:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8006656:	69fb      	ldr	r3, [r7, #28]
 8006658:	f003 0304 	and.w	r3, r3, #4
 800665c:	2b00      	cmp	r3, #0
 800665e:	d004      	beq.n	800666a <HAL_ADC_IRQHandler+0x72>
 8006660:	69bb      	ldr	r3, [r7, #24]
 8006662:	f003 0304 	and.w	r3, r3, #4
 8006666:	2b00      	cmp	r3, #0
 8006668:	d10a      	bne.n	8006680 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800666a:	69fb      	ldr	r3, [r7, #28]
 800666c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8006670:	2b00      	cmp	r3, #0
 8006672:	f000 8083 	beq.w	800677c <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8006676:	69bb      	ldr	r3, [r7, #24]
 8006678:	f003 0308 	and.w	r3, r3, #8
 800667c:	2b00      	cmp	r3, #0
 800667e:	d07d      	beq.n	800677c <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006684:	f003 0310 	and.w	r3, r3, #16
 8006688:	2b00      	cmp	r3, #0
 800668a:	d105      	bne.n	8006698 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006690:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4618      	mov	r0, r3
 800669e:	f7ff fc2d 	bl	8005efc <LL_ADC_REG_IsTriggerSourceSWStart>
 80066a2:	4603      	mov	r3, r0
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d062      	beq.n	800676e <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a5d      	ldr	r2, [pc, #372]	@ (8006824 <HAL_ADC_IRQHandler+0x22c>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d002      	beq.n	80066b8 <HAL_ADC_IRQHandler+0xc0>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	e000      	b.n	80066ba <HAL_ADC_IRQHandler+0xc2>
 80066b8:	4b5b      	ldr	r3, [pc, #364]	@ (8006828 <HAL_ADC_IRQHandler+0x230>)
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	6812      	ldr	r2, [r2, #0]
 80066be:	4293      	cmp	r3, r2
 80066c0:	d008      	beq.n	80066d4 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d005      	beq.n	80066d4 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	2b05      	cmp	r3, #5
 80066cc:	d002      	beq.n	80066d4 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	2b09      	cmp	r3, #9
 80066d2:	d104      	bne.n	80066de <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	68db      	ldr	r3, [r3, #12]
 80066da:	623b      	str	r3, [r7, #32]
 80066dc:	e00c      	b.n	80066f8 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a50      	ldr	r2, [pc, #320]	@ (8006824 <HAL_ADC_IRQHandler+0x22c>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d002      	beq.n	80066ee <HAL_ADC_IRQHandler+0xf6>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	e000      	b.n	80066f0 <HAL_ADC_IRQHandler+0xf8>
 80066ee:	4b4e      	ldr	r3, [pc, #312]	@ (8006828 <HAL_ADC_IRQHandler+0x230>)
 80066f0:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80066f8:	6a3b      	ldr	r3, [r7, #32]
 80066fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d135      	bne.n	800676e <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f003 0308 	and.w	r3, r3, #8
 800670c:	2b08      	cmp	r3, #8
 800670e:	d12e      	bne.n	800676e <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4618      	mov	r0, r3
 8006716:	f7ff fd38 	bl	800618a <LL_ADC_REG_IsConversionOngoing>
 800671a:	4603      	mov	r3, r0
 800671c:	2b00      	cmp	r3, #0
 800671e:	d11a      	bne.n	8006756 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	685a      	ldr	r2, [r3, #4]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f022 020c 	bic.w	r2, r2, #12
 800672e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006734:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	659a      	str	r2, [r3, #88]	@ 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006740:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006744:	2b00      	cmp	r3, #0
 8006746:	d112      	bne.n	800676e <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800674c:	f043 0201 	orr.w	r2, r3, #1
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	659a      	str	r2, [r3, #88]	@ 0x58
 8006754:	e00b      	b.n	800676e <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800675a:	f043 0210 	orr.w	r2, r3, #16
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006766:	f043 0201 	orr.w	r2, r3, #1
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f7fe fb7c 	bl	8004e6c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	220c      	movs	r2, #12
 800677a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800677c:	69fb      	ldr	r3, [r7, #28]
 800677e:	f003 0320 	and.w	r3, r3, #32
 8006782:	2b00      	cmp	r3, #0
 8006784:	d004      	beq.n	8006790 <HAL_ADC_IRQHandler+0x198>
 8006786:	69bb      	ldr	r3, [r7, #24]
 8006788:	f003 0320 	and.w	r3, r3, #32
 800678c:	2b00      	cmp	r3, #0
 800678e:	d10b      	bne.n	80067a8 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8006796:	2b00      	cmp	r3, #0
 8006798:	f000 809f 	beq.w	80068da <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800679c:	69bb      	ldr	r3, [r7, #24]
 800679e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	f000 8099 	beq.w	80068da <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067ac:	f003 0310 	and.w	r3, r3, #16
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d105      	bne.n	80067c0 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067b8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4618      	mov	r0, r3
 80067c6:	f7ff fbd8 	bl	8005f7a <LL_ADC_INJ_IsTriggerSourceSWStart>
 80067ca:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4618      	mov	r0, r3
 80067d2:	f7ff fb93 	bl	8005efc <LL_ADC_REG_IsTriggerSourceSWStart>
 80067d6:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a11      	ldr	r2, [pc, #68]	@ (8006824 <HAL_ADC_IRQHandler+0x22c>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d002      	beq.n	80067e8 <HAL_ADC_IRQHandler+0x1f0>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	e000      	b.n	80067ea <HAL_ADC_IRQHandler+0x1f2>
 80067e8:	4b0f      	ldr	r3, [pc, #60]	@ (8006828 <HAL_ADC_IRQHandler+0x230>)
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	6812      	ldr	r2, [r2, #0]
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d008      	beq.n	8006804 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d005      	beq.n	8006804 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	2b06      	cmp	r3, #6
 80067fc:	d002      	beq.n	8006804 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	2b07      	cmp	r3, #7
 8006802:	d104      	bne.n	800680e <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	68db      	ldr	r3, [r3, #12]
 800680a:	623b      	str	r3, [r7, #32]
 800680c:	e013      	b.n	8006836 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a04      	ldr	r2, [pc, #16]	@ (8006824 <HAL_ADC_IRQHandler+0x22c>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d009      	beq.n	800682c <HAL_ADC_IRQHandler+0x234>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	e007      	b.n	800682e <HAL_ADC_IRQHandler+0x236>
 800681e:	bf00      	nop
 8006820:	50040300 	.word	0x50040300
 8006824:	50040100 	.word	0x50040100
 8006828:	50040000 	.word	0x50040000
 800682c:	4b7d      	ldr	r3, [pc, #500]	@ (8006a24 <HAL_ADC_IRQHandler+0x42c>)
 800682e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d047      	beq.n	80068cc <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800683c:	6a3b      	ldr	r3, [r7, #32]
 800683e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006842:	2b00      	cmp	r3, #0
 8006844:	d007      	beq.n	8006856 <HAL_ADC_IRQHandler+0x25e>
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d03f      	beq.n	80068cc <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800684c:	6a3b      	ldr	r3, [r7, #32]
 800684e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8006852:	2b00      	cmp	r3, #0
 8006854:	d13a      	bne.n	80068cc <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006860:	2b40      	cmp	r3, #64	@ 0x40
 8006862:	d133      	bne.n	80068cc <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8006864:	6a3b      	ldr	r3, [r7, #32]
 8006866:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800686a:	2b00      	cmp	r3, #0
 800686c:	d12e      	bne.n	80068cc <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4618      	mov	r0, r3
 8006874:	f7ff fc9c 	bl	80061b0 <LL_ADC_INJ_IsConversionOngoing>
 8006878:	4603      	mov	r3, r0
 800687a:	2b00      	cmp	r3, #0
 800687c:	d11a      	bne.n	80068b4 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	685a      	ldr	r2, [r3, #4]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800688c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006892:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	659a      	str	r2, [r3, #88]	@ 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800689e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d112      	bne.n	80068cc <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068aa:	f043 0201 	orr.w	r2, r3, #1
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	659a      	str	r2, [r3, #88]	@ 0x58
 80068b2:	e00b      	b.n	80068cc <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068b8:	f043 0210 	orr.w	r2, r3, #16
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	659a      	str	r2, [r3, #88]	@ 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068c4:	f043 0201 	orr.w	r2, r3, #1
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	65da      	str	r2, [r3, #92]	@ 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f000 fe17 	bl	8007500 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	2260      	movs	r2, #96	@ 0x60
 80068d8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80068da:	69fb      	ldr	r3, [r7, #28]
 80068dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d011      	beq.n	8006908 <HAL_ADC_IRQHandler+0x310>
 80068e4:	69bb      	ldr	r3, [r7, #24]
 80068e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d00c      	beq.n	8006908 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068f2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 f8a0 	bl	8006a40 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	2280      	movs	r2, #128	@ 0x80
 8006906:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8006908:	69fb      	ldr	r3, [r7, #28]
 800690a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800690e:	2b00      	cmp	r3, #0
 8006910:	d012      	beq.n	8006938 <HAL_ADC_IRQHandler+0x340>
 8006912:	69bb      	ldr	r3, [r7, #24]
 8006914:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006918:	2b00      	cmp	r3, #0
 800691a:	d00d      	beq.n	8006938 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006920:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f000 fdfd 	bl	8007528 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006936:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8006938:	69fb      	ldr	r3, [r7, #28]
 800693a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800693e:	2b00      	cmp	r3, #0
 8006940:	d012      	beq.n	8006968 <HAL_ADC_IRQHandler+0x370>
 8006942:	69bb      	ldr	r3, [r7, #24]
 8006944:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006948:	2b00      	cmp	r3, #0
 800694a:	d00d      	beq.n	8006968 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006950:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f000 fdef 	bl	800753c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006966:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8006968:	69fb      	ldr	r3, [r7, #28]
 800696a:	f003 0310 	and.w	r3, r3, #16
 800696e:	2b00      	cmp	r3, #0
 8006970:	d036      	beq.n	80069e0 <HAL_ADC_IRQHandler+0x3e8>
 8006972:	69bb      	ldr	r3, [r7, #24]
 8006974:	f003 0310 	and.w	r3, r3, #16
 8006978:	2b00      	cmp	r3, #0
 800697a:	d031      	beq.n	80069e0 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006980:	2b00      	cmp	r3, #0
 8006982:	d102      	bne.n	800698a <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8006984:	2301      	movs	r3, #1
 8006986:	627b      	str	r3, [r7, #36]	@ 0x24
 8006988:	e014      	b.n	80069b4 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d008      	beq.n	80069a2 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8006990:	4825      	ldr	r0, [pc, #148]	@ (8006a28 <HAL_ADC_IRQHandler+0x430>)
 8006992:	f7ff fb63 	bl	800605c <LL_ADC_GetMultiDMATransfer>
 8006996:	4603      	mov	r3, r0
 8006998:	2b00      	cmp	r3, #0
 800699a:	d00b      	beq.n	80069b4 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 800699c:	2301      	movs	r3, #1
 800699e:	627b      	str	r3, [r7, #36]	@ 0x24
 80069a0:	e008      	b.n	80069b4 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	68db      	ldr	r3, [r3, #12]
 80069a8:	f003 0301 	and.w	r3, r3, #1
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d001      	beq.n	80069b4 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 80069b0:	2301      	movs	r3, #1
 80069b2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80069b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d10e      	bne.n	80069d8 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069be:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069ca:	f043 0202 	orr.w	r2, r3, #2
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 f83e 	bl	8006a54 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	2210      	movs	r2, #16
 80069de:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80069e0:	69fb      	ldr	r3, [r7, #28]
 80069e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d018      	beq.n	8006a1c <HAL_ADC_IRQHandler+0x424>
 80069ea:	69bb      	ldr	r3, [r7, #24]
 80069ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d013      	beq.n	8006a1c <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069f8:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a04:	f043 0208 	orr.w	r2, r3, #8
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006a14:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 fd7c 	bl	8007514 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8006a1c:	bf00      	nop
 8006a1e:	3728      	adds	r7, #40	@ 0x28
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}
 8006a24:	50040000 	.word	0x50040000
 8006a28:	50040300 	.word	0x50040300

08006a2c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b083      	sub	sp, #12
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006a34:	bf00      	nop
 8006a36:	370c      	adds	r7, #12
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr

08006a40 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b083      	sub	sp, #12
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8006a48:	bf00      	nop
 8006a4a:	370c      	adds	r7, #12
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr

08006a54 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b083      	sub	sp, #12
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006a5c:	bf00      	nop
 8006a5e:	370c      	adds	r7, #12
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr

08006a68 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b0b6      	sub	sp, #216	@ 0xd8
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006a72:	2300      	movs	r3, #0
 8006a74:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d101      	bne.n	8006a8a <HAL_ADC_ConfigChannel+0x22>
 8006a86:	2302      	movs	r3, #2
 8006a88:	e3e3      	b.n	8007252 <HAL_ADC_ConfigChannel+0x7ea>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4618      	mov	r0, r3
 8006a98:	f7ff fb77 	bl	800618a <LL_ADC_REG_IsConversionOngoing>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	f040 83c4 	bne.w	800722c <HAL_ADC_ConfigChannel+0x7c4>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	2b05      	cmp	r3, #5
 8006ab2:	d824      	bhi.n	8006afe <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	3b02      	subs	r3, #2
 8006aba:	2b03      	cmp	r3, #3
 8006abc:	d81b      	bhi.n	8006af6 <HAL_ADC_ConfigChannel+0x8e>
 8006abe:	a201      	add	r2, pc, #4	@ (adr r2, 8006ac4 <HAL_ADC_ConfigChannel+0x5c>)
 8006ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ac4:	08006ad5 	.word	0x08006ad5
 8006ac8:	08006add 	.word	0x08006add
 8006acc:	08006ae5 	.word	0x08006ae5
 8006ad0:	08006aed 	.word	0x08006aed
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8006ad4:	230c      	movs	r3, #12
 8006ad6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8006ada:	e010      	b.n	8006afe <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8006adc:	2312      	movs	r3, #18
 8006ade:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8006ae2:	e00c      	b.n	8006afe <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8006ae4:	2318      	movs	r3, #24
 8006ae6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8006aea:	e008      	b.n	8006afe <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8006aec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006af0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8006af4:	e003      	b.n	8006afe <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8006af6:	2306      	movs	r3, #6
 8006af8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8006afc:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6818      	ldr	r0, [r3, #0]
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	461a      	mov	r2, r3
 8006b08:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8006b0c:	f7ff fa09 	bl	8005f22 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4618      	mov	r0, r3
 8006b16:	f7ff fb38 	bl	800618a <LL_ADC_REG_IsConversionOngoing>
 8006b1a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4618      	mov	r0, r3
 8006b24:	f7ff fb44 	bl	80061b0 <LL_ADC_INJ_IsConversionOngoing>
 8006b28:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006b2c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	f040 81bf 	bne.w	8006eb4 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006b36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	f040 81ba 	bne.w	8006eb4 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006b48:	d10f      	bne.n	8006b6a <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6818      	ldr	r0, [r3, #0]
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	2200      	movs	r2, #0
 8006b54:	4619      	mov	r1, r3
 8006b56:	f7ff fa23 	bl	8005fa0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8006b62:	4618      	mov	r0, r3
 8006b64:	f7ff f9b7 	bl	8005ed6 <LL_ADC_SetSamplingTimeCommonConfig>
 8006b68:	e00e      	b.n	8006b88 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6818      	ldr	r0, [r3, #0]
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	6819      	ldr	r1, [r3, #0]
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	461a      	mov	r2, r3
 8006b78:	f7ff fa12 	bl	8005fa0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	2100      	movs	r1, #0
 8006b82:	4618      	mov	r0, r3
 8006b84:	f7ff f9a7 	bl	8005ed6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	695a      	ldr	r2, [r3, #20]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	68db      	ldr	r3, [r3, #12]
 8006b92:	08db      	lsrs	r3, r3, #3
 8006b94:	f003 0303 	and.w	r3, r3, #3
 8006b98:	005b      	lsls	r3, r3, #1
 8006b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b9e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	691b      	ldr	r3, [r3, #16]
 8006ba6:	2b04      	cmp	r3, #4
 8006ba8:	d00a      	beq.n	8006bc0 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6818      	ldr	r0, [r3, #0]
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	6919      	ldr	r1, [r3, #16]
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006bba:	f7ff f937 	bl	8005e2c <LL_ADC_SetOffset>
 8006bbe:	e179      	b.n	8006eb4 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	2100      	movs	r1, #0
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f7ff f954 	bl	8005e74 <LL_ADC_GetOffsetChannel>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d10a      	bne.n	8006bec <HAL_ADC_ConfigChannel+0x184>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2100      	movs	r1, #0
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f7ff f949 	bl	8005e74 <LL_ADC_GetOffsetChannel>
 8006be2:	4603      	mov	r3, r0
 8006be4:	0e9b      	lsrs	r3, r3, #26
 8006be6:	f003 021f 	and.w	r2, r3, #31
 8006bea:	e01e      	b.n	8006c2a <HAL_ADC_ConfigChannel+0x1c2>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	2100      	movs	r1, #0
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f7ff f93e 	bl	8005e74 <LL_ADC_GetOffsetChannel>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bfe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006c02:	fa93 f3a3 	rbit	r3, r3
 8006c06:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006c0a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006c0e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006c12:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d101      	bne.n	8006c1e <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8006c1a:	2320      	movs	r3, #32
 8006c1c:	e004      	b.n	8006c28 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8006c1e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006c22:	fab3 f383 	clz	r3, r3
 8006c26:	b2db      	uxtb	r3, r3
 8006c28:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d105      	bne.n	8006c42 <HAL_ADC_ConfigChannel+0x1da>
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	0e9b      	lsrs	r3, r3, #26
 8006c3c:	f003 031f 	and.w	r3, r3, #31
 8006c40:	e018      	b.n	8006c74 <HAL_ADC_ConfigChannel+0x20c>
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006c4e:	fa93 f3a3 	rbit	r3, r3
 8006c52:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8006c56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006c5a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8006c5e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d101      	bne.n	8006c6a <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8006c66:	2320      	movs	r3, #32
 8006c68:	e004      	b.n	8006c74 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8006c6a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006c6e:	fab3 f383 	clz	r3, r3
 8006c72:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d106      	bne.n	8006c86 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	2100      	movs	r1, #0
 8006c80:	4618      	mov	r0, r3
 8006c82:	f7ff f90d 	bl	8005ea0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	2101      	movs	r1, #1
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f7ff f8f1 	bl	8005e74 <LL_ADC_GetOffsetChannel>
 8006c92:	4603      	mov	r3, r0
 8006c94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d10a      	bne.n	8006cb2 <HAL_ADC_ConfigChannel+0x24a>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	2101      	movs	r1, #1
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f7ff f8e6 	bl	8005e74 <LL_ADC_GetOffsetChannel>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	0e9b      	lsrs	r3, r3, #26
 8006cac:	f003 021f 	and.w	r2, r3, #31
 8006cb0:	e01e      	b.n	8006cf0 <HAL_ADC_ConfigChannel+0x288>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	2101      	movs	r1, #1
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f7ff f8db 	bl	8005e74 <LL_ADC_GetOffsetChannel>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cc4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006cc8:	fa93 f3a3 	rbit	r3, r3
 8006ccc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8006cd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006cd4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8006cd8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d101      	bne.n	8006ce4 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8006ce0:	2320      	movs	r3, #32
 8006ce2:	e004      	b.n	8006cee <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8006ce4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006ce8:	fab3 f383 	clz	r3, r3
 8006cec:	b2db      	uxtb	r3, r3
 8006cee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d105      	bne.n	8006d08 <HAL_ADC_ConfigChannel+0x2a0>
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	0e9b      	lsrs	r3, r3, #26
 8006d02:	f003 031f 	and.w	r3, r3, #31
 8006d06:	e018      	b.n	8006d3a <HAL_ADC_ConfigChannel+0x2d2>
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d10:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006d14:	fa93 f3a3 	rbit	r3, r3
 8006d18:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8006d1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006d20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8006d24:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d101      	bne.n	8006d30 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8006d2c:	2320      	movs	r3, #32
 8006d2e:	e004      	b.n	8006d3a <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8006d30:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006d34:	fab3 f383 	clz	r3, r3
 8006d38:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d106      	bne.n	8006d4c <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	2200      	movs	r2, #0
 8006d44:	2101      	movs	r1, #1
 8006d46:	4618      	mov	r0, r3
 8006d48:	f7ff f8aa 	bl	8005ea0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	2102      	movs	r1, #2
 8006d52:	4618      	mov	r0, r3
 8006d54:	f7ff f88e 	bl	8005e74 <LL_ADC_GetOffsetChannel>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d10a      	bne.n	8006d78 <HAL_ADC_ConfigChannel+0x310>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	2102      	movs	r1, #2
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f7ff f883 	bl	8005e74 <LL_ADC_GetOffsetChannel>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	0e9b      	lsrs	r3, r3, #26
 8006d72:	f003 021f 	and.w	r2, r3, #31
 8006d76:	e01e      	b.n	8006db6 <HAL_ADC_ConfigChannel+0x34e>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	2102      	movs	r1, #2
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f7ff f878 	bl	8005e74 <LL_ADC_GetOffsetChannel>
 8006d84:	4603      	mov	r3, r0
 8006d86:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006d8e:	fa93 f3a3 	rbit	r3, r3
 8006d92:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8006d96:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006d9a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8006d9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d101      	bne.n	8006daa <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8006da6:	2320      	movs	r3, #32
 8006da8:	e004      	b.n	8006db4 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8006daa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006dae:	fab3 f383 	clz	r3, r3
 8006db2:	b2db      	uxtb	r3, r3
 8006db4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d105      	bne.n	8006dce <HAL_ADC_ConfigChannel+0x366>
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	0e9b      	lsrs	r3, r3, #26
 8006dc8:	f003 031f 	and.w	r3, r3, #31
 8006dcc:	e014      	b.n	8006df8 <HAL_ADC_ConfigChannel+0x390>
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dd4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006dd6:	fa93 f3a3 	rbit	r3, r3
 8006dda:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8006ddc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006dde:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8006de2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d101      	bne.n	8006dee <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8006dea:	2320      	movs	r3, #32
 8006dec:	e004      	b.n	8006df8 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8006dee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006df2:	fab3 f383 	clz	r3, r3
 8006df6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d106      	bne.n	8006e0a <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	2200      	movs	r2, #0
 8006e02:	2102      	movs	r1, #2
 8006e04:	4618      	mov	r0, r3
 8006e06:	f7ff f84b 	bl	8005ea0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	2103      	movs	r1, #3
 8006e10:	4618      	mov	r0, r3
 8006e12:	f7ff f82f 	bl	8005e74 <LL_ADC_GetOffsetChannel>
 8006e16:	4603      	mov	r3, r0
 8006e18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d10a      	bne.n	8006e36 <HAL_ADC_ConfigChannel+0x3ce>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	2103      	movs	r1, #3
 8006e26:	4618      	mov	r0, r3
 8006e28:	f7ff f824 	bl	8005e74 <LL_ADC_GetOffsetChannel>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	0e9b      	lsrs	r3, r3, #26
 8006e30:	f003 021f 	and.w	r2, r3, #31
 8006e34:	e017      	b.n	8006e66 <HAL_ADC_ConfigChannel+0x3fe>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	2103      	movs	r1, #3
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f7ff f819 	bl	8005e74 <LL_ADC_GetOffsetChannel>
 8006e42:	4603      	mov	r3, r0
 8006e44:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e46:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006e48:	fa93 f3a3 	rbit	r3, r3
 8006e4c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8006e4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e50:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8006e52:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d101      	bne.n	8006e5c <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8006e58:	2320      	movs	r3, #32
 8006e5a:	e003      	b.n	8006e64 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8006e5c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006e5e:	fab3 f383 	clz	r3, r3
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d105      	bne.n	8006e7e <HAL_ADC_ConfigChannel+0x416>
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	0e9b      	lsrs	r3, r3, #26
 8006e78:	f003 031f 	and.w	r3, r3, #31
 8006e7c:	e011      	b.n	8006ea2 <HAL_ADC_ConfigChannel+0x43a>
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e86:	fa93 f3a3 	rbit	r3, r3
 8006e8a:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8006e8c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006e8e:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8006e90:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d101      	bne.n	8006e9a <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8006e96:	2320      	movs	r3, #32
 8006e98:	e003      	b.n	8006ea2 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8006e9a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006e9c:	fab3 f383 	clz	r3, r3
 8006ea0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d106      	bne.n	8006eb4 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	2103      	movs	r1, #3
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f7fe fff6 	bl	8005ea0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f7ff f93f 	bl	800613c <LL_ADC_IsEnabled>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	f040 813f 	bne.w	8007144 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6818      	ldr	r0, [r3, #0]
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	6819      	ldr	r1, [r3, #0]
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	68db      	ldr	r3, [r3, #12]
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	f7ff f890 	bl	8005ff8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	4a8e      	ldr	r2, [pc, #568]	@ (8007118 <HAL_ADC_ConfigChannel+0x6b0>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	f040 8130 	bne.w	8007144 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d10b      	bne.n	8006f0c <HAL_ADC_ConfigChannel+0x4a4>
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	0e9b      	lsrs	r3, r3, #26
 8006efa:	3301      	adds	r3, #1
 8006efc:	f003 031f 	and.w	r3, r3, #31
 8006f00:	2b09      	cmp	r3, #9
 8006f02:	bf94      	ite	ls
 8006f04:	2301      	movls	r3, #1
 8006f06:	2300      	movhi	r3, #0
 8006f08:	b2db      	uxtb	r3, r3
 8006f0a:	e019      	b.n	8006f40 <HAL_ADC_ConfigChannel+0x4d8>
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f12:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006f14:	fa93 f3a3 	rbit	r3, r3
 8006f18:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8006f1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8006f1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d101      	bne.n	8006f28 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8006f24:	2320      	movs	r3, #32
 8006f26:	e003      	b.n	8006f30 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8006f28:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f2a:	fab3 f383 	clz	r3, r3
 8006f2e:	b2db      	uxtb	r3, r3
 8006f30:	3301      	adds	r3, #1
 8006f32:	f003 031f 	and.w	r3, r3, #31
 8006f36:	2b09      	cmp	r3, #9
 8006f38:	bf94      	ite	ls
 8006f3a:	2301      	movls	r3, #1
 8006f3c:	2300      	movhi	r3, #0
 8006f3e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d079      	beq.n	8007038 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d107      	bne.n	8006f60 <HAL_ADC_ConfigChannel+0x4f8>
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	0e9b      	lsrs	r3, r3, #26
 8006f56:	3301      	adds	r3, #1
 8006f58:	069b      	lsls	r3, r3, #26
 8006f5a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006f5e:	e015      	b.n	8006f8c <HAL_ADC_ConfigChannel+0x524>
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f68:	fa93 f3a3 	rbit	r3, r3
 8006f6c:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8006f6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f70:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8006f72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d101      	bne.n	8006f7c <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8006f78:	2320      	movs	r3, #32
 8006f7a:	e003      	b.n	8006f84 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8006f7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f7e:	fab3 f383 	clz	r3, r3
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	3301      	adds	r3, #1
 8006f86:	069b      	lsls	r3, r3, #26
 8006f88:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d109      	bne.n	8006fac <HAL_ADC_ConfigChannel+0x544>
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	0e9b      	lsrs	r3, r3, #26
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	f003 031f 	and.w	r3, r3, #31
 8006fa4:	2101      	movs	r1, #1
 8006fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8006faa:	e017      	b.n	8006fdc <HAL_ADC_ConfigChannel+0x574>
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006fb4:	fa93 f3a3 	rbit	r3, r3
 8006fb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8006fba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fbc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8006fbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d101      	bne.n	8006fc8 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8006fc4:	2320      	movs	r3, #32
 8006fc6:	e003      	b.n	8006fd0 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8006fc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006fca:	fab3 f383 	clz	r3, r3
 8006fce:	b2db      	uxtb	r3, r3
 8006fd0:	3301      	adds	r3, #1
 8006fd2:	f003 031f 	and.w	r3, r3, #31
 8006fd6:	2101      	movs	r1, #1
 8006fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8006fdc:	ea42 0103 	orr.w	r1, r2, r3
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d10a      	bne.n	8007002 <HAL_ADC_ConfigChannel+0x59a>
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	0e9b      	lsrs	r3, r3, #26
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	f003 021f 	and.w	r2, r3, #31
 8006ff8:	4613      	mov	r3, r2
 8006ffa:	005b      	lsls	r3, r3, #1
 8006ffc:	4413      	add	r3, r2
 8006ffe:	051b      	lsls	r3, r3, #20
 8007000:	e018      	b.n	8007034 <HAL_ADC_ConfigChannel+0x5cc>
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007008:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800700a:	fa93 f3a3 	rbit	r3, r3
 800700e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8007010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007012:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8007014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007016:	2b00      	cmp	r3, #0
 8007018:	d101      	bne.n	800701e <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 800701a:	2320      	movs	r3, #32
 800701c:	e003      	b.n	8007026 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 800701e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007020:	fab3 f383 	clz	r3, r3
 8007024:	b2db      	uxtb	r3, r3
 8007026:	3301      	adds	r3, #1
 8007028:	f003 021f 	and.w	r2, r3, #31
 800702c:	4613      	mov	r3, r2
 800702e:	005b      	lsls	r3, r3, #1
 8007030:	4413      	add	r3, r2
 8007032:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007034:	430b      	orrs	r3, r1
 8007036:	e080      	b.n	800713a <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007040:	2b00      	cmp	r3, #0
 8007042:	d107      	bne.n	8007054 <HAL_ADC_ConfigChannel+0x5ec>
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	0e9b      	lsrs	r3, r3, #26
 800704a:	3301      	adds	r3, #1
 800704c:	069b      	lsls	r3, r3, #26
 800704e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007052:	e015      	b.n	8007080 <HAL_ADC_ConfigChannel+0x618>
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800705a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800705c:	fa93 f3a3 	rbit	r3, r3
 8007060:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8007062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007064:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8007066:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007068:	2b00      	cmp	r3, #0
 800706a:	d101      	bne.n	8007070 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 800706c:	2320      	movs	r3, #32
 800706e:	e003      	b.n	8007078 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8007070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007072:	fab3 f383 	clz	r3, r3
 8007076:	b2db      	uxtb	r3, r3
 8007078:	3301      	adds	r3, #1
 800707a:	069b      	lsls	r3, r3, #26
 800707c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007088:	2b00      	cmp	r3, #0
 800708a:	d109      	bne.n	80070a0 <HAL_ADC_ConfigChannel+0x638>
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	0e9b      	lsrs	r3, r3, #26
 8007092:	3301      	adds	r3, #1
 8007094:	f003 031f 	and.w	r3, r3, #31
 8007098:	2101      	movs	r1, #1
 800709a:	fa01 f303 	lsl.w	r3, r1, r3
 800709e:	e017      	b.n	80070d0 <HAL_ADC_ConfigChannel+0x668>
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070a6:	69fb      	ldr	r3, [r7, #28]
 80070a8:	fa93 f3a3 	rbit	r3, r3
 80070ac:	61bb      	str	r3, [r7, #24]
  return result;
 80070ae:	69bb      	ldr	r3, [r7, #24]
 80070b0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80070b2:	6a3b      	ldr	r3, [r7, #32]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d101      	bne.n	80070bc <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80070b8:	2320      	movs	r3, #32
 80070ba:	e003      	b.n	80070c4 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80070bc:	6a3b      	ldr	r3, [r7, #32]
 80070be:	fab3 f383 	clz	r3, r3
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	3301      	adds	r3, #1
 80070c6:	f003 031f 	and.w	r3, r3, #31
 80070ca:	2101      	movs	r1, #1
 80070cc:	fa01 f303 	lsl.w	r3, r1, r3
 80070d0:	ea42 0103 	orr.w	r1, r2, r3
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d10d      	bne.n	80070fc <HAL_ADC_ConfigChannel+0x694>
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	0e9b      	lsrs	r3, r3, #26
 80070e6:	3301      	adds	r3, #1
 80070e8:	f003 021f 	and.w	r2, r3, #31
 80070ec:	4613      	mov	r3, r2
 80070ee:	005b      	lsls	r3, r3, #1
 80070f0:	4413      	add	r3, r2
 80070f2:	3b1e      	subs	r3, #30
 80070f4:	051b      	lsls	r3, r3, #20
 80070f6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80070fa:	e01d      	b.n	8007138 <HAL_ADC_ConfigChannel+0x6d0>
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	fa93 f3a3 	rbit	r3, r3
 8007108:	60fb      	str	r3, [r7, #12]
  return result;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d103      	bne.n	800711c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8007114:	2320      	movs	r3, #32
 8007116:	e005      	b.n	8007124 <HAL_ADC_ConfigChannel+0x6bc>
 8007118:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	fab3 f383 	clz	r3, r3
 8007122:	b2db      	uxtb	r3, r3
 8007124:	3301      	adds	r3, #1
 8007126:	f003 021f 	and.w	r2, r3, #31
 800712a:	4613      	mov	r3, r2
 800712c:	005b      	lsls	r3, r3, #1
 800712e:	4413      	add	r3, r2
 8007130:	3b1e      	subs	r3, #30
 8007132:	051b      	lsls	r3, r3, #20
 8007134:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007138:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800713a:	683a      	ldr	r2, [r7, #0]
 800713c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800713e:	4619      	mov	r1, r3
 8007140:	f7fe ff2e 	bl	8005fa0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	681a      	ldr	r2, [r3, #0]
 8007148:	4b44      	ldr	r3, [pc, #272]	@ (800725c <HAL_ADC_ConfigChannel+0x7f4>)
 800714a:	4013      	ands	r3, r2
 800714c:	2b00      	cmp	r3, #0
 800714e:	d07a      	beq.n	8007246 <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007150:	4843      	ldr	r0, [pc, #268]	@ (8007260 <HAL_ADC_ConfigChannel+0x7f8>)
 8007152:	f7fe fe5d 	bl	8005e10 <LL_ADC_GetCommonPathInternalCh>
 8007156:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a41      	ldr	r2, [pc, #260]	@ (8007264 <HAL_ADC_ConfigChannel+0x7fc>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d12c      	bne.n	80071be <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007164:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007168:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800716c:	2b00      	cmp	r3, #0
 800716e:	d126      	bne.n	80071be <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a3c      	ldr	r2, [pc, #240]	@ (8007268 <HAL_ADC_ConfigChannel+0x800>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d004      	beq.n	8007184 <HAL_ADC_ConfigChannel+0x71c>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a3b      	ldr	r2, [pc, #236]	@ (800726c <HAL_ADC_ConfigChannel+0x804>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d15d      	bne.n	8007240 <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007184:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007188:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800718c:	4619      	mov	r1, r3
 800718e:	4834      	ldr	r0, [pc, #208]	@ (8007260 <HAL_ADC_ConfigChannel+0x7f8>)
 8007190:	f7fe fe2b 	bl	8005dea <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007194:	4b36      	ldr	r3, [pc, #216]	@ (8007270 <HAL_ADC_ConfigChannel+0x808>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	099b      	lsrs	r3, r3, #6
 800719a:	4a36      	ldr	r2, [pc, #216]	@ (8007274 <HAL_ADC_ConfigChannel+0x80c>)
 800719c:	fba2 2303 	umull	r2, r3, r2, r3
 80071a0:	099b      	lsrs	r3, r3, #6
 80071a2:	1c5a      	adds	r2, r3, #1
 80071a4:	4613      	mov	r3, r2
 80071a6:	005b      	lsls	r3, r3, #1
 80071a8:	4413      	add	r3, r2
 80071aa:	009b      	lsls	r3, r3, #2
 80071ac:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80071ae:	e002      	b.n	80071b6 <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	3b01      	subs	r3, #1
 80071b4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d1f9      	bne.n	80071b0 <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80071bc:	e040      	b.n	8007240 <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a2d      	ldr	r2, [pc, #180]	@ (8007278 <HAL_ADC_ConfigChannel+0x810>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d118      	bne.n	80071fa <HAL_ADC_ConfigChannel+0x792>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80071c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80071cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d112      	bne.n	80071fa <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a23      	ldr	r2, [pc, #140]	@ (8007268 <HAL_ADC_ConfigChannel+0x800>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d004      	beq.n	80071e8 <HAL_ADC_ConfigChannel+0x780>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a22      	ldr	r2, [pc, #136]	@ (800726c <HAL_ADC_ConfigChannel+0x804>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d12d      	bne.n	8007244 <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80071e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80071ec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80071f0:	4619      	mov	r1, r3
 80071f2:	481b      	ldr	r0, [pc, #108]	@ (8007260 <HAL_ADC_ConfigChannel+0x7f8>)
 80071f4:	f7fe fdf9 	bl	8005dea <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80071f8:	e024      	b.n	8007244 <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a1f      	ldr	r2, [pc, #124]	@ (800727c <HAL_ADC_ConfigChannel+0x814>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d120      	bne.n	8007246 <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007204:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007208:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800720c:	2b00      	cmp	r3, #0
 800720e:	d11a      	bne.n	8007246 <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a14      	ldr	r2, [pc, #80]	@ (8007268 <HAL_ADC_ConfigChannel+0x800>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d115      	bne.n	8007246 <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800721a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800721e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007222:	4619      	mov	r1, r3
 8007224:	480e      	ldr	r0, [pc, #56]	@ (8007260 <HAL_ADC_ConfigChannel+0x7f8>)
 8007226:	f7fe fde0 	bl	8005dea <LL_ADC_SetCommonPathInternalCh>
 800722a:	e00c      	b.n	8007246 <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007230:	f043 0220 	orr.w	r2, r3, #32
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8007238:	2301      	movs	r3, #1
 800723a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800723e:	e002      	b.n	8007246 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007240:	bf00      	nop
 8007242:	e000      	b.n	8007246 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007244:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2200      	movs	r2, #0
 800724a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 800724e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8007252:	4618      	mov	r0, r3
 8007254:	37d8      	adds	r7, #216	@ 0xd8
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}
 800725a:	bf00      	nop
 800725c:	80080000 	.word	0x80080000
 8007260:	50040300 	.word	0x50040300
 8007264:	c7520000 	.word	0xc7520000
 8007268:	50040000 	.word	0x50040000
 800726c:	50040200 	.word	0x50040200
 8007270:	20000398 	.word	0x20000398
 8007274:	053e2d63 	.word	0x053e2d63
 8007278:	cb840000 	.word	0xcb840000
 800727c:	80000001 	.word	0x80000001

08007280 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b084      	sub	sp, #16
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8007288:	2300      	movs	r3, #0
 800728a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4618      	mov	r0, r3
 8007292:	f7fe ff53 	bl	800613c <LL_ADC_IsEnabled>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	d169      	bne.n	8007370 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	689a      	ldr	r2, [r3, #8]
 80072a2:	4b36      	ldr	r3, [pc, #216]	@ (800737c <ADC_Enable+0xfc>)
 80072a4:	4013      	ands	r3, r2
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d00d      	beq.n	80072c6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072ae:	f043 0210 	orr.w	r2, r3, #16
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072ba:	f043 0201 	orr.w	r2, r3, #1
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	e055      	b.n	8007372 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4618      	mov	r0, r3
 80072cc:	f7fe ff22 	bl	8006114 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80072d0:	482b      	ldr	r0, [pc, #172]	@ (8007380 <ADC_Enable+0x100>)
 80072d2:	f7fe fd9d 	bl	8005e10 <LL_ADC_GetCommonPathInternalCh>
 80072d6:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80072d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d013      	beq.n	8007308 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80072e0:	4b28      	ldr	r3, [pc, #160]	@ (8007384 <ADC_Enable+0x104>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	099b      	lsrs	r3, r3, #6
 80072e6:	4a28      	ldr	r2, [pc, #160]	@ (8007388 <ADC_Enable+0x108>)
 80072e8:	fba2 2303 	umull	r2, r3, r2, r3
 80072ec:	099b      	lsrs	r3, r3, #6
 80072ee:	1c5a      	adds	r2, r3, #1
 80072f0:	4613      	mov	r3, r2
 80072f2:	005b      	lsls	r3, r3, #1
 80072f4:	4413      	add	r3, r2
 80072f6:	009b      	lsls	r3, r3, #2
 80072f8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80072fa:	e002      	b.n	8007302 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	3b01      	subs	r3, #1
 8007300:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d1f9      	bne.n	80072fc <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8007308:	f7fe fd30 	bl	8005d6c <HAL_GetTick>
 800730c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800730e:	e028      	b.n	8007362 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4618      	mov	r0, r3
 8007316:	f7fe ff11 	bl	800613c <LL_ADC_IsEnabled>
 800731a:	4603      	mov	r3, r0
 800731c:	2b00      	cmp	r3, #0
 800731e:	d104      	bne.n	800732a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4618      	mov	r0, r3
 8007326:	f7fe fef5 	bl	8006114 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800732a:	f7fe fd1f 	bl	8005d6c <HAL_GetTick>
 800732e:	4602      	mov	r2, r0
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	1ad3      	subs	r3, r2, r3
 8007334:	2b02      	cmp	r3, #2
 8007336:	d914      	bls.n	8007362 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f003 0301 	and.w	r3, r3, #1
 8007342:	2b01      	cmp	r3, #1
 8007344:	d00d      	beq.n	8007362 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800734a:	f043 0210 	orr.w	r2, r3, #16
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007356:	f043 0201 	orr.w	r2, r3, #1
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800735e:	2301      	movs	r3, #1
 8007360:	e007      	b.n	8007372 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f003 0301 	and.w	r3, r3, #1
 800736c:	2b01      	cmp	r3, #1
 800736e:	d1cf      	bne.n	8007310 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007370:	2300      	movs	r3, #0
}
 8007372:	4618      	mov	r0, r3
 8007374:	3710      	adds	r7, #16
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
 800737a:	bf00      	nop
 800737c:	8000003f 	.word	0x8000003f
 8007380:	50040300 	.word	0x50040300
 8007384:	20000398 	.word	0x20000398
 8007388:	053e2d63 	.word	0x053e2d63

0800738c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b084      	sub	sp, #16
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007398:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800739e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d14b      	bne.n	800743e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073aa:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f003 0308 	and.w	r3, r3, #8
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d021      	beq.n	8007404 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4618      	mov	r0, r3
 80073c6:	f7fe fd99 	bl	8005efc <LL_ADC_REG_IsTriggerSourceSWStart>
 80073ca:	4603      	mov	r3, r0
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d032      	beq.n	8007436 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	68db      	ldr	r3, [r3, #12]
 80073d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d12b      	bne.n	8007436 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073e2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	659a      	str	r2, [r3, #88]	@ 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d11f      	bne.n	8007436 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073fa:	f043 0201 	orr.w	r2, r3, #1
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	659a      	str	r2, [r3, #88]	@ 0x58
 8007402:	e018      	b.n	8007436 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	68db      	ldr	r3, [r3, #12]
 800740a:	f003 0302 	and.w	r3, r3, #2
 800740e:	2b00      	cmp	r3, #0
 8007410:	d111      	bne.n	8007436 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007416:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007422:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007426:	2b00      	cmp	r3, #0
 8007428:	d105      	bne.n	8007436 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800742e:	f043 0201 	orr.w	r2, r3, #1
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007436:	68f8      	ldr	r0, [r7, #12]
 8007438:	f7fd fd18 	bl	8004e6c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800743c:	e00e      	b.n	800745c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007442:	f003 0310 	and.w	r3, r3, #16
 8007446:	2b00      	cmp	r3, #0
 8007448:	d003      	beq.n	8007452 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800744a:	68f8      	ldr	r0, [r7, #12]
 800744c:	f7ff fb02 	bl	8006a54 <HAL_ADC_ErrorCallback>
}
 8007450:	e004      	b.n	800745c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007456:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	4798      	blx	r3
}
 800745c:	bf00      	nop
 800745e:	3710      	adds	r7, #16
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b084      	sub	sp, #16
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007470:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007472:	68f8      	ldr	r0, [r7, #12]
 8007474:	f7ff fada 	bl	8006a2c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007478:	bf00      	nop
 800747a:	3710      	adds	r7, #16
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b084      	sub	sp, #16
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800748c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007492:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800749e:	f043 0204 	orr.w	r2, r3, #4
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80074a6:	68f8      	ldr	r0, [r7, #12]
 80074a8:	f7ff fad4 	bl	8006a54 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80074ac:	bf00      	nop
 80074ae:	3710      	adds	r7, #16
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <LL_ADC_IsEnabled>:
{
 80074b4:	b480      	push	{r7}
 80074b6:	b083      	sub	sp, #12
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	f003 0301 	and.w	r3, r3, #1
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d101      	bne.n	80074cc <LL_ADC_IsEnabled+0x18>
 80074c8:	2301      	movs	r3, #1
 80074ca:	e000      	b.n	80074ce <LL_ADC_IsEnabled+0x1a>
 80074cc:	2300      	movs	r3, #0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	370c      	adds	r7, #12
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr

080074da <LL_ADC_REG_IsConversionOngoing>:
{
 80074da:	b480      	push	{r7}
 80074dc:	b083      	sub	sp, #12
 80074de:	af00      	add	r7, sp, #0
 80074e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	689b      	ldr	r3, [r3, #8]
 80074e6:	f003 0304 	and.w	r3, r3, #4
 80074ea:	2b04      	cmp	r3, #4
 80074ec:	d101      	bne.n	80074f2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80074ee:	2301      	movs	r3, #1
 80074f0:	e000      	b.n	80074f4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80074f2:	2300      	movs	r3, #0
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	370c      	adds	r7, #12
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr

08007500 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007500:	b480      	push	{r7}
 8007502:	b083      	sub	sp, #12
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8007508:	bf00      	nop
 800750a:	370c      	adds	r7, #12
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr

08007514 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8007514:	b480      	push	{r7}
 8007516:	b083      	sub	sp, #12
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800751c:	bf00      	nop
 800751e:	370c      	adds	r7, #12
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr

08007528 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8007528:	b480      	push	{r7}
 800752a:	b083      	sub	sp, #12
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8007530:	bf00      	nop
 8007532:	370c      	adds	r7, #12
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr

0800753c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800753c:	b480      	push	{r7}
 800753e:	b083      	sub	sp, #12
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8007544:	bf00      	nop
 8007546:	370c      	adds	r7, #12
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr

08007550 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8007550:	b480      	push	{r7}
 8007552:	b083      	sub	sp, #12
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8007558:	bf00      	nop
 800755a:	370c      	adds	r7, #12
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8007564:	b590      	push	{r4, r7, lr}
 8007566:	b0a1      	sub	sp, #132	@ 0x84
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800756e:	2300      	movs	r3, #0
 8007570:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800757a:	2b01      	cmp	r3, #1
 800757c:	d101      	bne.n	8007582 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800757e:	2302      	movs	r3, #2
 8007580:	e093      	b.n	80076aa <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2201      	movs	r2, #1
 8007586:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800758a:	2300      	movs	r3, #0
 800758c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800758e:	2300      	movs	r3, #0
 8007590:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a47      	ldr	r2, [pc, #284]	@ (80076b4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d102      	bne.n	80075a2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800759c:	4b46      	ldr	r3, [pc, #280]	@ (80076b8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800759e:	60fb      	str	r3, [r7, #12]
 80075a0:	e001      	b.n	80075a6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80075a2:	2300      	movs	r3, #0
 80075a4:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d10b      	bne.n	80075c4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075b0:	f043 0220 	orr.w	r2, r3, #32
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2200      	movs	r2, #0
 80075bc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_ERROR;
 80075c0:	2301      	movs	r3, #1
 80075c2:	e072      	b.n	80076aa <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	4618      	mov	r0, r3
 80075c8:	f7ff ff87 	bl	80074da <LL_ADC_REG_IsConversionOngoing>
 80075cc:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4618      	mov	r0, r3
 80075d4:	f7ff ff81 	bl	80074da <LL_ADC_REG_IsConversionOngoing>
 80075d8:	4603      	mov	r3, r0
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d154      	bne.n	8007688 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80075de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d151      	bne.n	8007688 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80075e4:	4b35      	ldr	r3, [pc, #212]	@ (80076bc <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80075e6:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d02c      	beq.n	800764a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80075f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80075f2:	689b      	ldr	r3, [r3, #8]
 80075f4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	6859      	ldr	r1, [r3, #4]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007602:	035b      	lsls	r3, r3, #13
 8007604:	430b      	orrs	r3, r1
 8007606:	431a      	orrs	r2, r3
 8007608:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800760a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800760c:	4829      	ldr	r0, [pc, #164]	@ (80076b4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800760e:	f7ff ff51 	bl	80074b4 <LL_ADC_IsEnabled>
 8007612:	4604      	mov	r4, r0
 8007614:	4828      	ldr	r0, [pc, #160]	@ (80076b8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8007616:	f7ff ff4d 	bl	80074b4 <LL_ADC_IsEnabled>
 800761a:	4603      	mov	r3, r0
 800761c:	431c      	orrs	r4, r3
 800761e:	4828      	ldr	r0, [pc, #160]	@ (80076c0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8007620:	f7ff ff48 	bl	80074b4 <LL_ADC_IsEnabled>
 8007624:	4603      	mov	r3, r0
 8007626:	4323      	orrs	r3, r4
 8007628:	2b00      	cmp	r3, #0
 800762a:	d137      	bne.n	800769c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800762c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800762e:	689b      	ldr	r3, [r3, #8]
 8007630:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8007634:	f023 030f 	bic.w	r3, r3, #15
 8007638:	683a      	ldr	r2, [r7, #0]
 800763a:	6811      	ldr	r1, [r2, #0]
 800763c:	683a      	ldr	r2, [r7, #0]
 800763e:	6892      	ldr	r2, [r2, #8]
 8007640:	430a      	orrs	r2, r1
 8007642:	431a      	orrs	r2, r3
 8007644:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007646:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007648:	e028      	b.n	800769c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800764a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007652:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007654:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007656:	4817      	ldr	r0, [pc, #92]	@ (80076b4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8007658:	f7ff ff2c 	bl	80074b4 <LL_ADC_IsEnabled>
 800765c:	4604      	mov	r4, r0
 800765e:	4816      	ldr	r0, [pc, #88]	@ (80076b8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8007660:	f7ff ff28 	bl	80074b4 <LL_ADC_IsEnabled>
 8007664:	4603      	mov	r3, r0
 8007666:	431c      	orrs	r4, r3
 8007668:	4815      	ldr	r0, [pc, #84]	@ (80076c0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800766a:	f7ff ff23 	bl	80074b4 <LL_ADC_IsEnabled>
 800766e:	4603      	mov	r3, r0
 8007670:	4323      	orrs	r3, r4
 8007672:	2b00      	cmp	r3, #0
 8007674:	d112      	bne.n	800769c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8007676:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007678:	689b      	ldr	r3, [r3, #8]
 800767a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800767e:	f023 030f 	bic.w	r3, r3, #15
 8007682:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8007684:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007686:	e009      	b.n	800769c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800768c:	f043 0220 	orr.w	r2, r3, #32
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800769a:	e000      	b.n	800769e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800769c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2200      	movs	r2, #0
 80076a2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80076a6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3784      	adds	r7, #132	@ 0x84
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd90      	pop	{r4, r7, pc}
 80076b2:	bf00      	nop
 80076b4:	50040000 	.word	0x50040000
 80076b8:	50040100 	.word	0x50040100
 80076bc:	50040300 	.word	0x50040300
 80076c0:	50040200 	.word	0x50040200

080076c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b085      	sub	sp, #20
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f003 0307 	and.w	r3, r3, #7
 80076d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80076d4:	4b0c      	ldr	r3, [pc, #48]	@ (8007708 <__NVIC_SetPriorityGrouping+0x44>)
 80076d6:	68db      	ldr	r3, [r3, #12]
 80076d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80076da:	68ba      	ldr	r2, [r7, #8]
 80076dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80076e0:	4013      	ands	r3, r2
 80076e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80076ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80076f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80076f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80076f6:	4a04      	ldr	r2, [pc, #16]	@ (8007708 <__NVIC_SetPriorityGrouping+0x44>)
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	60d3      	str	r3, [r2, #12]
}
 80076fc:	bf00      	nop
 80076fe:	3714      	adds	r7, #20
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr
 8007708:	e000ed00 	.word	0xe000ed00

0800770c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800770c:	b480      	push	{r7}
 800770e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007710:	4b04      	ldr	r3, [pc, #16]	@ (8007724 <__NVIC_GetPriorityGrouping+0x18>)
 8007712:	68db      	ldr	r3, [r3, #12]
 8007714:	0a1b      	lsrs	r3, r3, #8
 8007716:	f003 0307 	and.w	r3, r3, #7
}
 800771a:	4618      	mov	r0, r3
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr
 8007724:	e000ed00 	.word	0xe000ed00

08007728 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007728:	b480      	push	{r7}
 800772a:	b083      	sub	sp, #12
 800772c:	af00      	add	r7, sp, #0
 800772e:	4603      	mov	r3, r0
 8007730:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007736:	2b00      	cmp	r3, #0
 8007738:	db0b      	blt.n	8007752 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800773a:	79fb      	ldrb	r3, [r7, #7]
 800773c:	f003 021f 	and.w	r2, r3, #31
 8007740:	4907      	ldr	r1, [pc, #28]	@ (8007760 <__NVIC_EnableIRQ+0x38>)
 8007742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007746:	095b      	lsrs	r3, r3, #5
 8007748:	2001      	movs	r0, #1
 800774a:	fa00 f202 	lsl.w	r2, r0, r2
 800774e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007752:	bf00      	nop
 8007754:	370c      	adds	r7, #12
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr
 800775e:	bf00      	nop
 8007760:	e000e100 	.word	0xe000e100

08007764 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007764:	b480      	push	{r7}
 8007766:	b083      	sub	sp, #12
 8007768:	af00      	add	r7, sp, #0
 800776a:	4603      	mov	r3, r0
 800776c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800776e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007772:	2b00      	cmp	r3, #0
 8007774:	db12      	blt.n	800779c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007776:	79fb      	ldrb	r3, [r7, #7]
 8007778:	f003 021f 	and.w	r2, r3, #31
 800777c:	490a      	ldr	r1, [pc, #40]	@ (80077a8 <__NVIC_DisableIRQ+0x44>)
 800777e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007782:	095b      	lsrs	r3, r3, #5
 8007784:	2001      	movs	r0, #1
 8007786:	fa00 f202 	lsl.w	r2, r0, r2
 800778a:	3320      	adds	r3, #32
 800778c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8007790:	f3bf 8f4f 	dsb	sy
}
 8007794:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007796:	f3bf 8f6f 	isb	sy
}
 800779a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800779c:	bf00      	nop
 800779e:	370c      	adds	r7, #12
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr
 80077a8:	e000e100 	.word	0xe000e100

080077ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	4603      	mov	r3, r0
 80077b4:	6039      	str	r1, [r7, #0]
 80077b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80077b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	db0a      	blt.n	80077d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	b2da      	uxtb	r2, r3
 80077c4:	490c      	ldr	r1, [pc, #48]	@ (80077f8 <__NVIC_SetPriority+0x4c>)
 80077c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077ca:	0112      	lsls	r2, r2, #4
 80077cc:	b2d2      	uxtb	r2, r2
 80077ce:	440b      	add	r3, r1
 80077d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80077d4:	e00a      	b.n	80077ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	b2da      	uxtb	r2, r3
 80077da:	4908      	ldr	r1, [pc, #32]	@ (80077fc <__NVIC_SetPriority+0x50>)
 80077dc:	79fb      	ldrb	r3, [r7, #7]
 80077de:	f003 030f 	and.w	r3, r3, #15
 80077e2:	3b04      	subs	r3, #4
 80077e4:	0112      	lsls	r2, r2, #4
 80077e6:	b2d2      	uxtb	r2, r2
 80077e8:	440b      	add	r3, r1
 80077ea:	761a      	strb	r2, [r3, #24]
}
 80077ec:	bf00      	nop
 80077ee:	370c      	adds	r7, #12
 80077f0:	46bd      	mov	sp, r7
 80077f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f6:	4770      	bx	lr
 80077f8:	e000e100 	.word	0xe000e100
 80077fc:	e000ed00 	.word	0xe000ed00

08007800 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007800:	b480      	push	{r7}
 8007802:	b089      	sub	sp, #36	@ 0x24
 8007804:	af00      	add	r7, sp, #0
 8007806:	60f8      	str	r0, [r7, #12]
 8007808:	60b9      	str	r1, [r7, #8]
 800780a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f003 0307 	and.w	r3, r3, #7
 8007812:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007814:	69fb      	ldr	r3, [r7, #28]
 8007816:	f1c3 0307 	rsb	r3, r3, #7
 800781a:	2b04      	cmp	r3, #4
 800781c:	bf28      	it	cs
 800781e:	2304      	movcs	r3, #4
 8007820:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007822:	69fb      	ldr	r3, [r7, #28]
 8007824:	3304      	adds	r3, #4
 8007826:	2b06      	cmp	r3, #6
 8007828:	d902      	bls.n	8007830 <NVIC_EncodePriority+0x30>
 800782a:	69fb      	ldr	r3, [r7, #28]
 800782c:	3b03      	subs	r3, #3
 800782e:	e000      	b.n	8007832 <NVIC_EncodePriority+0x32>
 8007830:	2300      	movs	r3, #0
 8007832:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007834:	f04f 32ff 	mov.w	r2, #4294967295
 8007838:	69bb      	ldr	r3, [r7, #24]
 800783a:	fa02 f303 	lsl.w	r3, r2, r3
 800783e:	43da      	mvns	r2, r3
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	401a      	ands	r2, r3
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007848:	f04f 31ff 	mov.w	r1, #4294967295
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	fa01 f303 	lsl.w	r3, r1, r3
 8007852:	43d9      	mvns	r1, r3
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007858:	4313      	orrs	r3, r2
         );
}
 800785a:	4618      	mov	r0, r3
 800785c:	3724      	adds	r7, #36	@ 0x24
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr
	...

08007868 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b082      	sub	sp, #8
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	3b01      	subs	r3, #1
 8007874:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007878:	d301      	bcc.n	800787e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800787a:	2301      	movs	r3, #1
 800787c:	e00f      	b.n	800789e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800787e:	4a0a      	ldr	r2, [pc, #40]	@ (80078a8 <SysTick_Config+0x40>)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	3b01      	subs	r3, #1
 8007884:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007886:	210f      	movs	r1, #15
 8007888:	f04f 30ff 	mov.w	r0, #4294967295
 800788c:	f7ff ff8e 	bl	80077ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007890:	4b05      	ldr	r3, [pc, #20]	@ (80078a8 <SysTick_Config+0x40>)
 8007892:	2200      	movs	r2, #0
 8007894:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007896:	4b04      	ldr	r3, [pc, #16]	@ (80078a8 <SysTick_Config+0x40>)
 8007898:	2207      	movs	r2, #7
 800789a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800789c:	2300      	movs	r3, #0
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3708      	adds	r7, #8
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}
 80078a6:	bf00      	nop
 80078a8:	e000e010 	.word	0xe000e010

080078ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b082      	sub	sp, #8
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f7ff ff05 	bl	80076c4 <__NVIC_SetPriorityGrouping>
}
 80078ba:	bf00      	nop
 80078bc:	3708      	adds	r7, #8
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}

080078c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80078c2:	b580      	push	{r7, lr}
 80078c4:	b086      	sub	sp, #24
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	4603      	mov	r3, r0
 80078ca:	60b9      	str	r1, [r7, #8]
 80078cc:	607a      	str	r2, [r7, #4]
 80078ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80078d0:	2300      	movs	r3, #0
 80078d2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80078d4:	f7ff ff1a 	bl	800770c <__NVIC_GetPriorityGrouping>
 80078d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80078da:	687a      	ldr	r2, [r7, #4]
 80078dc:	68b9      	ldr	r1, [r7, #8]
 80078de:	6978      	ldr	r0, [r7, #20]
 80078e0:	f7ff ff8e 	bl	8007800 <NVIC_EncodePriority>
 80078e4:	4602      	mov	r2, r0
 80078e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078ea:	4611      	mov	r1, r2
 80078ec:	4618      	mov	r0, r3
 80078ee:	f7ff ff5d 	bl	80077ac <__NVIC_SetPriority>
}
 80078f2:	bf00      	nop
 80078f4:	3718      	adds	r7, #24
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}

080078fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80078fa:	b580      	push	{r7, lr}
 80078fc:	b082      	sub	sp, #8
 80078fe:	af00      	add	r7, sp, #0
 8007900:	4603      	mov	r3, r0
 8007902:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007908:	4618      	mov	r0, r3
 800790a:	f7ff ff0d 	bl	8007728 <__NVIC_EnableIRQ>
}
 800790e:	bf00      	nop
 8007910:	3708      	adds	r7, #8
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}

08007916 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007916:	b580      	push	{r7, lr}
 8007918:	b082      	sub	sp, #8
 800791a:	af00      	add	r7, sp, #0
 800791c:	4603      	mov	r3, r0
 800791e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007924:	4618      	mov	r0, r3
 8007926:	f7ff ff1d 	bl	8007764 <__NVIC_DisableIRQ>
}
 800792a:	bf00      	nop
 800792c:	3708      	adds	r7, #8
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}

08007932 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007932:	b580      	push	{r7, lr}
 8007934:	b082      	sub	sp, #8
 8007936:	af00      	add	r7, sp, #0
 8007938:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f7ff ff94 	bl	8007868 <SysTick_Config>
 8007940:	4603      	mov	r3, r0
}
 8007942:	4618      	mov	r0, r3
 8007944:	3708      	adds	r7, #8
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}
	...

0800794c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800794c:	b480      	push	{r7}
 800794e:	b085      	sub	sp, #20
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d101      	bne.n	800795e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800795a:	2301      	movs	r3, #1
 800795c:	e098      	b.n	8007a90 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	461a      	mov	r2, r3
 8007964:	4b4d      	ldr	r3, [pc, #308]	@ (8007a9c <HAL_DMA_Init+0x150>)
 8007966:	429a      	cmp	r2, r3
 8007968:	d80f      	bhi.n	800798a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	461a      	mov	r2, r3
 8007970:	4b4b      	ldr	r3, [pc, #300]	@ (8007aa0 <HAL_DMA_Init+0x154>)
 8007972:	4413      	add	r3, r2
 8007974:	4a4b      	ldr	r2, [pc, #300]	@ (8007aa4 <HAL_DMA_Init+0x158>)
 8007976:	fba2 2303 	umull	r2, r3, r2, r3
 800797a:	091b      	lsrs	r3, r3, #4
 800797c:	009a      	lsls	r2, r3, #2
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	4a48      	ldr	r2, [pc, #288]	@ (8007aa8 <HAL_DMA_Init+0x15c>)
 8007986:	641a      	str	r2, [r3, #64]	@ 0x40
 8007988:	e00e      	b.n	80079a8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	461a      	mov	r2, r3
 8007990:	4b46      	ldr	r3, [pc, #280]	@ (8007aac <HAL_DMA_Init+0x160>)
 8007992:	4413      	add	r3, r2
 8007994:	4a43      	ldr	r2, [pc, #268]	@ (8007aa4 <HAL_DMA_Init+0x158>)
 8007996:	fba2 2303 	umull	r2, r3, r2, r3
 800799a:	091b      	lsrs	r3, r3, #4
 800799c:	009a      	lsls	r2, r3, #2
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	4a42      	ldr	r2, [pc, #264]	@ (8007ab0 <HAL_DMA_Init+0x164>)
 80079a6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2202      	movs	r2, #2
 80079ac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80079be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079c2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80079cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	691b      	ldr	r3, [r3, #16]
 80079d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80079d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	699b      	ldr	r3, [r3, #24]
 80079de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80079e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6a1b      	ldr	r3, [r3, #32]
 80079ea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80079ec:	68fa      	ldr	r2, [r7, #12]
 80079ee:	4313      	orrs	r3, r2
 80079f0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	68fa      	ldr	r2, [r7, #12]
 80079f8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	689b      	ldr	r3, [r3, #8]
 80079fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007a02:	d039      	beq.n	8007a78 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a08:	4a27      	ldr	r2, [pc, #156]	@ (8007aa8 <HAL_DMA_Init+0x15c>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d11a      	bne.n	8007a44 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8007a0e:	4b29      	ldr	r3, [pc, #164]	@ (8007ab4 <HAL_DMA_Init+0x168>)
 8007a10:	681a      	ldr	r2, [r3, #0]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a16:	f003 031c 	and.w	r3, r3, #28
 8007a1a:	210f      	movs	r1, #15
 8007a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8007a20:	43db      	mvns	r3, r3
 8007a22:	4924      	ldr	r1, [pc, #144]	@ (8007ab4 <HAL_DMA_Init+0x168>)
 8007a24:	4013      	ands	r3, r2
 8007a26:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8007a28:	4b22      	ldr	r3, [pc, #136]	@ (8007ab4 <HAL_DMA_Init+0x168>)
 8007a2a:	681a      	ldr	r2, [r3, #0]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6859      	ldr	r1, [r3, #4]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a34:	f003 031c 	and.w	r3, r3, #28
 8007a38:	fa01 f303 	lsl.w	r3, r1, r3
 8007a3c:	491d      	ldr	r1, [pc, #116]	@ (8007ab4 <HAL_DMA_Init+0x168>)
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	600b      	str	r3, [r1, #0]
 8007a42:	e019      	b.n	8007a78 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8007a44:	4b1c      	ldr	r3, [pc, #112]	@ (8007ab8 <HAL_DMA_Init+0x16c>)
 8007a46:	681a      	ldr	r2, [r3, #0]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a4c:	f003 031c 	and.w	r3, r3, #28
 8007a50:	210f      	movs	r1, #15
 8007a52:	fa01 f303 	lsl.w	r3, r1, r3
 8007a56:	43db      	mvns	r3, r3
 8007a58:	4917      	ldr	r1, [pc, #92]	@ (8007ab8 <HAL_DMA_Init+0x16c>)
 8007a5a:	4013      	ands	r3, r2
 8007a5c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8007a5e:	4b16      	ldr	r3, [pc, #88]	@ (8007ab8 <HAL_DMA_Init+0x16c>)
 8007a60:	681a      	ldr	r2, [r3, #0]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6859      	ldr	r1, [r3, #4]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a6a:	f003 031c 	and.w	r3, r3, #28
 8007a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8007a72:	4911      	ldr	r1, [pc, #68]	@ (8007ab8 <HAL_DMA_Init+0x16c>)
 8007a74:	4313      	orrs	r3, r2
 8007a76:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2201      	movs	r2, #1
 8007a82:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007a8e:	2300      	movs	r3, #0
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3714      	adds	r7, #20
 8007a94:	46bd      	mov	sp, r7
 8007a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9a:	4770      	bx	lr
 8007a9c:	40020407 	.word	0x40020407
 8007aa0:	bffdfff8 	.word	0xbffdfff8
 8007aa4:	cccccccd 	.word	0xcccccccd
 8007aa8:	40020000 	.word	0x40020000
 8007aac:	bffdfbf8 	.word	0xbffdfbf8
 8007ab0:	40020400 	.word	0x40020400
 8007ab4:	400200a8 	.word	0x400200a8
 8007ab8:	400204a8 	.word	0x400204a8

08007abc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b083      	sub	sp, #12
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d101      	bne.n	8007ace <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8007aca:	2301      	movs	r3, #1
 8007acc:	e072      	b.n	8007bb4 <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	681a      	ldr	r2, [r3, #0]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f022 0201 	bic.w	r2, r2, #1
 8007adc:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	4b36      	ldr	r3, [pc, #216]	@ (8007bc0 <HAL_DMA_DeInit+0x104>)
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	d80f      	bhi.n	8007b0a <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	461a      	mov	r2, r3
 8007af0:	4b34      	ldr	r3, [pc, #208]	@ (8007bc4 <HAL_DMA_DeInit+0x108>)
 8007af2:	4413      	add	r3, r2
 8007af4:	4a34      	ldr	r2, [pc, #208]	@ (8007bc8 <HAL_DMA_DeInit+0x10c>)
 8007af6:	fba2 2303 	umull	r2, r3, r2, r3
 8007afa:	091b      	lsrs	r3, r3, #4
 8007afc:	009a      	lsls	r2, r3, #2
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	4a31      	ldr	r2, [pc, #196]	@ (8007bcc <HAL_DMA_DeInit+0x110>)
 8007b06:	641a      	str	r2, [r3, #64]	@ 0x40
 8007b08:	e00e      	b.n	8007b28 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	461a      	mov	r2, r3
 8007b10:	4b2f      	ldr	r3, [pc, #188]	@ (8007bd0 <HAL_DMA_DeInit+0x114>)
 8007b12:	4413      	add	r3, r2
 8007b14:	4a2c      	ldr	r2, [pc, #176]	@ (8007bc8 <HAL_DMA_DeInit+0x10c>)
 8007b16:	fba2 2303 	umull	r2, r3, r2, r3
 8007b1a:	091b      	lsrs	r3, r3, #4
 8007b1c:	009a      	lsls	r2, r3, #2
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	4a2b      	ldr	r2, [pc, #172]	@ (8007bd4 <HAL_DMA_DeInit+0x118>)
 8007b26:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b34:	f003 021c 	and.w	r2, r3, #28
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b3c:	2101      	movs	r1, #1
 8007b3e:	fa01 f202 	lsl.w	r2, r1, r2
 8007b42:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b48:	4a20      	ldr	r2, [pc, #128]	@ (8007bcc <HAL_DMA_DeInit+0x110>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d10d      	bne.n	8007b6a <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8007b4e:	4b22      	ldr	r3, [pc, #136]	@ (8007bd8 <HAL_DMA_DeInit+0x11c>)
 8007b50:	681a      	ldr	r2, [r3, #0]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b56:	f003 031c 	and.w	r3, r3, #28
 8007b5a:	210f      	movs	r1, #15
 8007b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8007b60:	43db      	mvns	r3, r3
 8007b62:	491d      	ldr	r1, [pc, #116]	@ (8007bd8 <HAL_DMA_DeInit+0x11c>)
 8007b64:	4013      	ands	r3, r2
 8007b66:	600b      	str	r3, [r1, #0]
 8007b68:	e00c      	b.n	8007b84 <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8007b6a:	4b1c      	ldr	r3, [pc, #112]	@ (8007bdc <HAL_DMA_DeInit+0x120>)
 8007b6c:	681a      	ldr	r2, [r3, #0]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b72:	f003 031c 	and.w	r3, r3, #28
 8007b76:	210f      	movs	r1, #15
 8007b78:	fa01 f303 	lsl.w	r3, r1, r3
 8007b7c:	43db      	mvns	r3, r3
 8007b7e:	4917      	ldr	r1, [pc, #92]	@ (8007bdc <HAL_DMA_DeInit+0x120>)
 8007b80:	4013      	ands	r3, r2
 8007b82:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2200      	movs	r2, #0
 8007b88:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2200      	movs	r2, #0
 8007b94:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2200      	movs	r2, #0
 8007bae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007bb2:	2300      	movs	r3, #0
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	370c      	adds	r7, #12
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr
 8007bc0:	40020407 	.word	0x40020407
 8007bc4:	bffdfff8 	.word	0xbffdfff8
 8007bc8:	cccccccd 	.word	0xcccccccd
 8007bcc:	40020000 	.word	0x40020000
 8007bd0:	bffdfbf8 	.word	0xbffdfbf8
 8007bd4:	40020400 	.word	0x40020400
 8007bd8:	400200a8 	.word	0x400200a8
 8007bdc:	400204a8 	.word	0x400204a8

08007be0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b086      	sub	sp, #24
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	60f8      	str	r0, [r7, #12]
 8007be8:	60b9      	str	r1, [r7, #8]
 8007bea:	607a      	str	r2, [r7, #4]
 8007bec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d101      	bne.n	8007c00 <HAL_DMA_Start_IT+0x20>
 8007bfc:	2302      	movs	r3, #2
 8007bfe:	e04b      	b.n	8007c98 <HAL_DMA_Start_IT+0xb8>
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2201      	movs	r2, #1
 8007c04:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007c0e:	b2db      	uxtb	r3, r3
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	d13a      	bne.n	8007c8a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2202      	movs	r2, #2
 8007c18:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	681a      	ldr	r2, [r3, #0]
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f022 0201 	bic.w	r2, r2, #1
 8007c30:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	68b9      	ldr	r1, [r7, #8]
 8007c38:	68f8      	ldr	r0, [r7, #12]
 8007c3a:	f000 f96d 	bl	8007f18 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d008      	beq.n	8007c58 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	681a      	ldr	r2, [r3, #0]
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f042 020e 	orr.w	r2, r2, #14
 8007c54:	601a      	str	r2, [r3, #0]
 8007c56:	e00f      	b.n	8007c78 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	681a      	ldr	r2, [r3, #0]
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f022 0204 	bic.w	r2, r2, #4
 8007c66:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	681a      	ldr	r2, [r3, #0]
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f042 020a 	orr.w	r2, r2, #10
 8007c76:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	681a      	ldr	r2, [r3, #0]
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f042 0201 	orr.w	r2, r2, #1
 8007c86:	601a      	str	r2, [r3, #0]
 8007c88:	e005      	b.n	8007c96 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007c92:	2302      	movs	r3, #2
 8007c94:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007c96:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3718      	adds	r7, #24
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}

08007ca0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b085      	sub	sp, #20
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	2b02      	cmp	r3, #2
 8007cb6:	d008      	beq.n	8007cca <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2204      	movs	r2, #4
 8007cbc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	e022      	b.n	8007d10 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f022 020e 	bic.w	r2, r2, #14
 8007cd8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	681a      	ldr	r2, [r3, #0]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f022 0201 	bic.w	r2, r2, #1
 8007ce8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cee:	f003 021c 	and.w	r2, r3, #28
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cf6:	2101      	movs	r1, #1
 8007cf8:	fa01 f202 	lsl.w	r2, r1, r2
 8007cfc:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2201      	movs	r2, #1
 8007d02:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8007d0e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3714      	adds	r7, #20
 8007d14:	46bd      	mov	sp, r7
 8007d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1a:	4770      	bx	lr

08007d1c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b084      	sub	sp, #16
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d24:	2300      	movs	r3, #0
 8007d26:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007d2e:	b2db      	uxtb	r3, r3
 8007d30:	2b02      	cmp	r3, #2
 8007d32:	d005      	beq.n	8007d40 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2204      	movs	r2, #4
 8007d38:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	73fb      	strb	r3, [r7, #15]
 8007d3e:	e029      	b.n	8007d94 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	681a      	ldr	r2, [r3, #0]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f022 020e 	bic.w	r2, r2, #14
 8007d4e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	681a      	ldr	r2, [r3, #0]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f022 0201 	bic.w	r2, r2, #1
 8007d5e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d64:	f003 021c 	and.w	r2, r3, #28
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d6c:	2101      	movs	r1, #1
 8007d6e:	fa01 f202 	lsl.w	r2, r1, r2
 8007d72:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2201      	movs	r2, #1
 8007d78:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d003      	beq.n	8007d94 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	4798      	blx	r3
    }
  }
  return status;
 8007d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3710      	adds	r7, #16
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}

08007d9e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007d9e:	b580      	push	{r7, lr}
 8007da0:	b084      	sub	sp, #16
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007dba:	f003 031c 	and.w	r3, r3, #28
 8007dbe:	2204      	movs	r2, #4
 8007dc0:	409a      	lsls	r2, r3
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	4013      	ands	r3, r2
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d026      	beq.n	8007e18 <HAL_DMA_IRQHandler+0x7a>
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	f003 0304 	and.w	r3, r3, #4
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d021      	beq.n	8007e18 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f003 0320 	and.w	r3, r3, #32
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d107      	bne.n	8007df2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	681a      	ldr	r2, [r3, #0]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f022 0204 	bic.w	r2, r2, #4
 8007df0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007df6:	f003 021c 	and.w	r2, r3, #28
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dfe:	2104      	movs	r1, #4
 8007e00:	fa01 f202 	lsl.w	r2, r1, r2
 8007e04:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d071      	beq.n	8007ef2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8007e16:	e06c      	b.n	8007ef2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e1c:	f003 031c 	and.w	r3, r3, #28
 8007e20:	2202      	movs	r2, #2
 8007e22:	409a      	lsls	r2, r3
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	4013      	ands	r3, r2
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d02e      	beq.n	8007e8a <HAL_DMA_IRQHandler+0xec>
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	f003 0302 	and.w	r3, r3, #2
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d029      	beq.n	8007e8a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f003 0320 	and.w	r3, r3, #32
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d10b      	bne.n	8007e5c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	681a      	ldr	r2, [r3, #0]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f022 020a 	bic.w	r2, r2, #10
 8007e52:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2201      	movs	r2, #1
 8007e58:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e60:	f003 021c 	and.w	r2, r3, #28
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e68:	2102      	movs	r1, #2
 8007e6a:	fa01 f202 	lsl.w	r2, r1, r2
 8007e6e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2200      	movs	r2, #0
 8007e74:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d038      	beq.n	8007ef2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8007e88:	e033      	b.n	8007ef2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e8e:	f003 031c 	and.w	r3, r3, #28
 8007e92:	2208      	movs	r2, #8
 8007e94:	409a      	lsls	r2, r3
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	4013      	ands	r3, r2
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d02a      	beq.n	8007ef4 <HAL_DMA_IRQHandler+0x156>
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	f003 0308 	and.w	r3, r3, #8
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d025      	beq.n	8007ef4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	681a      	ldr	r2, [r3, #0]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f022 020e 	bic.w	r2, r2, #14
 8007eb6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ebc:	f003 021c 	and.w	r2, r3, #28
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ec4:	2101      	movs	r1, #1
 8007ec6:	fa01 f202 	lsl.w	r2, r1, r2
 8007eca:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2201      	movs	r2, #1
 8007ed0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2201      	movs	r2, #1
 8007ed6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2200      	movs	r2, #0
 8007ede:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d004      	beq.n	8007ef4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007ef2:	bf00      	nop
 8007ef4:	bf00      	nop
}
 8007ef6:	3710      	adds	r7, #16
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}

08007efc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b083      	sub	sp, #12
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007f0a:	b2db      	uxtb	r3, r3
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	370c      	adds	r7, #12
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr

08007f18 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b085      	sub	sp, #20
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	60f8      	str	r0, [r7, #12]
 8007f20:	60b9      	str	r1, [r7, #8]
 8007f22:	607a      	str	r2, [r7, #4]
 8007f24:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f2a:	f003 021c 	and.w	r2, r3, #28
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f32:	2101      	movs	r1, #1
 8007f34:	fa01 f202 	lsl.w	r2, r1, r2
 8007f38:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	683a      	ldr	r2, [r7, #0]
 8007f40:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	689b      	ldr	r3, [r3, #8]
 8007f46:	2b10      	cmp	r3, #16
 8007f48:	d108      	bne.n	8007f5c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	687a      	ldr	r2, [r7, #4]
 8007f50:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	68ba      	ldr	r2, [r7, #8]
 8007f58:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007f5a:	e007      	b.n	8007f6c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	68ba      	ldr	r2, [r7, #8]
 8007f62:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	687a      	ldr	r2, [r7, #4]
 8007f6a:	60da      	str	r2, [r3, #12]
}
 8007f6c:	bf00      	nop
 8007f6e:	3714      	adds	r7, #20
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr

08007f78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b087      	sub	sp, #28
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007f82:	2300      	movs	r3, #0
 8007f84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007f86:	e166      	b.n	8008256 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	681a      	ldr	r2, [r3, #0]
 8007f8c:	2101      	movs	r1, #1
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	fa01 f303 	lsl.w	r3, r1, r3
 8007f94:	4013      	ands	r3, r2
 8007f96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	f000 8158 	beq.w	8008250 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	f003 0303 	and.w	r3, r3, #3
 8007fa8:	2b01      	cmp	r3, #1
 8007faa:	d005      	beq.n	8007fb8 <HAL_GPIO_Init+0x40>
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	f003 0303 	and.w	r3, r3, #3
 8007fb4:	2b02      	cmp	r3, #2
 8007fb6:	d130      	bne.n	800801a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	689b      	ldr	r3, [r3, #8]
 8007fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	005b      	lsls	r3, r3, #1
 8007fc2:	2203      	movs	r2, #3
 8007fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8007fc8:	43db      	mvns	r3, r3
 8007fca:	693a      	ldr	r2, [r7, #16]
 8007fcc:	4013      	ands	r3, r2
 8007fce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	68da      	ldr	r2, [r3, #12]
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	005b      	lsls	r3, r3, #1
 8007fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8007fdc:	693a      	ldr	r2, [r7, #16]
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	693a      	ldr	r2, [r7, #16]
 8007fe6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007fee:	2201      	movs	r2, #1
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ff6:	43db      	mvns	r3, r3
 8007ff8:	693a      	ldr	r2, [r7, #16]
 8007ffa:	4013      	ands	r3, r2
 8007ffc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	685b      	ldr	r3, [r3, #4]
 8008002:	091b      	lsrs	r3, r3, #4
 8008004:	f003 0201 	and.w	r2, r3, #1
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	fa02 f303 	lsl.w	r3, r2, r3
 800800e:	693a      	ldr	r2, [r7, #16]
 8008010:	4313      	orrs	r3, r2
 8008012:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	693a      	ldr	r2, [r7, #16]
 8008018:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	f003 0303 	and.w	r3, r3, #3
 8008022:	2b03      	cmp	r3, #3
 8008024:	d017      	beq.n	8008056 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	68db      	ldr	r3, [r3, #12]
 800802a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	005b      	lsls	r3, r3, #1
 8008030:	2203      	movs	r2, #3
 8008032:	fa02 f303 	lsl.w	r3, r2, r3
 8008036:	43db      	mvns	r3, r3
 8008038:	693a      	ldr	r2, [r7, #16]
 800803a:	4013      	ands	r3, r2
 800803c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	689a      	ldr	r2, [r3, #8]
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	005b      	lsls	r3, r3, #1
 8008046:	fa02 f303 	lsl.w	r3, r2, r3
 800804a:	693a      	ldr	r2, [r7, #16]
 800804c:	4313      	orrs	r3, r2
 800804e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	693a      	ldr	r2, [r7, #16]
 8008054:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	f003 0303 	and.w	r3, r3, #3
 800805e:	2b02      	cmp	r3, #2
 8008060:	d123      	bne.n	80080aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	08da      	lsrs	r2, r3, #3
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	3208      	adds	r2, #8
 800806a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800806e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	f003 0307 	and.w	r3, r3, #7
 8008076:	009b      	lsls	r3, r3, #2
 8008078:	220f      	movs	r2, #15
 800807a:	fa02 f303 	lsl.w	r3, r2, r3
 800807e:	43db      	mvns	r3, r3
 8008080:	693a      	ldr	r2, [r7, #16]
 8008082:	4013      	ands	r3, r2
 8008084:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	691a      	ldr	r2, [r3, #16]
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	f003 0307 	and.w	r3, r3, #7
 8008090:	009b      	lsls	r3, r3, #2
 8008092:	fa02 f303 	lsl.w	r3, r2, r3
 8008096:	693a      	ldr	r2, [r7, #16]
 8008098:	4313      	orrs	r3, r2
 800809a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	08da      	lsrs	r2, r3, #3
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	3208      	adds	r2, #8
 80080a4:	6939      	ldr	r1, [r7, #16]
 80080a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80080b0:	697b      	ldr	r3, [r7, #20]
 80080b2:	005b      	lsls	r3, r3, #1
 80080b4:	2203      	movs	r2, #3
 80080b6:	fa02 f303 	lsl.w	r3, r2, r3
 80080ba:	43db      	mvns	r3, r3
 80080bc:	693a      	ldr	r2, [r7, #16]
 80080be:	4013      	ands	r3, r2
 80080c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	685b      	ldr	r3, [r3, #4]
 80080c6:	f003 0203 	and.w	r2, r3, #3
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	005b      	lsls	r3, r3, #1
 80080ce:	fa02 f303 	lsl.w	r3, r2, r3
 80080d2:	693a      	ldr	r2, [r7, #16]
 80080d4:	4313      	orrs	r3, r2
 80080d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	693a      	ldr	r2, [r7, #16]
 80080dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	f000 80b2 	beq.w	8008250 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80080ec:	4b61      	ldr	r3, [pc, #388]	@ (8008274 <HAL_GPIO_Init+0x2fc>)
 80080ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80080f0:	4a60      	ldr	r2, [pc, #384]	@ (8008274 <HAL_GPIO_Init+0x2fc>)
 80080f2:	f043 0301 	orr.w	r3, r3, #1
 80080f6:	6613      	str	r3, [r2, #96]	@ 0x60
 80080f8:	4b5e      	ldr	r3, [pc, #376]	@ (8008274 <HAL_GPIO_Init+0x2fc>)
 80080fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80080fc:	f003 0301 	and.w	r3, r3, #1
 8008100:	60bb      	str	r3, [r7, #8]
 8008102:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8008104:	4a5c      	ldr	r2, [pc, #368]	@ (8008278 <HAL_GPIO_Init+0x300>)
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	089b      	lsrs	r3, r3, #2
 800810a:	3302      	adds	r3, #2
 800810c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008110:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	f003 0303 	and.w	r3, r3, #3
 8008118:	009b      	lsls	r3, r3, #2
 800811a:	220f      	movs	r2, #15
 800811c:	fa02 f303 	lsl.w	r3, r2, r3
 8008120:	43db      	mvns	r3, r3
 8008122:	693a      	ldr	r2, [r7, #16]
 8008124:	4013      	ands	r3, r2
 8008126:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800812e:	d02b      	beq.n	8008188 <HAL_GPIO_Init+0x210>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	4a52      	ldr	r2, [pc, #328]	@ (800827c <HAL_GPIO_Init+0x304>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d025      	beq.n	8008184 <HAL_GPIO_Init+0x20c>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	4a51      	ldr	r2, [pc, #324]	@ (8008280 <HAL_GPIO_Init+0x308>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d01f      	beq.n	8008180 <HAL_GPIO_Init+0x208>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	4a50      	ldr	r2, [pc, #320]	@ (8008284 <HAL_GPIO_Init+0x30c>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d019      	beq.n	800817c <HAL_GPIO_Init+0x204>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	4a4f      	ldr	r2, [pc, #316]	@ (8008288 <HAL_GPIO_Init+0x310>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d013      	beq.n	8008178 <HAL_GPIO_Init+0x200>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	4a4e      	ldr	r2, [pc, #312]	@ (800828c <HAL_GPIO_Init+0x314>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d00d      	beq.n	8008174 <HAL_GPIO_Init+0x1fc>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	4a4d      	ldr	r2, [pc, #308]	@ (8008290 <HAL_GPIO_Init+0x318>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d007      	beq.n	8008170 <HAL_GPIO_Init+0x1f8>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	4a4c      	ldr	r2, [pc, #304]	@ (8008294 <HAL_GPIO_Init+0x31c>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d101      	bne.n	800816c <HAL_GPIO_Init+0x1f4>
 8008168:	2307      	movs	r3, #7
 800816a:	e00e      	b.n	800818a <HAL_GPIO_Init+0x212>
 800816c:	2308      	movs	r3, #8
 800816e:	e00c      	b.n	800818a <HAL_GPIO_Init+0x212>
 8008170:	2306      	movs	r3, #6
 8008172:	e00a      	b.n	800818a <HAL_GPIO_Init+0x212>
 8008174:	2305      	movs	r3, #5
 8008176:	e008      	b.n	800818a <HAL_GPIO_Init+0x212>
 8008178:	2304      	movs	r3, #4
 800817a:	e006      	b.n	800818a <HAL_GPIO_Init+0x212>
 800817c:	2303      	movs	r3, #3
 800817e:	e004      	b.n	800818a <HAL_GPIO_Init+0x212>
 8008180:	2302      	movs	r3, #2
 8008182:	e002      	b.n	800818a <HAL_GPIO_Init+0x212>
 8008184:	2301      	movs	r3, #1
 8008186:	e000      	b.n	800818a <HAL_GPIO_Init+0x212>
 8008188:	2300      	movs	r3, #0
 800818a:	697a      	ldr	r2, [r7, #20]
 800818c:	f002 0203 	and.w	r2, r2, #3
 8008190:	0092      	lsls	r2, r2, #2
 8008192:	4093      	lsls	r3, r2
 8008194:	693a      	ldr	r2, [r7, #16]
 8008196:	4313      	orrs	r3, r2
 8008198:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800819a:	4937      	ldr	r1, [pc, #220]	@ (8008278 <HAL_GPIO_Init+0x300>)
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	089b      	lsrs	r3, r3, #2
 80081a0:	3302      	adds	r3, #2
 80081a2:	693a      	ldr	r2, [r7, #16]
 80081a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80081a8:	4b3b      	ldr	r3, [pc, #236]	@ (8008298 <HAL_GPIO_Init+0x320>)
 80081aa:	689b      	ldr	r3, [r3, #8]
 80081ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	43db      	mvns	r3, r3
 80081b2:	693a      	ldr	r2, [r7, #16]
 80081b4:	4013      	ands	r3, r2
 80081b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d003      	beq.n	80081cc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80081c4:	693a      	ldr	r2, [r7, #16]
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	4313      	orrs	r3, r2
 80081ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80081cc:	4a32      	ldr	r2, [pc, #200]	@ (8008298 <HAL_GPIO_Init+0x320>)
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80081d2:	4b31      	ldr	r3, [pc, #196]	@ (8008298 <HAL_GPIO_Init+0x320>)
 80081d4:	68db      	ldr	r3, [r3, #12]
 80081d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	43db      	mvns	r3, r3
 80081dc:	693a      	ldr	r2, [r7, #16]
 80081de:	4013      	ands	r3, r2
 80081e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d003      	beq.n	80081f6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80081ee:	693a      	ldr	r2, [r7, #16]
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	4313      	orrs	r3, r2
 80081f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80081f6:	4a28      	ldr	r2, [pc, #160]	@ (8008298 <HAL_GPIO_Init+0x320>)
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80081fc:	4b26      	ldr	r3, [pc, #152]	@ (8008298 <HAL_GPIO_Init+0x320>)
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	43db      	mvns	r3, r3
 8008206:	693a      	ldr	r2, [r7, #16]
 8008208:	4013      	ands	r3, r2
 800820a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008214:	2b00      	cmp	r3, #0
 8008216:	d003      	beq.n	8008220 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8008218:	693a      	ldr	r2, [r7, #16]
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	4313      	orrs	r3, r2
 800821e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008220:	4a1d      	ldr	r2, [pc, #116]	@ (8008298 <HAL_GPIO_Init+0x320>)
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8008226:	4b1c      	ldr	r3, [pc, #112]	@ (8008298 <HAL_GPIO_Init+0x320>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	43db      	mvns	r3, r3
 8008230:	693a      	ldr	r2, [r7, #16]
 8008232:	4013      	ands	r3, r2
 8008234:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800823e:	2b00      	cmp	r3, #0
 8008240:	d003      	beq.n	800824a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8008242:	693a      	ldr	r2, [r7, #16]
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	4313      	orrs	r3, r2
 8008248:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800824a:	4a13      	ldr	r2, [pc, #76]	@ (8008298 <HAL_GPIO_Init+0x320>)
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	3301      	adds	r3, #1
 8008254:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	681a      	ldr	r2, [r3, #0]
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	fa22 f303 	lsr.w	r3, r2, r3
 8008260:	2b00      	cmp	r3, #0
 8008262:	f47f ae91 	bne.w	8007f88 <HAL_GPIO_Init+0x10>
  }
}
 8008266:	bf00      	nop
 8008268:	bf00      	nop
 800826a:	371c      	adds	r7, #28
 800826c:	46bd      	mov	sp, r7
 800826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008272:	4770      	bx	lr
 8008274:	40021000 	.word	0x40021000
 8008278:	40010000 	.word	0x40010000
 800827c:	48000400 	.word	0x48000400
 8008280:	48000800 	.word	0x48000800
 8008284:	48000c00 	.word	0x48000c00
 8008288:	48001000 	.word	0x48001000
 800828c:	48001400 	.word	0x48001400
 8008290:	48001800 	.word	0x48001800
 8008294:	48001c00 	.word	0x48001c00
 8008298:	40010400 	.word	0x40010400

0800829c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800829c:	b480      	push	{r7}
 800829e:	b087      	sub	sp, #28
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80082a6:	2300      	movs	r3, #0
 80082a8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80082aa:	e0c9      	b.n	8008440 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80082ac:	2201      	movs	r2, #1
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	fa02 f303 	lsl.w	r3, r2, r3
 80082b4:	683a      	ldr	r2, [r7, #0]
 80082b6:	4013      	ands	r3, r2
 80082b8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	f000 80bc 	beq.w	800843a <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80082c2:	4a66      	ldr	r2, [pc, #408]	@ (800845c <HAL_GPIO_DeInit+0x1c0>)
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	089b      	lsrs	r3, r3, #2
 80082c8:	3302      	adds	r3, #2
 80082ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082ce:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	f003 0303 	and.w	r3, r3, #3
 80082d6:	009b      	lsls	r3, r3, #2
 80082d8:	220f      	movs	r2, #15
 80082da:	fa02 f303 	lsl.w	r3, r2, r3
 80082de:	68fa      	ldr	r2, [r7, #12]
 80082e0:	4013      	ands	r3, r2
 80082e2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80082ea:	d02b      	beq.n	8008344 <HAL_GPIO_DeInit+0xa8>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	4a5c      	ldr	r2, [pc, #368]	@ (8008460 <HAL_GPIO_DeInit+0x1c4>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d025      	beq.n	8008340 <HAL_GPIO_DeInit+0xa4>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	4a5b      	ldr	r2, [pc, #364]	@ (8008464 <HAL_GPIO_DeInit+0x1c8>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d01f      	beq.n	800833c <HAL_GPIO_DeInit+0xa0>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	4a5a      	ldr	r2, [pc, #360]	@ (8008468 <HAL_GPIO_DeInit+0x1cc>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d019      	beq.n	8008338 <HAL_GPIO_DeInit+0x9c>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	4a59      	ldr	r2, [pc, #356]	@ (800846c <HAL_GPIO_DeInit+0x1d0>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d013      	beq.n	8008334 <HAL_GPIO_DeInit+0x98>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	4a58      	ldr	r2, [pc, #352]	@ (8008470 <HAL_GPIO_DeInit+0x1d4>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d00d      	beq.n	8008330 <HAL_GPIO_DeInit+0x94>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	4a57      	ldr	r2, [pc, #348]	@ (8008474 <HAL_GPIO_DeInit+0x1d8>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d007      	beq.n	800832c <HAL_GPIO_DeInit+0x90>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	4a56      	ldr	r2, [pc, #344]	@ (8008478 <HAL_GPIO_DeInit+0x1dc>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d101      	bne.n	8008328 <HAL_GPIO_DeInit+0x8c>
 8008324:	2307      	movs	r3, #7
 8008326:	e00e      	b.n	8008346 <HAL_GPIO_DeInit+0xaa>
 8008328:	2308      	movs	r3, #8
 800832a:	e00c      	b.n	8008346 <HAL_GPIO_DeInit+0xaa>
 800832c:	2306      	movs	r3, #6
 800832e:	e00a      	b.n	8008346 <HAL_GPIO_DeInit+0xaa>
 8008330:	2305      	movs	r3, #5
 8008332:	e008      	b.n	8008346 <HAL_GPIO_DeInit+0xaa>
 8008334:	2304      	movs	r3, #4
 8008336:	e006      	b.n	8008346 <HAL_GPIO_DeInit+0xaa>
 8008338:	2303      	movs	r3, #3
 800833a:	e004      	b.n	8008346 <HAL_GPIO_DeInit+0xaa>
 800833c:	2302      	movs	r3, #2
 800833e:	e002      	b.n	8008346 <HAL_GPIO_DeInit+0xaa>
 8008340:	2301      	movs	r3, #1
 8008342:	e000      	b.n	8008346 <HAL_GPIO_DeInit+0xaa>
 8008344:	2300      	movs	r3, #0
 8008346:	697a      	ldr	r2, [r7, #20]
 8008348:	f002 0203 	and.w	r2, r2, #3
 800834c:	0092      	lsls	r2, r2, #2
 800834e:	4093      	lsls	r3, r2
 8008350:	68fa      	ldr	r2, [r7, #12]
 8008352:	429a      	cmp	r2, r3
 8008354:	d132      	bne.n	80083bc <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8008356:	4b49      	ldr	r3, [pc, #292]	@ (800847c <HAL_GPIO_DeInit+0x1e0>)
 8008358:	681a      	ldr	r2, [r3, #0]
 800835a:	693b      	ldr	r3, [r7, #16]
 800835c:	43db      	mvns	r3, r3
 800835e:	4947      	ldr	r1, [pc, #284]	@ (800847c <HAL_GPIO_DeInit+0x1e0>)
 8008360:	4013      	ands	r3, r2
 8008362:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8008364:	4b45      	ldr	r3, [pc, #276]	@ (800847c <HAL_GPIO_DeInit+0x1e0>)
 8008366:	685a      	ldr	r2, [r3, #4]
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	43db      	mvns	r3, r3
 800836c:	4943      	ldr	r1, [pc, #268]	@ (800847c <HAL_GPIO_DeInit+0x1e0>)
 800836e:	4013      	ands	r3, r2
 8008370:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8008372:	4b42      	ldr	r3, [pc, #264]	@ (800847c <HAL_GPIO_DeInit+0x1e0>)
 8008374:	68da      	ldr	r2, [r3, #12]
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	43db      	mvns	r3, r3
 800837a:	4940      	ldr	r1, [pc, #256]	@ (800847c <HAL_GPIO_DeInit+0x1e0>)
 800837c:	4013      	ands	r3, r2
 800837e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8008380:	4b3e      	ldr	r3, [pc, #248]	@ (800847c <HAL_GPIO_DeInit+0x1e0>)
 8008382:	689a      	ldr	r2, [r3, #8]
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	43db      	mvns	r3, r3
 8008388:	493c      	ldr	r1, [pc, #240]	@ (800847c <HAL_GPIO_DeInit+0x1e0>)
 800838a:	4013      	ands	r3, r2
 800838c:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	f003 0303 	and.w	r3, r3, #3
 8008394:	009b      	lsls	r3, r3, #2
 8008396:	220f      	movs	r2, #15
 8008398:	fa02 f303 	lsl.w	r3, r2, r3
 800839c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800839e:	4a2f      	ldr	r2, [pc, #188]	@ (800845c <HAL_GPIO_DeInit+0x1c0>)
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	089b      	lsrs	r3, r3, #2
 80083a4:	3302      	adds	r3, #2
 80083a6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	43da      	mvns	r2, r3
 80083ae:	482b      	ldr	r0, [pc, #172]	@ (800845c <HAL_GPIO_DeInit+0x1c0>)
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	089b      	lsrs	r3, r3, #2
 80083b4:	400a      	ands	r2, r1
 80083b6:	3302      	adds	r3, #2
 80083b8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681a      	ldr	r2, [r3, #0]
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	005b      	lsls	r3, r3, #1
 80083c4:	2103      	movs	r1, #3
 80083c6:	fa01 f303 	lsl.w	r3, r1, r3
 80083ca:	431a      	orrs	r2, r3
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	08da      	lsrs	r2, r3, #3
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	3208      	adds	r2, #8
 80083d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	f003 0307 	and.w	r3, r3, #7
 80083e2:	009b      	lsls	r3, r3, #2
 80083e4:	220f      	movs	r2, #15
 80083e6:	fa02 f303 	lsl.w	r3, r2, r3
 80083ea:	43db      	mvns	r3, r3
 80083ec:	697a      	ldr	r2, [r7, #20]
 80083ee:	08d2      	lsrs	r2, r2, #3
 80083f0:	4019      	ands	r1, r3
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	3208      	adds	r2, #8
 80083f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	689a      	ldr	r2, [r3, #8]
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	005b      	lsls	r3, r3, #1
 8008402:	2103      	movs	r1, #3
 8008404:	fa01 f303 	lsl.w	r3, r1, r3
 8008408:	43db      	mvns	r3, r3
 800840a:	401a      	ands	r2, r3
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	685a      	ldr	r2, [r3, #4]
 8008414:	2101      	movs	r1, #1
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	fa01 f303 	lsl.w	r3, r1, r3
 800841c:	43db      	mvns	r3, r3
 800841e:	401a      	ands	r2, r3
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	68da      	ldr	r2, [r3, #12]
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	005b      	lsls	r3, r3, #1
 800842c:	2103      	movs	r1, #3
 800842e:	fa01 f303 	lsl.w	r3, r1, r3
 8008432:	43db      	mvns	r3, r3
 8008434:	401a      	ands	r2, r3
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	3301      	adds	r3, #1
 800843e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8008440:	683a      	ldr	r2, [r7, #0]
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	fa22 f303 	lsr.w	r3, r2, r3
 8008448:	2b00      	cmp	r3, #0
 800844a:	f47f af2f 	bne.w	80082ac <HAL_GPIO_DeInit+0x10>
  }
}
 800844e:	bf00      	nop
 8008450:	bf00      	nop
 8008452:	371c      	adds	r7, #28
 8008454:	46bd      	mov	sp, r7
 8008456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845a:	4770      	bx	lr
 800845c:	40010000 	.word	0x40010000
 8008460:	48000400 	.word	0x48000400
 8008464:	48000800 	.word	0x48000800
 8008468:	48000c00 	.word	0x48000c00
 800846c:	48001000 	.word	0x48001000
 8008470:	48001400 	.word	0x48001400
 8008474:	48001800 	.word	0x48001800
 8008478:	48001c00 	.word	0x48001c00
 800847c:	40010400 	.word	0x40010400

08008480 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008480:	b480      	push	{r7}
 8008482:	b085      	sub	sp, #20
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
 8008488:	460b      	mov	r3, r1
 800848a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	691a      	ldr	r2, [r3, #16]
 8008490:	887b      	ldrh	r3, [r7, #2]
 8008492:	4013      	ands	r3, r2
 8008494:	2b00      	cmp	r3, #0
 8008496:	d002      	beq.n	800849e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008498:	2301      	movs	r3, #1
 800849a:	73fb      	strb	r3, [r7, #15]
 800849c:	e001      	b.n	80084a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800849e:	2300      	movs	r3, #0
 80084a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80084a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3714      	adds	r7, #20
 80084a8:	46bd      	mov	sp, r7
 80084aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ae:	4770      	bx	lr

080084b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b083      	sub	sp, #12
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	460b      	mov	r3, r1
 80084ba:	807b      	strh	r3, [r7, #2]
 80084bc:	4613      	mov	r3, r2
 80084be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80084c0:	787b      	ldrb	r3, [r7, #1]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d003      	beq.n	80084ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80084c6:	887a      	ldrh	r2, [r7, #2]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80084cc:	e002      	b.n	80084d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80084ce:	887a      	ldrh	r2, [r7, #2]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80084d4:	bf00      	nop
 80084d6:	370c      	adds	r7, #12
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr

080084e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b082      	sub	sp, #8
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d101      	bne.n	80084f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80084ee:	2301      	movs	r3, #1
 80084f0:	e08d      	b.n	800860e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80084f8:	b2db      	uxtb	r3, r3
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d106      	bne.n	800850c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2200      	movs	r2, #0
 8008502:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f7fc fe36 	bl	8005178 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2224      	movs	r2, #36	@ 0x24
 8008510:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	681a      	ldr	r2, [r3, #0]
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f022 0201 	bic.w	r2, r2, #1
 8008522:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	685a      	ldr	r2, [r3, #4]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8008530:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	689a      	ldr	r2, [r3, #8]
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008540:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	68db      	ldr	r3, [r3, #12]
 8008546:	2b01      	cmp	r3, #1
 8008548:	d107      	bne.n	800855a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	689a      	ldr	r2, [r3, #8]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008556:	609a      	str	r2, [r3, #8]
 8008558:	e006      	b.n	8008568 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	689a      	ldr	r2, [r3, #8]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8008566:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	68db      	ldr	r3, [r3, #12]
 800856c:	2b02      	cmp	r3, #2
 800856e:	d108      	bne.n	8008582 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	685a      	ldr	r2, [r3, #4]
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800857e:	605a      	str	r2, [r3, #4]
 8008580:	e007      	b.n	8008592 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	685a      	ldr	r2, [r3, #4]
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008590:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	687a      	ldr	r2, [r7, #4]
 800859a:	6812      	ldr	r2, [r2, #0]
 800859c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80085a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80085a4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	68da      	ldr	r2, [r3, #12]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80085b4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	691a      	ldr	r2, [r3, #16]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	695b      	ldr	r3, [r3, #20]
 80085be:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	699b      	ldr	r3, [r3, #24]
 80085c6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	430a      	orrs	r2, r1
 80085ce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	69d9      	ldr	r1, [r3, #28]
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6a1a      	ldr	r2, [r3, #32]
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	430a      	orrs	r2, r1
 80085de:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	681a      	ldr	r2, [r3, #0]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f042 0201 	orr.w	r2, r2, #1
 80085ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2200      	movs	r2, #0
 80085f4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2220      	movs	r2, #32
 80085fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2200      	movs	r2, #0
 8008602:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2200      	movs	r2, #0
 8008608:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800860c:	2300      	movs	r3, #0
}
 800860e:	4618      	mov	r0, r3
 8008610:	3708      	adds	r7, #8
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
	...

08008618 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b08a      	sub	sp, #40	@ 0x28
 800861c:	af02      	add	r7, sp, #8
 800861e:	60f8      	str	r0, [r7, #12]
 8008620:	607a      	str	r2, [r7, #4]
 8008622:	461a      	mov	r2, r3
 8008624:	460b      	mov	r3, r1
 8008626:	817b      	strh	r3, [r7, #10]
 8008628:	4613      	mov	r3, r2
 800862a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 800862c:	2300      	movs	r3, #0
 800862e:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008636:	b2db      	uxtb	r3, r3
 8008638:	2b20      	cmp	r3, #32
 800863a:	f040 80ef 	bne.w	800881c <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	699b      	ldr	r3, [r3, #24]
 8008644:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008648:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800864c:	d101      	bne.n	8008652 <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 800864e:	2302      	movs	r3, #2
 8008650:	e0e5      	b.n	800881e <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008658:	2b01      	cmp	r3, #1
 800865a:	d101      	bne.n	8008660 <HAL_I2C_Master_Transmit_DMA+0x48>
 800865c:	2302      	movs	r3, #2
 800865e:	e0de      	b.n	800881e <HAL_I2C_Master_Transmit_DMA+0x206>
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2201      	movs	r2, #1
 8008664:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	2221      	movs	r2, #33	@ 0x21
 800866c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	2210      	movs	r2, #16
 8008674:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	2200      	movs	r2, #0
 800867c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	687a      	ldr	r2, [r7, #4]
 8008682:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	893a      	ldrh	r2, [r7, #8]
 8008688:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	4a66      	ldr	r2, [pc, #408]	@ (8008828 <HAL_I2C_Master_Transmit_DMA+0x210>)
 800868e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	4a66      	ldr	r2, [pc, #408]	@ (800882c <HAL_I2C_Master_Transmit_DMA+0x214>)
 8008694:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800869a:	b29b      	uxth	r3, r3
 800869c:	2bff      	cmp	r3, #255	@ 0xff
 800869e:	d906      	bls.n	80086ae <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	22ff      	movs	r2, #255	@ 0xff
 80086a4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80086a6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80086aa:	61fb      	str	r3, [r7, #28]
 80086ac:	e007      	b.n	80086be <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086b2:	b29a      	uxth	r2, r3
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80086b8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80086bc:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d01a      	beq.n	80086fc <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086ca:	781a      	ldrb	r2, [r3, #0]
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086d6:	1c5a      	adds	r2, r3, #1
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80086e0:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086e6:	b29b      	uxth	r3, r3
 80086e8:	3b01      	subs	r3, #1
 80086ea:	b29a      	uxth	r2, r3
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80086f4:	3b01      	subs	r3, #1
 80086f6:	b29a      	uxth	r2, r3
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008700:	2b00      	cmp	r3, #0
 8008702:	d074      	beq.n	80087ee <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008708:	2b00      	cmp	r3, #0
 800870a:	d022      	beq.n	8008752 <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008710:	4a47      	ldr	r2, [pc, #284]	@ (8008830 <HAL_I2C_Master_Transmit_DMA+0x218>)
 8008712:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008718:	4a46      	ldr	r2, [pc, #280]	@ (8008834 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 800871a:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008720:	2200      	movs	r2, #0
 8008722:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008728:	2200      	movs	r2, #0
 800872a:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008734:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800873c:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8008742:	f7ff fa4d 	bl	8007be0 <HAL_DMA_Start_IT>
 8008746:	4603      	mov	r3, r0
 8008748:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800874a:	7dfb      	ldrb	r3, [r7, #23]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d13a      	bne.n	80087c6 <HAL_I2C_Master_Transmit_DMA+0x1ae>
 8008750:	e013      	b.n	800877a <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	2220      	movs	r2, #32
 8008756:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	2200      	movs	r2, #0
 800875e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008766:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2200      	movs	r2, #0
 8008772:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8008776:	2301      	movs	r3, #1
 8008778:	e051      	b.n	800881e <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800877e:	b2db      	uxtb	r3, r3
 8008780:	3301      	adds	r3, #1
 8008782:	b2da      	uxtb	r2, r3
 8008784:	8979      	ldrh	r1, [r7, #10]
 8008786:	4b2c      	ldr	r3, [pc, #176]	@ (8008838 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8008788:	9300      	str	r3, [sp, #0]
 800878a:	69fb      	ldr	r3, [r7, #28]
 800878c:	68f8      	ldr	r0, [r7, #12]
 800878e:	f001 ff91 	bl	800a6b4 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008796:	b29a      	uxth	r2, r3
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800879c:	1ad3      	subs	r3, r2, r3
 800879e:	b29a      	uxth	r2, r3
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2200      	movs	r2, #0
 80087a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80087ac:	2110      	movs	r1, #16
 80087ae:	68f8      	ldr	r0, [r7, #12]
 80087b0:	f001 ffb2 	bl	800a718 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	681a      	ldr	r2, [r3, #0]
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80087c2:	601a      	str	r2, [r3, #0]
 80087c4:	e028      	b.n	8008818 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	2220      	movs	r2, #32
 80087ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	2200      	movs	r2, #0
 80087d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087da:	f043 0210 	orr.w	r2, r3, #16
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	2200      	movs	r2, #0
 80087e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80087ea:	2301      	movs	r3, #1
 80087ec:	e017      	b.n	800881e <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	4a12      	ldr	r2, [pc, #72]	@ (800883c <HAL_I2C_Master_Transmit_DMA+0x224>)
 80087f2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 80087f4:	69bb      	ldr	r3, [r7, #24]
 80087f6:	b2da      	uxtb	r2, r3
 80087f8:	8979      	ldrh	r1, [r7, #10]
 80087fa:	4b0f      	ldr	r3, [pc, #60]	@ (8008838 <HAL_I2C_Master_Transmit_DMA+0x220>)
 80087fc:	9300      	str	r3, [sp, #0]
 80087fe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008802:	68f8      	ldr	r0, [r7, #12]
 8008804:	f001 ff56 	bl	800a6b4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2200      	movs	r2, #0
 800880c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008810:	2101      	movs	r1, #1
 8008812:	68f8      	ldr	r0, [r7, #12]
 8008814:	f001 ff80 	bl	800a718 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8008818:	2300      	movs	r3, #0
 800881a:	e000      	b.n	800881e <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 800881c:	2302      	movs	r3, #2
  }
}
 800881e:	4618      	mov	r0, r3
 8008820:	3720      	adds	r7, #32
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}
 8008826:	bf00      	nop
 8008828:	ffff0000 	.word	0xffff0000
 800882c:	08009225 	.word	0x08009225
 8008830:	0800a1ab 	.word	0x0800a1ab
 8008834:	0800a2d7 	.word	0x0800a2d7
 8008838:	80002000 	.word	0x80002000
 800883c:	08008de7 	.word	0x08008de7

08008840 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b088      	sub	sp, #32
 8008844:	af02      	add	r7, sp, #8
 8008846:	60f8      	str	r0, [r7, #12]
 8008848:	607a      	str	r2, [r7, #4]
 800884a:	461a      	mov	r2, r3
 800884c:	460b      	mov	r3, r1
 800884e:	817b      	strh	r3, [r7, #10]
 8008850:	4613      	mov	r3, r2
 8008852:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800885a:	b2db      	uxtb	r3, r3
 800885c:	2b20      	cmp	r3, #32
 800885e:	f040 80cd 	bne.w	80089fc <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	699b      	ldr	r3, [r3, #24]
 8008868:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800886c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008870:	d101      	bne.n	8008876 <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 8008872:	2302      	movs	r3, #2
 8008874:	e0c3      	b.n	80089fe <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800887c:	2b01      	cmp	r3, #1
 800887e:	d101      	bne.n	8008884 <HAL_I2C_Master_Receive_DMA+0x44>
 8008880:	2302      	movs	r3, #2
 8008882:	e0bc      	b.n	80089fe <HAL_I2C_Master_Receive_DMA+0x1be>
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2201      	movs	r2, #1
 8008888:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	2222      	movs	r2, #34	@ 0x22
 8008890:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2210      	movs	r2, #16
 8008898:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	2200      	movs	r2, #0
 80088a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	687a      	ldr	r2, [r7, #4]
 80088a6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	893a      	ldrh	r2, [r7, #8]
 80088ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	4a55      	ldr	r2, [pc, #340]	@ (8008a08 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 80088b2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	4a55      	ldr	r2, [pc, #340]	@ (8008a0c <HAL_I2C_Master_Receive_DMA+0x1cc>)
 80088b8:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088be:	b29b      	uxth	r3, r3
 80088c0:	2bff      	cmp	r3, #255	@ 0xff
 80088c2:	d906      	bls.n	80088d2 <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	22ff      	movs	r2, #255	@ 0xff
 80088c8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80088ca:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80088ce:	617b      	str	r3, [r7, #20]
 80088d0:	e007      	b.n	80088e2 <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088d6:	b29a      	uxth	r2, r3
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80088dc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80088e0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d070      	beq.n	80089cc <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d020      	beq.n	8008934 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088f6:	4a46      	ldr	r2, [pc, #280]	@ (8008a10 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 80088f8:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088fe:	4a45      	ldr	r2, [pc, #276]	@ (8008a14 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 8008900:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008906:	2200      	movs	r2, #0
 8008908:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800890e:	2200      	movs	r2, #0
 8008910:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	3324      	adds	r3, #36	@ 0x24
 800891c:	4619      	mov	r1, r3
 800891e:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8008924:	f7ff f95c 	bl	8007be0 <HAL_DMA_Start_IT>
 8008928:	4603      	mov	r3, r0
 800892a:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800892c:	7cfb      	ldrb	r3, [r7, #19]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d138      	bne.n	80089a4 <HAL_I2C_Master_Receive_DMA+0x164>
 8008932:	e013      	b.n	800895c <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	2220      	movs	r2, #32
 8008938:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	2200      	movs	r2, #0
 8008940:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008948:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	2200      	movs	r2, #0
 8008954:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8008958:	2301      	movs	r3, #1
 800895a:	e050      	b.n	80089fe <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008960:	b2da      	uxtb	r2, r3
 8008962:	8979      	ldrh	r1, [r7, #10]
 8008964:	4b2c      	ldr	r3, [pc, #176]	@ (8008a18 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8008966:	9300      	str	r3, [sp, #0]
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	68f8      	ldr	r0, [r7, #12]
 800896c:	f001 fea2 	bl	800a6b4 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008974:	b29a      	uxth	r2, r3
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800897a:	1ad3      	subs	r3, r2, r3
 800897c:	b29a      	uxth	r2, r3
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2200      	movs	r2, #0
 8008986:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800898a:	2110      	movs	r1, #16
 800898c:	68f8      	ldr	r0, [r7, #12]
 800898e:	f001 fec3 	bl	800a718 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	681a      	ldr	r2, [r3, #0]
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80089a0:	601a      	str	r2, [r3, #0]
 80089a2:	e029      	b.n	80089f8 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	2220      	movs	r2, #32
 80089a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	2200      	movs	r2, #0
 80089b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089b8:	f043 0210 	orr.w	r2, r3, #16
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	2200      	movs	r2, #0
 80089c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80089c8:	2301      	movs	r3, #1
 80089ca:	e018      	b.n	80089fe <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	4a13      	ldr	r2, [pc, #76]	@ (8008a1c <HAL_I2C_Master_Receive_DMA+0x1dc>)
 80089d0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80089d6:	b2da      	uxtb	r2, r3
 80089d8:	8979      	ldrh	r1, [r7, #10]
 80089da:	4b0f      	ldr	r3, [pc, #60]	@ (8008a18 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 80089dc:	9300      	str	r3, [sp, #0]
 80089de:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80089e2:	68f8      	ldr	r0, [r7, #12]
 80089e4:	f001 fe66 	bl	800a6b4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	2200      	movs	r2, #0
 80089ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 80089f0:	2102      	movs	r1, #2
 80089f2:	68f8      	ldr	r0, [r7, #12]
 80089f4:	f001 fe90 	bl	800a718 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80089f8:	2300      	movs	r3, #0
 80089fa:	e000      	b.n	80089fe <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 80089fc:	2302      	movs	r3, #2
  }
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3718      	adds	r7, #24
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}
 8008a06:	bf00      	nop
 8008a08:	ffff0000 	.word	0xffff0000
 8008a0c:	08009225 	.word	0x08009225
 8008a10:	0800a241 	.word	0x0800a241
 8008a14:	0800a2d7 	.word	0x0800a2d7
 8008a18:	80002400 	.word	0x80002400
 8008a1c:	08008de7 	.word	0x08008de7

08008a20 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b088      	sub	sp, #32
 8008a24:	af02      	add	r7, sp, #8
 8008a26:	60f8      	str	r0, [r7, #12]
 8008a28:	4608      	mov	r0, r1
 8008a2a:	4611      	mov	r1, r2
 8008a2c:	461a      	mov	r2, r3
 8008a2e:	4603      	mov	r3, r0
 8008a30:	817b      	strh	r3, [r7, #10]
 8008a32:	460b      	mov	r3, r1
 8008a34:	813b      	strh	r3, [r7, #8]
 8008a36:	4613      	mov	r3, r2
 8008a38:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008a40:	b2db      	uxtb	r3, r3
 8008a42:	2b20      	cmp	r3, #32
 8008a44:	f040 80fd 	bne.w	8008c42 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a48:	6a3b      	ldr	r3, [r7, #32]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d002      	beq.n	8008a54 <HAL_I2C_Mem_Read+0x34>
 8008a4e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d105      	bne.n	8008a60 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008a5a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	e0f1      	b.n	8008c44 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008a66:	2b01      	cmp	r3, #1
 8008a68:	d101      	bne.n	8008a6e <HAL_I2C_Mem_Read+0x4e>
 8008a6a:	2302      	movs	r3, #2
 8008a6c:	e0ea      	b.n	8008c44 <HAL_I2C_Mem_Read+0x224>
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	2201      	movs	r2, #1
 8008a72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008a76:	f7fd f979 	bl	8005d6c <HAL_GetTick>
 8008a7a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	9300      	str	r3, [sp, #0]
 8008a80:	2319      	movs	r3, #25
 8008a82:	2201      	movs	r2, #1
 8008a84:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008a88:	68f8      	ldr	r0, [r7, #12]
 8008a8a:	f001 fc59 	bl	800a340 <I2C_WaitOnFlagUntilTimeout>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d001      	beq.n	8008a98 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8008a94:	2301      	movs	r3, #1
 8008a96:	e0d5      	b.n	8008c44 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	2222      	movs	r2, #34	@ 0x22
 8008a9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	2240      	movs	r2, #64	@ 0x40
 8008aa4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	6a3a      	ldr	r2, [r7, #32]
 8008ab2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008ab8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	2200      	movs	r2, #0
 8008abe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008ac0:	88f8      	ldrh	r0, [r7, #6]
 8008ac2:	893a      	ldrh	r2, [r7, #8]
 8008ac4:	8979      	ldrh	r1, [r7, #10]
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	9301      	str	r3, [sp, #4]
 8008aca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008acc:	9300      	str	r3, [sp, #0]
 8008ace:	4603      	mov	r3, r0
 8008ad0:	68f8      	ldr	r0, [r7, #12]
 8008ad2:	f000 fe8f 	bl	80097f4 <I2C_RequestMemoryRead>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d005      	beq.n	8008ae8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	e0ad      	b.n	8008c44 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008aec:	b29b      	uxth	r3, r3
 8008aee:	2bff      	cmp	r3, #255	@ 0xff
 8008af0:	d90e      	bls.n	8008b10 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	22ff      	movs	r2, #255	@ 0xff
 8008af6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008afc:	b2da      	uxtb	r2, r3
 8008afe:	8979      	ldrh	r1, [r7, #10]
 8008b00:	4b52      	ldr	r3, [pc, #328]	@ (8008c4c <HAL_I2C_Mem_Read+0x22c>)
 8008b02:	9300      	str	r3, [sp, #0]
 8008b04:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008b08:	68f8      	ldr	r0, [r7, #12]
 8008b0a:	f001 fdd3 	bl	800a6b4 <I2C_TransferConfig>
 8008b0e:	e00f      	b.n	8008b30 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b14:	b29a      	uxth	r2, r3
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b1e:	b2da      	uxtb	r2, r3
 8008b20:	8979      	ldrh	r1, [r7, #10]
 8008b22:	4b4a      	ldr	r3, [pc, #296]	@ (8008c4c <HAL_I2C_Mem_Read+0x22c>)
 8008b24:	9300      	str	r3, [sp, #0]
 8008b26:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008b2a:	68f8      	ldr	r0, [r7, #12]
 8008b2c:	f001 fdc2 	bl	800a6b4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	9300      	str	r3, [sp, #0]
 8008b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b36:	2200      	movs	r2, #0
 8008b38:	2104      	movs	r1, #4
 8008b3a:	68f8      	ldr	r0, [r7, #12]
 8008b3c:	f001 fc00 	bl	800a340 <I2C_WaitOnFlagUntilTimeout>
 8008b40:	4603      	mov	r3, r0
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d001      	beq.n	8008b4a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8008b46:	2301      	movs	r3, #1
 8008b48:	e07c      	b.n	8008c44 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b54:	b2d2      	uxtb	r2, r2
 8008b56:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b5c:	1c5a      	adds	r2, r3, #1
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b66:	3b01      	subs	r3, #1
 8008b68:	b29a      	uxth	r2, r3
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b72:	b29b      	uxth	r3, r3
 8008b74:	3b01      	subs	r3, #1
 8008b76:	b29a      	uxth	r2, r3
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b80:	b29b      	uxth	r3, r3
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d034      	beq.n	8008bf0 <HAL_I2C_Mem_Read+0x1d0>
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d130      	bne.n	8008bf0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008b8e:	697b      	ldr	r3, [r7, #20]
 8008b90:	9300      	str	r3, [sp, #0]
 8008b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b94:	2200      	movs	r2, #0
 8008b96:	2180      	movs	r1, #128	@ 0x80
 8008b98:	68f8      	ldr	r0, [r7, #12]
 8008b9a:	f001 fbd1 	bl	800a340 <I2C_WaitOnFlagUntilTimeout>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d001      	beq.n	8008ba8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	e04d      	b.n	8008c44 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008bac:	b29b      	uxth	r3, r3
 8008bae:	2bff      	cmp	r3, #255	@ 0xff
 8008bb0:	d90e      	bls.n	8008bd0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	22ff      	movs	r2, #255	@ 0xff
 8008bb6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008bbc:	b2da      	uxtb	r2, r3
 8008bbe:	8979      	ldrh	r1, [r7, #10]
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	9300      	str	r3, [sp, #0]
 8008bc4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008bc8:	68f8      	ldr	r0, [r7, #12]
 8008bca:	f001 fd73 	bl	800a6b4 <I2C_TransferConfig>
 8008bce:	e00f      	b.n	8008bf0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008bd4:	b29a      	uxth	r2, r3
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008bde:	b2da      	uxtb	r2, r3
 8008be0:	8979      	ldrh	r1, [r7, #10]
 8008be2:	2300      	movs	r3, #0
 8008be4:	9300      	str	r3, [sp, #0]
 8008be6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008bea:	68f8      	ldr	r0, [r7, #12]
 8008bec:	f001 fd62 	bl	800a6b4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008bf4:	b29b      	uxth	r3, r3
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d19a      	bne.n	8008b30 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008bfa:	697a      	ldr	r2, [r7, #20]
 8008bfc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008bfe:	68f8      	ldr	r0, [r7, #12]
 8008c00:	f001 fc34 	bl	800a46c <I2C_WaitOnSTOPFlagUntilTimeout>
 8008c04:	4603      	mov	r3, r0
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d001      	beq.n	8008c0e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	e01a      	b.n	8008c44 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	2220      	movs	r2, #32
 8008c14:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	6859      	ldr	r1, [r3, #4]
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681a      	ldr	r2, [r3, #0]
 8008c20:	4b0b      	ldr	r3, [pc, #44]	@ (8008c50 <HAL_I2C_Mem_Read+0x230>)
 8008c22:	400b      	ands	r3, r1
 8008c24:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	2220      	movs	r2, #32
 8008c2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	2200      	movs	r2, #0
 8008c32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	e000      	b.n	8008c44 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8008c42:	2302      	movs	r3, #2
  }
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	3718      	adds	r7, #24
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd80      	pop	{r7, pc}
 8008c4c:	80002400 	.word	0x80002400
 8008c50:	fe00e800 	.word	0xfe00e800

08008c54 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b084      	sub	sp, #16
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	699b      	ldr	r3, [r3, #24]
 8008c62:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d005      	beq.n	8008c80 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c78:	68ba      	ldr	r2, [r7, #8]
 8008c7a:	68f9      	ldr	r1, [r7, #12]
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	4798      	blx	r3
  }
}
 8008c80:	bf00      	nop
 8008c82:	3710      	adds	r7, #16
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}

08008c88 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b086      	sub	sp, #24
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	699b      	ldr	r3, [r3, #24]
 8008c96:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8008ca0:	697b      	ldr	r3, [r7, #20]
 8008ca2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d00f      	beq.n	8008cca <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d00a      	beq.n	8008cca <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008cb8:	f043 0201 	orr.w	r2, r3, #1
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008cc8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d00f      	beq.n	8008cf4 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d00a      	beq.n	8008cf4 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ce2:	f043 0208 	orr.w	r2, r3, #8
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008cf2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d00f      	beq.n	8008d1e <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d00a      	beq.n	8008d1e <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d0c:	f043 0202 	orr.w	r2, r3, #2
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008d1c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d22:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	f003 030b 	and.w	r3, r3, #11
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d003      	beq.n	8008d36 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8008d2e:	68f9      	ldr	r1, [r7, #12]
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f001 f8ff 	bl	8009f34 <I2C_ITError>
  }
}
 8008d36:	bf00      	nop
 8008d38:	3718      	adds	r7, #24
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}

08008d3e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008d3e:	b480      	push	{r7}
 8008d40:	b083      	sub	sp, #12
 8008d42:	af00      	add	r7, sp, #0
 8008d44:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8008d46:	bf00      	nop
 8008d48:	370c      	adds	r7, #12
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d50:	4770      	bx	lr

08008d52 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008d52:	b480      	push	{r7}
 8008d54:	b083      	sub	sp, #12
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8008d5a:	bf00      	nop
 8008d5c:	370c      	adds	r7, #12
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d64:	4770      	bx	lr

08008d66 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8008d66:	b480      	push	{r7}
 8008d68:	b083      	sub	sp, #12
 8008d6a:	af00      	add	r7, sp, #0
 8008d6c:	6078      	str	r0, [r7, #4]
 8008d6e:	460b      	mov	r3, r1
 8008d70:	70fb      	strb	r3, [r7, #3]
 8008d72:	4613      	mov	r3, r2
 8008d74:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8008d76:	bf00      	nop
 8008d78:	370c      	adds	r7, #12
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d80:	4770      	bx	lr

08008d82 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008d82:	b480      	push	{r7}
 8008d84:	b083      	sub	sp, #12
 8008d86:	af00      	add	r7, sp, #0
 8008d88:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8008d8a:	bf00      	nop
 8008d8c:	370c      	adds	r7, #12
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d94:	4770      	bx	lr

08008d96 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008d96:	b480      	push	{r7}
 8008d98:	b083      	sub	sp, #12
 8008d9a:	af00      	add	r7, sp, #0
 8008d9c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8008d9e:	bf00      	nop
 8008da0:	370c      	adds	r7, #12
 8008da2:	46bd      	mov	sp, r7
 8008da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da8:	4770      	bx	lr

08008daa <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008daa:	b480      	push	{r7}
 8008dac:	b083      	sub	sp, #12
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8008db2:	bf00      	nop
 8008db4:	370c      	adds	r7, #12
 8008db6:	46bd      	mov	sp, r7
 8008db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbc:	4770      	bx	lr

08008dbe <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008dbe:	b480      	push	{r7}
 8008dc0:	b083      	sub	sp, #12
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8008dc6:	bf00      	nop
 8008dc8:	370c      	adds	r7, #12
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd0:	4770      	bx	lr

08008dd2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008dd2:	b480      	push	{r7}
 8008dd4:	b083      	sub	sp, #12
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8008dda:	bf00      	nop
 8008ddc:	370c      	adds	r7, #12
 8008dde:	46bd      	mov	sp, r7
 8008de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de4:	4770      	bx	lr

08008de6 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8008de6:	b580      	push	{r7, lr}
 8008de8:	b088      	sub	sp, #32
 8008dea:	af02      	add	r7, sp, #8
 8008dec:	60f8      	str	r0, [r7, #12]
 8008dee:	60b9      	str	r1, [r7, #8]
 8008df0:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008dfc:	2b01      	cmp	r3, #1
 8008dfe:	d101      	bne.n	8008e04 <I2C_Master_ISR_IT+0x1e>
 8008e00:	2302      	movs	r3, #2
 8008e02:	e113      	b.n	800902c <I2C_Master_ISR_IT+0x246>
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	2201      	movs	r2, #1
 8008e08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	f003 0310 	and.w	r3, r3, #16
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d012      	beq.n	8008e3c <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d00d      	beq.n	8008e3c <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	2210      	movs	r2, #16
 8008e26:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e2c:	f043 0204 	orr.w	r2, r3, #4
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008e34:	68f8      	ldr	r0, [r7, #12]
 8008e36:	f001 f994 	bl	800a162 <I2C_Flush_TXDR>
 8008e3a:	e0e4      	b.n	8009006 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	f003 0304 	and.w	r3, r3, #4
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d022      	beq.n	8008e8c <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d01d      	beq.n	8008e8c <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	f023 0304 	bic.w	r3, r3, #4
 8008e56:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e62:	b2d2      	uxtb	r2, r2
 8008e64:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e6a:	1c5a      	adds	r2, r3, #1
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e74:	3b01      	subs	r3, #1
 8008e76:	b29a      	uxth	r2, r3
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e80:	b29b      	uxth	r3, r3
 8008e82:	3b01      	subs	r3, #1
 8008e84:	b29a      	uxth	r2, r3
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008e8a:	e0bc      	b.n	8009006 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d128      	bne.n	8008ee8 <I2C_Master_ISR_IT+0x102>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d023      	beq.n	8008ee8 <I2C_Master_ISR_IT+0x102>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f003 0302 	and.w	r3, r3, #2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d01e      	beq.n	8008ee8 <I2C_Master_ISR_IT+0x102>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008eae:	b29b      	uxth	r3, r3
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	f000 80a8 	beq.w	8009006 <I2C_Master_ISR_IT+0x220>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008eba:	781a      	ldrb	r2, [r3, #0]
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ec6:	1c5a      	adds	r2, r3, #1
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ed0:	3b01      	subs	r3, #1
 8008ed2:	b29a      	uxth	r2, r3
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008edc:	b29b      	uxth	r3, r3
 8008ede:	3b01      	subs	r3, #1
 8008ee0:	b29a      	uxth	r2, r3
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8008ee6:	e08e      	b.n	8009006 <I2C_Master_ISR_IT+0x220>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8008ee8:	697b      	ldr	r3, [r7, #20]
 8008eea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d05c      	beq.n	8008fac <I2C_Master_ISR_IT+0x1c6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d057      	beq.n	8008fac <I2C_Master_ISR_IT+0x1c6>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f00:	b29b      	uxth	r3, r3
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d040      	beq.n	8008f88 <I2C_Master_ISR_IT+0x1a2>
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d13c      	bne.n	8008f88 <I2C_Master_ISR_IT+0x1a2>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	685b      	ldr	r3, [r3, #4]
 8008f14:	b29b      	uxth	r3, r3
 8008f16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008f1a:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f20:	b29b      	uxth	r3, r3
 8008f22:	2bff      	cmp	r3, #255	@ 0xff
 8008f24:	d90e      	bls.n	8008f44 <I2C_Master_ISR_IT+0x15e>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	22ff      	movs	r2, #255	@ 0xff
 8008f2a:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f30:	b2da      	uxtb	r2, r3
 8008f32:	8a79      	ldrh	r1, [r7, #18]
 8008f34:	2300      	movs	r3, #0
 8008f36:	9300      	str	r3, [sp, #0]
 8008f38:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008f3c:	68f8      	ldr	r0, [r7, #12]
 8008f3e:	f001 fbb9 	bl	800a6b4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008f42:	e032      	b.n	8008faa <I2C_Master_ISR_IT+0x1c4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f48:	b29a      	uxth	r2, r3
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f52:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008f56:	d00b      	beq.n	8008f70 <I2C_Master_ISR_IT+0x18a>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f5c:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8008f62:	8a79      	ldrh	r1, [r7, #18]
 8008f64:	2000      	movs	r0, #0
 8008f66:	9000      	str	r0, [sp, #0]
 8008f68:	68f8      	ldr	r0, [r7, #12]
 8008f6a:	f001 fba3 	bl	800a6b4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008f6e:	e01c      	b.n	8008faa <I2C_Master_ISR_IT+0x1c4>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f74:	b2da      	uxtb	r2, r3
 8008f76:	8a79      	ldrh	r1, [r7, #18]
 8008f78:	2300      	movs	r3, #0
 8008f7a:	9300      	str	r3, [sp, #0]
 8008f7c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008f80:	68f8      	ldr	r0, [r7, #12]
 8008f82:	f001 fb97 	bl	800a6b4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008f86:	e010      	b.n	8008faa <I2C_Master_ISR_IT+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	685b      	ldr	r3, [r3, #4]
 8008f8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f92:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008f96:	d003      	beq.n	8008fa0 <I2C_Master_ISR_IT+0x1ba>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8008f98:	68f8      	ldr	r0, [r7, #12]
 8008f9a:	f000 fd03 	bl	80099a4 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008f9e:	e032      	b.n	8009006 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008fa0:	2140      	movs	r1, #64	@ 0x40
 8008fa2:	68f8      	ldr	r0, [r7, #12]
 8008fa4:	f000 ffc6 	bl	8009f34 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008fa8:	e02d      	b.n	8009006 <I2C_Master_ISR_IT+0x220>
 8008faa:	e02c      	b.n	8009006 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d027      	beq.n	8009006 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d022      	beq.n	8009006 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008fc4:	b29b      	uxth	r3, r3
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d119      	bne.n	8008ffe <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	685b      	ldr	r3, [r3, #4]
 8008fd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008fd4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008fd8:	d015      	beq.n	8009006 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fde:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008fe2:	d108      	bne.n	8008ff6 <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	685a      	ldr	r2, [r3, #4]
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008ff2:	605a      	str	r2, [r3, #4]
 8008ff4:	e007      	b.n	8009006 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8008ff6:	68f8      	ldr	r0, [r7, #12]
 8008ff8:	f000 fcd4 	bl	80099a4 <I2C_ITMasterSeqCplt>
 8008ffc:	e003      	b.n	8009006 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008ffe:	2140      	movs	r1, #64	@ 0x40
 8009000:	68f8      	ldr	r0, [r7, #12]
 8009002:	f000 ff97 	bl	8009f34 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	f003 0320 	and.w	r3, r3, #32
 800900c:	2b00      	cmp	r3, #0
 800900e:	d008      	beq.n	8009022 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009016:	2b00      	cmp	r3, #0
 8009018:	d003      	beq.n	8009022 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800901a:	6979      	ldr	r1, [r7, #20]
 800901c:	68f8      	ldr	r0, [r7, #12]
 800901e:	f000 fd5b 	bl	8009ad8 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	2200      	movs	r2, #0
 8009026:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800902a:	2300      	movs	r3, #0
}
 800902c:	4618      	mov	r0, r3
 800902e:	3718      	adds	r7, #24
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}

08009034 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b086      	sub	sp, #24
 8009038:	af00      	add	r7, sp, #0
 800903a:	60f8      	str	r0, [r7, #12]
 800903c:	60b9      	str	r1, [r7, #8]
 800903e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009044:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009050:	2b01      	cmp	r3, #1
 8009052:	d101      	bne.n	8009058 <I2C_Slave_ISR_IT+0x24>
 8009054:	2302      	movs	r3, #2
 8009056:	e0e1      	b.n	800921c <I2C_Slave_ISR_IT+0x1e8>
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2201      	movs	r2, #1
 800905c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	f003 0320 	and.w	r3, r3, #32
 8009066:	2b00      	cmp	r3, #0
 8009068:	d008      	beq.n	800907c <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009070:	2b00      	cmp	r3, #0
 8009072:	d003      	beq.n	800907c <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8009074:	6939      	ldr	r1, [r7, #16]
 8009076:	68f8      	ldr	r0, [r7, #12]
 8009078:	f000 fdf6 	bl	8009c68 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	f003 0310 	and.w	r3, r3, #16
 8009082:	2b00      	cmp	r3, #0
 8009084:	d04b      	beq.n	800911e <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800908c:	2b00      	cmp	r3, #0
 800908e:	d046      	beq.n	800911e <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009094:	b29b      	uxth	r3, r3
 8009096:	2b00      	cmp	r3, #0
 8009098:	d128      	bne.n	80090ec <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80090a0:	b2db      	uxtb	r3, r3
 80090a2:	2b28      	cmp	r3, #40	@ 0x28
 80090a4:	d108      	bne.n	80090b8 <I2C_Slave_ISR_IT+0x84>
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80090ac:	d104      	bne.n	80090b8 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80090ae:	6939      	ldr	r1, [r7, #16]
 80090b0:	68f8      	ldr	r0, [r7, #12]
 80090b2:	f000 feeb 	bl	8009e8c <I2C_ITListenCplt>
 80090b6:	e031      	b.n	800911c <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80090be:	b2db      	uxtb	r3, r3
 80090c0:	2b29      	cmp	r3, #41	@ 0x29
 80090c2:	d10e      	bne.n	80090e2 <I2C_Slave_ISR_IT+0xae>
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80090ca:	d00a      	beq.n	80090e2 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	2210      	movs	r2, #16
 80090d2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80090d4:	68f8      	ldr	r0, [r7, #12]
 80090d6:	f001 f844 	bl	800a162 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80090da:	68f8      	ldr	r0, [r7, #12]
 80090dc:	f000 fc9f 	bl	8009a1e <I2C_ITSlaveSeqCplt>
 80090e0:	e01c      	b.n	800911c <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	2210      	movs	r2, #16
 80090e8:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80090ea:	e08f      	b.n	800920c <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	2210      	movs	r2, #16
 80090f2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090f8:	f043 0204 	orr.w	r2, r3, #4
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d003      	beq.n	800910e <I2C_Slave_ISR_IT+0xda>
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800910c:	d17e      	bne.n	800920c <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009112:	4619      	mov	r1, r3
 8009114:	68f8      	ldr	r0, [r7, #12]
 8009116:	f000 ff0d 	bl	8009f34 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800911a:	e077      	b.n	800920c <I2C_Slave_ISR_IT+0x1d8>
 800911c:	e076      	b.n	800920c <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800911e:	693b      	ldr	r3, [r7, #16]
 8009120:	f003 0304 	and.w	r3, r3, #4
 8009124:	2b00      	cmp	r3, #0
 8009126:	d02f      	beq.n	8009188 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800912e:	2b00      	cmp	r3, #0
 8009130:	d02a      	beq.n	8009188 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009136:	b29b      	uxth	r3, r3
 8009138:	2b00      	cmp	r3, #0
 800913a:	d018      	beq.n	800916e <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009146:	b2d2      	uxtb	r2, r2
 8009148:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800914e:	1c5a      	adds	r2, r3, #1
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009158:	3b01      	subs	r3, #1
 800915a:	b29a      	uxth	r2, r3
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009164:	b29b      	uxth	r3, r3
 8009166:	3b01      	subs	r3, #1
 8009168:	b29a      	uxth	r2, r3
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009172:	b29b      	uxth	r3, r3
 8009174:	2b00      	cmp	r3, #0
 8009176:	d14b      	bne.n	8009210 <I2C_Slave_ISR_IT+0x1dc>
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800917e:	d047      	beq.n	8009210 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8009180:	68f8      	ldr	r0, [r7, #12]
 8009182:	f000 fc4c 	bl	8009a1e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8009186:	e043      	b.n	8009210 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	f003 0308 	and.w	r3, r3, #8
 800918e:	2b00      	cmp	r3, #0
 8009190:	d009      	beq.n	80091a6 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8009198:	2b00      	cmp	r3, #0
 800919a:	d004      	beq.n	80091a6 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800919c:	6939      	ldr	r1, [r7, #16]
 800919e:	68f8      	ldr	r0, [r7, #12]
 80091a0:	f000 fb7c 	bl	800989c <I2C_ITAddrCplt>
 80091a4:	e035      	b.n	8009212 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	f003 0302 	and.w	r3, r3, #2
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d030      	beq.n	8009212 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d02b      	beq.n	8009212 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80091be:	b29b      	uxth	r3, r3
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d018      	beq.n	80091f6 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091c8:	781a      	ldrb	r2, [r3, #0]
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091d4:	1c5a      	adds	r2, r3, #1
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80091de:	b29b      	uxth	r3, r3
 80091e0:	3b01      	subs	r3, #1
 80091e2:	b29a      	uxth	r2, r3
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80091ec:	3b01      	subs	r3, #1
 80091ee:	b29a      	uxth	r2, r3
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	851a      	strh	r2, [r3, #40]	@ 0x28
 80091f4:	e00d      	b.n	8009212 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80091fc:	d002      	beq.n	8009204 <I2C_Slave_ISR_IT+0x1d0>
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d106      	bne.n	8009212 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8009204:	68f8      	ldr	r0, [r7, #12]
 8009206:	f000 fc0a 	bl	8009a1e <I2C_ITSlaveSeqCplt>
 800920a:	e002      	b.n	8009212 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 800920c:	bf00      	nop
 800920e:	e000      	b.n	8009212 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8009210:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	2200      	movs	r2, #0
 8009216:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800921a:	2300      	movs	r3, #0
}
 800921c:	4618      	mov	r0, r3
 800921e:	3718      	adds	r7, #24
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}

08009224 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b088      	sub	sp, #32
 8009228:	af02      	add	r7, sp, #8
 800922a:	60f8      	str	r0, [r7, #12]
 800922c:	60b9      	str	r1, [r7, #8]
 800922e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009236:	2b01      	cmp	r3, #1
 8009238:	d101      	bne.n	800923e <I2C_Master_ISR_DMA+0x1a>
 800923a:	2302      	movs	r3, #2
 800923c:	e0d9      	b.n	80093f2 <I2C_Master_ISR_DMA+0x1ce>
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	2201      	movs	r2, #1
 8009242:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	f003 0310 	and.w	r3, r3, #16
 800924c:	2b00      	cmp	r3, #0
 800924e:	d016      	beq.n	800927e <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8009256:	2b00      	cmp	r3, #0
 8009258:	d011      	beq.n	800927e <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	2210      	movs	r2, #16
 8009260:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009266:	f043 0204 	orr.w	r2, r3, #4
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800926e:	2120      	movs	r1, #32
 8009270:	68f8      	ldr	r0, [r7, #12]
 8009272:	f001 fa51 	bl	800a718 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009276:	68f8      	ldr	r0, [r7, #12]
 8009278:	f000 ff73 	bl	800a162 <I2C_Flush_TXDR>
 800927c:	e0b4      	b.n	80093e8 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009284:	2b00      	cmp	r3, #0
 8009286:	d071      	beq.n	800936c <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800928e:	2b00      	cmp	r3, #0
 8009290:	d06c      	beq.n	800936c <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	681a      	ldr	r2, [r3, #0]
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80092a0:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80092a6:	b29b      	uxth	r3, r3
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d04e      	beq.n	800934a <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	685b      	ldr	r3, [r3, #4]
 80092b2:	b29b      	uxth	r3, r3
 80092b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80092b8:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80092be:	b29b      	uxth	r3, r3
 80092c0:	2bff      	cmp	r3, #255	@ 0xff
 80092c2:	d906      	bls.n	80092d2 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	22ff      	movs	r2, #255	@ 0xff
 80092c8:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 80092ca:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80092ce:	617b      	str	r3, [r7, #20]
 80092d0:	e010      	b.n	80092f4 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80092d6:	b29a      	uxth	r2, r3
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092e0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80092e4:	d003      	beq.n	80092ee <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092ea:	617b      	str	r3, [r7, #20]
 80092ec:	e002      	b.n	80092f4 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80092ee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80092f2:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80092f8:	b2da      	uxtb	r2, r3
 80092fa:	8a79      	ldrh	r1, [r7, #18]
 80092fc:	2300      	movs	r3, #0
 80092fe:	9300      	str	r3, [sp, #0]
 8009300:	697b      	ldr	r3, [r7, #20]
 8009302:	68f8      	ldr	r0, [r7, #12]
 8009304:	f001 f9d6 	bl	800a6b4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800930c:	b29a      	uxth	r2, r3
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009312:	1ad3      	subs	r3, r2, r3
 8009314:	b29a      	uxth	r2, r3
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009320:	b2db      	uxtb	r3, r3
 8009322:	2b22      	cmp	r3, #34	@ 0x22
 8009324:	d108      	bne.n	8009338 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	681a      	ldr	r2, [r3, #0]
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009334:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8009336:	e057      	b.n	80093e8 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	681a      	ldr	r2, [r3, #0]
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009346:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8009348:	e04e      	b.n	80093e8 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	685b      	ldr	r3, [r3, #4]
 8009350:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009354:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009358:	d003      	beq.n	8009362 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800935a:	68f8      	ldr	r0, [r7, #12]
 800935c:	f000 fb22 	bl	80099a4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8009360:	e042      	b.n	80093e8 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009362:	2140      	movs	r1, #64	@ 0x40
 8009364:	68f8      	ldr	r0, [r7, #12]
 8009366:	f000 fde5 	bl	8009f34 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800936a:	e03d      	b.n	80093e8 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009372:	2b00      	cmp	r3, #0
 8009374:	d028      	beq.n	80093c8 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800937c:	2b00      	cmp	r3, #0
 800937e:	d023      	beq.n	80093c8 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009384:	b29b      	uxth	r3, r3
 8009386:	2b00      	cmp	r3, #0
 8009388:	d119      	bne.n	80093be <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	685b      	ldr	r3, [r3, #4]
 8009390:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009394:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009398:	d025      	beq.n	80093e6 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800939e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80093a2:	d108      	bne.n	80093b6 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	685a      	ldr	r2, [r3, #4]
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80093b2:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80093b4:	e017      	b.n	80093e6 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80093b6:	68f8      	ldr	r0, [r7, #12]
 80093b8:	f000 faf4 	bl	80099a4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80093bc:	e013      	b.n	80093e6 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80093be:	2140      	movs	r1, #64	@ 0x40
 80093c0:	68f8      	ldr	r0, [r7, #12]
 80093c2:	f000 fdb7 	bl	8009f34 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80093c6:	e00e      	b.n	80093e6 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	f003 0320 	and.w	r3, r3, #32
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d00a      	beq.n	80093e8 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d005      	beq.n	80093e8 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80093dc:	68b9      	ldr	r1, [r7, #8]
 80093de:	68f8      	ldr	r0, [r7, #12]
 80093e0:	f000 fb7a 	bl	8009ad8 <I2C_ITMasterCplt>
 80093e4:	e000      	b.n	80093e8 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 80093e6:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	2200      	movs	r2, #0
 80093ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80093f0:	2300      	movs	r3, #0
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3718      	adds	r7, #24
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}
	...

080093fc <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b088      	sub	sp, #32
 8009400:	af02      	add	r7, sp, #8
 8009402:	60f8      	str	r0, [r7, #12]
 8009404:	60b9      	str	r1, [r7, #8]
 8009406:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8009408:	4b8d      	ldr	r3, [pc, #564]	@ (8009640 <I2C_Mem_ISR_DMA+0x244>)
 800940a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009412:	2b01      	cmp	r3, #1
 8009414:	d101      	bne.n	800941a <I2C_Mem_ISR_DMA+0x1e>
 8009416:	2302      	movs	r3, #2
 8009418:	e10e      	b.n	8009638 <I2C_Mem_ISR_DMA+0x23c>
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	2201      	movs	r2, #1
 800941e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	f003 0310 	and.w	r3, r3, #16
 8009428:	2b00      	cmp	r3, #0
 800942a:	d016      	beq.n	800945a <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8009432:	2b00      	cmp	r3, #0
 8009434:	d011      	beq.n	800945a <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	2210      	movs	r2, #16
 800943c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009442:	f043 0204 	orr.w	r2, r3, #4
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800944a:	2120      	movs	r1, #32
 800944c:	68f8      	ldr	r0, [r7, #12]
 800944e:	f001 f963 	bl	800a718 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009452:	68f8      	ldr	r0, [r7, #12]
 8009454:	f000 fe85 	bl	800a162 <I2C_Flush_TXDR>
 8009458:	e0e9      	b.n	800962e <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	f003 0302 	and.w	r3, r3, #2
 8009460:	2b00      	cmp	r3, #0
 8009462:	d00e      	beq.n	8009482 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800946a:	2b00      	cmp	r3, #0
 800946c:	d009      	beq.n	8009482 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	68fa      	ldr	r2, [r7, #12]
 8009474:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009476:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	f04f 32ff 	mov.w	r2, #4294967295
 800947e:	651a      	str	r2, [r3, #80]	@ 0x50
 8009480:	e0d5      	b.n	800962e <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009488:	2b00      	cmp	r3, #0
 800948a:	d05f      	beq.n	800954c <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8009492:	2b00      	cmp	r3, #0
 8009494:	d05a      	beq.n	800954c <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009496:	2101      	movs	r1, #1
 8009498:	68f8      	ldr	r0, [r7, #12]
 800949a:	f001 f9c1 	bl	800a820 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800949e:	2110      	movs	r1, #16
 80094a0:	68f8      	ldr	r0, [r7, #12]
 80094a2:	f001 f939 	bl	800a718 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80094aa:	b29b      	uxth	r3, r3
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d048      	beq.n	8009542 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80094b4:	b29b      	uxth	r3, r3
 80094b6:	2bff      	cmp	r3, #255	@ 0xff
 80094b8:	d910      	bls.n	80094dc <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	22ff      	movs	r2, #255	@ 0xff
 80094be:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80094c4:	b299      	uxth	r1, r3
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80094ca:	b2da      	uxtb	r2, r3
 80094cc:	2300      	movs	r3, #0
 80094ce:	9300      	str	r3, [sp, #0]
 80094d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80094d4:	68f8      	ldr	r0, [r7, #12]
 80094d6:	f001 f8ed 	bl	800a6b4 <I2C_TransferConfig>
 80094da:	e011      	b.n	8009500 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80094e0:	b29a      	uxth	r2, r3
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80094ea:	b299      	uxth	r1, r3
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80094f0:	b2da      	uxtb	r2, r3
 80094f2:	2300      	movs	r3, #0
 80094f4:	9300      	str	r3, [sp, #0]
 80094f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80094fa:	68f8      	ldr	r0, [r7, #12]
 80094fc:	f001 f8da 	bl	800a6b4 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009504:	b29a      	uxth	r2, r3
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800950a:	1ad3      	subs	r3, r2, r3
 800950c:	b29a      	uxth	r2, r3
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009518:	b2db      	uxtb	r3, r3
 800951a:	2b22      	cmp	r3, #34	@ 0x22
 800951c:	d108      	bne.n	8009530 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	681a      	ldr	r2, [r3, #0]
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800952c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800952e:	e07e      	b.n	800962e <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	681a      	ldr	r2, [r3, #0]
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800953e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8009540:	e075      	b.n	800962e <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009542:	2140      	movs	r1, #64	@ 0x40
 8009544:	68f8      	ldr	r0, [r7, #12]
 8009546:	f000 fcf5 	bl	8009f34 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800954a:	e070      	b.n	800962e <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009552:	2b00      	cmp	r3, #0
 8009554:	d05d      	beq.n	8009612 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800955c:	2b00      	cmp	r3, #0
 800955e:	d058      	beq.n	8009612 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009560:	2101      	movs	r1, #1
 8009562:	68f8      	ldr	r0, [r7, #12]
 8009564:	f001 f95c 	bl	800a820 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8009568:	2110      	movs	r1, #16
 800956a:	68f8      	ldr	r0, [r7, #12]
 800956c:	f001 f8d4 	bl	800a718 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009576:	b2db      	uxtb	r3, r3
 8009578:	2b22      	cmp	r3, #34	@ 0x22
 800957a:	d101      	bne.n	8009580 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 800957c:	4b31      	ldr	r3, [pc, #196]	@ (8009644 <I2C_Mem_ISR_DMA+0x248>)
 800957e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009584:	b29b      	uxth	r3, r3
 8009586:	2bff      	cmp	r3, #255	@ 0xff
 8009588:	d910      	bls.n	80095ac <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	22ff      	movs	r2, #255	@ 0xff
 800958e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009594:	b299      	uxth	r1, r3
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800959a:	b2da      	uxtb	r2, r3
 800959c:	697b      	ldr	r3, [r7, #20]
 800959e:	9300      	str	r3, [sp, #0]
 80095a0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80095a4:	68f8      	ldr	r0, [r7, #12]
 80095a6:	f001 f885 	bl	800a6b4 <I2C_TransferConfig>
 80095aa:	e011      	b.n	80095d0 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80095b0:	b29a      	uxth	r2, r3
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80095ba:	b299      	uxth	r1, r3
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80095c0:	b2da      	uxtb	r2, r3
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	9300      	str	r3, [sp, #0]
 80095c6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80095ca:	68f8      	ldr	r0, [r7, #12]
 80095cc:	f001 f872 	bl	800a6b4 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80095d4:	b29a      	uxth	r2, r3
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80095da:	1ad3      	subs	r3, r2, r3
 80095dc:	b29a      	uxth	r2, r3
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80095e8:	b2db      	uxtb	r3, r3
 80095ea:	2b22      	cmp	r3, #34	@ 0x22
 80095ec:	d108      	bne.n	8009600 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	681a      	ldr	r2, [r3, #0]
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80095fc:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80095fe:	e016      	b.n	800962e <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	681a      	ldr	r2, [r3, #0]
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800960e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009610:	e00d      	b.n	800962e <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	f003 0320 	and.w	r3, r3, #32
 8009618:	2b00      	cmp	r3, #0
 800961a:	d008      	beq.n	800962e <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009622:	2b00      	cmp	r3, #0
 8009624:	d003      	beq.n	800962e <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8009626:	68b9      	ldr	r1, [r7, #8]
 8009628:	68f8      	ldr	r0, [r7, #12]
 800962a:	f000 fa55 	bl	8009ad8 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	2200      	movs	r2, #0
 8009632:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8009636:	2300      	movs	r3, #0
}
 8009638:	4618      	mov	r0, r3
 800963a:	3718      	adds	r7, #24
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}
 8009640:	80002000 	.word	0x80002000
 8009644:	80002400 	.word	0x80002400

08009648 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b088      	sub	sp, #32
 800964c:	af00      	add	r7, sp, #0
 800964e:	60f8      	str	r0, [r7, #12]
 8009650:	60b9      	str	r1, [r7, #8]
 8009652:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009658:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800965a:	2300      	movs	r3, #0
 800965c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009664:	2b01      	cmp	r3, #1
 8009666:	d101      	bne.n	800966c <I2C_Slave_ISR_DMA+0x24>
 8009668:	2302      	movs	r3, #2
 800966a:	e0bf      	b.n	80097ec <I2C_Slave_ISR_DMA+0x1a4>
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	2201      	movs	r2, #1
 8009670:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	f003 0320 	and.w	r3, r3, #32
 800967a:	2b00      	cmp	r3, #0
 800967c:	d008      	beq.n	8009690 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009684:	2b00      	cmp	r3, #0
 8009686:	d003      	beq.n	8009690 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8009688:	68b9      	ldr	r1, [r7, #8]
 800968a:	68f8      	ldr	r0, [r7, #12]
 800968c:	f000 faec 	bl	8009c68 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	f003 0310 	and.w	r3, r3, #16
 8009696:	2b00      	cmp	r3, #0
 8009698:	f000 8095 	beq.w	80097c6 <I2C_Slave_ISR_DMA+0x17e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	f000 808f 	beq.w	80097c6 <I2C_Slave_ISR_DMA+0x17e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d104      	bne.n	80096bc <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d07d      	beq.n	80097b8 <I2C_Slave_ISR_DMA+0x170>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d00c      	beq.n	80096de <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d007      	beq.n	80096de <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	685b      	ldr	r3, [r3, #4]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d101      	bne.n	80096de <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 80096da:	2301      	movs	r3, #1
 80096dc:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d00c      	beq.n	8009700 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d007      	beq.n	8009700 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	685b      	ldr	r3, [r3, #4]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d101      	bne.n	8009700 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 80096fc:	2301      	movs	r3, #1
 80096fe:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8009700:	69fb      	ldr	r3, [r7, #28]
 8009702:	2b01      	cmp	r3, #1
 8009704:	d128      	bne.n	8009758 <I2C_Slave_ISR_DMA+0x110>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800970c:	b2db      	uxtb	r3, r3
 800970e:	2b28      	cmp	r3, #40	@ 0x28
 8009710:	d108      	bne.n	8009724 <I2C_Slave_ISR_DMA+0xdc>
 8009712:	69bb      	ldr	r3, [r7, #24]
 8009714:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009718:	d104      	bne.n	8009724 <I2C_Slave_ISR_DMA+0xdc>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800971a:	68b9      	ldr	r1, [r7, #8]
 800971c:	68f8      	ldr	r0, [r7, #12]
 800971e:	f000 fbb5 	bl	8009e8c <I2C_ITListenCplt>
 8009722:	e048      	b.n	80097b6 <I2C_Slave_ISR_DMA+0x16e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800972a:	b2db      	uxtb	r3, r3
 800972c:	2b29      	cmp	r3, #41	@ 0x29
 800972e:	d10e      	bne.n	800974e <I2C_Slave_ISR_DMA+0x106>
 8009730:	69bb      	ldr	r3, [r7, #24]
 8009732:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009736:	d00a      	beq.n	800974e <I2C_Slave_ISR_DMA+0x106>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	2210      	movs	r2, #16
 800973e:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8009740:	68f8      	ldr	r0, [r7, #12]
 8009742:	f000 fd0e 	bl	800a162 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8009746:	68f8      	ldr	r0, [r7, #12]
 8009748:	f000 f969 	bl	8009a1e <I2C_ITSlaveSeqCplt>
 800974c:	e033      	b.n	80097b6 <I2C_Slave_ISR_DMA+0x16e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	2210      	movs	r2, #16
 8009754:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8009756:	e034      	b.n	80097c2 <I2C_Slave_ISR_DMA+0x17a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	2210      	movs	r2, #16
 800975e:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009764:	f043 0204 	orr.w	r2, r3, #4
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009772:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8009774:	69bb      	ldr	r3, [r7, #24]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d003      	beq.n	8009782 <I2C_Slave_ISR_DMA+0x13a>
 800977a:	69bb      	ldr	r3, [r7, #24]
 800977c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009780:	d11f      	bne.n	80097c2 <I2C_Slave_ISR_DMA+0x17a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009782:	7dfb      	ldrb	r3, [r7, #23]
 8009784:	2b21      	cmp	r3, #33	@ 0x21
 8009786:	d002      	beq.n	800978e <I2C_Slave_ISR_DMA+0x146>
 8009788:	7dfb      	ldrb	r3, [r7, #23]
 800978a:	2b29      	cmp	r3, #41	@ 0x29
 800978c:	d103      	bne.n	8009796 <I2C_Slave_ISR_DMA+0x14e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	2221      	movs	r2, #33	@ 0x21
 8009792:	631a      	str	r2, [r3, #48]	@ 0x30
 8009794:	e008      	b.n	80097a8 <I2C_Slave_ISR_DMA+0x160>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009796:	7dfb      	ldrb	r3, [r7, #23]
 8009798:	2b22      	cmp	r3, #34	@ 0x22
 800979a:	d002      	beq.n	80097a2 <I2C_Slave_ISR_DMA+0x15a>
 800979c:	7dfb      	ldrb	r3, [r7, #23]
 800979e:	2b2a      	cmp	r3, #42	@ 0x2a
 80097a0:	d102      	bne.n	80097a8 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	2222      	movs	r2, #34	@ 0x22
 80097a6:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097ac:	4619      	mov	r1, r3
 80097ae:	68f8      	ldr	r0, [r7, #12]
 80097b0:	f000 fbc0 	bl	8009f34 <I2C_ITError>
      if (treatdmanack == 1U)
 80097b4:	e005      	b.n	80097c2 <I2C_Slave_ISR_DMA+0x17a>
 80097b6:	e004      	b.n	80097c2 <I2C_Slave_ISR_DMA+0x17a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	2210      	movs	r2, #16
 80097be:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80097c0:	e00f      	b.n	80097e2 <I2C_Slave_ISR_DMA+0x19a>
      if (treatdmanack == 1U)
 80097c2:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80097c4:	e00d      	b.n	80097e2 <I2C_Slave_ISR_DMA+0x19a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	f003 0308 	and.w	r3, r3, #8
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d008      	beq.n	80097e2 <I2C_Slave_ISR_DMA+0x19a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d003      	beq.n	80097e2 <I2C_Slave_ISR_DMA+0x19a>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80097da:	68b9      	ldr	r1, [r7, #8]
 80097dc:	68f8      	ldr	r0, [r7, #12]
 80097de:	f000 f85d 	bl	800989c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	2200      	movs	r2, #0
 80097e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80097ea:	2300      	movs	r3, #0
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	3720      	adds	r7, #32
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}

080097f4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b086      	sub	sp, #24
 80097f8:	af02      	add	r7, sp, #8
 80097fa:	60f8      	str	r0, [r7, #12]
 80097fc:	4608      	mov	r0, r1
 80097fe:	4611      	mov	r1, r2
 8009800:	461a      	mov	r2, r3
 8009802:	4603      	mov	r3, r0
 8009804:	817b      	strh	r3, [r7, #10]
 8009806:	460b      	mov	r3, r1
 8009808:	813b      	strh	r3, [r7, #8]
 800980a:	4613      	mov	r3, r2
 800980c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800980e:	88fb      	ldrh	r3, [r7, #6]
 8009810:	b2da      	uxtb	r2, r3
 8009812:	8979      	ldrh	r1, [r7, #10]
 8009814:	4b20      	ldr	r3, [pc, #128]	@ (8009898 <I2C_RequestMemoryRead+0xa4>)
 8009816:	9300      	str	r3, [sp, #0]
 8009818:	2300      	movs	r3, #0
 800981a:	68f8      	ldr	r0, [r7, #12]
 800981c:	f000 ff4a 	bl	800a6b4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009820:	69fa      	ldr	r2, [r7, #28]
 8009822:	69b9      	ldr	r1, [r7, #24]
 8009824:	68f8      	ldr	r0, [r7, #12]
 8009826:	f000 fdda 	bl	800a3de <I2C_WaitOnTXISFlagUntilTimeout>
 800982a:	4603      	mov	r3, r0
 800982c:	2b00      	cmp	r3, #0
 800982e:	d001      	beq.n	8009834 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8009830:	2301      	movs	r3, #1
 8009832:	e02c      	b.n	800988e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009834:	88fb      	ldrh	r3, [r7, #6]
 8009836:	2b01      	cmp	r3, #1
 8009838:	d105      	bne.n	8009846 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800983a:	893b      	ldrh	r3, [r7, #8]
 800983c:	b2da      	uxtb	r2, r3
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	629a      	str	r2, [r3, #40]	@ 0x28
 8009844:	e015      	b.n	8009872 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009846:	893b      	ldrh	r3, [r7, #8]
 8009848:	0a1b      	lsrs	r3, r3, #8
 800984a:	b29b      	uxth	r3, r3
 800984c:	b2da      	uxtb	r2, r3
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009854:	69fa      	ldr	r2, [r7, #28]
 8009856:	69b9      	ldr	r1, [r7, #24]
 8009858:	68f8      	ldr	r0, [r7, #12]
 800985a:	f000 fdc0 	bl	800a3de <I2C_WaitOnTXISFlagUntilTimeout>
 800985e:	4603      	mov	r3, r0
 8009860:	2b00      	cmp	r3, #0
 8009862:	d001      	beq.n	8009868 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8009864:	2301      	movs	r3, #1
 8009866:	e012      	b.n	800988e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009868:	893b      	ldrh	r3, [r7, #8]
 800986a:	b2da      	uxtb	r2, r3
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009872:	69fb      	ldr	r3, [r7, #28]
 8009874:	9300      	str	r3, [sp, #0]
 8009876:	69bb      	ldr	r3, [r7, #24]
 8009878:	2200      	movs	r2, #0
 800987a:	2140      	movs	r1, #64	@ 0x40
 800987c:	68f8      	ldr	r0, [r7, #12]
 800987e:	f000 fd5f 	bl	800a340 <I2C_WaitOnFlagUntilTimeout>
 8009882:	4603      	mov	r3, r0
 8009884:	2b00      	cmp	r3, #0
 8009886:	d001      	beq.n	800988c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8009888:	2301      	movs	r3, #1
 800988a:	e000      	b.n	800988e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800988c:	2300      	movs	r3, #0
}
 800988e:	4618      	mov	r0, r3
 8009890:	3710      	adds	r7, #16
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}
 8009896:	bf00      	nop
 8009898:	80002000 	.word	0x80002000

0800989c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b084      	sub	sp, #16
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
 80098a4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80098ac:	b2db      	uxtb	r3, r3
 80098ae:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80098b2:	2b28      	cmp	r3, #40	@ 0x28
 80098b4:	d16a      	bne.n	800998c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	699b      	ldr	r3, [r3, #24]
 80098bc:	0c1b      	lsrs	r3, r3, #16
 80098be:	b2db      	uxtb	r3, r3
 80098c0:	f003 0301 	and.w	r3, r3, #1
 80098c4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	699b      	ldr	r3, [r3, #24]
 80098cc:	0c1b      	lsrs	r3, r3, #16
 80098ce:	b29b      	uxth	r3, r3
 80098d0:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80098d4:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	689b      	ldr	r3, [r3, #8]
 80098dc:	b29b      	uxth	r3, r3
 80098de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80098e2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	68db      	ldr	r3, [r3, #12]
 80098ea:	b29b      	uxth	r3, r3
 80098ec:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80098f0:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	68db      	ldr	r3, [r3, #12]
 80098f6:	2b02      	cmp	r3, #2
 80098f8:	d138      	bne.n	800996c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80098fa:	897b      	ldrh	r3, [r7, #10]
 80098fc:	09db      	lsrs	r3, r3, #7
 80098fe:	b29a      	uxth	r2, r3
 8009900:	89bb      	ldrh	r3, [r7, #12]
 8009902:	4053      	eors	r3, r2
 8009904:	b29b      	uxth	r3, r3
 8009906:	f003 0306 	and.w	r3, r3, #6
 800990a:	2b00      	cmp	r3, #0
 800990c:	d11c      	bne.n	8009948 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800990e:	897b      	ldrh	r3, [r7, #10]
 8009910:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009916:	1c5a      	adds	r2, r3, #1
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009920:	2b02      	cmp	r3, #2
 8009922:	d13b      	bne.n	800999c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2200      	movs	r2, #0
 8009928:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	2208      	movs	r2, #8
 8009930:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	2200      	movs	r2, #0
 8009936:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800993a:	89ba      	ldrh	r2, [r7, #12]
 800993c:	7bfb      	ldrb	r3, [r7, #15]
 800993e:	4619      	mov	r1, r3
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f7ff fa10 	bl	8008d66 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8009946:	e029      	b.n	800999c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8009948:	893b      	ldrh	r3, [r7, #8]
 800994a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800994c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f000 ff65 	bl	800a820 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2200      	movs	r2, #0
 800995a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800995e:	89ba      	ldrh	r2, [r7, #12]
 8009960:	7bfb      	ldrb	r3, [r7, #15]
 8009962:	4619      	mov	r1, r3
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f7ff f9fe 	bl	8008d66 <HAL_I2C_AddrCallback>
}
 800996a:	e017      	b.n	800999c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800996c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f000 ff55 	bl	800a820 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2200      	movs	r2, #0
 800997a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800997e:	89ba      	ldrh	r2, [r7, #12]
 8009980:	7bfb      	ldrb	r3, [r7, #15]
 8009982:	4619      	mov	r1, r3
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f7ff f9ee 	bl	8008d66 <HAL_I2C_AddrCallback>
}
 800998a:	e007      	b.n	800999c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	2208      	movs	r2, #8
 8009992:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2200      	movs	r2, #0
 8009998:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800999c:	bf00      	nop
 800999e:	3710      	adds	r7, #16
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}

080099a4 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b082      	sub	sp, #8
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2200      	movs	r2, #0
 80099b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80099ba:	b2db      	uxtb	r3, r3
 80099bc:	2b21      	cmp	r3, #33	@ 0x21
 80099be:	d115      	bne.n	80099ec <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2220      	movs	r2, #32
 80099c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2211      	movs	r2, #17
 80099cc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2200      	movs	r2, #0
 80099d2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80099d4:	2101      	movs	r1, #1
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f000 ff22 	bl	800a820 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2200      	movs	r2, #0
 80099e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f7fb faaf 	bl	8004f48 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80099ea:	e014      	b.n	8009a16 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2220      	movs	r2, #32
 80099f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2212      	movs	r2, #18
 80099f8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2200      	movs	r2, #0
 80099fe:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8009a00:	2102      	movs	r1, #2
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f000 ff0c 	bl	800a820 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	f7fb faa9 	bl	8004f68 <HAL_I2C_MasterRxCpltCallback>
}
 8009a16:	bf00      	nop
 8009a18:	3708      	adds	r7, #8
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}

08009a1e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8009a1e:	b580      	push	{r7, lr}
 8009a20:	b084      	sub	sp, #16
 8009a22:	af00      	add	r7, sp, #0
 8009a24:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2200      	movs	r2, #0
 8009a32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d008      	beq.n	8009a52 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	681a      	ldr	r2, [r3, #0]
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009a4e:	601a      	str	r2, [r3, #0]
 8009a50:	e00c      	b.n	8009a6c <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d007      	beq.n	8009a6c <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	681a      	ldr	r2, [r3, #0]
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009a6a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009a72:	b2db      	uxtb	r3, r3
 8009a74:	2b29      	cmp	r3, #41	@ 0x29
 8009a76:	d112      	bne.n	8009a9e <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2228      	movs	r2, #40	@ 0x28
 8009a7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2221      	movs	r2, #33	@ 0x21
 8009a84:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009a86:	2101      	movs	r1, #1
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f000 fec9 	bl	800a820 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2200      	movs	r2, #0
 8009a92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f7ff f951 	bl	8008d3e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009a9c:	e017      	b.n	8009ace <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009aa4:	b2db      	uxtb	r3, r3
 8009aa6:	2b2a      	cmp	r3, #42	@ 0x2a
 8009aa8:	d111      	bne.n	8009ace <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2228      	movs	r2, #40	@ 0x28
 8009aae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2222      	movs	r2, #34	@ 0x22
 8009ab6:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8009ab8:	2102      	movs	r1, #2
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f000 feb0 	bl	800a820 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f7ff f942 	bl	8008d52 <HAL_I2C_SlaveRxCpltCallback>
}
 8009ace:	bf00      	nop
 8009ad0:	3710      	adds	r7, #16
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}
	...

08009ad8 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b086      	sub	sp, #24
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
 8009ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	2220      	movs	r2, #32
 8009aec:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009af4:	b2db      	uxtb	r3, r3
 8009af6:	2b21      	cmp	r3, #33	@ 0x21
 8009af8:	d107      	bne.n	8009b0a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009afa:	2101      	movs	r1, #1
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f000 fe8f 	bl	800a820 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2211      	movs	r2, #17
 8009b06:	631a      	str	r2, [r3, #48]	@ 0x30
 8009b08:	e00c      	b.n	8009b24 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009b10:	b2db      	uxtb	r3, r3
 8009b12:	2b22      	cmp	r3, #34	@ 0x22
 8009b14:	d106      	bne.n	8009b24 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8009b16:	2102      	movs	r1, #2
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f000 fe81 	bl	800a820 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2212      	movs	r2, #18
 8009b22:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	6859      	ldr	r1, [r3, #4]
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681a      	ldr	r2, [r3, #0]
 8009b2e:	4b4c      	ldr	r3, [pc, #304]	@ (8009c60 <I2C_ITMasterCplt+0x188>)
 8009b30:	400b      	ands	r3, r1
 8009b32:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2200      	movs	r2, #0
 8009b38:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	4a49      	ldr	r2, [pc, #292]	@ (8009c64 <I2C_ITMasterCplt+0x18c>)
 8009b3e:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	f003 0310 	and.w	r3, r3, #16
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d009      	beq.n	8009b5e <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	2210      	movs	r2, #16
 8009b50:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b56:	f043 0204 	orr.w	r2, r3, #4
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009b64:	b2db      	uxtb	r3, r3
 8009b66:	2b60      	cmp	r3, #96	@ 0x60
 8009b68:	d10a      	bne.n	8009b80 <I2C_ITMasterCplt+0xa8>
 8009b6a:	697b      	ldr	r3, [r7, #20]
 8009b6c:	f003 0304 	and.w	r3, r3, #4
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d005      	beq.n	8009b80 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b7a:	b2db      	uxtb	r3, r3
 8009b7c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8009b7e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f000 faee 	bl	800a162 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b8a:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009b92:	b2db      	uxtb	r3, r3
 8009b94:	2b60      	cmp	r3, #96	@ 0x60
 8009b96:	d002      	beq.n	8009b9e <I2C_ITMasterCplt+0xc6>
 8009b98:	693b      	ldr	r3, [r7, #16]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d006      	beq.n	8009bac <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ba2:	4619      	mov	r1, r3
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f000 f9c5 	bl	8009f34 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009baa:	e054      	b.n	8009c56 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009bb2:	b2db      	uxtb	r3, r3
 8009bb4:	2b21      	cmp	r3, #33	@ 0x21
 8009bb6:	d124      	bne.n	8009c02 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2220      	movs	r2, #32
 8009bbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009bcc:	b2db      	uxtb	r3, r3
 8009bce:	2b40      	cmp	r3, #64	@ 0x40
 8009bd0:	d10b      	bne.n	8009bea <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2200      	movs	r2, #0
 8009bde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f7ff f8d7 	bl	8008d96 <HAL_I2C_MemTxCpltCallback>
}
 8009be8:	e035      	b.n	8009c56 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2200      	movs	r2, #0
 8009bee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f7fb f9a4 	bl	8004f48 <HAL_I2C_MasterTxCpltCallback>
}
 8009c00:	e029      	b.n	8009c56 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009c08:	b2db      	uxtb	r3, r3
 8009c0a:	2b22      	cmp	r3, #34	@ 0x22
 8009c0c:	d123      	bne.n	8009c56 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2220      	movs	r2, #32
 8009c12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009c22:	b2db      	uxtb	r3, r3
 8009c24:	2b40      	cmp	r3, #64	@ 0x40
 8009c26:	d10b      	bne.n	8009c40 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2200      	movs	r2, #0
 8009c34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f7ff f8b6 	bl	8008daa <HAL_I2C_MemRxCpltCallback>
}
 8009c3e:	e00a      	b.n	8009c56 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2200      	movs	r2, #0
 8009c44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f7fb f989 	bl	8004f68 <HAL_I2C_MasterRxCpltCallback>
}
 8009c56:	bf00      	nop
 8009c58:	3718      	adds	r7, #24
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}
 8009c5e:	bf00      	nop
 8009c60:	fe00e800 	.word	0xfe00e800
 8009c64:	ffff0000 	.word	0xffff0000

08009c68 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b086      	sub	sp, #24
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
 8009c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009c84:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	2220      	movs	r2, #32
 8009c8c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009c8e:	7bfb      	ldrb	r3, [r7, #15]
 8009c90:	2b21      	cmp	r3, #33	@ 0x21
 8009c92:	d002      	beq.n	8009c9a <I2C_ITSlaveCplt+0x32>
 8009c94:	7bfb      	ldrb	r3, [r7, #15]
 8009c96:	2b29      	cmp	r3, #41	@ 0x29
 8009c98:	d108      	bne.n	8009cac <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8009c9a:	f248 0101 	movw	r1, #32769	@ 0x8001
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f000 fdbe 	bl	800a820 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2221      	movs	r2, #33	@ 0x21
 8009ca8:	631a      	str	r2, [r3, #48]	@ 0x30
 8009caa:	e019      	b.n	8009ce0 <I2C_ITSlaveCplt+0x78>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009cac:	7bfb      	ldrb	r3, [r7, #15]
 8009cae:	2b22      	cmp	r3, #34	@ 0x22
 8009cb0:	d002      	beq.n	8009cb8 <I2C_ITSlaveCplt+0x50>
 8009cb2:	7bfb      	ldrb	r3, [r7, #15]
 8009cb4:	2b2a      	cmp	r3, #42	@ 0x2a
 8009cb6:	d108      	bne.n	8009cca <I2C_ITSlaveCplt+0x62>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8009cb8:	f248 0102 	movw	r1, #32770	@ 0x8002
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f000 fdaf 	bl	800a820 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2222      	movs	r2, #34	@ 0x22
 8009cc6:	631a      	str	r2, [r3, #48]	@ 0x30
 8009cc8:	e00a      	b.n	8009ce0 <I2C_ITSlaveCplt+0x78>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8009cca:	7bfb      	ldrb	r3, [r7, #15]
 8009ccc:	2b28      	cmp	r3, #40	@ 0x28
 8009cce:	d107      	bne.n	8009ce0 <I2C_ITSlaveCplt+0x78>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8009cd0:	f248 0103 	movw	r1, #32771	@ 0x8003
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f000 fda3 	bl	800a820 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	685a      	ldr	r2, [r3, #4]
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009cee:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	6859      	ldr	r1, [r3, #4]
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681a      	ldr	r2, [r3, #0]
 8009cfa:	4b62      	ldr	r3, [pc, #392]	@ (8009e84 <I2C_ITSlaveCplt+0x21c>)
 8009cfc:	400b      	ands	r3, r1
 8009cfe:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f000 fa2e 	bl	800a162 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8009d06:	693b      	ldr	r3, [r7, #16]
 8009d08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d013      	beq.n	8009d38 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	681a      	ldr	r2, [r3, #0]
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009d1e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d01f      	beq.n	8009d68 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	685b      	ldr	r3, [r3, #4]
 8009d30:	b29a      	uxth	r2, r3
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009d36:	e017      	b.n	8009d68 <I2C_ITSlaveCplt+0x100>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8009d38:	693b      	ldr	r3, [r7, #16]
 8009d3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d012      	beq.n	8009d68 <I2C_ITSlaveCplt+0x100>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	681a      	ldr	r2, [r3, #0]
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009d50:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d006      	beq.n	8009d68 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	685b      	ldr	r3, [r3, #4]
 8009d62:	b29a      	uxth	r2, r3
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	f003 0304 	and.w	r3, r3, #4
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d020      	beq.n	8009db4 <I2C_ITSlaveCplt+0x14c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8009d72:	697b      	ldr	r3, [r7, #20]
 8009d74:	f023 0304 	bic.w	r3, r3, #4
 8009d78:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d84:	b2d2      	uxtb	r2, r2
 8009d86:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d8c:	1c5a      	adds	r2, r3, #1
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d00c      	beq.n	8009db4 <I2C_ITSlaveCplt+0x14c>
    {
      hi2c->XferSize--;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009d9e:	3b01      	subs	r3, #1
 8009da0:	b29a      	uxth	r2, r3
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009daa:	b29b      	uxth	r3, r3
 8009dac:	3b01      	subs	r3, #1
 8009dae:	b29a      	uxth	r2, r3
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009db8:	b29b      	uxth	r3, r3
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d005      	beq.n	8009dca <I2C_ITSlaveCplt+0x162>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009dc2:	f043 0204 	orr.w	r2, r3, #4
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2200      	movs	r2, #0
 8009dce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d010      	beq.n	8009e02 <I2C_ITSlaveCplt+0x19a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009de4:	4619      	mov	r1, r3
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f000 f8a4 	bl	8009f34 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009df2:	b2db      	uxtb	r3, r3
 8009df4:	2b28      	cmp	r3, #40	@ 0x28
 8009df6:	d141      	bne.n	8009e7c <I2C_ITSlaveCplt+0x214>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8009df8:	6979      	ldr	r1, [r7, #20]
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f000 f846 	bl	8009e8c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009e00:	e03c      	b.n	8009e7c <I2C_ITSlaveCplt+0x214>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e06:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009e0a:	d014      	beq.n	8009e36 <I2C_ITSlaveCplt+0x1ce>
    I2C_ITSlaveSeqCplt(hi2c);
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f7ff fe06 	bl	8009a1e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	4a1c      	ldr	r2, [pc, #112]	@ (8009e88 <I2C_ITSlaveCplt+0x220>)
 8009e16:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2220      	movs	r2, #32
 8009e1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2200      	movs	r2, #0
 8009e24:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2200      	movs	r2, #0
 8009e2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f7fe ffa7 	bl	8008d82 <HAL_I2C_ListenCpltCallback>
}
 8009e34:	e022      	b.n	8009e7c <I2C_ITSlaveCplt+0x214>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009e3c:	b2db      	uxtb	r3, r3
 8009e3e:	2b22      	cmp	r3, #34	@ 0x22
 8009e40:	d10e      	bne.n	8009e60 <I2C_ITSlaveCplt+0x1f8>
    hi2c->State = HAL_I2C_STATE_READY;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2220      	movs	r2, #32
 8009e46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2200      	movs	r2, #0
 8009e54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f7fe ff7a 	bl	8008d52 <HAL_I2C_SlaveRxCpltCallback>
}
 8009e5e:	e00d      	b.n	8009e7c <I2C_ITSlaveCplt+0x214>
    hi2c->State = HAL_I2C_STATE_READY;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2220      	movs	r2, #32
 8009e64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2200      	movs	r2, #0
 8009e72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f7fe ff61 	bl	8008d3e <HAL_I2C_SlaveTxCpltCallback>
}
 8009e7c:	bf00      	nop
 8009e7e:	3718      	adds	r7, #24
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}
 8009e84:	fe00e800 	.word	0xfe00e800
 8009e88:	ffff0000 	.word	0xffff0000

08009e8c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b082      	sub	sp, #8
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
 8009e94:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	4a25      	ldr	r2, [pc, #148]	@ (8009f30 <I2C_ITListenCplt+0xa4>)
 8009e9a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	2220      	movs	r2, #32
 8009ea6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2200      	movs	r2, #0
 8009eae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	f003 0304 	and.w	r3, r3, #4
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d022      	beq.n	8009f08 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ecc:	b2d2      	uxtb	r2, r2
 8009ece:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ed4:	1c5a      	adds	r2, r3, #1
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d012      	beq.n	8009f08 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009ee6:	3b01      	subs	r3, #1
 8009ee8:	b29a      	uxth	r2, r3
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009ef2:	b29b      	uxth	r3, r3
 8009ef4:	3b01      	subs	r3, #1
 8009ef6:	b29a      	uxth	r2, r3
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f00:	f043 0204 	orr.w	r2, r3, #4
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009f08:	f248 0103 	movw	r1, #32771	@ 0x8003
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f000 fc87 	bl	800a820 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	2210      	movs	r2, #16
 8009f18:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8009f22:	6878      	ldr	r0, [r7, #4]
 8009f24:	f7fe ff2d 	bl	8008d82 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8009f28:	bf00      	nop
 8009f2a:	3708      	adds	r7, #8
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	bd80      	pop	{r7, pc}
 8009f30:	ffff0000 	.word	0xffff0000

08009f34 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b084      	sub	sp, #16
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
 8009f3c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009f44:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2200      	movs	r2, #0
 8009f4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	4a6d      	ldr	r2, [pc, #436]	@ (800a108 <I2C_ITError+0x1d4>)
 8009f52:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2200      	movs	r2, #0
 8009f58:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	431a      	orrs	r2, r3
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8009f66:	7bfb      	ldrb	r3, [r7, #15]
 8009f68:	2b28      	cmp	r3, #40	@ 0x28
 8009f6a:	d005      	beq.n	8009f78 <I2C_ITError+0x44>
 8009f6c:	7bfb      	ldrb	r3, [r7, #15]
 8009f6e:	2b29      	cmp	r3, #41	@ 0x29
 8009f70:	d002      	beq.n	8009f78 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8009f72:	7bfb      	ldrb	r3, [r7, #15]
 8009f74:	2b2a      	cmp	r3, #42	@ 0x2a
 8009f76:	d10b      	bne.n	8009f90 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009f78:	2103      	movs	r1, #3
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f000 fc50 	bl	800a820 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2228      	movs	r2, #40	@ 0x28
 8009f84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	4a60      	ldr	r2, [pc, #384]	@ (800a10c <I2C_ITError+0x1d8>)
 8009f8c:	635a      	str	r2, [r3, #52]	@ 0x34
 8009f8e:	e030      	b.n	8009ff2 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009f90:	f248 0103 	movw	r1, #32771	@ 0x8003
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f000 fc43 	bl	800a820 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f000 f8e1 	bl	800a162 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009fa6:	b2db      	uxtb	r3, r3
 8009fa8:	2b60      	cmp	r3, #96	@ 0x60
 8009faa:	d01f      	beq.n	8009fec <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2220      	movs	r2, #32
 8009fb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	699b      	ldr	r3, [r3, #24]
 8009fba:	f003 0320 	and.w	r3, r3, #32
 8009fbe:	2b20      	cmp	r3, #32
 8009fc0:	d114      	bne.n	8009fec <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	699b      	ldr	r3, [r3, #24]
 8009fc8:	f003 0310 	and.w	r3, r3, #16
 8009fcc:	2b10      	cmp	r3, #16
 8009fce:	d109      	bne.n	8009fe4 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	2210      	movs	r2, #16
 8009fd6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009fdc:	f043 0204 	orr.w	r2, r3, #4
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	2220      	movs	r2, #32
 8009fea:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ff6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d039      	beq.n	800a074 <I2C_ITError+0x140>
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	2b11      	cmp	r3, #17
 800a004:	d002      	beq.n	800a00c <I2C_ITError+0xd8>
 800a006:	68bb      	ldr	r3, [r7, #8]
 800a008:	2b21      	cmp	r3, #33	@ 0x21
 800a00a:	d133      	bne.n	800a074 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a016:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a01a:	d107      	bne.n	800a02c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	681a      	ldr	r2, [r3, #0]
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a02a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a030:	4618      	mov	r0, r3
 800a032:	f7fd ff63 	bl	8007efc <HAL_DMA_GetState>
 800a036:	4603      	mov	r3, r0
 800a038:	2b01      	cmp	r3, #1
 800a03a:	d017      	beq.n	800a06c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a040:	4a33      	ldr	r2, [pc, #204]	@ (800a110 <I2C_ITError+0x1dc>)
 800a042:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2200      	movs	r2, #0
 800a048:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a050:	4618      	mov	r0, r3
 800a052:	f7fd fe63 	bl	8007d1c <HAL_DMA_Abort_IT>
 800a056:	4603      	mov	r3, r0
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d04d      	beq.n	800a0f8 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a062:	687a      	ldr	r2, [r7, #4]
 800a064:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800a066:	4610      	mov	r0, r2
 800a068:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a06a:	e045      	b.n	800a0f8 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f000 f851 	bl	800a114 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a072:	e041      	b.n	800a0f8 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d039      	beq.n	800a0f0 <I2C_ITError+0x1bc>
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	2b12      	cmp	r3, #18
 800a080:	d002      	beq.n	800a088 <I2C_ITError+0x154>
 800a082:	68bb      	ldr	r3, [r7, #8]
 800a084:	2b22      	cmp	r3, #34	@ 0x22
 800a086:	d133      	bne.n	800a0f0 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a092:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a096:	d107      	bne.n	800a0a8 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	681a      	ldr	r2, [r3, #0]
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a0a6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	f7fd ff25 	bl	8007efc <HAL_DMA_GetState>
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	2b01      	cmp	r3, #1
 800a0b6:	d017      	beq.n	800a0e8 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a0bc:	4a14      	ldr	r2, [pc, #80]	@ (800a110 <I2C_ITError+0x1dc>)
 800a0be:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	f7fd fe25 	bl	8007d1c <HAL_DMA_Abort_IT>
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d011      	beq.n	800a0fc <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a0dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0de:	687a      	ldr	r2, [r7, #4]
 800a0e0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800a0e2:	4610      	mov	r0, r2
 800a0e4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a0e6:	e009      	b.n	800a0fc <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f000 f813 	bl	800a114 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a0ee:	e005      	b.n	800a0fc <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	f000 f80f 	bl	800a114 <I2C_TreatErrorCallback>
  }
}
 800a0f6:	e002      	b.n	800a0fe <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a0f8:	bf00      	nop
 800a0fa:	e000      	b.n	800a0fe <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a0fc:	bf00      	nop
}
 800a0fe:	bf00      	nop
 800a100:	3710      	adds	r7, #16
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}
 800a106:	bf00      	nop
 800a108:	ffff0000 	.word	0xffff0000
 800a10c:	08009035 	.word	0x08009035
 800a110:	0800a305 	.word	0x0800a305

0800a114 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b082      	sub	sp, #8
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a122:	b2db      	uxtb	r3, r3
 800a124:	2b60      	cmp	r3, #96	@ 0x60
 800a126:	d10e      	bne.n	800a146 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2220      	movs	r2, #32
 800a12c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2200      	movs	r2, #0
 800a134:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2200      	movs	r2, #0
 800a13a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f7fe fe47 	bl	8008dd2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a144:	e009      	b.n	800a15a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2200      	movs	r2, #0
 800a14a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2200      	movs	r2, #0
 800a150:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	f7fe fe32 	bl	8008dbe <HAL_I2C_ErrorCallback>
}
 800a15a:	bf00      	nop
 800a15c:	3708      	adds	r7, #8
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}

0800a162 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a162:	b480      	push	{r7}
 800a164:	b083      	sub	sp, #12
 800a166:	af00      	add	r7, sp, #0
 800a168:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	699b      	ldr	r3, [r3, #24]
 800a170:	f003 0302 	and.w	r3, r3, #2
 800a174:	2b02      	cmp	r3, #2
 800a176:	d103      	bne.n	800a180 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	2200      	movs	r2, #0
 800a17e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	699b      	ldr	r3, [r3, #24]
 800a186:	f003 0301 	and.w	r3, r3, #1
 800a18a:	2b01      	cmp	r3, #1
 800a18c:	d007      	beq.n	800a19e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	699a      	ldr	r2, [r3, #24]
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f042 0201 	orr.w	r2, r2, #1
 800a19c:	619a      	str	r2, [r3, #24]
  }
}
 800a19e:	bf00      	nop
 800a1a0:	370c      	adds	r7, #12
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a8:	4770      	bx	lr

0800a1aa <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a1aa:	b580      	push	{r7, lr}
 800a1ac:	b084      	sub	sp, #16
 800a1ae:	af00      	add	r7, sp, #0
 800a1b0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1b6:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	681a      	ldr	r2, [r3, #0]
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a1c6:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a1cc:	b29b      	uxth	r3, r3
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d104      	bne.n	800a1dc <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800a1d2:	2120      	movs	r1, #32
 800a1d4:	68f8      	ldr	r0, [r7, #12]
 800a1d6:	f000 fa9f 	bl	800a718 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800a1da:	e02d      	b.n	800a238 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1e0:	68fa      	ldr	r2, [r7, #12]
 800a1e2:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800a1e4:	441a      	add	r2, r3
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a1ee:	b29b      	uxth	r3, r3
 800a1f0:	2bff      	cmp	r3, #255	@ 0xff
 800a1f2:	d903      	bls.n	800a1fc <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	22ff      	movs	r2, #255	@ 0xff
 800a1f8:	851a      	strh	r2, [r3, #40]	@ 0x28
 800a1fa:	e004      	b.n	800a206 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a200:	b29a      	uxth	r2, r3
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a20e:	4619      	mov	r1, r3
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	3328      	adds	r3, #40	@ 0x28
 800a216:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800a21c:	f7fd fce0 	bl	8007be0 <HAL_DMA_Start_IT>
 800a220:	4603      	mov	r3, r0
 800a222:	2b00      	cmp	r3, #0
 800a224:	d004      	beq.n	800a230 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800a226:	2110      	movs	r1, #16
 800a228:	68f8      	ldr	r0, [r7, #12]
 800a22a:	f7ff fe83 	bl	8009f34 <I2C_ITError>
}
 800a22e:	e003      	b.n	800a238 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800a230:	2140      	movs	r1, #64	@ 0x40
 800a232:	68f8      	ldr	r0, [r7, #12]
 800a234:	f000 fa70 	bl	800a718 <I2C_Enable_IRQ>
}
 800a238:	bf00      	nop
 800a23a:	3710      	adds	r7, #16
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}

0800a240 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b084      	sub	sp, #16
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a24c:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	681a      	ldr	r2, [r3, #0]
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a25c:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a262:	b29b      	uxth	r3, r3
 800a264:	2b00      	cmp	r3, #0
 800a266:	d104      	bne.n	800a272 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800a268:	2120      	movs	r1, #32
 800a26a:	68f8      	ldr	r0, [r7, #12]
 800a26c:	f000 fa54 	bl	800a718 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800a270:	e02d      	b.n	800a2ce <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a276:	68fa      	ldr	r2, [r7, #12]
 800a278:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800a27a:	441a      	add	r2, r3
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a284:	b29b      	uxth	r3, r3
 800a286:	2bff      	cmp	r3, #255	@ 0xff
 800a288:	d903      	bls.n	800a292 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	22ff      	movs	r2, #255	@ 0xff
 800a28e:	851a      	strh	r2, [r3, #40]	@ 0x28
 800a290:	e004      	b.n	800a29c <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a296:	b29a      	uxth	r2, r3
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	3324      	adds	r3, #36	@ 0x24
 800a2a6:	4619      	mov	r1, r3
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2ac:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800a2b2:	f7fd fc95 	bl	8007be0 <HAL_DMA_Start_IT>
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d004      	beq.n	800a2c6 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800a2bc:	2110      	movs	r1, #16
 800a2be:	68f8      	ldr	r0, [r7, #12]
 800a2c0:	f7ff fe38 	bl	8009f34 <I2C_ITError>
}
 800a2c4:	e003      	b.n	800a2ce <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800a2c6:	2140      	movs	r1, #64	@ 0x40
 800a2c8:	68f8      	ldr	r0, [r7, #12]
 800a2ca:	f000 fa25 	bl	800a718 <I2C_Enable_IRQ>
}
 800a2ce:	bf00      	nop
 800a2d0:	3710      	adds	r7, #16
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}

0800a2d6 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800a2d6:	b580      	push	{r7, lr}
 800a2d8:	b084      	sub	sp, #16
 800a2da:	af00      	add	r7, sp, #0
 800a2dc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2e2:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	685a      	ldr	r2, [r3, #4]
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a2f2:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800a2f4:	2110      	movs	r1, #16
 800a2f6:	68f8      	ldr	r0, [r7, #12]
 800a2f8:	f7ff fe1c 	bl	8009f34 <I2C_ITError>
}
 800a2fc:	bf00      	nop
 800a2fe:	3710      	adds	r7, #16
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}

0800a304 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b084      	sub	sp, #16
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a310:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a316:	2b00      	cmp	r3, #0
 800a318:	d003      	beq.n	800a322 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a31e:	2200      	movs	r2, #0
 800a320:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a326:	2b00      	cmp	r3, #0
 800a328:	d003      	beq.n	800a332 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a32e:	2200      	movs	r2, #0
 800a330:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800a332:	68f8      	ldr	r0, [r7, #12]
 800a334:	f7ff feee 	bl	800a114 <I2C_TreatErrorCallback>
}
 800a338:	bf00      	nop
 800a33a:	3710      	adds	r7, #16
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bd80      	pop	{r7, pc}

0800a340 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b084      	sub	sp, #16
 800a344:	af00      	add	r7, sp, #0
 800a346:	60f8      	str	r0, [r7, #12]
 800a348:	60b9      	str	r1, [r7, #8]
 800a34a:	603b      	str	r3, [r7, #0]
 800a34c:	4613      	mov	r3, r2
 800a34e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a350:	e031      	b.n	800a3b6 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a358:	d02d      	beq.n	800a3b6 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a35a:	f7fb fd07 	bl	8005d6c <HAL_GetTick>
 800a35e:	4602      	mov	r2, r0
 800a360:	69bb      	ldr	r3, [r7, #24]
 800a362:	1ad3      	subs	r3, r2, r3
 800a364:	683a      	ldr	r2, [r7, #0]
 800a366:	429a      	cmp	r2, r3
 800a368:	d302      	bcc.n	800a370 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d122      	bne.n	800a3b6 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	699a      	ldr	r2, [r3, #24]
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	4013      	ands	r3, r2
 800a37a:	68ba      	ldr	r2, [r7, #8]
 800a37c:	429a      	cmp	r2, r3
 800a37e:	bf0c      	ite	eq
 800a380:	2301      	moveq	r3, #1
 800a382:	2300      	movne	r3, #0
 800a384:	b2db      	uxtb	r3, r3
 800a386:	461a      	mov	r2, r3
 800a388:	79fb      	ldrb	r3, [r7, #7]
 800a38a:	429a      	cmp	r2, r3
 800a38c:	d113      	bne.n	800a3b6 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a392:	f043 0220 	orr.w	r2, r3, #32
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	2220      	movs	r2, #32
 800a39e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	e00f      	b.n	800a3d6 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	699a      	ldr	r2, [r3, #24]
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	4013      	ands	r3, r2
 800a3c0:	68ba      	ldr	r2, [r7, #8]
 800a3c2:	429a      	cmp	r2, r3
 800a3c4:	bf0c      	ite	eq
 800a3c6:	2301      	moveq	r3, #1
 800a3c8:	2300      	movne	r3, #0
 800a3ca:	b2db      	uxtb	r3, r3
 800a3cc:	461a      	mov	r2, r3
 800a3ce:	79fb      	ldrb	r3, [r7, #7]
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	d0be      	beq.n	800a352 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a3d4:	2300      	movs	r3, #0
}
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	3710      	adds	r7, #16
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}

0800a3de <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a3de:	b580      	push	{r7, lr}
 800a3e0:	b084      	sub	sp, #16
 800a3e2:	af00      	add	r7, sp, #0
 800a3e4:	60f8      	str	r0, [r7, #12]
 800a3e6:	60b9      	str	r1, [r7, #8]
 800a3e8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a3ea:	e033      	b.n	800a454 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a3ec:	687a      	ldr	r2, [r7, #4]
 800a3ee:	68b9      	ldr	r1, [r7, #8]
 800a3f0:	68f8      	ldr	r0, [r7, #12]
 800a3f2:	f000 f87f 	bl	800a4f4 <I2C_IsErrorOccurred>
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d001      	beq.n	800a400 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	e031      	b.n	800a464 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a406:	d025      	beq.n	800a454 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a408:	f7fb fcb0 	bl	8005d6c <HAL_GetTick>
 800a40c:	4602      	mov	r2, r0
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	1ad3      	subs	r3, r2, r3
 800a412:	68ba      	ldr	r2, [r7, #8]
 800a414:	429a      	cmp	r2, r3
 800a416:	d302      	bcc.n	800a41e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a418:	68bb      	ldr	r3, [r7, #8]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d11a      	bne.n	800a454 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	699b      	ldr	r3, [r3, #24]
 800a424:	f003 0302 	and.w	r3, r3, #2
 800a428:	2b02      	cmp	r3, #2
 800a42a:	d013      	beq.n	800a454 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a430:	f043 0220 	orr.w	r2, r3, #32
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	2220      	movs	r2, #32
 800a43c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	2200      	movs	r2, #0
 800a444:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	2200      	movs	r2, #0
 800a44c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800a450:	2301      	movs	r3, #1
 800a452:	e007      	b.n	800a464 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	699b      	ldr	r3, [r3, #24]
 800a45a:	f003 0302 	and.w	r3, r3, #2
 800a45e:	2b02      	cmp	r3, #2
 800a460:	d1c4      	bne.n	800a3ec <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a462:	2300      	movs	r3, #0
}
 800a464:	4618      	mov	r0, r3
 800a466:	3710      	adds	r7, #16
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}

0800a46c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b084      	sub	sp, #16
 800a470:	af00      	add	r7, sp, #0
 800a472:	60f8      	str	r0, [r7, #12]
 800a474:	60b9      	str	r1, [r7, #8]
 800a476:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a478:	e02f      	b.n	800a4da <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a47a:	687a      	ldr	r2, [r7, #4]
 800a47c:	68b9      	ldr	r1, [r7, #8]
 800a47e:	68f8      	ldr	r0, [r7, #12]
 800a480:	f000 f838 	bl	800a4f4 <I2C_IsErrorOccurred>
 800a484:	4603      	mov	r3, r0
 800a486:	2b00      	cmp	r3, #0
 800a488:	d001      	beq.n	800a48e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a48a:	2301      	movs	r3, #1
 800a48c:	e02d      	b.n	800a4ea <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a48e:	f7fb fc6d 	bl	8005d6c <HAL_GetTick>
 800a492:	4602      	mov	r2, r0
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	1ad3      	subs	r3, r2, r3
 800a498:	68ba      	ldr	r2, [r7, #8]
 800a49a:	429a      	cmp	r2, r3
 800a49c:	d302      	bcc.n	800a4a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d11a      	bne.n	800a4da <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	699b      	ldr	r3, [r3, #24]
 800a4aa:	f003 0320 	and.w	r3, r3, #32
 800a4ae:	2b20      	cmp	r3, #32
 800a4b0:	d013      	beq.n	800a4da <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a4b6:	f043 0220 	orr.w	r2, r3, #32
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	2220      	movs	r2, #32
 800a4c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800a4d6:	2301      	movs	r3, #1
 800a4d8:	e007      	b.n	800a4ea <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	699b      	ldr	r3, [r3, #24]
 800a4e0:	f003 0320 	and.w	r3, r3, #32
 800a4e4:	2b20      	cmp	r3, #32
 800a4e6:	d1c8      	bne.n	800a47a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a4e8:	2300      	movs	r3, #0
}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	3710      	adds	r7, #16
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}
	...

0800a4f4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b08a      	sub	sp, #40	@ 0x28
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	60f8      	str	r0, [r7, #12]
 800a4fc:	60b9      	str	r1, [r7, #8]
 800a4fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a500:	2300      	movs	r3, #0
 800a502:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	699b      	ldr	r3, [r3, #24]
 800a50c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800a50e:	2300      	movs	r3, #0
 800a510:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800a516:	69bb      	ldr	r3, [r7, #24]
 800a518:	f003 0310 	and.w	r3, r3, #16
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d068      	beq.n	800a5f2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	2210      	movs	r2, #16
 800a526:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a528:	e049      	b.n	800a5be <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a52a:	68bb      	ldr	r3, [r7, #8]
 800a52c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a530:	d045      	beq.n	800a5be <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a532:	f7fb fc1b 	bl	8005d6c <HAL_GetTick>
 800a536:	4602      	mov	r2, r0
 800a538:	69fb      	ldr	r3, [r7, #28]
 800a53a:	1ad3      	subs	r3, r2, r3
 800a53c:	68ba      	ldr	r2, [r7, #8]
 800a53e:	429a      	cmp	r2, r3
 800a540:	d302      	bcc.n	800a548 <I2C_IsErrorOccurred+0x54>
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d13a      	bne.n	800a5be <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	685b      	ldr	r3, [r3, #4]
 800a54e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a552:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a55a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	699b      	ldr	r3, [r3, #24]
 800a562:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a566:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a56a:	d121      	bne.n	800a5b0 <I2C_IsErrorOccurred+0xbc>
 800a56c:	697b      	ldr	r3, [r7, #20]
 800a56e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a572:	d01d      	beq.n	800a5b0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800a574:	7cfb      	ldrb	r3, [r7, #19]
 800a576:	2b20      	cmp	r3, #32
 800a578:	d01a      	beq.n	800a5b0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	685a      	ldr	r2, [r3, #4]
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a588:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800a58a:	f7fb fbef 	bl	8005d6c <HAL_GetTick>
 800a58e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a590:	e00e      	b.n	800a5b0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800a592:	f7fb fbeb 	bl	8005d6c <HAL_GetTick>
 800a596:	4602      	mov	r2, r0
 800a598:	69fb      	ldr	r3, [r7, #28]
 800a59a:	1ad3      	subs	r3, r2, r3
 800a59c:	2b19      	cmp	r3, #25
 800a59e:	d907      	bls.n	800a5b0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800a5a0:	6a3b      	ldr	r3, [r7, #32]
 800a5a2:	f043 0320 	orr.w	r3, r3, #32
 800a5a6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800a5a8:	2301      	movs	r3, #1
 800a5aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800a5ae:	e006      	b.n	800a5be <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	699b      	ldr	r3, [r3, #24]
 800a5b6:	f003 0320 	and.w	r3, r3, #32
 800a5ba:	2b20      	cmp	r3, #32
 800a5bc:	d1e9      	bne.n	800a592 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	699b      	ldr	r3, [r3, #24]
 800a5c4:	f003 0320 	and.w	r3, r3, #32
 800a5c8:	2b20      	cmp	r3, #32
 800a5ca:	d003      	beq.n	800a5d4 <I2C_IsErrorOccurred+0xe0>
 800a5cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d0aa      	beq.n	800a52a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800a5d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d103      	bne.n	800a5e4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	2220      	movs	r2, #32
 800a5e2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800a5e4:	6a3b      	ldr	r3, [r7, #32]
 800a5e6:	f043 0304 	orr.w	r3, r3, #4
 800a5ea:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	699b      	ldr	r3, [r3, #24]
 800a5f8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800a5fa:	69bb      	ldr	r3, [r7, #24]
 800a5fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a600:	2b00      	cmp	r3, #0
 800a602:	d00b      	beq.n	800a61c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800a604:	6a3b      	ldr	r3, [r7, #32]
 800a606:	f043 0301 	orr.w	r3, r3, #1
 800a60a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a614:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a616:	2301      	movs	r3, #1
 800a618:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a61c:	69bb      	ldr	r3, [r7, #24]
 800a61e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a622:	2b00      	cmp	r3, #0
 800a624:	d00b      	beq.n	800a63e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800a626:	6a3b      	ldr	r3, [r7, #32]
 800a628:	f043 0308 	orr.w	r3, r3, #8
 800a62c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a636:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a638:	2301      	movs	r3, #1
 800a63a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a63e:	69bb      	ldr	r3, [r7, #24]
 800a640:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a644:	2b00      	cmp	r3, #0
 800a646:	d00b      	beq.n	800a660 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800a648:	6a3b      	ldr	r3, [r7, #32]
 800a64a:	f043 0302 	orr.w	r3, r3, #2
 800a64e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a658:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a65a:	2301      	movs	r3, #1
 800a65c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800a660:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a664:	2b00      	cmp	r3, #0
 800a666:	d01c      	beq.n	800a6a2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a668:	68f8      	ldr	r0, [r7, #12]
 800a66a:	f7ff fd7a 	bl	800a162 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	6859      	ldr	r1, [r3, #4]
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	681a      	ldr	r2, [r3, #0]
 800a678:	4b0d      	ldr	r3, [pc, #52]	@ (800a6b0 <I2C_IsErrorOccurred+0x1bc>)
 800a67a:	400b      	ands	r3, r1
 800a67c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a682:	6a3b      	ldr	r3, [r7, #32]
 800a684:	431a      	orrs	r2, r3
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	2220      	movs	r2, #32
 800a68e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	2200      	movs	r2, #0
 800a696:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	2200      	movs	r2, #0
 800a69e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800a6a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	3728      	adds	r7, #40	@ 0x28
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}
 800a6ae:	bf00      	nop
 800a6b0:	fe00e800 	.word	0xfe00e800

0800a6b4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800a6b4:	b480      	push	{r7}
 800a6b6:	b087      	sub	sp, #28
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	60f8      	str	r0, [r7, #12]
 800a6bc:	607b      	str	r3, [r7, #4]
 800a6be:	460b      	mov	r3, r1
 800a6c0:	817b      	strh	r3, [r7, #10]
 800a6c2:	4613      	mov	r3, r2
 800a6c4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a6c6:	897b      	ldrh	r3, [r7, #10]
 800a6c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a6cc:	7a7b      	ldrb	r3, [r7, #9]
 800a6ce:	041b      	lsls	r3, r3, #16
 800a6d0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a6d4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a6da:	6a3b      	ldr	r3, [r7, #32]
 800a6dc:	4313      	orrs	r3, r2
 800a6de:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a6e2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	685a      	ldr	r2, [r3, #4]
 800a6ea:	6a3b      	ldr	r3, [r7, #32]
 800a6ec:	0d5b      	lsrs	r3, r3, #21
 800a6ee:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800a6f2:	4b08      	ldr	r3, [pc, #32]	@ (800a714 <I2C_TransferConfig+0x60>)
 800a6f4:	430b      	orrs	r3, r1
 800a6f6:	43db      	mvns	r3, r3
 800a6f8:	ea02 0103 	and.w	r1, r2, r3
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	697a      	ldr	r2, [r7, #20]
 800a702:	430a      	orrs	r2, r1
 800a704:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800a706:	bf00      	nop
 800a708:	371c      	adds	r7, #28
 800a70a:	46bd      	mov	sp, r7
 800a70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a710:	4770      	bx	lr
 800a712:	bf00      	nop
 800a714:	03ff63ff 	.word	0x03ff63ff

0800a718 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800a718:	b480      	push	{r7}
 800a71a:	b085      	sub	sp, #20
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
 800a720:	460b      	mov	r3, r1
 800a722:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800a724:	2300      	movs	r3, #0
 800a726:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a72c:	4a39      	ldr	r2, [pc, #228]	@ (800a814 <I2C_Enable_IRQ+0xfc>)
 800a72e:	4293      	cmp	r3, r2
 800a730:	d032      	beq.n	800a798 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800a736:	4a38      	ldr	r2, [pc, #224]	@ (800a818 <I2C_Enable_IRQ+0x100>)
 800a738:	4293      	cmp	r3, r2
 800a73a:	d02d      	beq.n	800a798 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800a740:	4a36      	ldr	r2, [pc, #216]	@ (800a81c <I2C_Enable_IRQ+0x104>)
 800a742:	4293      	cmp	r3, r2
 800a744:	d028      	beq.n	800a798 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800a746:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	da03      	bge.n	800a756 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800a754:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800a756:	887b      	ldrh	r3, [r7, #2]
 800a758:	f003 0301 	and.w	r3, r3, #1
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d003      	beq.n	800a768 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800a766:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800a768:	887b      	ldrh	r3, [r7, #2]
 800a76a:	f003 0302 	and.w	r3, r3, #2
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d003      	beq.n	800a77a <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800a778:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800a77a:	887b      	ldrh	r3, [r7, #2]
 800a77c:	2b10      	cmp	r3, #16
 800a77e:	d103      	bne.n	800a788 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800a786:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800a788:	887b      	ldrh	r3, [r7, #2]
 800a78a:	2b20      	cmp	r3, #32
 800a78c:	d133      	bne.n	800a7f6 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	f043 0320 	orr.w	r3, r3, #32
 800a794:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800a796:	e02e      	b.n	800a7f6 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800a798:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	da03      	bge.n	800a7a8 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800a7a6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800a7a8:	887b      	ldrh	r3, [r7, #2]
 800a7aa:	f003 0301 	and.w	r3, r3, #1
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d003      	beq.n	800a7ba <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800a7b8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800a7ba:	887b      	ldrh	r3, [r7, #2]
 800a7bc:	f003 0302 	and.w	r3, r3, #2
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d003      	beq.n	800a7cc <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800a7ca:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800a7cc:	887b      	ldrh	r3, [r7, #2]
 800a7ce:	2b10      	cmp	r3, #16
 800a7d0:	d103      	bne.n	800a7da <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800a7d8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800a7da:	887b      	ldrh	r3, [r7, #2]
 800a7dc:	2b20      	cmp	r3, #32
 800a7de:	d103      	bne.n	800a7e8 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800a7e6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800a7e8:	887b      	ldrh	r3, [r7, #2]
 800a7ea:	2b40      	cmp	r3, #64	@ 0x40
 800a7ec:	d103      	bne.n	800a7f6 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a7f4:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	6819      	ldr	r1, [r3, #0]
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	68fa      	ldr	r2, [r7, #12]
 800a802:	430a      	orrs	r2, r1
 800a804:	601a      	str	r2, [r3, #0]
}
 800a806:	bf00      	nop
 800a808:	3714      	adds	r7, #20
 800a80a:	46bd      	mov	sp, r7
 800a80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a810:	4770      	bx	lr
 800a812:	bf00      	nop
 800a814:	08009225 	.word	0x08009225
 800a818:	08009649 	.word	0x08009649
 800a81c:	080093fd 	.word	0x080093fd

0800a820 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800a820:	b480      	push	{r7}
 800a822:	b085      	sub	sp, #20
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
 800a828:	460b      	mov	r3, r1
 800a82a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800a82c:	2300      	movs	r3, #0
 800a82e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800a830:	887b      	ldrh	r3, [r7, #2]
 800a832:	f003 0301 	and.w	r3, r3, #1
 800a836:	2b00      	cmp	r3, #0
 800a838:	d00f      	beq.n	800a85a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 800a840:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a848:	b2db      	uxtb	r3, r3
 800a84a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800a84e:	2b28      	cmp	r3, #40	@ 0x28
 800a850:	d003      	beq.n	800a85a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800a858:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800a85a:	887b      	ldrh	r3, [r7, #2]
 800a85c:	f003 0302 	and.w	r3, r3, #2
 800a860:	2b00      	cmp	r3, #0
 800a862:	d00f      	beq.n	800a884 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800a86a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a872:	b2db      	uxtb	r3, r3
 800a874:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800a878:	2b28      	cmp	r3, #40	@ 0x28
 800a87a:	d003      	beq.n	800a884 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800a882:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800a884:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	da03      	bge.n	800a894 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800a892:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800a894:	887b      	ldrh	r3, [r7, #2]
 800a896:	2b10      	cmp	r3, #16
 800a898:	d103      	bne.n	800a8a2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800a8a0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800a8a2:	887b      	ldrh	r3, [r7, #2]
 800a8a4:	2b20      	cmp	r3, #32
 800a8a6:	d103      	bne.n	800a8b0 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	f043 0320 	orr.w	r3, r3, #32
 800a8ae:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800a8b0:	887b      	ldrh	r3, [r7, #2]
 800a8b2:	2b40      	cmp	r3, #64	@ 0x40
 800a8b4:	d103      	bne.n	800a8be <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a8bc:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	6819      	ldr	r1, [r3, #0]
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	43da      	mvns	r2, r3
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	400a      	ands	r2, r1
 800a8ce:	601a      	str	r2, [r3, #0]
}
 800a8d0:	bf00      	nop
 800a8d2:	3714      	adds	r7, #20
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8da:	4770      	bx	lr

0800a8dc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a8dc:	b480      	push	{r7}
 800a8de:	b083      	sub	sp, #12
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
 800a8e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a8ec:	b2db      	uxtb	r3, r3
 800a8ee:	2b20      	cmp	r3, #32
 800a8f0:	d138      	bne.n	800a964 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a8f8:	2b01      	cmp	r3, #1
 800a8fa:	d101      	bne.n	800a900 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a8fc:	2302      	movs	r3, #2
 800a8fe:	e032      	b.n	800a966 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2201      	movs	r2, #1
 800a904:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2224      	movs	r2, #36	@ 0x24
 800a90c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	681a      	ldr	r2, [r3, #0]
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f022 0201 	bic.w	r2, r2, #1
 800a91e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	681a      	ldr	r2, [r3, #0]
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a92e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	6819      	ldr	r1, [r3, #0]
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	683a      	ldr	r2, [r7, #0]
 800a93c:	430a      	orrs	r2, r1
 800a93e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	681a      	ldr	r2, [r3, #0]
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f042 0201 	orr.w	r2, r2, #1
 800a94e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2220      	movs	r2, #32
 800a954:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2200      	movs	r2, #0
 800a95c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a960:	2300      	movs	r3, #0
 800a962:	e000      	b.n	800a966 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a964:	2302      	movs	r3, #2
  }
}
 800a966:	4618      	mov	r0, r3
 800a968:	370c      	adds	r7, #12
 800a96a:	46bd      	mov	sp, r7
 800a96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a970:	4770      	bx	lr

0800a972 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a972:	b480      	push	{r7}
 800a974:	b085      	sub	sp, #20
 800a976:	af00      	add	r7, sp, #0
 800a978:	6078      	str	r0, [r7, #4]
 800a97a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a982:	b2db      	uxtb	r3, r3
 800a984:	2b20      	cmp	r3, #32
 800a986:	d139      	bne.n	800a9fc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a98e:	2b01      	cmp	r3, #1
 800a990:	d101      	bne.n	800a996 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a992:	2302      	movs	r3, #2
 800a994:	e033      	b.n	800a9fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2201      	movs	r2, #1
 800a99a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2224      	movs	r2, #36	@ 0x24
 800a9a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	681a      	ldr	r2, [r3, #0]
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	f022 0201 	bic.w	r2, r2, #1
 800a9b4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800a9c4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	021b      	lsls	r3, r3, #8
 800a9ca:	68fa      	ldr	r2, [r7, #12]
 800a9cc:	4313      	orrs	r3, r2
 800a9ce:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	68fa      	ldr	r2, [r7, #12]
 800a9d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	681a      	ldr	r2, [r3, #0]
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	f042 0201 	orr.w	r2, r2, #1
 800a9e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2220      	movs	r2, #32
 800a9ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	e000      	b.n	800a9fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a9fc:	2302      	movs	r3, #2
  }
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	3714      	adds	r7, #20
 800aa02:	46bd      	mov	sp, r7
 800aa04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa08:	4770      	bx	lr

0800aa0a <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800aa0a:	b580      	push	{r7, lr}
 800aa0c:	b084      	sub	sp, #16
 800aa0e:	af00      	add	r7, sp, #0
 800aa10:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if(hiwdg == NULL)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d101      	bne.n	800aa1c <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800aa18:	2301      	movs	r3, #1
 800aa1a:	e038      	b.n	800aa8e <HAL_IWDG_Init+0x84>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 800aa24:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	f245 5255 	movw	r2, #21845	@ 0x5555
 800aa2e:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	687a      	ldr	r2, [r7, #4]
 800aa36:	6852      	ldr	r2, [r2, #4]
 800aa38:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	687a      	ldr	r2, [r7, #4]
 800aa40:	6892      	ldr	r2, [r2, #8]
 800aa42:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800aa44:	f7fb f992 	bl	8005d6c <HAL_GetTick>
 800aa48:	60f8      	str	r0, [r7, #12]

   /* Wait for register to be updated */
  while(hiwdg->Instance->SR != RESET)
 800aa4a:	e008      	b.n	800aa5e <HAL_IWDG_Init+0x54>
  {
    if((HAL_GetTick() - tickstart ) > HAL_IWDG_DEFAULT_TIMEOUT)
 800aa4c:	f7fb f98e 	bl	8005d6c <HAL_GetTick>
 800aa50:	4602      	mov	r2, r0
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	1ad3      	subs	r3, r2, r3
 800aa56:	2b30      	cmp	r3, #48	@ 0x30
 800aa58:	d901      	bls.n	800aa5e <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 800aa5a:	2303      	movs	r3, #3
 800aa5c:	e017      	b.n	800aa8e <HAL_IWDG_Init+0x84>
  while(hiwdg->Instance->SR != RESET)
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	68db      	ldr	r3, [r3, #12]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d1f1      	bne.n	800aa4c <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if(hiwdg->Instance->WINR != hiwdg->Init.Window)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	691a      	ldr	r2, [r3, #16]
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	68db      	ldr	r3, [r3, #12]
 800aa72:	429a      	cmp	r2, r3
 800aa74:	d005      	beq.n	800aa82 <HAL_IWDG_Init+0x78>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	687a      	ldr	r2, [r7, #4]
 800aa7c:	68d2      	ldr	r2, [r2, #12]
 800aa7e:	611a      	str	r2, [r3, #16]
 800aa80:	e004      	b.n	800aa8c <HAL_IWDG_Init+0x82>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 800aa8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800aa8c:	2300      	movs	r3, #0
}
 800aa8e:	4618      	mov	r0, r3
 800aa90:	3710      	adds	r7, #16
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}

0800aa96 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800aa96:	b480      	push	{r7}
 800aa98:	b083      	sub	sp, #12
 800aa9a:	af00      	add	r7, sp, #0
 800aa9c:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 800aaa6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800aaa8:	2300      	movs	r3, #0
}
 800aaaa:	4618      	mov	r0, r3
 800aaac:	370c      	adds	r7, #12
 800aaae:	46bd      	mov	sp, r7
 800aab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab4:	4770      	bx	lr
	...

0800aab8 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b082      	sub	sp, #8
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
 800aac0:	460b      	mov	r3, r1
 800aac2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d10c      	bne.n	800aae4 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 800aaca:	4b13      	ldr	r3, [pc, #76]	@ (800ab18 <HAL_PWR_EnterSLEEPMode+0x60>)
 800aacc:	695b      	ldr	r3, [r3, #20]
 800aace:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800aad2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aad6:	d10e      	bne.n	800aaf6 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 800aad8:	f000 f896 	bl	800ac08 <HAL_PWREx_DisableLowPowerRunMode>
 800aadc:	4603      	mov	r3, r0
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d009      	beq.n	800aaf6 <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 800aae2:	e016      	b.n	800ab12 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 800aae4:	4b0c      	ldr	r3, [pc, #48]	@ (800ab18 <HAL_PWR_EnterSLEEPMode+0x60>)
 800aae6:	695b      	ldr	r3, [r3, #20]
 800aae8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800aaec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aaf0:	d001      	beq.n	800aaf6 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 800aaf2:	f000 f879 	bl	800abe8 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800aaf6:	4b09      	ldr	r3, [pc, #36]	@ (800ab1c <HAL_PWR_EnterSLEEPMode+0x64>)
 800aaf8:	691b      	ldr	r3, [r3, #16]
 800aafa:	4a08      	ldr	r2, [pc, #32]	@ (800ab1c <HAL_PWR_EnterSLEEPMode+0x64>)
 800aafc:	f023 0304 	bic.w	r3, r3, #4
 800ab00:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800ab02:	78fb      	ldrb	r3, [r7, #3]
 800ab04:	2b01      	cmp	r3, #1
 800ab06:	d101      	bne.n	800ab0c <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800ab08:	bf30      	wfi
 800ab0a:	e002      	b.n	800ab12 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800ab0c:	bf40      	sev
    __WFE();
 800ab0e:	bf20      	wfe
    __WFE();
 800ab10:	bf20      	wfe
  }

}
 800ab12:	3708      	adds	r7, #8
 800ab14:	46bd      	mov	sp, r7
 800ab16:	bd80      	pop	{r7, pc}
 800ab18:	40007000 	.word	0x40007000
 800ab1c:	e000ed00 	.word	0xe000ed00

0800ab20 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800ab20:	b480      	push	{r7}
 800ab22:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800ab24:	4b04      	ldr	r3, [pc, #16]	@ (800ab38 <HAL_PWREx_GetVoltageRange+0x18>)
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab34:	4770      	bx	lr
 800ab36:	bf00      	nop
 800ab38:	40007000 	.word	0x40007000

0800ab3c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800ab3c:	b480      	push	{r7}
 800ab3e:	b085      	sub	sp, #20
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab4a:	d130      	bne.n	800abae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800ab4c:	4b23      	ldr	r3, [pc, #140]	@ (800abdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800ab54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab58:	d038      	beq.n	800abcc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800ab5a:	4b20      	ldr	r3, [pc, #128]	@ (800abdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800ab62:	4a1e      	ldr	r2, [pc, #120]	@ (800abdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ab64:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800ab68:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800ab6a:	4b1d      	ldr	r3, [pc, #116]	@ (800abe0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	2232      	movs	r2, #50	@ 0x32
 800ab70:	fb02 f303 	mul.w	r3, r2, r3
 800ab74:	4a1b      	ldr	r2, [pc, #108]	@ (800abe4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800ab76:	fba2 2303 	umull	r2, r3, r2, r3
 800ab7a:	0c9b      	lsrs	r3, r3, #18
 800ab7c:	3301      	adds	r3, #1
 800ab7e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ab80:	e002      	b.n	800ab88 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	3b01      	subs	r3, #1
 800ab86:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ab88:	4b14      	ldr	r3, [pc, #80]	@ (800abdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ab8a:	695b      	ldr	r3, [r3, #20]
 800ab8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ab90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ab94:	d102      	bne.n	800ab9c <HAL_PWREx_ControlVoltageScaling+0x60>
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d1f2      	bne.n	800ab82 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800ab9c:	4b0f      	ldr	r3, [pc, #60]	@ (800abdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ab9e:	695b      	ldr	r3, [r3, #20]
 800aba0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800aba4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aba8:	d110      	bne.n	800abcc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800abaa:	2303      	movs	r3, #3
 800abac:	e00f      	b.n	800abce <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800abae:	4b0b      	ldr	r3, [pc, #44]	@ (800abdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800abb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800abba:	d007      	beq.n	800abcc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800abbc:	4b07      	ldr	r3, [pc, #28]	@ (800abdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800abc4:	4a05      	ldr	r2, [pc, #20]	@ (800abdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800abc6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800abca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800abcc:	2300      	movs	r3, #0
}
 800abce:	4618      	mov	r0, r3
 800abd0:	3714      	adds	r7, #20
 800abd2:	46bd      	mov	sp, r7
 800abd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd8:	4770      	bx	lr
 800abda:	bf00      	nop
 800abdc:	40007000 	.word	0x40007000
 800abe0:	20000398 	.word	0x20000398
 800abe4:	431bde83 	.word	0x431bde83

0800abe8 <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 800abe8:	b480      	push	{r7}
 800abea:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 800abec:	4b05      	ldr	r3, [pc, #20]	@ (800ac04 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	4a04      	ldr	r2, [pc, #16]	@ (800ac04 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 800abf2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800abf6:	6013      	str	r3, [r2, #0]
}
 800abf8:	bf00      	nop
 800abfa:	46bd      	mov	sp, r7
 800abfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac00:	4770      	bx	lr
 800ac02:	bf00      	nop
 800ac04:	40007000 	.word	0x40007000

0800ac08 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 800ac08:	b480      	push	{r7}
 800ac0a:	b083      	sub	sp, #12
 800ac0c:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800ac0e:	4b17      	ldr	r3, [pc, #92]	@ (800ac6c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	4a16      	ldr	r2, [pc, #88]	@ (800ac6c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800ac14:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ac18:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800ac1a:	4b15      	ldr	r3, [pc, #84]	@ (800ac70 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	2232      	movs	r2, #50	@ 0x32
 800ac20:	fb02 f303 	mul.w	r3, r2, r3
 800ac24:	4a13      	ldr	r2, [pc, #76]	@ (800ac74 <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 800ac26:	fba2 2303 	umull	r2, r3, r2, r3
 800ac2a:	0c9b      	lsrs	r3, r3, #18
 800ac2c:	3301      	adds	r3, #1
 800ac2e:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800ac30:	e002      	b.n	800ac38 <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	3b01      	subs	r3, #1
 800ac36:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800ac38:	4b0c      	ldr	r3, [pc, #48]	@ (800ac6c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800ac3a:	695b      	ldr	r3, [r3, #20]
 800ac3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ac40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ac44:	d102      	bne.n	800ac4c <HAL_PWREx_DisableLowPowerRunMode+0x44>
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d1f2      	bne.n	800ac32 <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 800ac4c:	4b07      	ldr	r3, [pc, #28]	@ (800ac6c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800ac4e:	695b      	ldr	r3, [r3, #20]
 800ac50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ac54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ac58:	d101      	bne.n	800ac5e <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 800ac5a:	2303      	movs	r3, #3
 800ac5c:	e000      	b.n	800ac60 <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 800ac5e:	2300      	movs	r3, #0
}
 800ac60:	4618      	mov	r0, r3
 800ac62:	370c      	adds	r7, #12
 800ac64:	46bd      	mov	sp, r7
 800ac66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6a:	4770      	bx	lr
 800ac6c:	40007000 	.word	0x40007000
 800ac70:	20000398 	.word	0x20000398
 800ac74:	431bde83 	.word	0x431bde83

0800ac78 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b088      	sub	sp, #32
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d102      	bne.n	800ac8c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800ac86:	2301      	movs	r3, #1
 800ac88:	f000 bc08 	b.w	800b49c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ac8c:	4b96      	ldr	r3, [pc, #600]	@ (800aee8 <HAL_RCC_OscConfig+0x270>)
 800ac8e:	689b      	ldr	r3, [r3, #8]
 800ac90:	f003 030c 	and.w	r3, r3, #12
 800ac94:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ac96:	4b94      	ldr	r3, [pc, #592]	@ (800aee8 <HAL_RCC_OscConfig+0x270>)
 800ac98:	68db      	ldr	r3, [r3, #12]
 800ac9a:	f003 0303 	and.w	r3, r3, #3
 800ac9e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	f003 0310 	and.w	r3, r3, #16
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	f000 80e4 	beq.w	800ae76 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800acae:	69bb      	ldr	r3, [r7, #24]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d007      	beq.n	800acc4 <HAL_RCC_OscConfig+0x4c>
 800acb4:	69bb      	ldr	r3, [r7, #24]
 800acb6:	2b0c      	cmp	r3, #12
 800acb8:	f040 808b 	bne.w	800add2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800acbc:	697b      	ldr	r3, [r7, #20]
 800acbe:	2b01      	cmp	r3, #1
 800acc0:	f040 8087 	bne.w	800add2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800acc4:	4b88      	ldr	r3, [pc, #544]	@ (800aee8 <HAL_RCC_OscConfig+0x270>)
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	f003 0302 	and.w	r3, r3, #2
 800accc:	2b00      	cmp	r3, #0
 800acce:	d005      	beq.n	800acdc <HAL_RCC_OscConfig+0x64>
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	699b      	ldr	r3, [r3, #24]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d101      	bne.n	800acdc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800acd8:	2301      	movs	r3, #1
 800acda:	e3df      	b.n	800b49c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	6a1a      	ldr	r2, [r3, #32]
 800ace0:	4b81      	ldr	r3, [pc, #516]	@ (800aee8 <HAL_RCC_OscConfig+0x270>)
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	f003 0308 	and.w	r3, r3, #8
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d004      	beq.n	800acf6 <HAL_RCC_OscConfig+0x7e>
 800acec:	4b7e      	ldr	r3, [pc, #504]	@ (800aee8 <HAL_RCC_OscConfig+0x270>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800acf4:	e005      	b.n	800ad02 <HAL_RCC_OscConfig+0x8a>
 800acf6:	4b7c      	ldr	r3, [pc, #496]	@ (800aee8 <HAL_RCC_OscConfig+0x270>)
 800acf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800acfc:	091b      	lsrs	r3, r3, #4
 800acfe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ad02:	4293      	cmp	r3, r2
 800ad04:	d223      	bcs.n	800ad4e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6a1b      	ldr	r3, [r3, #32]
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	f000 fd92 	bl	800b834 <RCC_SetFlashLatencyFromMSIRange>
 800ad10:	4603      	mov	r3, r0
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d001      	beq.n	800ad1a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800ad16:	2301      	movs	r3, #1
 800ad18:	e3c0      	b.n	800b49c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ad1a:	4b73      	ldr	r3, [pc, #460]	@ (800aee8 <HAL_RCC_OscConfig+0x270>)
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	4a72      	ldr	r2, [pc, #456]	@ (800aee8 <HAL_RCC_OscConfig+0x270>)
 800ad20:	f043 0308 	orr.w	r3, r3, #8
 800ad24:	6013      	str	r3, [r2, #0]
 800ad26:	4b70      	ldr	r3, [pc, #448]	@ (800aee8 <HAL_RCC_OscConfig+0x270>)
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6a1b      	ldr	r3, [r3, #32]
 800ad32:	496d      	ldr	r1, [pc, #436]	@ (800aee8 <HAL_RCC_OscConfig+0x270>)
 800ad34:	4313      	orrs	r3, r2
 800ad36:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800ad38:	4b6b      	ldr	r3, [pc, #428]	@ (800aee8 <HAL_RCC_OscConfig+0x270>)
 800ad3a:	685b      	ldr	r3, [r3, #4]
 800ad3c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	69db      	ldr	r3, [r3, #28]
 800ad44:	021b      	lsls	r3, r3, #8
 800ad46:	4968      	ldr	r1, [pc, #416]	@ (800aee8 <HAL_RCC_OscConfig+0x270>)
 800ad48:	4313      	orrs	r3, r2
 800ad4a:	604b      	str	r3, [r1, #4]
 800ad4c:	e025      	b.n	800ad9a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ad4e:	4b66      	ldr	r3, [pc, #408]	@ (800aee8 <HAL_RCC_OscConfig+0x270>)
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	4a65      	ldr	r2, [pc, #404]	@ (800aee8 <HAL_RCC_OscConfig+0x270>)
 800ad54:	f043 0308 	orr.w	r3, r3, #8
 800ad58:	6013      	str	r3, [r2, #0]
 800ad5a:	4b63      	ldr	r3, [pc, #396]	@ (800aee8 <HAL_RCC_OscConfig+0x270>)
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6a1b      	ldr	r3, [r3, #32]
 800ad66:	4960      	ldr	r1, [pc, #384]	@ (800aee8 <HAL_RCC_OscConfig+0x270>)
 800ad68:	4313      	orrs	r3, r2
 800ad6a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800ad6c:	4b5e      	ldr	r3, [pc, #376]	@ (800aee8 <HAL_RCC_OscConfig+0x270>)
 800ad6e:	685b      	ldr	r3, [r3, #4]
 800ad70:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	69db      	ldr	r3, [r3, #28]
 800ad78:	021b      	lsls	r3, r3, #8
 800ad7a:	495b      	ldr	r1, [pc, #364]	@ (800aee8 <HAL_RCC_OscConfig+0x270>)
 800ad7c:	4313      	orrs	r3, r2
 800ad7e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800ad80:	69bb      	ldr	r3, [r7, #24]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d109      	bne.n	800ad9a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6a1b      	ldr	r3, [r3, #32]
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	f000 fd52 	bl	800b834 <RCC_SetFlashLatencyFromMSIRange>
 800ad90:	4603      	mov	r3, r0
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d001      	beq.n	800ad9a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800ad96:	2301      	movs	r3, #1
 800ad98:	e380      	b.n	800b49c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800ad9a:	f000 fc87 	bl	800b6ac <HAL_RCC_GetSysClockFreq>
 800ad9e:	4602      	mov	r2, r0
 800ada0:	4b51      	ldr	r3, [pc, #324]	@ (800aee8 <HAL_RCC_OscConfig+0x270>)
 800ada2:	689b      	ldr	r3, [r3, #8]
 800ada4:	091b      	lsrs	r3, r3, #4
 800ada6:	f003 030f 	and.w	r3, r3, #15
 800adaa:	4950      	ldr	r1, [pc, #320]	@ (800aeec <HAL_RCC_OscConfig+0x274>)
 800adac:	5ccb      	ldrb	r3, [r1, r3]
 800adae:	f003 031f 	and.w	r3, r3, #31
 800adb2:	fa22 f303 	lsr.w	r3, r2, r3
 800adb6:	4a4e      	ldr	r2, [pc, #312]	@ (800aef0 <HAL_RCC_OscConfig+0x278>)
 800adb8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800adba:	4b4e      	ldr	r3, [pc, #312]	@ (800aef4 <HAL_RCC_OscConfig+0x27c>)
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	4618      	mov	r0, r3
 800adc0:	f7fa ff84 	bl	8005ccc <HAL_InitTick>
 800adc4:	4603      	mov	r3, r0
 800adc6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800adc8:	7bfb      	ldrb	r3, [r7, #15]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d052      	beq.n	800ae74 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800adce:	7bfb      	ldrb	r3, [r7, #15]
 800add0:	e364      	b.n	800b49c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	699b      	ldr	r3, [r3, #24]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d032      	beq.n	800ae40 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800adda:	4b43      	ldr	r3, [pc, #268]	@ (800aee8 <HAL_RCC_OscConfig+0x270>)
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	4a42      	ldr	r2, [pc, #264]	@ (800aee8 <HAL_RCC_OscConfig+0x270>)
 800ade0:	f043 0301 	orr.w	r3, r3, #1
 800ade4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800ade6:	f7fa ffc1 	bl	8005d6c <HAL_GetTick>
 800adea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800adec:	e008      	b.n	800ae00 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800adee:	f7fa ffbd 	bl	8005d6c <HAL_GetTick>
 800adf2:	4602      	mov	r2, r0
 800adf4:	693b      	ldr	r3, [r7, #16]
 800adf6:	1ad3      	subs	r3, r2, r3
 800adf8:	2b02      	cmp	r3, #2
 800adfa:	d901      	bls.n	800ae00 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800adfc:	2303      	movs	r3, #3
 800adfe:	e34d      	b.n	800b49c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800ae00:	4b39      	ldr	r3, [pc, #228]	@ (800aee8 <HAL_RCC_OscConfig+0x270>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	f003 0302 	and.w	r3, r3, #2
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d0f0      	beq.n	800adee <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ae0c:	4b36      	ldr	r3, [pc, #216]	@ (800aee8 <HAL_RCC_OscConfig+0x270>)
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	4a35      	ldr	r2, [pc, #212]	@ (800aee8 <HAL_RCC_OscConfig+0x270>)
 800ae12:	f043 0308 	orr.w	r3, r3, #8
 800ae16:	6013      	str	r3, [r2, #0]
 800ae18:	4b33      	ldr	r3, [pc, #204]	@ (800aee8 <HAL_RCC_OscConfig+0x270>)
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	6a1b      	ldr	r3, [r3, #32]
 800ae24:	4930      	ldr	r1, [pc, #192]	@ (800aee8 <HAL_RCC_OscConfig+0x270>)
 800ae26:	4313      	orrs	r3, r2
 800ae28:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800ae2a:	4b2f      	ldr	r3, [pc, #188]	@ (800aee8 <HAL_RCC_OscConfig+0x270>)
 800ae2c:	685b      	ldr	r3, [r3, #4]
 800ae2e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	69db      	ldr	r3, [r3, #28]
 800ae36:	021b      	lsls	r3, r3, #8
 800ae38:	492b      	ldr	r1, [pc, #172]	@ (800aee8 <HAL_RCC_OscConfig+0x270>)
 800ae3a:	4313      	orrs	r3, r2
 800ae3c:	604b      	str	r3, [r1, #4]
 800ae3e:	e01a      	b.n	800ae76 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800ae40:	4b29      	ldr	r3, [pc, #164]	@ (800aee8 <HAL_RCC_OscConfig+0x270>)
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	4a28      	ldr	r2, [pc, #160]	@ (800aee8 <HAL_RCC_OscConfig+0x270>)
 800ae46:	f023 0301 	bic.w	r3, r3, #1
 800ae4a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800ae4c:	f7fa ff8e 	bl	8005d6c <HAL_GetTick>
 800ae50:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800ae52:	e008      	b.n	800ae66 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800ae54:	f7fa ff8a 	bl	8005d6c <HAL_GetTick>
 800ae58:	4602      	mov	r2, r0
 800ae5a:	693b      	ldr	r3, [r7, #16]
 800ae5c:	1ad3      	subs	r3, r2, r3
 800ae5e:	2b02      	cmp	r3, #2
 800ae60:	d901      	bls.n	800ae66 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800ae62:	2303      	movs	r3, #3
 800ae64:	e31a      	b.n	800b49c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800ae66:	4b20      	ldr	r3, [pc, #128]	@ (800aee8 <HAL_RCC_OscConfig+0x270>)
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	f003 0302 	and.w	r3, r3, #2
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d1f0      	bne.n	800ae54 <HAL_RCC_OscConfig+0x1dc>
 800ae72:	e000      	b.n	800ae76 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800ae74:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	f003 0301 	and.w	r3, r3, #1
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d073      	beq.n	800af6a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800ae82:	69bb      	ldr	r3, [r7, #24]
 800ae84:	2b08      	cmp	r3, #8
 800ae86:	d005      	beq.n	800ae94 <HAL_RCC_OscConfig+0x21c>
 800ae88:	69bb      	ldr	r3, [r7, #24]
 800ae8a:	2b0c      	cmp	r3, #12
 800ae8c:	d10e      	bne.n	800aeac <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800ae8e:	697b      	ldr	r3, [r7, #20]
 800ae90:	2b03      	cmp	r3, #3
 800ae92:	d10b      	bne.n	800aeac <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ae94:	4b14      	ldr	r3, [pc, #80]	@ (800aee8 <HAL_RCC_OscConfig+0x270>)
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d063      	beq.n	800af68 <HAL_RCC_OscConfig+0x2f0>
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	685b      	ldr	r3, [r3, #4]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d15f      	bne.n	800af68 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800aea8:	2301      	movs	r3, #1
 800aeaa:	e2f7      	b.n	800b49c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	685b      	ldr	r3, [r3, #4]
 800aeb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aeb4:	d106      	bne.n	800aec4 <HAL_RCC_OscConfig+0x24c>
 800aeb6:	4b0c      	ldr	r3, [pc, #48]	@ (800aee8 <HAL_RCC_OscConfig+0x270>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	4a0b      	ldr	r2, [pc, #44]	@ (800aee8 <HAL_RCC_OscConfig+0x270>)
 800aebc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800aec0:	6013      	str	r3, [r2, #0]
 800aec2:	e025      	b.n	800af10 <HAL_RCC_OscConfig+0x298>
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	685b      	ldr	r3, [r3, #4]
 800aec8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800aecc:	d114      	bne.n	800aef8 <HAL_RCC_OscConfig+0x280>
 800aece:	4b06      	ldr	r3, [pc, #24]	@ (800aee8 <HAL_RCC_OscConfig+0x270>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	4a05      	ldr	r2, [pc, #20]	@ (800aee8 <HAL_RCC_OscConfig+0x270>)
 800aed4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800aed8:	6013      	str	r3, [r2, #0]
 800aeda:	4b03      	ldr	r3, [pc, #12]	@ (800aee8 <HAL_RCC_OscConfig+0x270>)
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	4a02      	ldr	r2, [pc, #8]	@ (800aee8 <HAL_RCC_OscConfig+0x270>)
 800aee0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800aee4:	6013      	str	r3, [r2, #0]
 800aee6:	e013      	b.n	800af10 <HAL_RCC_OscConfig+0x298>
 800aee8:	40021000 	.word	0x40021000
 800aeec:	0800e0a4 	.word	0x0800e0a4
 800aef0:	20000398 	.word	0x20000398
 800aef4:	2000039c 	.word	0x2000039c
 800aef8:	4ba0      	ldr	r3, [pc, #640]	@ (800b17c <HAL_RCC_OscConfig+0x504>)
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	4a9f      	ldr	r2, [pc, #636]	@ (800b17c <HAL_RCC_OscConfig+0x504>)
 800aefe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800af02:	6013      	str	r3, [r2, #0]
 800af04:	4b9d      	ldr	r3, [pc, #628]	@ (800b17c <HAL_RCC_OscConfig+0x504>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	4a9c      	ldr	r2, [pc, #624]	@ (800b17c <HAL_RCC_OscConfig+0x504>)
 800af0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800af0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	685b      	ldr	r3, [r3, #4]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d013      	beq.n	800af40 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af18:	f7fa ff28 	bl	8005d6c <HAL_GetTick>
 800af1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800af1e:	e008      	b.n	800af32 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800af20:	f7fa ff24 	bl	8005d6c <HAL_GetTick>
 800af24:	4602      	mov	r2, r0
 800af26:	693b      	ldr	r3, [r7, #16]
 800af28:	1ad3      	subs	r3, r2, r3
 800af2a:	2b64      	cmp	r3, #100	@ 0x64
 800af2c:	d901      	bls.n	800af32 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800af2e:	2303      	movs	r3, #3
 800af30:	e2b4      	b.n	800b49c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800af32:	4b92      	ldr	r3, [pc, #584]	@ (800b17c <HAL_RCC_OscConfig+0x504>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d0f0      	beq.n	800af20 <HAL_RCC_OscConfig+0x2a8>
 800af3e:	e014      	b.n	800af6a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af40:	f7fa ff14 	bl	8005d6c <HAL_GetTick>
 800af44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800af46:	e008      	b.n	800af5a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800af48:	f7fa ff10 	bl	8005d6c <HAL_GetTick>
 800af4c:	4602      	mov	r2, r0
 800af4e:	693b      	ldr	r3, [r7, #16]
 800af50:	1ad3      	subs	r3, r2, r3
 800af52:	2b64      	cmp	r3, #100	@ 0x64
 800af54:	d901      	bls.n	800af5a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800af56:	2303      	movs	r3, #3
 800af58:	e2a0      	b.n	800b49c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800af5a:	4b88      	ldr	r3, [pc, #544]	@ (800b17c <HAL_RCC_OscConfig+0x504>)
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800af62:	2b00      	cmp	r3, #0
 800af64:	d1f0      	bne.n	800af48 <HAL_RCC_OscConfig+0x2d0>
 800af66:	e000      	b.n	800af6a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800af68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	f003 0302 	and.w	r3, r3, #2
 800af72:	2b00      	cmp	r3, #0
 800af74:	d060      	beq.n	800b038 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800af76:	69bb      	ldr	r3, [r7, #24]
 800af78:	2b04      	cmp	r3, #4
 800af7a:	d005      	beq.n	800af88 <HAL_RCC_OscConfig+0x310>
 800af7c:	69bb      	ldr	r3, [r7, #24]
 800af7e:	2b0c      	cmp	r3, #12
 800af80:	d119      	bne.n	800afb6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800af82:	697b      	ldr	r3, [r7, #20]
 800af84:	2b02      	cmp	r3, #2
 800af86:	d116      	bne.n	800afb6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800af88:	4b7c      	ldr	r3, [pc, #496]	@ (800b17c <HAL_RCC_OscConfig+0x504>)
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800af90:	2b00      	cmp	r3, #0
 800af92:	d005      	beq.n	800afa0 <HAL_RCC_OscConfig+0x328>
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	68db      	ldr	r3, [r3, #12]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d101      	bne.n	800afa0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800af9c:	2301      	movs	r3, #1
 800af9e:	e27d      	b.n	800b49c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800afa0:	4b76      	ldr	r3, [pc, #472]	@ (800b17c <HAL_RCC_OscConfig+0x504>)
 800afa2:	685b      	ldr	r3, [r3, #4]
 800afa4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	691b      	ldr	r3, [r3, #16]
 800afac:	061b      	lsls	r3, r3, #24
 800afae:	4973      	ldr	r1, [pc, #460]	@ (800b17c <HAL_RCC_OscConfig+0x504>)
 800afb0:	4313      	orrs	r3, r2
 800afb2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800afb4:	e040      	b.n	800b038 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	68db      	ldr	r3, [r3, #12]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d023      	beq.n	800b006 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800afbe:	4b6f      	ldr	r3, [pc, #444]	@ (800b17c <HAL_RCC_OscConfig+0x504>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	4a6e      	ldr	r2, [pc, #440]	@ (800b17c <HAL_RCC_OscConfig+0x504>)
 800afc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800afc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800afca:	f7fa fecf 	bl	8005d6c <HAL_GetTick>
 800afce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800afd0:	e008      	b.n	800afe4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800afd2:	f7fa fecb 	bl	8005d6c <HAL_GetTick>
 800afd6:	4602      	mov	r2, r0
 800afd8:	693b      	ldr	r3, [r7, #16]
 800afda:	1ad3      	subs	r3, r2, r3
 800afdc:	2b02      	cmp	r3, #2
 800afde:	d901      	bls.n	800afe4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800afe0:	2303      	movs	r3, #3
 800afe2:	e25b      	b.n	800b49c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800afe4:	4b65      	ldr	r3, [pc, #404]	@ (800b17c <HAL_RCC_OscConfig+0x504>)
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800afec:	2b00      	cmp	r3, #0
 800afee:	d0f0      	beq.n	800afd2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aff0:	4b62      	ldr	r3, [pc, #392]	@ (800b17c <HAL_RCC_OscConfig+0x504>)
 800aff2:	685b      	ldr	r3, [r3, #4]
 800aff4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	691b      	ldr	r3, [r3, #16]
 800affc:	061b      	lsls	r3, r3, #24
 800affe:	495f      	ldr	r1, [pc, #380]	@ (800b17c <HAL_RCC_OscConfig+0x504>)
 800b000:	4313      	orrs	r3, r2
 800b002:	604b      	str	r3, [r1, #4]
 800b004:	e018      	b.n	800b038 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b006:	4b5d      	ldr	r3, [pc, #372]	@ (800b17c <HAL_RCC_OscConfig+0x504>)
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	4a5c      	ldr	r2, [pc, #368]	@ (800b17c <HAL_RCC_OscConfig+0x504>)
 800b00c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b010:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b012:	f7fa feab 	bl	8005d6c <HAL_GetTick>
 800b016:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b018:	e008      	b.n	800b02c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b01a:	f7fa fea7 	bl	8005d6c <HAL_GetTick>
 800b01e:	4602      	mov	r2, r0
 800b020:	693b      	ldr	r3, [r7, #16]
 800b022:	1ad3      	subs	r3, r2, r3
 800b024:	2b02      	cmp	r3, #2
 800b026:	d901      	bls.n	800b02c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800b028:	2303      	movs	r3, #3
 800b02a:	e237      	b.n	800b49c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b02c:	4b53      	ldr	r3, [pc, #332]	@ (800b17c <HAL_RCC_OscConfig+0x504>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b034:	2b00      	cmp	r3, #0
 800b036:	d1f0      	bne.n	800b01a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	f003 0308 	and.w	r3, r3, #8
 800b040:	2b00      	cmp	r3, #0
 800b042:	d03c      	beq.n	800b0be <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	695b      	ldr	r3, [r3, #20]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d01c      	beq.n	800b086 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b04c:	4b4b      	ldr	r3, [pc, #300]	@ (800b17c <HAL_RCC_OscConfig+0x504>)
 800b04e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b052:	4a4a      	ldr	r2, [pc, #296]	@ (800b17c <HAL_RCC_OscConfig+0x504>)
 800b054:	f043 0301 	orr.w	r3, r3, #1
 800b058:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b05c:	f7fa fe86 	bl	8005d6c <HAL_GetTick>
 800b060:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b062:	e008      	b.n	800b076 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b064:	f7fa fe82 	bl	8005d6c <HAL_GetTick>
 800b068:	4602      	mov	r2, r0
 800b06a:	693b      	ldr	r3, [r7, #16]
 800b06c:	1ad3      	subs	r3, r2, r3
 800b06e:	2b02      	cmp	r3, #2
 800b070:	d901      	bls.n	800b076 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800b072:	2303      	movs	r3, #3
 800b074:	e212      	b.n	800b49c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b076:	4b41      	ldr	r3, [pc, #260]	@ (800b17c <HAL_RCC_OscConfig+0x504>)
 800b078:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b07c:	f003 0302 	and.w	r3, r3, #2
 800b080:	2b00      	cmp	r3, #0
 800b082:	d0ef      	beq.n	800b064 <HAL_RCC_OscConfig+0x3ec>
 800b084:	e01b      	b.n	800b0be <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b086:	4b3d      	ldr	r3, [pc, #244]	@ (800b17c <HAL_RCC_OscConfig+0x504>)
 800b088:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b08c:	4a3b      	ldr	r2, [pc, #236]	@ (800b17c <HAL_RCC_OscConfig+0x504>)
 800b08e:	f023 0301 	bic.w	r3, r3, #1
 800b092:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b096:	f7fa fe69 	bl	8005d6c <HAL_GetTick>
 800b09a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b09c:	e008      	b.n	800b0b0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b09e:	f7fa fe65 	bl	8005d6c <HAL_GetTick>
 800b0a2:	4602      	mov	r2, r0
 800b0a4:	693b      	ldr	r3, [r7, #16]
 800b0a6:	1ad3      	subs	r3, r2, r3
 800b0a8:	2b02      	cmp	r3, #2
 800b0aa:	d901      	bls.n	800b0b0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800b0ac:	2303      	movs	r3, #3
 800b0ae:	e1f5      	b.n	800b49c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b0b0:	4b32      	ldr	r3, [pc, #200]	@ (800b17c <HAL_RCC_OscConfig+0x504>)
 800b0b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b0b6:	f003 0302 	and.w	r3, r3, #2
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d1ef      	bne.n	800b09e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	f003 0304 	and.w	r3, r3, #4
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	f000 80a6 	beq.w	800b218 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800b0d0:	4b2a      	ldr	r3, [pc, #168]	@ (800b17c <HAL_RCC_OscConfig+0x504>)
 800b0d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b0d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d10d      	bne.n	800b0f8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b0dc:	4b27      	ldr	r3, [pc, #156]	@ (800b17c <HAL_RCC_OscConfig+0x504>)
 800b0de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b0e0:	4a26      	ldr	r2, [pc, #152]	@ (800b17c <HAL_RCC_OscConfig+0x504>)
 800b0e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b0e6:	6593      	str	r3, [r2, #88]	@ 0x58
 800b0e8:	4b24      	ldr	r3, [pc, #144]	@ (800b17c <HAL_RCC_OscConfig+0x504>)
 800b0ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b0ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b0f0:	60bb      	str	r3, [r7, #8]
 800b0f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b0f8:	4b21      	ldr	r3, [pc, #132]	@ (800b180 <HAL_RCC_OscConfig+0x508>)
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b100:	2b00      	cmp	r3, #0
 800b102:	d118      	bne.n	800b136 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b104:	4b1e      	ldr	r3, [pc, #120]	@ (800b180 <HAL_RCC_OscConfig+0x508>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	4a1d      	ldr	r2, [pc, #116]	@ (800b180 <HAL_RCC_OscConfig+0x508>)
 800b10a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b10e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b110:	f7fa fe2c 	bl	8005d6c <HAL_GetTick>
 800b114:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b116:	e008      	b.n	800b12a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b118:	f7fa fe28 	bl	8005d6c <HAL_GetTick>
 800b11c:	4602      	mov	r2, r0
 800b11e:	693b      	ldr	r3, [r7, #16]
 800b120:	1ad3      	subs	r3, r2, r3
 800b122:	2b02      	cmp	r3, #2
 800b124:	d901      	bls.n	800b12a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800b126:	2303      	movs	r3, #3
 800b128:	e1b8      	b.n	800b49c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b12a:	4b15      	ldr	r3, [pc, #84]	@ (800b180 <HAL_RCC_OscConfig+0x508>)
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b132:	2b00      	cmp	r3, #0
 800b134:	d0f0      	beq.n	800b118 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	689b      	ldr	r3, [r3, #8]
 800b13a:	2b01      	cmp	r3, #1
 800b13c:	d108      	bne.n	800b150 <HAL_RCC_OscConfig+0x4d8>
 800b13e:	4b0f      	ldr	r3, [pc, #60]	@ (800b17c <HAL_RCC_OscConfig+0x504>)
 800b140:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b144:	4a0d      	ldr	r2, [pc, #52]	@ (800b17c <HAL_RCC_OscConfig+0x504>)
 800b146:	f043 0301 	orr.w	r3, r3, #1
 800b14a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800b14e:	e029      	b.n	800b1a4 <HAL_RCC_OscConfig+0x52c>
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	689b      	ldr	r3, [r3, #8]
 800b154:	2b05      	cmp	r3, #5
 800b156:	d115      	bne.n	800b184 <HAL_RCC_OscConfig+0x50c>
 800b158:	4b08      	ldr	r3, [pc, #32]	@ (800b17c <HAL_RCC_OscConfig+0x504>)
 800b15a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b15e:	4a07      	ldr	r2, [pc, #28]	@ (800b17c <HAL_RCC_OscConfig+0x504>)
 800b160:	f043 0304 	orr.w	r3, r3, #4
 800b164:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800b168:	4b04      	ldr	r3, [pc, #16]	@ (800b17c <HAL_RCC_OscConfig+0x504>)
 800b16a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b16e:	4a03      	ldr	r2, [pc, #12]	@ (800b17c <HAL_RCC_OscConfig+0x504>)
 800b170:	f043 0301 	orr.w	r3, r3, #1
 800b174:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800b178:	e014      	b.n	800b1a4 <HAL_RCC_OscConfig+0x52c>
 800b17a:	bf00      	nop
 800b17c:	40021000 	.word	0x40021000
 800b180:	40007000 	.word	0x40007000
 800b184:	4b9d      	ldr	r3, [pc, #628]	@ (800b3fc <HAL_RCC_OscConfig+0x784>)
 800b186:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b18a:	4a9c      	ldr	r2, [pc, #624]	@ (800b3fc <HAL_RCC_OscConfig+0x784>)
 800b18c:	f023 0301 	bic.w	r3, r3, #1
 800b190:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800b194:	4b99      	ldr	r3, [pc, #612]	@ (800b3fc <HAL_RCC_OscConfig+0x784>)
 800b196:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b19a:	4a98      	ldr	r2, [pc, #608]	@ (800b3fc <HAL_RCC_OscConfig+0x784>)
 800b19c:	f023 0304 	bic.w	r3, r3, #4
 800b1a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	689b      	ldr	r3, [r3, #8]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d016      	beq.n	800b1da <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b1ac:	f7fa fdde 	bl	8005d6c <HAL_GetTick>
 800b1b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b1b2:	e00a      	b.n	800b1ca <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b1b4:	f7fa fdda 	bl	8005d6c <HAL_GetTick>
 800b1b8:	4602      	mov	r2, r0
 800b1ba:	693b      	ldr	r3, [r7, #16]
 800b1bc:	1ad3      	subs	r3, r2, r3
 800b1be:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b1c2:	4293      	cmp	r3, r2
 800b1c4:	d901      	bls.n	800b1ca <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800b1c6:	2303      	movs	r3, #3
 800b1c8:	e168      	b.n	800b49c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b1ca:	4b8c      	ldr	r3, [pc, #560]	@ (800b3fc <HAL_RCC_OscConfig+0x784>)
 800b1cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b1d0:	f003 0302 	and.w	r3, r3, #2
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d0ed      	beq.n	800b1b4 <HAL_RCC_OscConfig+0x53c>
 800b1d8:	e015      	b.n	800b206 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b1da:	f7fa fdc7 	bl	8005d6c <HAL_GetTick>
 800b1de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b1e0:	e00a      	b.n	800b1f8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b1e2:	f7fa fdc3 	bl	8005d6c <HAL_GetTick>
 800b1e6:	4602      	mov	r2, r0
 800b1e8:	693b      	ldr	r3, [r7, #16]
 800b1ea:	1ad3      	subs	r3, r2, r3
 800b1ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b1f0:	4293      	cmp	r3, r2
 800b1f2:	d901      	bls.n	800b1f8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800b1f4:	2303      	movs	r3, #3
 800b1f6:	e151      	b.n	800b49c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b1f8:	4b80      	ldr	r3, [pc, #512]	@ (800b3fc <HAL_RCC_OscConfig+0x784>)
 800b1fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b1fe:	f003 0302 	and.w	r3, r3, #2
 800b202:	2b00      	cmp	r3, #0
 800b204:	d1ed      	bne.n	800b1e2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b206:	7ffb      	ldrb	r3, [r7, #31]
 800b208:	2b01      	cmp	r3, #1
 800b20a:	d105      	bne.n	800b218 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b20c:	4b7b      	ldr	r3, [pc, #492]	@ (800b3fc <HAL_RCC_OscConfig+0x784>)
 800b20e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b210:	4a7a      	ldr	r2, [pc, #488]	@ (800b3fc <HAL_RCC_OscConfig+0x784>)
 800b212:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b216:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	f003 0320 	and.w	r3, r3, #32
 800b220:	2b00      	cmp	r3, #0
 800b222:	d03c      	beq.n	800b29e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d01c      	beq.n	800b266 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b22c:	4b73      	ldr	r3, [pc, #460]	@ (800b3fc <HAL_RCC_OscConfig+0x784>)
 800b22e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b232:	4a72      	ldr	r2, [pc, #456]	@ (800b3fc <HAL_RCC_OscConfig+0x784>)
 800b234:	f043 0301 	orr.w	r3, r3, #1
 800b238:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b23c:	f7fa fd96 	bl	8005d6c <HAL_GetTick>
 800b240:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b242:	e008      	b.n	800b256 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b244:	f7fa fd92 	bl	8005d6c <HAL_GetTick>
 800b248:	4602      	mov	r2, r0
 800b24a:	693b      	ldr	r3, [r7, #16]
 800b24c:	1ad3      	subs	r3, r2, r3
 800b24e:	2b02      	cmp	r3, #2
 800b250:	d901      	bls.n	800b256 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800b252:	2303      	movs	r3, #3
 800b254:	e122      	b.n	800b49c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b256:	4b69      	ldr	r3, [pc, #420]	@ (800b3fc <HAL_RCC_OscConfig+0x784>)
 800b258:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b25c:	f003 0302 	and.w	r3, r3, #2
 800b260:	2b00      	cmp	r3, #0
 800b262:	d0ef      	beq.n	800b244 <HAL_RCC_OscConfig+0x5cc>
 800b264:	e01b      	b.n	800b29e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b266:	4b65      	ldr	r3, [pc, #404]	@ (800b3fc <HAL_RCC_OscConfig+0x784>)
 800b268:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b26c:	4a63      	ldr	r2, [pc, #396]	@ (800b3fc <HAL_RCC_OscConfig+0x784>)
 800b26e:	f023 0301 	bic.w	r3, r3, #1
 800b272:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b276:	f7fa fd79 	bl	8005d6c <HAL_GetTick>
 800b27a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b27c:	e008      	b.n	800b290 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b27e:	f7fa fd75 	bl	8005d6c <HAL_GetTick>
 800b282:	4602      	mov	r2, r0
 800b284:	693b      	ldr	r3, [r7, #16]
 800b286:	1ad3      	subs	r3, r2, r3
 800b288:	2b02      	cmp	r3, #2
 800b28a:	d901      	bls.n	800b290 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800b28c:	2303      	movs	r3, #3
 800b28e:	e105      	b.n	800b49c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b290:	4b5a      	ldr	r3, [pc, #360]	@ (800b3fc <HAL_RCC_OscConfig+0x784>)
 800b292:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b296:	f003 0302 	and.w	r3, r3, #2
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d1ef      	bne.n	800b27e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	f000 80f9 	beq.w	800b49a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2ac:	2b02      	cmp	r3, #2
 800b2ae:	f040 80cf 	bne.w	800b450 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800b2b2:	4b52      	ldr	r3, [pc, #328]	@ (800b3fc <HAL_RCC_OscConfig+0x784>)
 800b2b4:	68db      	ldr	r3, [r3, #12]
 800b2b6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800b2b8:	697b      	ldr	r3, [r7, #20]
 800b2ba:	f003 0203 	and.w	r2, r3, #3
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2c2:	429a      	cmp	r2, r3
 800b2c4:	d12c      	bne.n	800b320 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b2c6:	697b      	ldr	r3, [r7, #20]
 800b2c8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2d0:	3b01      	subs	r3, #1
 800b2d2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800b2d4:	429a      	cmp	r2, r3
 800b2d6:	d123      	bne.n	800b320 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b2d8:	697b      	ldr	r3, [r7, #20]
 800b2da:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b2e2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b2e4:	429a      	cmp	r2, r3
 800b2e6:	d11b      	bne.n	800b320 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b2e8:	697b      	ldr	r3, [r7, #20]
 800b2ea:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2f2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b2f4:	429a      	cmp	r2, r3
 800b2f6:	d113      	bne.n	800b320 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b2f8:	697b      	ldr	r3, [r7, #20]
 800b2fa:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b302:	085b      	lsrs	r3, r3, #1
 800b304:	3b01      	subs	r3, #1
 800b306:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b308:	429a      	cmp	r2, r3
 800b30a:	d109      	bne.n	800b320 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800b30c:	697b      	ldr	r3, [r7, #20]
 800b30e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b316:	085b      	lsrs	r3, r3, #1
 800b318:	3b01      	subs	r3, #1
 800b31a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b31c:	429a      	cmp	r2, r3
 800b31e:	d071      	beq.n	800b404 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800b320:	69bb      	ldr	r3, [r7, #24]
 800b322:	2b0c      	cmp	r3, #12
 800b324:	d068      	beq.n	800b3f8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800b326:	4b35      	ldr	r3, [pc, #212]	@ (800b3fc <HAL_RCC_OscConfig+0x784>)
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d105      	bne.n	800b33e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800b332:	4b32      	ldr	r3, [pc, #200]	@ (800b3fc <HAL_RCC_OscConfig+0x784>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d001      	beq.n	800b342 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800b33e:	2301      	movs	r3, #1
 800b340:	e0ac      	b.n	800b49c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800b342:	4b2e      	ldr	r3, [pc, #184]	@ (800b3fc <HAL_RCC_OscConfig+0x784>)
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	4a2d      	ldr	r2, [pc, #180]	@ (800b3fc <HAL_RCC_OscConfig+0x784>)
 800b348:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b34c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800b34e:	f7fa fd0d 	bl	8005d6c <HAL_GetTick>
 800b352:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b354:	e008      	b.n	800b368 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b356:	f7fa fd09 	bl	8005d6c <HAL_GetTick>
 800b35a:	4602      	mov	r2, r0
 800b35c:	693b      	ldr	r3, [r7, #16]
 800b35e:	1ad3      	subs	r3, r2, r3
 800b360:	2b02      	cmp	r3, #2
 800b362:	d901      	bls.n	800b368 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800b364:	2303      	movs	r3, #3
 800b366:	e099      	b.n	800b49c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b368:	4b24      	ldr	r3, [pc, #144]	@ (800b3fc <HAL_RCC_OscConfig+0x784>)
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b370:	2b00      	cmp	r3, #0
 800b372:	d1f0      	bne.n	800b356 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b374:	4b21      	ldr	r3, [pc, #132]	@ (800b3fc <HAL_RCC_OscConfig+0x784>)
 800b376:	68da      	ldr	r2, [r3, #12]
 800b378:	4b21      	ldr	r3, [pc, #132]	@ (800b400 <HAL_RCC_OscConfig+0x788>)
 800b37a:	4013      	ands	r3, r2
 800b37c:	687a      	ldr	r2, [r7, #4]
 800b37e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800b380:	687a      	ldr	r2, [r7, #4]
 800b382:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800b384:	3a01      	subs	r2, #1
 800b386:	0112      	lsls	r2, r2, #4
 800b388:	4311      	orrs	r1, r2
 800b38a:	687a      	ldr	r2, [r7, #4]
 800b38c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800b38e:	0212      	lsls	r2, r2, #8
 800b390:	4311      	orrs	r1, r2
 800b392:	687a      	ldr	r2, [r7, #4]
 800b394:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800b396:	0852      	lsrs	r2, r2, #1
 800b398:	3a01      	subs	r2, #1
 800b39a:	0552      	lsls	r2, r2, #21
 800b39c:	4311      	orrs	r1, r2
 800b39e:	687a      	ldr	r2, [r7, #4]
 800b3a0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800b3a2:	0852      	lsrs	r2, r2, #1
 800b3a4:	3a01      	subs	r2, #1
 800b3a6:	0652      	lsls	r2, r2, #25
 800b3a8:	4311      	orrs	r1, r2
 800b3aa:	687a      	ldr	r2, [r7, #4]
 800b3ac:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800b3ae:	06d2      	lsls	r2, r2, #27
 800b3b0:	430a      	orrs	r2, r1
 800b3b2:	4912      	ldr	r1, [pc, #72]	@ (800b3fc <HAL_RCC_OscConfig+0x784>)
 800b3b4:	4313      	orrs	r3, r2
 800b3b6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800b3b8:	4b10      	ldr	r3, [pc, #64]	@ (800b3fc <HAL_RCC_OscConfig+0x784>)
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	4a0f      	ldr	r2, [pc, #60]	@ (800b3fc <HAL_RCC_OscConfig+0x784>)
 800b3be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b3c2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b3c4:	4b0d      	ldr	r3, [pc, #52]	@ (800b3fc <HAL_RCC_OscConfig+0x784>)
 800b3c6:	68db      	ldr	r3, [r3, #12]
 800b3c8:	4a0c      	ldr	r2, [pc, #48]	@ (800b3fc <HAL_RCC_OscConfig+0x784>)
 800b3ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b3ce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800b3d0:	f7fa fccc 	bl	8005d6c <HAL_GetTick>
 800b3d4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b3d6:	e008      	b.n	800b3ea <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b3d8:	f7fa fcc8 	bl	8005d6c <HAL_GetTick>
 800b3dc:	4602      	mov	r2, r0
 800b3de:	693b      	ldr	r3, [r7, #16]
 800b3e0:	1ad3      	subs	r3, r2, r3
 800b3e2:	2b02      	cmp	r3, #2
 800b3e4:	d901      	bls.n	800b3ea <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800b3e6:	2303      	movs	r3, #3
 800b3e8:	e058      	b.n	800b49c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b3ea:	4b04      	ldr	r3, [pc, #16]	@ (800b3fc <HAL_RCC_OscConfig+0x784>)
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d0f0      	beq.n	800b3d8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800b3f6:	e050      	b.n	800b49a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800b3f8:	2301      	movs	r3, #1
 800b3fa:	e04f      	b.n	800b49c <HAL_RCC_OscConfig+0x824>
 800b3fc:	40021000 	.word	0x40021000
 800b400:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b404:	4b27      	ldr	r3, [pc, #156]	@ (800b4a4 <HAL_RCC_OscConfig+0x82c>)
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d144      	bne.n	800b49a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800b410:	4b24      	ldr	r3, [pc, #144]	@ (800b4a4 <HAL_RCC_OscConfig+0x82c>)
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	4a23      	ldr	r2, [pc, #140]	@ (800b4a4 <HAL_RCC_OscConfig+0x82c>)
 800b416:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b41a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b41c:	4b21      	ldr	r3, [pc, #132]	@ (800b4a4 <HAL_RCC_OscConfig+0x82c>)
 800b41e:	68db      	ldr	r3, [r3, #12]
 800b420:	4a20      	ldr	r2, [pc, #128]	@ (800b4a4 <HAL_RCC_OscConfig+0x82c>)
 800b422:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b426:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b428:	f7fa fca0 	bl	8005d6c <HAL_GetTick>
 800b42c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b42e:	e008      	b.n	800b442 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b430:	f7fa fc9c 	bl	8005d6c <HAL_GetTick>
 800b434:	4602      	mov	r2, r0
 800b436:	693b      	ldr	r3, [r7, #16]
 800b438:	1ad3      	subs	r3, r2, r3
 800b43a:	2b02      	cmp	r3, #2
 800b43c:	d901      	bls.n	800b442 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800b43e:	2303      	movs	r3, #3
 800b440:	e02c      	b.n	800b49c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b442:	4b18      	ldr	r3, [pc, #96]	@ (800b4a4 <HAL_RCC_OscConfig+0x82c>)
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d0f0      	beq.n	800b430 <HAL_RCC_OscConfig+0x7b8>
 800b44e:	e024      	b.n	800b49a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800b450:	69bb      	ldr	r3, [r7, #24]
 800b452:	2b0c      	cmp	r3, #12
 800b454:	d01f      	beq.n	800b496 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b456:	4b13      	ldr	r3, [pc, #76]	@ (800b4a4 <HAL_RCC_OscConfig+0x82c>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	4a12      	ldr	r2, [pc, #72]	@ (800b4a4 <HAL_RCC_OscConfig+0x82c>)
 800b45c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b460:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b462:	f7fa fc83 	bl	8005d6c <HAL_GetTick>
 800b466:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b468:	e008      	b.n	800b47c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b46a:	f7fa fc7f 	bl	8005d6c <HAL_GetTick>
 800b46e:	4602      	mov	r2, r0
 800b470:	693b      	ldr	r3, [r7, #16]
 800b472:	1ad3      	subs	r3, r2, r3
 800b474:	2b02      	cmp	r3, #2
 800b476:	d901      	bls.n	800b47c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800b478:	2303      	movs	r3, #3
 800b47a:	e00f      	b.n	800b49c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b47c:	4b09      	ldr	r3, [pc, #36]	@ (800b4a4 <HAL_RCC_OscConfig+0x82c>)
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b484:	2b00      	cmp	r3, #0
 800b486:	d1f0      	bne.n	800b46a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800b488:	4b06      	ldr	r3, [pc, #24]	@ (800b4a4 <HAL_RCC_OscConfig+0x82c>)
 800b48a:	68da      	ldr	r2, [r3, #12]
 800b48c:	4905      	ldr	r1, [pc, #20]	@ (800b4a4 <HAL_RCC_OscConfig+0x82c>)
 800b48e:	4b06      	ldr	r3, [pc, #24]	@ (800b4a8 <HAL_RCC_OscConfig+0x830>)
 800b490:	4013      	ands	r3, r2
 800b492:	60cb      	str	r3, [r1, #12]
 800b494:	e001      	b.n	800b49a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800b496:	2301      	movs	r3, #1
 800b498:	e000      	b.n	800b49c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800b49a:	2300      	movs	r3, #0
}
 800b49c:	4618      	mov	r0, r3
 800b49e:	3720      	adds	r7, #32
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}
 800b4a4:	40021000 	.word	0x40021000
 800b4a8:	feeefffc 	.word	0xfeeefffc

0800b4ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b084      	sub	sp, #16
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
 800b4b4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d101      	bne.n	800b4c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b4bc:	2301      	movs	r3, #1
 800b4be:	e0e7      	b.n	800b690 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b4c0:	4b75      	ldr	r3, [pc, #468]	@ (800b698 <HAL_RCC_ClockConfig+0x1ec>)
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	f003 0307 	and.w	r3, r3, #7
 800b4c8:	683a      	ldr	r2, [r7, #0]
 800b4ca:	429a      	cmp	r2, r3
 800b4cc:	d910      	bls.n	800b4f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b4ce:	4b72      	ldr	r3, [pc, #456]	@ (800b698 <HAL_RCC_ClockConfig+0x1ec>)
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	f023 0207 	bic.w	r2, r3, #7
 800b4d6:	4970      	ldr	r1, [pc, #448]	@ (800b698 <HAL_RCC_ClockConfig+0x1ec>)
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	4313      	orrs	r3, r2
 800b4dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b4de:	4b6e      	ldr	r3, [pc, #440]	@ (800b698 <HAL_RCC_ClockConfig+0x1ec>)
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	f003 0307 	and.w	r3, r3, #7
 800b4e6:	683a      	ldr	r2, [r7, #0]
 800b4e8:	429a      	cmp	r2, r3
 800b4ea:	d001      	beq.n	800b4f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b4ec:	2301      	movs	r3, #1
 800b4ee:	e0cf      	b.n	800b690 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	f003 0302 	and.w	r3, r3, #2
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d010      	beq.n	800b51e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	689a      	ldr	r2, [r3, #8]
 800b500:	4b66      	ldr	r3, [pc, #408]	@ (800b69c <HAL_RCC_ClockConfig+0x1f0>)
 800b502:	689b      	ldr	r3, [r3, #8]
 800b504:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b508:	429a      	cmp	r2, r3
 800b50a:	d908      	bls.n	800b51e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b50c:	4b63      	ldr	r3, [pc, #396]	@ (800b69c <HAL_RCC_ClockConfig+0x1f0>)
 800b50e:	689b      	ldr	r3, [r3, #8]
 800b510:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	689b      	ldr	r3, [r3, #8]
 800b518:	4960      	ldr	r1, [pc, #384]	@ (800b69c <HAL_RCC_ClockConfig+0x1f0>)
 800b51a:	4313      	orrs	r3, r2
 800b51c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	f003 0301 	and.w	r3, r3, #1
 800b526:	2b00      	cmp	r3, #0
 800b528:	d04c      	beq.n	800b5c4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	685b      	ldr	r3, [r3, #4]
 800b52e:	2b03      	cmp	r3, #3
 800b530:	d107      	bne.n	800b542 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b532:	4b5a      	ldr	r3, [pc, #360]	@ (800b69c <HAL_RCC_ClockConfig+0x1f0>)
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d121      	bne.n	800b582 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800b53e:	2301      	movs	r3, #1
 800b540:	e0a6      	b.n	800b690 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	685b      	ldr	r3, [r3, #4]
 800b546:	2b02      	cmp	r3, #2
 800b548:	d107      	bne.n	800b55a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b54a:	4b54      	ldr	r3, [pc, #336]	@ (800b69c <HAL_RCC_ClockConfig+0x1f0>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b552:	2b00      	cmp	r3, #0
 800b554:	d115      	bne.n	800b582 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800b556:	2301      	movs	r3, #1
 800b558:	e09a      	b.n	800b690 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	685b      	ldr	r3, [r3, #4]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d107      	bne.n	800b572 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800b562:	4b4e      	ldr	r3, [pc, #312]	@ (800b69c <HAL_RCC_ClockConfig+0x1f0>)
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	f003 0302 	and.w	r3, r3, #2
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d109      	bne.n	800b582 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800b56e:	2301      	movs	r3, #1
 800b570:	e08e      	b.n	800b690 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b572:	4b4a      	ldr	r3, [pc, #296]	@ (800b69c <HAL_RCC_ClockConfig+0x1f0>)
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d101      	bne.n	800b582 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800b57e:	2301      	movs	r3, #1
 800b580:	e086      	b.n	800b690 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b582:	4b46      	ldr	r3, [pc, #280]	@ (800b69c <HAL_RCC_ClockConfig+0x1f0>)
 800b584:	689b      	ldr	r3, [r3, #8]
 800b586:	f023 0203 	bic.w	r2, r3, #3
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	685b      	ldr	r3, [r3, #4]
 800b58e:	4943      	ldr	r1, [pc, #268]	@ (800b69c <HAL_RCC_ClockConfig+0x1f0>)
 800b590:	4313      	orrs	r3, r2
 800b592:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b594:	f7fa fbea 	bl	8005d6c <HAL_GetTick>
 800b598:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b59a:	e00a      	b.n	800b5b2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b59c:	f7fa fbe6 	bl	8005d6c <HAL_GetTick>
 800b5a0:	4602      	mov	r2, r0
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	1ad3      	subs	r3, r2, r3
 800b5a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b5aa:	4293      	cmp	r3, r2
 800b5ac:	d901      	bls.n	800b5b2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800b5ae:	2303      	movs	r3, #3
 800b5b0:	e06e      	b.n	800b690 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b5b2:	4b3a      	ldr	r3, [pc, #232]	@ (800b69c <HAL_RCC_ClockConfig+0x1f0>)
 800b5b4:	689b      	ldr	r3, [r3, #8]
 800b5b6:	f003 020c 	and.w	r2, r3, #12
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	685b      	ldr	r3, [r3, #4]
 800b5be:	009b      	lsls	r3, r3, #2
 800b5c0:	429a      	cmp	r2, r3
 800b5c2:	d1eb      	bne.n	800b59c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	f003 0302 	and.w	r3, r3, #2
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d010      	beq.n	800b5f2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	689a      	ldr	r2, [r3, #8]
 800b5d4:	4b31      	ldr	r3, [pc, #196]	@ (800b69c <HAL_RCC_ClockConfig+0x1f0>)
 800b5d6:	689b      	ldr	r3, [r3, #8]
 800b5d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b5dc:	429a      	cmp	r2, r3
 800b5de:	d208      	bcs.n	800b5f2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b5e0:	4b2e      	ldr	r3, [pc, #184]	@ (800b69c <HAL_RCC_ClockConfig+0x1f0>)
 800b5e2:	689b      	ldr	r3, [r3, #8]
 800b5e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	689b      	ldr	r3, [r3, #8]
 800b5ec:	492b      	ldr	r1, [pc, #172]	@ (800b69c <HAL_RCC_ClockConfig+0x1f0>)
 800b5ee:	4313      	orrs	r3, r2
 800b5f0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b5f2:	4b29      	ldr	r3, [pc, #164]	@ (800b698 <HAL_RCC_ClockConfig+0x1ec>)
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	f003 0307 	and.w	r3, r3, #7
 800b5fa:	683a      	ldr	r2, [r7, #0]
 800b5fc:	429a      	cmp	r2, r3
 800b5fe:	d210      	bcs.n	800b622 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b600:	4b25      	ldr	r3, [pc, #148]	@ (800b698 <HAL_RCC_ClockConfig+0x1ec>)
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	f023 0207 	bic.w	r2, r3, #7
 800b608:	4923      	ldr	r1, [pc, #140]	@ (800b698 <HAL_RCC_ClockConfig+0x1ec>)
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	4313      	orrs	r3, r2
 800b60e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b610:	4b21      	ldr	r3, [pc, #132]	@ (800b698 <HAL_RCC_ClockConfig+0x1ec>)
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	f003 0307 	and.w	r3, r3, #7
 800b618:	683a      	ldr	r2, [r7, #0]
 800b61a:	429a      	cmp	r2, r3
 800b61c:	d001      	beq.n	800b622 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800b61e:	2301      	movs	r3, #1
 800b620:	e036      	b.n	800b690 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	f003 0304 	and.w	r3, r3, #4
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d008      	beq.n	800b640 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b62e:	4b1b      	ldr	r3, [pc, #108]	@ (800b69c <HAL_RCC_ClockConfig+0x1f0>)
 800b630:	689b      	ldr	r3, [r3, #8]
 800b632:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	68db      	ldr	r3, [r3, #12]
 800b63a:	4918      	ldr	r1, [pc, #96]	@ (800b69c <HAL_RCC_ClockConfig+0x1f0>)
 800b63c:	4313      	orrs	r3, r2
 800b63e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	f003 0308 	and.w	r3, r3, #8
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d009      	beq.n	800b660 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b64c:	4b13      	ldr	r3, [pc, #76]	@ (800b69c <HAL_RCC_ClockConfig+0x1f0>)
 800b64e:	689b      	ldr	r3, [r3, #8]
 800b650:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	691b      	ldr	r3, [r3, #16]
 800b658:	00db      	lsls	r3, r3, #3
 800b65a:	4910      	ldr	r1, [pc, #64]	@ (800b69c <HAL_RCC_ClockConfig+0x1f0>)
 800b65c:	4313      	orrs	r3, r2
 800b65e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b660:	f000 f824 	bl	800b6ac <HAL_RCC_GetSysClockFreq>
 800b664:	4602      	mov	r2, r0
 800b666:	4b0d      	ldr	r3, [pc, #52]	@ (800b69c <HAL_RCC_ClockConfig+0x1f0>)
 800b668:	689b      	ldr	r3, [r3, #8]
 800b66a:	091b      	lsrs	r3, r3, #4
 800b66c:	f003 030f 	and.w	r3, r3, #15
 800b670:	490b      	ldr	r1, [pc, #44]	@ (800b6a0 <HAL_RCC_ClockConfig+0x1f4>)
 800b672:	5ccb      	ldrb	r3, [r1, r3]
 800b674:	f003 031f 	and.w	r3, r3, #31
 800b678:	fa22 f303 	lsr.w	r3, r2, r3
 800b67c:	4a09      	ldr	r2, [pc, #36]	@ (800b6a4 <HAL_RCC_ClockConfig+0x1f8>)
 800b67e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800b680:	4b09      	ldr	r3, [pc, #36]	@ (800b6a8 <HAL_RCC_ClockConfig+0x1fc>)
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	4618      	mov	r0, r3
 800b686:	f7fa fb21 	bl	8005ccc <HAL_InitTick>
 800b68a:	4603      	mov	r3, r0
 800b68c:	72fb      	strb	r3, [r7, #11]

  return status;
 800b68e:	7afb      	ldrb	r3, [r7, #11]
}
 800b690:	4618      	mov	r0, r3
 800b692:	3710      	adds	r7, #16
 800b694:	46bd      	mov	sp, r7
 800b696:	bd80      	pop	{r7, pc}
 800b698:	40022000 	.word	0x40022000
 800b69c:	40021000 	.word	0x40021000
 800b6a0:	0800e0a4 	.word	0x0800e0a4
 800b6a4:	20000398 	.word	0x20000398
 800b6a8:	2000039c 	.word	0x2000039c

0800b6ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b6ac:	b480      	push	{r7}
 800b6ae:	b089      	sub	sp, #36	@ 0x24
 800b6b0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	61fb      	str	r3, [r7, #28]
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b6ba:	4b3e      	ldr	r3, [pc, #248]	@ (800b7b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800b6bc:	689b      	ldr	r3, [r3, #8]
 800b6be:	f003 030c 	and.w	r3, r3, #12
 800b6c2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b6c4:	4b3b      	ldr	r3, [pc, #236]	@ (800b7b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800b6c6:	68db      	ldr	r3, [r3, #12]
 800b6c8:	f003 0303 	and.w	r3, r3, #3
 800b6cc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800b6ce:	693b      	ldr	r3, [r7, #16]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d005      	beq.n	800b6e0 <HAL_RCC_GetSysClockFreq+0x34>
 800b6d4:	693b      	ldr	r3, [r7, #16]
 800b6d6:	2b0c      	cmp	r3, #12
 800b6d8:	d121      	bne.n	800b71e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	2b01      	cmp	r3, #1
 800b6de:	d11e      	bne.n	800b71e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800b6e0:	4b34      	ldr	r3, [pc, #208]	@ (800b7b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	f003 0308 	and.w	r3, r3, #8
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d107      	bne.n	800b6fc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800b6ec:	4b31      	ldr	r3, [pc, #196]	@ (800b7b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800b6ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b6f2:	0a1b      	lsrs	r3, r3, #8
 800b6f4:	f003 030f 	and.w	r3, r3, #15
 800b6f8:	61fb      	str	r3, [r7, #28]
 800b6fa:	e005      	b.n	800b708 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800b6fc:	4b2d      	ldr	r3, [pc, #180]	@ (800b7b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	091b      	lsrs	r3, r3, #4
 800b702:	f003 030f 	and.w	r3, r3, #15
 800b706:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800b708:	4a2b      	ldr	r2, [pc, #172]	@ (800b7b8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800b70a:	69fb      	ldr	r3, [r7, #28]
 800b70c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b710:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b712:	693b      	ldr	r3, [r7, #16]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d10d      	bne.n	800b734 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800b718:	69fb      	ldr	r3, [r7, #28]
 800b71a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b71c:	e00a      	b.n	800b734 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800b71e:	693b      	ldr	r3, [r7, #16]
 800b720:	2b04      	cmp	r3, #4
 800b722:	d102      	bne.n	800b72a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b724:	4b25      	ldr	r3, [pc, #148]	@ (800b7bc <HAL_RCC_GetSysClockFreq+0x110>)
 800b726:	61bb      	str	r3, [r7, #24]
 800b728:	e004      	b.n	800b734 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800b72a:	693b      	ldr	r3, [r7, #16]
 800b72c:	2b08      	cmp	r3, #8
 800b72e:	d101      	bne.n	800b734 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800b730:	4b23      	ldr	r3, [pc, #140]	@ (800b7c0 <HAL_RCC_GetSysClockFreq+0x114>)
 800b732:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800b734:	693b      	ldr	r3, [r7, #16]
 800b736:	2b0c      	cmp	r3, #12
 800b738:	d134      	bne.n	800b7a4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b73a:	4b1e      	ldr	r3, [pc, #120]	@ (800b7b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800b73c:	68db      	ldr	r3, [r3, #12]
 800b73e:	f003 0303 	and.w	r3, r3, #3
 800b742:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800b744:	68bb      	ldr	r3, [r7, #8]
 800b746:	2b02      	cmp	r3, #2
 800b748:	d003      	beq.n	800b752 <HAL_RCC_GetSysClockFreq+0xa6>
 800b74a:	68bb      	ldr	r3, [r7, #8]
 800b74c:	2b03      	cmp	r3, #3
 800b74e:	d003      	beq.n	800b758 <HAL_RCC_GetSysClockFreq+0xac>
 800b750:	e005      	b.n	800b75e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800b752:	4b1a      	ldr	r3, [pc, #104]	@ (800b7bc <HAL_RCC_GetSysClockFreq+0x110>)
 800b754:	617b      	str	r3, [r7, #20]
      break;
 800b756:	e005      	b.n	800b764 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800b758:	4b19      	ldr	r3, [pc, #100]	@ (800b7c0 <HAL_RCC_GetSysClockFreq+0x114>)
 800b75a:	617b      	str	r3, [r7, #20]
      break;
 800b75c:	e002      	b.n	800b764 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800b75e:	69fb      	ldr	r3, [r7, #28]
 800b760:	617b      	str	r3, [r7, #20]
      break;
 800b762:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b764:	4b13      	ldr	r3, [pc, #76]	@ (800b7b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800b766:	68db      	ldr	r3, [r3, #12]
 800b768:	091b      	lsrs	r3, r3, #4
 800b76a:	f003 0307 	and.w	r3, r3, #7
 800b76e:	3301      	adds	r3, #1
 800b770:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800b772:	4b10      	ldr	r3, [pc, #64]	@ (800b7b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800b774:	68db      	ldr	r3, [r3, #12]
 800b776:	0a1b      	lsrs	r3, r3, #8
 800b778:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b77c:	697a      	ldr	r2, [r7, #20]
 800b77e:	fb03 f202 	mul.w	r2, r3, r2
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	fbb2 f3f3 	udiv	r3, r2, r3
 800b788:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b78a:	4b0a      	ldr	r3, [pc, #40]	@ (800b7b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800b78c:	68db      	ldr	r3, [r3, #12]
 800b78e:	0e5b      	lsrs	r3, r3, #25
 800b790:	f003 0303 	and.w	r3, r3, #3
 800b794:	3301      	adds	r3, #1
 800b796:	005b      	lsls	r3, r3, #1
 800b798:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800b79a:	697a      	ldr	r2, [r7, #20]
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7a2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800b7a4:	69bb      	ldr	r3, [r7, #24]
}
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	3724      	adds	r7, #36	@ 0x24
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b0:	4770      	bx	lr
 800b7b2:	bf00      	nop
 800b7b4:	40021000 	.word	0x40021000
 800b7b8:	0800e0bc 	.word	0x0800e0bc
 800b7bc:	00f42400 	.word	0x00f42400
 800b7c0:	007a1200 	.word	0x007a1200

0800b7c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b7c4:	b480      	push	{r7}
 800b7c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b7c8:	4b03      	ldr	r3, [pc, #12]	@ (800b7d8 <HAL_RCC_GetHCLKFreq+0x14>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
}
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d4:	4770      	bx	lr
 800b7d6:	bf00      	nop
 800b7d8:	20000398 	.word	0x20000398

0800b7dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800b7e0:	f7ff fff0 	bl	800b7c4 <HAL_RCC_GetHCLKFreq>
 800b7e4:	4602      	mov	r2, r0
 800b7e6:	4b06      	ldr	r3, [pc, #24]	@ (800b800 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b7e8:	689b      	ldr	r3, [r3, #8]
 800b7ea:	0a1b      	lsrs	r3, r3, #8
 800b7ec:	f003 0307 	and.w	r3, r3, #7
 800b7f0:	4904      	ldr	r1, [pc, #16]	@ (800b804 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b7f2:	5ccb      	ldrb	r3, [r1, r3]
 800b7f4:	f003 031f 	and.w	r3, r3, #31
 800b7f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	bd80      	pop	{r7, pc}
 800b800:	40021000 	.word	0x40021000
 800b804:	0800e0b4 	.word	0x0800e0b4

0800b808 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800b80c:	f7ff ffda 	bl	800b7c4 <HAL_RCC_GetHCLKFreq>
 800b810:	4602      	mov	r2, r0
 800b812:	4b06      	ldr	r3, [pc, #24]	@ (800b82c <HAL_RCC_GetPCLK2Freq+0x24>)
 800b814:	689b      	ldr	r3, [r3, #8]
 800b816:	0adb      	lsrs	r3, r3, #11
 800b818:	f003 0307 	and.w	r3, r3, #7
 800b81c:	4904      	ldr	r1, [pc, #16]	@ (800b830 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b81e:	5ccb      	ldrb	r3, [r1, r3]
 800b820:	f003 031f 	and.w	r3, r3, #31
 800b824:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b828:	4618      	mov	r0, r3
 800b82a:	bd80      	pop	{r7, pc}
 800b82c:	40021000 	.word	0x40021000
 800b830:	0800e0b4 	.word	0x0800e0b4

0800b834 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b086      	sub	sp, #24
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800b83c:	2300      	movs	r3, #0
 800b83e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800b840:	4b2a      	ldr	r3, [pc, #168]	@ (800b8ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b842:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b844:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d003      	beq.n	800b854 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800b84c:	f7ff f968 	bl	800ab20 <HAL_PWREx_GetVoltageRange>
 800b850:	6178      	str	r0, [r7, #20]
 800b852:	e014      	b.n	800b87e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800b854:	4b25      	ldr	r3, [pc, #148]	@ (800b8ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b856:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b858:	4a24      	ldr	r2, [pc, #144]	@ (800b8ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b85a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b85e:	6593      	str	r3, [r2, #88]	@ 0x58
 800b860:	4b22      	ldr	r3, [pc, #136]	@ (800b8ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b862:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b864:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b868:	60fb      	str	r3, [r7, #12]
 800b86a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800b86c:	f7ff f958 	bl	800ab20 <HAL_PWREx_GetVoltageRange>
 800b870:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800b872:	4b1e      	ldr	r3, [pc, #120]	@ (800b8ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b874:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b876:	4a1d      	ldr	r2, [pc, #116]	@ (800b8ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b878:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b87c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b87e:	697b      	ldr	r3, [r7, #20]
 800b880:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b884:	d10b      	bne.n	800b89e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	2b80      	cmp	r3, #128	@ 0x80
 800b88a:	d919      	bls.n	800b8c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	2ba0      	cmp	r3, #160	@ 0xa0
 800b890:	d902      	bls.n	800b898 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800b892:	2302      	movs	r3, #2
 800b894:	613b      	str	r3, [r7, #16]
 800b896:	e013      	b.n	800b8c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800b898:	2301      	movs	r3, #1
 800b89a:	613b      	str	r3, [r7, #16]
 800b89c:	e010      	b.n	800b8c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	2b80      	cmp	r3, #128	@ 0x80
 800b8a2:	d902      	bls.n	800b8aa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800b8a4:	2303      	movs	r3, #3
 800b8a6:	613b      	str	r3, [r7, #16]
 800b8a8:	e00a      	b.n	800b8c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	2b80      	cmp	r3, #128	@ 0x80
 800b8ae:	d102      	bne.n	800b8b6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800b8b0:	2302      	movs	r3, #2
 800b8b2:	613b      	str	r3, [r7, #16]
 800b8b4:	e004      	b.n	800b8c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	2b70      	cmp	r3, #112	@ 0x70
 800b8ba:	d101      	bne.n	800b8c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800b8bc:	2301      	movs	r3, #1
 800b8be:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800b8c0:	4b0b      	ldr	r3, [pc, #44]	@ (800b8f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	f023 0207 	bic.w	r2, r3, #7
 800b8c8:	4909      	ldr	r1, [pc, #36]	@ (800b8f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b8ca:	693b      	ldr	r3, [r7, #16]
 800b8cc:	4313      	orrs	r3, r2
 800b8ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800b8d0:	4b07      	ldr	r3, [pc, #28]	@ (800b8f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	f003 0307 	and.w	r3, r3, #7
 800b8d8:	693a      	ldr	r2, [r7, #16]
 800b8da:	429a      	cmp	r2, r3
 800b8dc:	d001      	beq.n	800b8e2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800b8de:	2301      	movs	r3, #1
 800b8e0:	e000      	b.n	800b8e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800b8e2:	2300      	movs	r3, #0
}
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	3718      	adds	r7, #24
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	bd80      	pop	{r7, pc}
 800b8ec:	40021000 	.word	0x40021000
 800b8f0:	40022000 	.word	0x40022000

0800b8f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b086      	sub	sp, #24
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b900:	2300      	movs	r3, #0
 800b902:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d041      	beq.n	800b994 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b914:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800b918:	d02a      	beq.n	800b970 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800b91a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800b91e:	d824      	bhi.n	800b96a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800b920:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b924:	d008      	beq.n	800b938 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800b926:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b92a:	d81e      	bhi.n	800b96a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d00a      	beq.n	800b946 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800b930:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b934:	d010      	beq.n	800b958 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b936:	e018      	b.n	800b96a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800b938:	4b86      	ldr	r3, [pc, #536]	@ (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b93a:	68db      	ldr	r3, [r3, #12]
 800b93c:	4a85      	ldr	r2, [pc, #532]	@ (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b93e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b942:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800b944:	e015      	b.n	800b972 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	3304      	adds	r3, #4
 800b94a:	2100      	movs	r1, #0
 800b94c:	4618      	mov	r0, r3
 800b94e:	f000 facd 	bl	800beec <RCCEx_PLLSAI1_Config>
 800b952:	4603      	mov	r3, r0
 800b954:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800b956:	e00c      	b.n	800b972 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	3320      	adds	r3, #32
 800b95c:	2100      	movs	r1, #0
 800b95e:	4618      	mov	r0, r3
 800b960:	f000 fbb6 	bl	800c0d0 <RCCEx_PLLSAI2_Config>
 800b964:	4603      	mov	r3, r0
 800b966:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800b968:	e003      	b.n	800b972 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b96a:	2301      	movs	r3, #1
 800b96c:	74fb      	strb	r3, [r7, #19]
      break;
 800b96e:	e000      	b.n	800b972 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800b970:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b972:	7cfb      	ldrb	r3, [r7, #19]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d10b      	bne.n	800b990 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b978:	4b76      	ldr	r3, [pc, #472]	@ (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b97a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b97e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b986:	4973      	ldr	r1, [pc, #460]	@ (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b988:	4313      	orrs	r3, r2
 800b98a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800b98e:	e001      	b.n	800b994 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b990:	7cfb      	ldrb	r3, [r7, #19]
 800b992:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d041      	beq.n	800ba24 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b9a4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b9a8:	d02a      	beq.n	800ba00 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800b9aa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b9ae:	d824      	bhi.n	800b9fa <HAL_RCCEx_PeriphCLKConfig+0x106>
 800b9b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b9b4:	d008      	beq.n	800b9c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800b9b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b9ba:	d81e      	bhi.n	800b9fa <HAL_RCCEx_PeriphCLKConfig+0x106>
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d00a      	beq.n	800b9d6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800b9c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b9c4:	d010      	beq.n	800b9e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800b9c6:	e018      	b.n	800b9fa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800b9c8:	4b62      	ldr	r3, [pc, #392]	@ (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b9ca:	68db      	ldr	r3, [r3, #12]
 800b9cc:	4a61      	ldr	r2, [pc, #388]	@ (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b9ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b9d2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800b9d4:	e015      	b.n	800ba02 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	3304      	adds	r3, #4
 800b9da:	2100      	movs	r1, #0
 800b9dc:	4618      	mov	r0, r3
 800b9de:	f000 fa85 	bl	800beec <RCCEx_PLLSAI1_Config>
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800b9e6:	e00c      	b.n	800ba02 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	3320      	adds	r3, #32
 800b9ec:	2100      	movs	r1, #0
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	f000 fb6e 	bl	800c0d0 <RCCEx_PLLSAI2_Config>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800b9f8:	e003      	b.n	800ba02 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b9fa:	2301      	movs	r3, #1
 800b9fc:	74fb      	strb	r3, [r7, #19]
      break;
 800b9fe:	e000      	b.n	800ba02 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800ba00:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ba02:	7cfb      	ldrb	r3, [r7, #19]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d10b      	bne.n	800ba20 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800ba08:	4b52      	ldr	r3, [pc, #328]	@ (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ba0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ba0e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ba16:	494f      	ldr	r1, [pc, #316]	@ (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ba18:	4313      	orrs	r3, r2
 800ba1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800ba1e:	e001      	b.n	800ba24 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba20:	7cfb      	ldrb	r3, [r7, #19]
 800ba22:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	f000 80a0 	beq.w	800bb72 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ba32:	2300      	movs	r3, #0
 800ba34:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800ba36:	4b47      	ldr	r3, [pc, #284]	@ (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ba38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ba3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d101      	bne.n	800ba46 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800ba42:	2301      	movs	r3, #1
 800ba44:	e000      	b.n	800ba48 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800ba46:	2300      	movs	r3, #0
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d00d      	beq.n	800ba68 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ba4c:	4b41      	ldr	r3, [pc, #260]	@ (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ba4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ba50:	4a40      	ldr	r2, [pc, #256]	@ (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ba52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ba56:	6593      	str	r3, [r2, #88]	@ 0x58
 800ba58:	4b3e      	ldr	r3, [pc, #248]	@ (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ba5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ba5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ba60:	60bb      	str	r3, [r7, #8]
 800ba62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ba64:	2301      	movs	r3, #1
 800ba66:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ba68:	4b3b      	ldr	r3, [pc, #236]	@ (800bb58 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	4a3a      	ldr	r2, [pc, #232]	@ (800bb58 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800ba6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ba72:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ba74:	f7fa f97a 	bl	8005d6c <HAL_GetTick>
 800ba78:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800ba7a:	e009      	b.n	800ba90 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ba7c:	f7fa f976 	bl	8005d6c <HAL_GetTick>
 800ba80:	4602      	mov	r2, r0
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	1ad3      	subs	r3, r2, r3
 800ba86:	2b02      	cmp	r3, #2
 800ba88:	d902      	bls.n	800ba90 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800ba8a:	2303      	movs	r3, #3
 800ba8c:	74fb      	strb	r3, [r7, #19]
        break;
 800ba8e:	e005      	b.n	800ba9c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800ba90:	4b31      	ldr	r3, [pc, #196]	@ (800bb58 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d0ef      	beq.n	800ba7c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800ba9c:	7cfb      	ldrb	r3, [r7, #19]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d15c      	bne.n	800bb5c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800baa2:	4b2c      	ldr	r3, [pc, #176]	@ (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800baa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800baa8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800baac:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800baae:	697b      	ldr	r3, [r7, #20]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d01f      	beq.n	800baf4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800baba:	697a      	ldr	r2, [r7, #20]
 800babc:	429a      	cmp	r2, r3
 800babe:	d019      	beq.n	800baf4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800bac0:	4b24      	ldr	r3, [pc, #144]	@ (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bac6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800baca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bacc:	4b21      	ldr	r3, [pc, #132]	@ (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bace:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bad2:	4a20      	ldr	r2, [pc, #128]	@ (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bad4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bad8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800badc:	4b1d      	ldr	r3, [pc, #116]	@ (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bade:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bae2:	4a1c      	ldr	r2, [pc, #112]	@ (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bae4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bae8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800baec:	4a19      	ldr	r2, [pc, #100]	@ (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800baee:	697b      	ldr	r3, [r7, #20]
 800baf0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800baf4:	697b      	ldr	r3, [r7, #20]
 800baf6:	f003 0301 	and.w	r3, r3, #1
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d016      	beq.n	800bb2c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bafe:	f7fa f935 	bl	8005d6c <HAL_GetTick>
 800bb02:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bb04:	e00b      	b.n	800bb1e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bb06:	f7fa f931 	bl	8005d6c <HAL_GetTick>
 800bb0a:	4602      	mov	r2, r0
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	1ad3      	subs	r3, r2, r3
 800bb10:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bb14:	4293      	cmp	r3, r2
 800bb16:	d902      	bls.n	800bb1e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800bb18:	2303      	movs	r3, #3
 800bb1a:	74fb      	strb	r3, [r7, #19]
            break;
 800bb1c:	e006      	b.n	800bb2c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bb1e:	4b0d      	ldr	r3, [pc, #52]	@ (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bb20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb24:	f003 0302 	and.w	r3, r3, #2
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d0ec      	beq.n	800bb06 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800bb2c:	7cfb      	ldrb	r3, [r7, #19]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d10c      	bne.n	800bb4c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bb32:	4b08      	ldr	r3, [pc, #32]	@ (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bb34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb38:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bb42:	4904      	ldr	r1, [pc, #16]	@ (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bb44:	4313      	orrs	r3, r2
 800bb46:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800bb4a:	e009      	b.n	800bb60 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bb4c:	7cfb      	ldrb	r3, [r7, #19]
 800bb4e:	74bb      	strb	r3, [r7, #18]
 800bb50:	e006      	b.n	800bb60 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800bb52:	bf00      	nop
 800bb54:	40021000 	.word	0x40021000
 800bb58:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb5c:	7cfb      	ldrb	r3, [r7, #19]
 800bb5e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bb60:	7c7b      	ldrb	r3, [r7, #17]
 800bb62:	2b01      	cmp	r3, #1
 800bb64:	d105      	bne.n	800bb72 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bb66:	4ba6      	ldr	r3, [pc, #664]	@ (800be00 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bb68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bb6a:	4aa5      	ldr	r2, [pc, #660]	@ (800be00 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bb6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bb70:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	f003 0301 	and.w	r3, r3, #1
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d00a      	beq.n	800bb94 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800bb7e:	4ba0      	ldr	r3, [pc, #640]	@ (800be00 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bb80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bb84:	f023 0203 	bic.w	r2, r3, #3
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb8c:	499c      	ldr	r1, [pc, #624]	@ (800be00 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bb8e:	4313      	orrs	r3, r2
 800bb90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	f003 0302 	and.w	r3, r3, #2
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d00a      	beq.n	800bbb6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800bba0:	4b97      	ldr	r3, [pc, #604]	@ (800be00 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bba6:	f023 020c 	bic.w	r2, r3, #12
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bbae:	4994      	ldr	r1, [pc, #592]	@ (800be00 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bbb0:	4313      	orrs	r3, r2
 800bbb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	f003 0304 	and.w	r3, r3, #4
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d00a      	beq.n	800bbd8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800bbc2:	4b8f      	ldr	r3, [pc, #572]	@ (800be00 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bbc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bbc8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bbd0:	498b      	ldr	r1, [pc, #556]	@ (800be00 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bbd2:	4313      	orrs	r3, r2
 800bbd4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	f003 0308 	and.w	r3, r3, #8
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d00a      	beq.n	800bbfa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800bbe4:	4b86      	ldr	r3, [pc, #536]	@ (800be00 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bbe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bbea:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bbf2:	4983      	ldr	r1, [pc, #524]	@ (800be00 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bbf4:	4313      	orrs	r3, r2
 800bbf6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	f003 0310 	and.w	r3, r3, #16
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d00a      	beq.n	800bc1c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800bc06:	4b7e      	ldr	r3, [pc, #504]	@ (800be00 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bc08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bc0c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bc14:	497a      	ldr	r1, [pc, #488]	@ (800be00 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bc16:	4313      	orrs	r3, r2
 800bc18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	f003 0320 	and.w	r3, r3, #32
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d00a      	beq.n	800bc3e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bc28:	4b75      	ldr	r3, [pc, #468]	@ (800be00 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bc2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bc2e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bc36:	4972      	ldr	r1, [pc, #456]	@ (800be00 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bc38:	4313      	orrs	r3, r2
 800bc3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d00a      	beq.n	800bc60 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bc4a:	4b6d      	ldr	r3, [pc, #436]	@ (800be00 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bc4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bc50:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bc58:	4969      	ldr	r1, [pc, #420]	@ (800be00 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bc5a:	4313      	orrs	r3, r2
 800bc5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d00a      	beq.n	800bc82 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bc6c:	4b64      	ldr	r3, [pc, #400]	@ (800be00 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bc6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bc72:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc7a:	4961      	ldr	r1, [pc, #388]	@ (800be00 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bc7c:	4313      	orrs	r3, r2
 800bc7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d00a      	beq.n	800bca4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800bc8e:	4b5c      	ldr	r3, [pc, #368]	@ (800be00 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bc90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bc94:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bc9c:	4958      	ldr	r1, [pc, #352]	@ (800be00 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bc9e:	4313      	orrs	r3, r2
 800bca0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d00a      	beq.n	800bcc6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800bcb0:	4b53      	ldr	r3, [pc, #332]	@ (800be00 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bcb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bcb6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bcbe:	4950      	ldr	r1, [pc, #320]	@ (800be00 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bcc0:	4313      	orrs	r3, r2
 800bcc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d00a      	beq.n	800bce8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800bcd2:	4b4b      	ldr	r3, [pc, #300]	@ (800be00 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bcd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bcd8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bce0:	4947      	ldr	r1, [pc, #284]	@ (800be00 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bce2:	4313      	orrs	r3, r2
 800bce4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d00a      	beq.n	800bd0a <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bcf4:	4b42      	ldr	r3, [pc, #264]	@ (800be00 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bcf6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800bcfa:	f023 0203 	bic.w	r2, r3, #3
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bd02:	493f      	ldr	r1, [pc, #252]	@ (800be00 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bd04:	4313      	orrs	r3, r2
 800bd06:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d028      	beq.n	800bd68 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bd16:	4b3a      	ldr	r3, [pc, #232]	@ (800be00 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bd18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bd1c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bd24:	4936      	ldr	r1, [pc, #216]	@ (800be00 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bd26:	4313      	orrs	r3, r2
 800bd28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bd30:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bd34:	d106      	bne.n	800bd44 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bd36:	4b32      	ldr	r3, [pc, #200]	@ (800be00 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bd38:	68db      	ldr	r3, [r3, #12]
 800bd3a:	4a31      	ldr	r2, [pc, #196]	@ (800be00 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bd3c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bd40:	60d3      	str	r3, [r2, #12]
 800bd42:	e011      	b.n	800bd68 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bd48:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bd4c:	d10c      	bne.n	800bd68 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	3304      	adds	r3, #4
 800bd52:	2101      	movs	r1, #1
 800bd54:	4618      	mov	r0, r3
 800bd56:	f000 f8c9 	bl	800beec <RCCEx_PLLSAI1_Config>
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800bd5e:	7cfb      	ldrb	r3, [r7, #19]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d001      	beq.n	800bd68 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 800bd64:	7cfb      	ldrb	r3, [r7, #19]
 800bd66:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d028      	beq.n	800bdc6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800bd74:	4b22      	ldr	r3, [pc, #136]	@ (800be00 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bd76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bd7a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bd82:	491f      	ldr	r1, [pc, #124]	@ (800be00 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bd84:	4313      	orrs	r3, r2
 800bd86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bd8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bd92:	d106      	bne.n	800bda2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bd94:	4b1a      	ldr	r3, [pc, #104]	@ (800be00 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bd96:	68db      	ldr	r3, [r3, #12]
 800bd98:	4a19      	ldr	r2, [pc, #100]	@ (800be00 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bd9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bd9e:	60d3      	str	r3, [r2, #12]
 800bda0:	e011      	b.n	800bdc6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bda6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bdaa:	d10c      	bne.n	800bdc6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	3304      	adds	r3, #4
 800bdb0:	2101      	movs	r1, #1
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	f000 f89a 	bl	800beec <RCCEx_PLLSAI1_Config>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800bdbc:	7cfb      	ldrb	r3, [r7, #19]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d001      	beq.n	800bdc6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 800bdc2:	7cfb      	ldrb	r3, [r7, #19]
 800bdc4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d02a      	beq.n	800be28 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bdd2:	4b0b      	ldr	r3, [pc, #44]	@ (800be00 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bdd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bdd8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bde0:	4907      	ldr	r1, [pc, #28]	@ (800be00 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bde2:	4313      	orrs	r3, r2
 800bde4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bdec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bdf0:	d108      	bne.n	800be04 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bdf2:	4b03      	ldr	r3, [pc, #12]	@ (800be00 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bdf4:	68db      	ldr	r3, [r3, #12]
 800bdf6:	4a02      	ldr	r2, [pc, #8]	@ (800be00 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800bdf8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bdfc:	60d3      	str	r3, [r2, #12]
 800bdfe:	e013      	b.n	800be28 <HAL_RCCEx_PeriphCLKConfig+0x534>
 800be00:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800be08:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800be0c:	d10c      	bne.n	800be28 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	3304      	adds	r3, #4
 800be12:	2101      	movs	r1, #1
 800be14:	4618      	mov	r0, r3
 800be16:	f000 f869 	bl	800beec <RCCEx_PLLSAI1_Config>
 800be1a:	4603      	mov	r3, r0
 800be1c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800be1e:	7cfb      	ldrb	r3, [r7, #19]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d001      	beq.n	800be28 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 800be24:	7cfb      	ldrb	r3, [r7, #19]
 800be26:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800be30:	2b00      	cmp	r3, #0
 800be32:	d02f      	beq.n	800be94 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800be34:	4b2c      	ldr	r3, [pc, #176]	@ (800bee8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800be36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800be3a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800be42:	4929      	ldr	r1, [pc, #164]	@ (800bee8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800be44:	4313      	orrs	r3, r2
 800be46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800be4e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800be52:	d10d      	bne.n	800be70 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	3304      	adds	r3, #4
 800be58:	2102      	movs	r1, #2
 800be5a:	4618      	mov	r0, r3
 800be5c:	f000 f846 	bl	800beec <RCCEx_PLLSAI1_Config>
 800be60:	4603      	mov	r3, r0
 800be62:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800be64:	7cfb      	ldrb	r3, [r7, #19]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d014      	beq.n	800be94 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800be6a:	7cfb      	ldrb	r3, [r7, #19]
 800be6c:	74bb      	strb	r3, [r7, #18]
 800be6e:	e011      	b.n	800be94 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800be74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800be78:	d10c      	bne.n	800be94 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	3320      	adds	r3, #32
 800be7e:	2102      	movs	r1, #2
 800be80:	4618      	mov	r0, r3
 800be82:	f000 f925 	bl	800c0d0 <RCCEx_PLLSAI2_Config>
 800be86:	4603      	mov	r3, r0
 800be88:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800be8a:	7cfb      	ldrb	r3, [r7, #19]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d001      	beq.n	800be94 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800be90:	7cfb      	ldrb	r3, [r7, #19]
 800be92:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d00b      	beq.n	800beb8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800bea0:	4b11      	ldr	r3, [pc, #68]	@ (800bee8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800bea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bea6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800beb0:	490d      	ldr	r1, [pc, #52]	@ (800bee8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800beb2:	4313      	orrs	r3, r2
 800beb4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d00b      	beq.n	800bedc <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800bec4:	4b08      	ldr	r3, [pc, #32]	@ (800bee8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800bec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800beca:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bed4:	4904      	ldr	r1, [pc, #16]	@ (800bee8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800bed6:	4313      	orrs	r3, r2
 800bed8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800bedc:	7cbb      	ldrb	r3, [r7, #18]
}
 800bede:	4618      	mov	r0, r3
 800bee0:	3718      	adds	r7, #24
 800bee2:	46bd      	mov	sp, r7
 800bee4:	bd80      	pop	{r7, pc}
 800bee6:	bf00      	nop
 800bee8:	40021000 	.word	0x40021000

0800beec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b084      	sub	sp, #16
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
 800bef4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bef6:	2300      	movs	r3, #0
 800bef8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800befa:	4b74      	ldr	r3, [pc, #464]	@ (800c0cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800befc:	68db      	ldr	r3, [r3, #12]
 800befe:	f003 0303 	and.w	r3, r3, #3
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d018      	beq.n	800bf38 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800bf06:	4b71      	ldr	r3, [pc, #452]	@ (800c0cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800bf08:	68db      	ldr	r3, [r3, #12]
 800bf0a:	f003 0203 	and.w	r2, r3, #3
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	429a      	cmp	r2, r3
 800bf14:	d10d      	bne.n	800bf32 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
       ||
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d009      	beq.n	800bf32 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800bf1e:	4b6b      	ldr	r3, [pc, #428]	@ (800c0cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800bf20:	68db      	ldr	r3, [r3, #12]
 800bf22:	091b      	lsrs	r3, r3, #4
 800bf24:	f003 0307 	and.w	r3, r3, #7
 800bf28:	1c5a      	adds	r2, r3, #1
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	685b      	ldr	r3, [r3, #4]
       ||
 800bf2e:	429a      	cmp	r2, r3
 800bf30:	d047      	beq.n	800bfc2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800bf32:	2301      	movs	r3, #1
 800bf34:	73fb      	strb	r3, [r7, #15]
 800bf36:	e044      	b.n	800bfc2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	2b03      	cmp	r3, #3
 800bf3e:	d018      	beq.n	800bf72 <RCCEx_PLLSAI1_Config+0x86>
 800bf40:	2b03      	cmp	r3, #3
 800bf42:	d825      	bhi.n	800bf90 <RCCEx_PLLSAI1_Config+0xa4>
 800bf44:	2b01      	cmp	r3, #1
 800bf46:	d002      	beq.n	800bf4e <RCCEx_PLLSAI1_Config+0x62>
 800bf48:	2b02      	cmp	r3, #2
 800bf4a:	d009      	beq.n	800bf60 <RCCEx_PLLSAI1_Config+0x74>
 800bf4c:	e020      	b.n	800bf90 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800bf4e:	4b5f      	ldr	r3, [pc, #380]	@ (800c0cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	f003 0302 	and.w	r3, r3, #2
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d11d      	bne.n	800bf96 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800bf5a:	2301      	movs	r3, #1
 800bf5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bf5e:	e01a      	b.n	800bf96 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800bf60:	4b5a      	ldr	r3, [pc, #360]	@ (800c0cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d116      	bne.n	800bf9a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800bf6c:	2301      	movs	r3, #1
 800bf6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bf70:	e013      	b.n	800bf9a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800bf72:	4b56      	ldr	r3, [pc, #344]	@ (800c0cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d10f      	bne.n	800bf9e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800bf7e:	4b53      	ldr	r3, [pc, #332]	@ (800c0cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d109      	bne.n	800bf9e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800bf8a:	2301      	movs	r3, #1
 800bf8c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800bf8e:	e006      	b.n	800bf9e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800bf90:	2301      	movs	r3, #1
 800bf92:	73fb      	strb	r3, [r7, #15]
      break;
 800bf94:	e004      	b.n	800bfa0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800bf96:	bf00      	nop
 800bf98:	e002      	b.n	800bfa0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800bf9a:	bf00      	nop
 800bf9c:	e000      	b.n	800bfa0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800bf9e:	bf00      	nop
    }

    if(status == HAL_OK)
 800bfa0:	7bfb      	ldrb	r3, [r7, #15]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d10d      	bne.n	800bfc2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800bfa6:	4b49      	ldr	r3, [pc, #292]	@ (800c0cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800bfa8:	68db      	ldr	r3, [r3, #12]
 800bfaa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	6819      	ldr	r1, [r3, #0]
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	685b      	ldr	r3, [r3, #4]
 800bfb6:	3b01      	subs	r3, #1
 800bfb8:	011b      	lsls	r3, r3, #4
 800bfba:	430b      	orrs	r3, r1
 800bfbc:	4943      	ldr	r1, [pc, #268]	@ (800c0cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800bfbe:	4313      	orrs	r3, r2
 800bfc0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800bfc2:	7bfb      	ldrb	r3, [r7, #15]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d17c      	bne.n	800c0c2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800bfc8:	4b40      	ldr	r3, [pc, #256]	@ (800c0cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	4a3f      	ldr	r2, [pc, #252]	@ (800c0cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800bfce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800bfd2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bfd4:	f7f9 feca 	bl	8005d6c <HAL_GetTick>
 800bfd8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800bfda:	e009      	b.n	800bff0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800bfdc:	f7f9 fec6 	bl	8005d6c <HAL_GetTick>
 800bfe0:	4602      	mov	r2, r0
 800bfe2:	68bb      	ldr	r3, [r7, #8]
 800bfe4:	1ad3      	subs	r3, r2, r3
 800bfe6:	2b02      	cmp	r3, #2
 800bfe8:	d902      	bls.n	800bff0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800bfea:	2303      	movs	r3, #3
 800bfec:	73fb      	strb	r3, [r7, #15]
        break;
 800bfee:	e005      	b.n	800bffc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800bff0:	4b36      	ldr	r3, [pc, #216]	@ (800c0cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d1ef      	bne.n	800bfdc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800bffc:	7bfb      	ldrb	r3, [r7, #15]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d15f      	bne.n	800c0c2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800c002:	683b      	ldr	r3, [r7, #0]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d110      	bne.n	800c02a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c008:	4b30      	ldr	r3, [pc, #192]	@ (800c0cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800c00a:	691b      	ldr	r3, [r3, #16]
 800c00c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 800c010:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800c014:	687a      	ldr	r2, [r7, #4]
 800c016:	6892      	ldr	r2, [r2, #8]
 800c018:	0211      	lsls	r1, r2, #8
 800c01a:	687a      	ldr	r2, [r7, #4]
 800c01c:	68d2      	ldr	r2, [r2, #12]
 800c01e:	06d2      	lsls	r2, r2, #27
 800c020:	430a      	orrs	r2, r1
 800c022:	492a      	ldr	r1, [pc, #168]	@ (800c0cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800c024:	4313      	orrs	r3, r2
 800c026:	610b      	str	r3, [r1, #16]
 800c028:	e027      	b.n	800c07a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800c02a:	683b      	ldr	r3, [r7, #0]
 800c02c:	2b01      	cmp	r3, #1
 800c02e:	d112      	bne.n	800c056 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c030:	4b26      	ldr	r3, [pc, #152]	@ (800c0cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800c032:	691b      	ldr	r3, [r3, #16]
 800c034:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800c038:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800c03c:	687a      	ldr	r2, [r7, #4]
 800c03e:	6892      	ldr	r2, [r2, #8]
 800c040:	0211      	lsls	r1, r2, #8
 800c042:	687a      	ldr	r2, [r7, #4]
 800c044:	6912      	ldr	r2, [r2, #16]
 800c046:	0852      	lsrs	r2, r2, #1
 800c048:	3a01      	subs	r2, #1
 800c04a:	0552      	lsls	r2, r2, #21
 800c04c:	430a      	orrs	r2, r1
 800c04e:	491f      	ldr	r1, [pc, #124]	@ (800c0cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800c050:	4313      	orrs	r3, r2
 800c052:	610b      	str	r3, [r1, #16]
 800c054:	e011      	b.n	800c07a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c056:	4b1d      	ldr	r3, [pc, #116]	@ (800c0cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800c058:	691b      	ldr	r3, [r3, #16]
 800c05a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800c05e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800c062:	687a      	ldr	r2, [r7, #4]
 800c064:	6892      	ldr	r2, [r2, #8]
 800c066:	0211      	lsls	r1, r2, #8
 800c068:	687a      	ldr	r2, [r7, #4]
 800c06a:	6952      	ldr	r2, [r2, #20]
 800c06c:	0852      	lsrs	r2, r2, #1
 800c06e:	3a01      	subs	r2, #1
 800c070:	0652      	lsls	r2, r2, #25
 800c072:	430a      	orrs	r2, r1
 800c074:	4915      	ldr	r1, [pc, #84]	@ (800c0cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800c076:	4313      	orrs	r3, r2
 800c078:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800c07a:	4b14      	ldr	r3, [pc, #80]	@ (800c0cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	4a13      	ldr	r2, [pc, #76]	@ (800c0cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800c080:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c084:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c086:	f7f9 fe71 	bl	8005d6c <HAL_GetTick>
 800c08a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800c08c:	e009      	b.n	800c0a2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c08e:	f7f9 fe6d 	bl	8005d6c <HAL_GetTick>
 800c092:	4602      	mov	r2, r0
 800c094:	68bb      	ldr	r3, [r7, #8]
 800c096:	1ad3      	subs	r3, r2, r3
 800c098:	2b02      	cmp	r3, #2
 800c09a:	d902      	bls.n	800c0a2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800c09c:	2303      	movs	r3, #3
 800c09e:	73fb      	strb	r3, [r7, #15]
          break;
 800c0a0:	e005      	b.n	800c0ae <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800c0a2:	4b0a      	ldr	r3, [pc, #40]	@ (800c0cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d0ef      	beq.n	800c08e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800c0ae:	7bfb      	ldrb	r3, [r7, #15]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d106      	bne.n	800c0c2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800c0b4:	4b05      	ldr	r3, [pc, #20]	@ (800c0cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800c0b6:	691a      	ldr	r2, [r3, #16]
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	699b      	ldr	r3, [r3, #24]
 800c0bc:	4903      	ldr	r1, [pc, #12]	@ (800c0cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800c0be:	4313      	orrs	r3, r2
 800c0c0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800c0c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	3710      	adds	r7, #16
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	bd80      	pop	{r7, pc}
 800c0cc:	40021000 	.word	0x40021000

0800c0d0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b084      	sub	sp, #16
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
 800c0d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c0da:	2300      	movs	r3, #0
 800c0dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800c0de:	4b69      	ldr	r3, [pc, #420]	@ (800c284 <RCCEx_PLLSAI2_Config+0x1b4>)
 800c0e0:	68db      	ldr	r3, [r3, #12]
 800c0e2:	f003 0303 	and.w	r3, r3, #3
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d018      	beq.n	800c11c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800c0ea:	4b66      	ldr	r3, [pc, #408]	@ (800c284 <RCCEx_PLLSAI2_Config+0x1b4>)
 800c0ec:	68db      	ldr	r3, [r3, #12]
 800c0ee:	f003 0203 	and.w	r2, r3, #3
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	429a      	cmp	r2, r3
 800c0f8:	d10d      	bne.n	800c116 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
       ||
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d009      	beq.n	800c116 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800c102:	4b60      	ldr	r3, [pc, #384]	@ (800c284 <RCCEx_PLLSAI2_Config+0x1b4>)
 800c104:	68db      	ldr	r3, [r3, #12]
 800c106:	091b      	lsrs	r3, r3, #4
 800c108:	f003 0307 	and.w	r3, r3, #7
 800c10c:	1c5a      	adds	r2, r3, #1
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	685b      	ldr	r3, [r3, #4]
       ||
 800c112:	429a      	cmp	r2, r3
 800c114:	d047      	beq.n	800c1a6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800c116:	2301      	movs	r3, #1
 800c118:	73fb      	strb	r3, [r7, #15]
 800c11a:	e044      	b.n	800c1a6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	2b03      	cmp	r3, #3
 800c122:	d018      	beq.n	800c156 <RCCEx_PLLSAI2_Config+0x86>
 800c124:	2b03      	cmp	r3, #3
 800c126:	d825      	bhi.n	800c174 <RCCEx_PLLSAI2_Config+0xa4>
 800c128:	2b01      	cmp	r3, #1
 800c12a:	d002      	beq.n	800c132 <RCCEx_PLLSAI2_Config+0x62>
 800c12c:	2b02      	cmp	r3, #2
 800c12e:	d009      	beq.n	800c144 <RCCEx_PLLSAI2_Config+0x74>
 800c130:	e020      	b.n	800c174 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800c132:	4b54      	ldr	r3, [pc, #336]	@ (800c284 <RCCEx_PLLSAI2_Config+0x1b4>)
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	f003 0302 	and.w	r3, r3, #2
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d11d      	bne.n	800c17a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800c13e:	2301      	movs	r3, #1
 800c140:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c142:	e01a      	b.n	800c17a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800c144:	4b4f      	ldr	r3, [pc, #316]	@ (800c284 <RCCEx_PLLSAI2_Config+0x1b4>)
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d116      	bne.n	800c17e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800c150:	2301      	movs	r3, #1
 800c152:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c154:	e013      	b.n	800c17e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800c156:	4b4b      	ldr	r3, [pc, #300]	@ (800c284 <RCCEx_PLLSAI2_Config+0x1b4>)
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d10f      	bne.n	800c182 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800c162:	4b48      	ldr	r3, [pc, #288]	@ (800c284 <RCCEx_PLLSAI2_Config+0x1b4>)
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d109      	bne.n	800c182 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800c16e:	2301      	movs	r3, #1
 800c170:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c172:	e006      	b.n	800c182 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800c174:	2301      	movs	r3, #1
 800c176:	73fb      	strb	r3, [r7, #15]
      break;
 800c178:	e004      	b.n	800c184 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800c17a:	bf00      	nop
 800c17c:	e002      	b.n	800c184 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800c17e:	bf00      	nop
 800c180:	e000      	b.n	800c184 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800c182:	bf00      	nop
    }

    if(status == HAL_OK)
 800c184:	7bfb      	ldrb	r3, [r7, #15]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d10d      	bne.n	800c1a6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800c18a:	4b3e      	ldr	r3, [pc, #248]	@ (800c284 <RCCEx_PLLSAI2_Config+0x1b4>)
 800c18c:	68db      	ldr	r3, [r3, #12]
 800c18e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	6819      	ldr	r1, [r3, #0]
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	685b      	ldr	r3, [r3, #4]
 800c19a:	3b01      	subs	r3, #1
 800c19c:	011b      	lsls	r3, r3, #4
 800c19e:	430b      	orrs	r3, r1
 800c1a0:	4938      	ldr	r1, [pc, #224]	@ (800c284 <RCCEx_PLLSAI2_Config+0x1b4>)
 800c1a2:	4313      	orrs	r3, r2
 800c1a4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800c1a6:	7bfb      	ldrb	r3, [r7, #15]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d166      	bne.n	800c27a <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800c1ac:	4b35      	ldr	r3, [pc, #212]	@ (800c284 <RCCEx_PLLSAI2_Config+0x1b4>)
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	4a34      	ldr	r2, [pc, #208]	@ (800c284 <RCCEx_PLLSAI2_Config+0x1b4>)
 800c1b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c1b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c1b8:	f7f9 fdd8 	bl	8005d6c <HAL_GetTick>
 800c1bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800c1be:	e009      	b.n	800c1d4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800c1c0:	f7f9 fdd4 	bl	8005d6c <HAL_GetTick>
 800c1c4:	4602      	mov	r2, r0
 800c1c6:	68bb      	ldr	r3, [r7, #8]
 800c1c8:	1ad3      	subs	r3, r2, r3
 800c1ca:	2b02      	cmp	r3, #2
 800c1cc:	d902      	bls.n	800c1d4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800c1ce:	2303      	movs	r3, #3
 800c1d0:	73fb      	strb	r3, [r7, #15]
        break;
 800c1d2:	e005      	b.n	800c1e0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800c1d4:	4b2b      	ldr	r3, [pc, #172]	@ (800c284 <RCCEx_PLLSAI2_Config+0x1b4>)
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d1ef      	bne.n	800c1c0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800c1e0:	7bfb      	ldrb	r3, [r7, #15]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d149      	bne.n	800c27a <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800c1e6:	683b      	ldr	r3, [r7, #0]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d110      	bne.n	800c20e <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800c1ec:	4b25      	ldr	r3, [pc, #148]	@ (800c284 <RCCEx_PLLSAI2_Config+0x1b4>)
 800c1ee:	695b      	ldr	r3, [r3, #20]
 800c1f0:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 800c1f4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800c1f8:	687a      	ldr	r2, [r7, #4]
 800c1fa:	6892      	ldr	r2, [r2, #8]
 800c1fc:	0211      	lsls	r1, r2, #8
 800c1fe:	687a      	ldr	r2, [r7, #4]
 800c200:	68d2      	ldr	r2, [r2, #12]
 800c202:	06d2      	lsls	r2, r2, #27
 800c204:	430a      	orrs	r2, r1
 800c206:	491f      	ldr	r1, [pc, #124]	@ (800c284 <RCCEx_PLLSAI2_Config+0x1b4>)
 800c208:	4313      	orrs	r3, r2
 800c20a:	614b      	str	r3, [r1, #20]
 800c20c:	e011      	b.n	800c232 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800c20e:	4b1d      	ldr	r3, [pc, #116]	@ (800c284 <RCCEx_PLLSAI2_Config+0x1b4>)
 800c210:	695b      	ldr	r3, [r3, #20]
 800c212:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800c216:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800c21a:	687a      	ldr	r2, [r7, #4]
 800c21c:	6892      	ldr	r2, [r2, #8]
 800c21e:	0211      	lsls	r1, r2, #8
 800c220:	687a      	ldr	r2, [r7, #4]
 800c222:	6912      	ldr	r2, [r2, #16]
 800c224:	0852      	lsrs	r2, r2, #1
 800c226:	3a01      	subs	r2, #1
 800c228:	0652      	lsls	r2, r2, #25
 800c22a:	430a      	orrs	r2, r1
 800c22c:	4915      	ldr	r1, [pc, #84]	@ (800c284 <RCCEx_PLLSAI2_Config+0x1b4>)
 800c22e:	4313      	orrs	r3, r2
 800c230:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800c232:	4b14      	ldr	r3, [pc, #80]	@ (800c284 <RCCEx_PLLSAI2_Config+0x1b4>)
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	4a13      	ldr	r2, [pc, #76]	@ (800c284 <RCCEx_PLLSAI2_Config+0x1b4>)
 800c238:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c23c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c23e:	f7f9 fd95 	bl	8005d6c <HAL_GetTick>
 800c242:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800c244:	e009      	b.n	800c25a <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800c246:	f7f9 fd91 	bl	8005d6c <HAL_GetTick>
 800c24a:	4602      	mov	r2, r0
 800c24c:	68bb      	ldr	r3, [r7, #8]
 800c24e:	1ad3      	subs	r3, r2, r3
 800c250:	2b02      	cmp	r3, #2
 800c252:	d902      	bls.n	800c25a <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 800c254:	2303      	movs	r3, #3
 800c256:	73fb      	strb	r3, [r7, #15]
          break;
 800c258:	e005      	b.n	800c266 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800c25a:	4b0a      	ldr	r3, [pc, #40]	@ (800c284 <RCCEx_PLLSAI2_Config+0x1b4>)
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c262:	2b00      	cmp	r3, #0
 800c264:	d0ef      	beq.n	800c246 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 800c266:	7bfb      	ldrb	r3, [r7, #15]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d106      	bne.n	800c27a <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800c26c:	4b05      	ldr	r3, [pc, #20]	@ (800c284 <RCCEx_PLLSAI2_Config+0x1b4>)
 800c26e:	695a      	ldr	r2, [r3, #20]
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	695b      	ldr	r3, [r3, #20]
 800c274:	4903      	ldr	r1, [pc, #12]	@ (800c284 <RCCEx_PLLSAI2_Config+0x1b4>)
 800c276:	4313      	orrs	r3, r2
 800c278:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800c27a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c27c:	4618      	mov	r0, r3
 800c27e:	3710      	adds	r7, #16
 800c280:	46bd      	mov	sp, r7
 800c282:	bd80      	pop	{r7, pc}
 800c284:	40021000 	.word	0x40021000

0800c288 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b082      	sub	sp, #8
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d101      	bne.n	800c29a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c296:	2301      	movs	r3, #1
 800c298:	e049      	b.n	800c32e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c2a0:	b2db      	uxtb	r3, r3
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d106      	bne.n	800c2b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c2ae:	6878      	ldr	r0, [r7, #4]
 800c2b0:	f7f9 f82a 	bl	8005308 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	2202      	movs	r2, #2
 800c2b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681a      	ldr	r2, [r3, #0]
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	3304      	adds	r3, #4
 800c2c4:	4619      	mov	r1, r3
 800c2c6:	4610      	mov	r0, r2
 800c2c8:	f000 f9d0 	bl	800c66c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	2201      	movs	r2, #1
 800c2d0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2201      	movs	r2, #1
 800c2d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	2201      	movs	r2, #1
 800c2e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	2201      	movs	r2, #1
 800c2e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	2201      	movs	r2, #1
 800c2f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2201      	movs	r2, #1
 800c2f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	2201      	movs	r2, #1
 800c300:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	2201      	movs	r2, #1
 800c308:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2201      	movs	r2, #1
 800c310:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	2201      	movs	r2, #1
 800c318:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	2201      	movs	r2, #1
 800c320:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	2201      	movs	r2, #1
 800c328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c32c:	2300      	movs	r3, #0
}
 800c32e:	4618      	mov	r0, r3
 800c330:	3708      	adds	r7, #8
 800c332:	46bd      	mov	sp, r7
 800c334:	bd80      	pop	{r7, pc}
	...

0800c338 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c338:	b480      	push	{r7}
 800c33a:	b085      	sub	sp, #20
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c346:	b2db      	uxtb	r3, r3
 800c348:	2b01      	cmp	r3, #1
 800c34a:	d001      	beq.n	800c350 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c34c:	2301      	movs	r3, #1
 800c34e:	e04f      	b.n	800c3f0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	2202      	movs	r2, #2
 800c354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	68da      	ldr	r2, [r3, #12]
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	f042 0201 	orr.w	r2, r2, #1
 800c366:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	4a23      	ldr	r2, [pc, #140]	@ (800c3fc <HAL_TIM_Base_Start_IT+0xc4>)
 800c36e:	4293      	cmp	r3, r2
 800c370:	d01d      	beq.n	800c3ae <HAL_TIM_Base_Start_IT+0x76>
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c37a:	d018      	beq.n	800c3ae <HAL_TIM_Base_Start_IT+0x76>
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	4a1f      	ldr	r2, [pc, #124]	@ (800c400 <HAL_TIM_Base_Start_IT+0xc8>)
 800c382:	4293      	cmp	r3, r2
 800c384:	d013      	beq.n	800c3ae <HAL_TIM_Base_Start_IT+0x76>
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	4a1e      	ldr	r2, [pc, #120]	@ (800c404 <HAL_TIM_Base_Start_IT+0xcc>)
 800c38c:	4293      	cmp	r3, r2
 800c38e:	d00e      	beq.n	800c3ae <HAL_TIM_Base_Start_IT+0x76>
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	4a1c      	ldr	r2, [pc, #112]	@ (800c408 <HAL_TIM_Base_Start_IT+0xd0>)
 800c396:	4293      	cmp	r3, r2
 800c398:	d009      	beq.n	800c3ae <HAL_TIM_Base_Start_IT+0x76>
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	4a1b      	ldr	r2, [pc, #108]	@ (800c40c <HAL_TIM_Base_Start_IT+0xd4>)
 800c3a0:	4293      	cmp	r3, r2
 800c3a2:	d004      	beq.n	800c3ae <HAL_TIM_Base_Start_IT+0x76>
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	4a19      	ldr	r2, [pc, #100]	@ (800c410 <HAL_TIM_Base_Start_IT+0xd8>)
 800c3aa:	4293      	cmp	r3, r2
 800c3ac:	d115      	bne.n	800c3da <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	689a      	ldr	r2, [r3, #8]
 800c3b4:	4b17      	ldr	r3, [pc, #92]	@ (800c414 <HAL_TIM_Base_Start_IT+0xdc>)
 800c3b6:	4013      	ands	r3, r2
 800c3b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	2b06      	cmp	r3, #6
 800c3be:	d015      	beq.n	800c3ec <HAL_TIM_Base_Start_IT+0xb4>
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c3c6:	d011      	beq.n	800c3ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	681a      	ldr	r2, [r3, #0]
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	f042 0201 	orr.w	r2, r2, #1
 800c3d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c3d8:	e008      	b.n	800c3ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	681a      	ldr	r2, [r3, #0]
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	f042 0201 	orr.w	r2, r2, #1
 800c3e8:	601a      	str	r2, [r3, #0]
 800c3ea:	e000      	b.n	800c3ee <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c3ec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c3ee:	2300      	movs	r3, #0
}
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	3714      	adds	r7, #20
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fa:	4770      	bx	lr
 800c3fc:	40012c00 	.word	0x40012c00
 800c400:	40000400 	.word	0x40000400
 800c404:	40000800 	.word	0x40000800
 800c408:	40000c00 	.word	0x40000c00
 800c40c:	40013400 	.word	0x40013400
 800c410:	40014000 	.word	0x40014000
 800c414:	00010007 	.word	0x00010007

0800c418 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b084      	sub	sp, #16
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	68db      	ldr	r3, [r3, #12]
 800c426:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	691b      	ldr	r3, [r3, #16]
 800c42e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c430:	68bb      	ldr	r3, [r7, #8]
 800c432:	f003 0302 	and.w	r3, r3, #2
 800c436:	2b00      	cmp	r3, #0
 800c438:	d020      	beq.n	800c47c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	f003 0302 	and.w	r3, r3, #2
 800c440:	2b00      	cmp	r3, #0
 800c442:	d01b      	beq.n	800c47c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	f06f 0202 	mvn.w	r2, #2
 800c44c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	2201      	movs	r2, #1
 800c452:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	699b      	ldr	r3, [r3, #24]
 800c45a:	f003 0303 	and.w	r3, r3, #3
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d003      	beq.n	800c46a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c462:	6878      	ldr	r0, [r7, #4]
 800c464:	f000 f8e4 	bl	800c630 <HAL_TIM_IC_CaptureCallback>
 800c468:	e005      	b.n	800c476 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c46a:	6878      	ldr	r0, [r7, #4]
 800c46c:	f000 f8d6 	bl	800c61c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c470:	6878      	ldr	r0, [r7, #4]
 800c472:	f000 f8e7 	bl	800c644 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	2200      	movs	r2, #0
 800c47a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c47c:	68bb      	ldr	r3, [r7, #8]
 800c47e:	f003 0304 	and.w	r3, r3, #4
 800c482:	2b00      	cmp	r3, #0
 800c484:	d020      	beq.n	800c4c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	f003 0304 	and.w	r3, r3, #4
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d01b      	beq.n	800c4c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	f06f 0204 	mvn.w	r2, #4
 800c498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	2202      	movs	r2, #2
 800c49e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	699b      	ldr	r3, [r3, #24]
 800c4a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d003      	beq.n	800c4b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c4ae:	6878      	ldr	r0, [r7, #4]
 800c4b0:	f000 f8be 	bl	800c630 <HAL_TIM_IC_CaptureCallback>
 800c4b4:	e005      	b.n	800c4c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c4b6:	6878      	ldr	r0, [r7, #4]
 800c4b8:	f000 f8b0 	bl	800c61c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c4bc:	6878      	ldr	r0, [r7, #4]
 800c4be:	f000 f8c1 	bl	800c644 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c4c8:	68bb      	ldr	r3, [r7, #8]
 800c4ca:	f003 0308 	and.w	r3, r3, #8
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d020      	beq.n	800c514 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	f003 0308 	and.w	r3, r3, #8
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d01b      	beq.n	800c514 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	f06f 0208 	mvn.w	r2, #8
 800c4e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	2204      	movs	r2, #4
 800c4ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	69db      	ldr	r3, [r3, #28]
 800c4f2:	f003 0303 	and.w	r3, r3, #3
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d003      	beq.n	800c502 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c4fa:	6878      	ldr	r0, [r7, #4]
 800c4fc:	f000 f898 	bl	800c630 <HAL_TIM_IC_CaptureCallback>
 800c500:	e005      	b.n	800c50e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c502:	6878      	ldr	r0, [r7, #4]
 800c504:	f000 f88a 	bl	800c61c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c508:	6878      	ldr	r0, [r7, #4]
 800c50a:	f000 f89b 	bl	800c644 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	2200      	movs	r2, #0
 800c512:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c514:	68bb      	ldr	r3, [r7, #8]
 800c516:	f003 0310 	and.w	r3, r3, #16
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d020      	beq.n	800c560 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	f003 0310 	and.w	r3, r3, #16
 800c524:	2b00      	cmp	r3, #0
 800c526:	d01b      	beq.n	800c560 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	f06f 0210 	mvn.w	r2, #16
 800c530:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	2208      	movs	r2, #8
 800c536:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	69db      	ldr	r3, [r3, #28]
 800c53e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c542:	2b00      	cmp	r3, #0
 800c544:	d003      	beq.n	800c54e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c546:	6878      	ldr	r0, [r7, #4]
 800c548:	f000 f872 	bl	800c630 <HAL_TIM_IC_CaptureCallback>
 800c54c:	e005      	b.n	800c55a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c54e:	6878      	ldr	r0, [r7, #4]
 800c550:	f000 f864 	bl	800c61c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c554:	6878      	ldr	r0, [r7, #4]
 800c556:	f000 f875 	bl	800c644 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	2200      	movs	r2, #0
 800c55e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c560:	68bb      	ldr	r3, [r7, #8]
 800c562:	f003 0301 	and.w	r3, r3, #1
 800c566:	2b00      	cmp	r3, #0
 800c568:	d00c      	beq.n	800c584 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	f003 0301 	and.w	r3, r3, #1
 800c570:	2b00      	cmp	r3, #0
 800c572:	d007      	beq.n	800c584 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	f06f 0201 	mvn.w	r2, #1
 800c57c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c57e:	6878      	ldr	r0, [r7, #4]
 800c580:	f7f8 fccc 	bl	8004f1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800c584:	68bb      	ldr	r3, [r7, #8]
 800c586:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d00c      	beq.n	800c5a8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c594:	2b00      	cmp	r3, #0
 800c596:	d007      	beq.n	800c5a8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800c5a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c5a2:	6878      	ldr	r0, [r7, #4]
 800c5a4:	f000 f98e 	bl	800c8c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800c5a8:	68bb      	ldr	r3, [r7, #8]
 800c5aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d00c      	beq.n	800c5cc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d007      	beq.n	800c5cc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800c5c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c5c6:	6878      	ldr	r0, [r7, #4]
 800c5c8:	f000 f986 	bl	800c8d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c5cc:	68bb      	ldr	r3, [r7, #8]
 800c5ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d00c      	beq.n	800c5f0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d007      	beq.n	800c5f0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c5e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c5ea:	6878      	ldr	r0, [r7, #4]
 800c5ec:	f000 f834 	bl	800c658 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c5f0:	68bb      	ldr	r3, [r7, #8]
 800c5f2:	f003 0320 	and.w	r3, r3, #32
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d00c      	beq.n	800c614 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	f003 0320 	and.w	r3, r3, #32
 800c600:	2b00      	cmp	r3, #0
 800c602:	d007      	beq.n	800c614 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	f06f 0220 	mvn.w	r2, #32
 800c60c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c60e:	6878      	ldr	r0, [r7, #4]
 800c610:	f000 f94e 	bl	800c8b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c614:	bf00      	nop
 800c616:	3710      	adds	r7, #16
 800c618:	46bd      	mov	sp, r7
 800c61a:	bd80      	pop	{r7, pc}

0800c61c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c61c:	b480      	push	{r7}
 800c61e:	b083      	sub	sp, #12
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c624:	bf00      	nop
 800c626:	370c      	adds	r7, #12
 800c628:	46bd      	mov	sp, r7
 800c62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62e:	4770      	bx	lr

0800c630 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c630:	b480      	push	{r7}
 800c632:	b083      	sub	sp, #12
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c638:	bf00      	nop
 800c63a:	370c      	adds	r7, #12
 800c63c:	46bd      	mov	sp, r7
 800c63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c642:	4770      	bx	lr

0800c644 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c644:	b480      	push	{r7}
 800c646:	b083      	sub	sp, #12
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c64c:	bf00      	nop
 800c64e:	370c      	adds	r7, #12
 800c650:	46bd      	mov	sp, r7
 800c652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c656:	4770      	bx	lr

0800c658 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c658:	b480      	push	{r7}
 800c65a:	b083      	sub	sp, #12
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c660:	bf00      	nop
 800c662:	370c      	adds	r7, #12
 800c664:	46bd      	mov	sp, r7
 800c666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66a:	4770      	bx	lr

0800c66c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c66c:	b480      	push	{r7}
 800c66e:	b085      	sub	sp, #20
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
 800c674:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	4a40      	ldr	r2, [pc, #256]	@ (800c780 <TIM_Base_SetConfig+0x114>)
 800c680:	4293      	cmp	r3, r2
 800c682:	d013      	beq.n	800c6ac <TIM_Base_SetConfig+0x40>
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c68a:	d00f      	beq.n	800c6ac <TIM_Base_SetConfig+0x40>
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	4a3d      	ldr	r2, [pc, #244]	@ (800c784 <TIM_Base_SetConfig+0x118>)
 800c690:	4293      	cmp	r3, r2
 800c692:	d00b      	beq.n	800c6ac <TIM_Base_SetConfig+0x40>
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	4a3c      	ldr	r2, [pc, #240]	@ (800c788 <TIM_Base_SetConfig+0x11c>)
 800c698:	4293      	cmp	r3, r2
 800c69a:	d007      	beq.n	800c6ac <TIM_Base_SetConfig+0x40>
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	4a3b      	ldr	r2, [pc, #236]	@ (800c78c <TIM_Base_SetConfig+0x120>)
 800c6a0:	4293      	cmp	r3, r2
 800c6a2:	d003      	beq.n	800c6ac <TIM_Base_SetConfig+0x40>
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	4a3a      	ldr	r2, [pc, #232]	@ (800c790 <TIM_Base_SetConfig+0x124>)
 800c6a8:	4293      	cmp	r3, r2
 800c6aa:	d108      	bne.n	800c6be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c6b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c6b4:	683b      	ldr	r3, [r7, #0]
 800c6b6:	685b      	ldr	r3, [r3, #4]
 800c6b8:	68fa      	ldr	r2, [r7, #12]
 800c6ba:	4313      	orrs	r3, r2
 800c6bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	4a2f      	ldr	r2, [pc, #188]	@ (800c780 <TIM_Base_SetConfig+0x114>)
 800c6c2:	4293      	cmp	r3, r2
 800c6c4:	d01f      	beq.n	800c706 <TIM_Base_SetConfig+0x9a>
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c6cc:	d01b      	beq.n	800c706 <TIM_Base_SetConfig+0x9a>
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	4a2c      	ldr	r2, [pc, #176]	@ (800c784 <TIM_Base_SetConfig+0x118>)
 800c6d2:	4293      	cmp	r3, r2
 800c6d4:	d017      	beq.n	800c706 <TIM_Base_SetConfig+0x9a>
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	4a2b      	ldr	r2, [pc, #172]	@ (800c788 <TIM_Base_SetConfig+0x11c>)
 800c6da:	4293      	cmp	r3, r2
 800c6dc:	d013      	beq.n	800c706 <TIM_Base_SetConfig+0x9a>
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	4a2a      	ldr	r2, [pc, #168]	@ (800c78c <TIM_Base_SetConfig+0x120>)
 800c6e2:	4293      	cmp	r3, r2
 800c6e4:	d00f      	beq.n	800c706 <TIM_Base_SetConfig+0x9a>
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	4a29      	ldr	r2, [pc, #164]	@ (800c790 <TIM_Base_SetConfig+0x124>)
 800c6ea:	4293      	cmp	r3, r2
 800c6ec:	d00b      	beq.n	800c706 <TIM_Base_SetConfig+0x9a>
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	4a28      	ldr	r2, [pc, #160]	@ (800c794 <TIM_Base_SetConfig+0x128>)
 800c6f2:	4293      	cmp	r3, r2
 800c6f4:	d007      	beq.n	800c706 <TIM_Base_SetConfig+0x9a>
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	4a27      	ldr	r2, [pc, #156]	@ (800c798 <TIM_Base_SetConfig+0x12c>)
 800c6fa:	4293      	cmp	r3, r2
 800c6fc:	d003      	beq.n	800c706 <TIM_Base_SetConfig+0x9a>
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	4a26      	ldr	r2, [pc, #152]	@ (800c79c <TIM_Base_SetConfig+0x130>)
 800c702:	4293      	cmp	r3, r2
 800c704:	d108      	bne.n	800c718 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c70c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c70e:	683b      	ldr	r3, [r7, #0]
 800c710:	68db      	ldr	r3, [r3, #12]
 800c712:	68fa      	ldr	r2, [r7, #12]
 800c714:	4313      	orrs	r3, r2
 800c716:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c71e:	683b      	ldr	r3, [r7, #0]
 800c720:	695b      	ldr	r3, [r3, #20]
 800c722:	4313      	orrs	r3, r2
 800c724:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	68fa      	ldr	r2, [r7, #12]
 800c72a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c72c:	683b      	ldr	r3, [r7, #0]
 800c72e:	689a      	ldr	r2, [r3, #8]
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c734:	683b      	ldr	r3, [r7, #0]
 800c736:	681a      	ldr	r2, [r3, #0]
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	4a10      	ldr	r2, [pc, #64]	@ (800c780 <TIM_Base_SetConfig+0x114>)
 800c740:	4293      	cmp	r3, r2
 800c742:	d00f      	beq.n	800c764 <TIM_Base_SetConfig+0xf8>
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	4a12      	ldr	r2, [pc, #72]	@ (800c790 <TIM_Base_SetConfig+0x124>)
 800c748:	4293      	cmp	r3, r2
 800c74a:	d00b      	beq.n	800c764 <TIM_Base_SetConfig+0xf8>
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	4a11      	ldr	r2, [pc, #68]	@ (800c794 <TIM_Base_SetConfig+0x128>)
 800c750:	4293      	cmp	r3, r2
 800c752:	d007      	beq.n	800c764 <TIM_Base_SetConfig+0xf8>
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	4a10      	ldr	r2, [pc, #64]	@ (800c798 <TIM_Base_SetConfig+0x12c>)
 800c758:	4293      	cmp	r3, r2
 800c75a:	d003      	beq.n	800c764 <TIM_Base_SetConfig+0xf8>
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	4a0f      	ldr	r2, [pc, #60]	@ (800c79c <TIM_Base_SetConfig+0x130>)
 800c760:	4293      	cmp	r3, r2
 800c762:	d103      	bne.n	800c76c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c764:	683b      	ldr	r3, [r7, #0]
 800c766:	691a      	ldr	r2, [r3, #16]
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	2201      	movs	r2, #1
 800c770:	615a      	str	r2, [r3, #20]
}
 800c772:	bf00      	nop
 800c774:	3714      	adds	r7, #20
 800c776:	46bd      	mov	sp, r7
 800c778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77c:	4770      	bx	lr
 800c77e:	bf00      	nop
 800c780:	40012c00 	.word	0x40012c00
 800c784:	40000400 	.word	0x40000400
 800c788:	40000800 	.word	0x40000800
 800c78c:	40000c00 	.word	0x40000c00
 800c790:	40013400 	.word	0x40013400
 800c794:	40014000 	.word	0x40014000
 800c798:	40014400 	.word	0x40014400
 800c79c:	40014800 	.word	0x40014800

0800c7a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c7a0:	b480      	push	{r7}
 800c7a2:	b085      	sub	sp, #20
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
 800c7a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c7b0:	2b01      	cmp	r3, #1
 800c7b2:	d101      	bne.n	800c7b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c7b4:	2302      	movs	r3, #2
 800c7b6:	e068      	b.n	800c88a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	2201      	movs	r2, #1
 800c7bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	2202      	movs	r2, #2
 800c7c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	685b      	ldr	r3, [r3, #4]
 800c7ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	689b      	ldr	r3, [r3, #8]
 800c7d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	4a2e      	ldr	r2, [pc, #184]	@ (800c898 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800c7de:	4293      	cmp	r3, r2
 800c7e0:	d004      	beq.n	800c7ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	4a2d      	ldr	r2, [pc, #180]	@ (800c89c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800c7e8:	4293      	cmp	r3, r2
 800c7ea:	d108      	bne.n	800c7fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c7f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c7f4:	683b      	ldr	r3, [r7, #0]
 800c7f6:	685b      	ldr	r3, [r3, #4]
 800c7f8:	68fa      	ldr	r2, [r7, #12]
 800c7fa:	4313      	orrs	r3, r2
 800c7fc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c804:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c806:	683b      	ldr	r3, [r7, #0]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	68fa      	ldr	r2, [r7, #12]
 800c80c:	4313      	orrs	r3, r2
 800c80e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	68fa      	ldr	r2, [r7, #12]
 800c816:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	4a1e      	ldr	r2, [pc, #120]	@ (800c898 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800c81e:	4293      	cmp	r3, r2
 800c820:	d01d      	beq.n	800c85e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c82a:	d018      	beq.n	800c85e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	4a1b      	ldr	r2, [pc, #108]	@ (800c8a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c832:	4293      	cmp	r3, r2
 800c834:	d013      	beq.n	800c85e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	4a1a      	ldr	r2, [pc, #104]	@ (800c8a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c83c:	4293      	cmp	r3, r2
 800c83e:	d00e      	beq.n	800c85e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	4a18      	ldr	r2, [pc, #96]	@ (800c8a8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c846:	4293      	cmp	r3, r2
 800c848:	d009      	beq.n	800c85e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	4a13      	ldr	r2, [pc, #76]	@ (800c89c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800c850:	4293      	cmp	r3, r2
 800c852:	d004      	beq.n	800c85e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	4a14      	ldr	r2, [pc, #80]	@ (800c8ac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c85a:	4293      	cmp	r3, r2
 800c85c:	d10c      	bne.n	800c878 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c85e:	68bb      	ldr	r3, [r7, #8]
 800c860:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c864:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c866:	683b      	ldr	r3, [r7, #0]
 800c868:	689b      	ldr	r3, [r3, #8]
 800c86a:	68ba      	ldr	r2, [r7, #8]
 800c86c:	4313      	orrs	r3, r2
 800c86e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	68ba      	ldr	r2, [r7, #8]
 800c876:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2201      	movs	r2, #1
 800c87c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	2200      	movs	r2, #0
 800c884:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c888:	2300      	movs	r3, #0
}
 800c88a:	4618      	mov	r0, r3
 800c88c:	3714      	adds	r7, #20
 800c88e:	46bd      	mov	sp, r7
 800c890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c894:	4770      	bx	lr
 800c896:	bf00      	nop
 800c898:	40012c00 	.word	0x40012c00
 800c89c:	40013400 	.word	0x40013400
 800c8a0:	40000400 	.word	0x40000400
 800c8a4:	40000800 	.word	0x40000800
 800c8a8:	40000c00 	.word	0x40000c00
 800c8ac:	40014000 	.word	0x40014000

0800c8b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c8b0:	b480      	push	{r7}
 800c8b2:	b083      	sub	sp, #12
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c8b8:	bf00      	nop
 800c8ba:	370c      	adds	r7, #12
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c2:	4770      	bx	lr

0800c8c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c8c4:	b480      	push	{r7}
 800c8c6:	b083      	sub	sp, #12
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c8cc:	bf00      	nop
 800c8ce:	370c      	adds	r7, #12
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d6:	4770      	bx	lr

0800c8d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c8d8:	b480      	push	{r7}
 800c8da:	b083      	sub	sp, #12
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c8e0:	bf00      	nop
 800c8e2:	370c      	adds	r7, #12
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ea:	4770      	bx	lr

0800c8ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b082      	sub	sp, #8
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d101      	bne.n	800c8fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c8fa:	2301      	movs	r3, #1
 800c8fc:	e040      	b.n	800c980 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c902:	2b00      	cmp	r3, #0
 800c904:	d106      	bne.n	800c914 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	2200      	movs	r2, #0
 800c90a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c90e:	6878      	ldr	r0, [r7, #4]
 800c910:	f7f8 fd20 	bl	8005354 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	2224      	movs	r2, #36	@ 0x24
 800c918:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	681a      	ldr	r2, [r3, #0]
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	f022 0201 	bic.w	r2, r2, #1
 800c928:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d002      	beq.n	800c938 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800c932:	6878      	ldr	r0, [r7, #4]
 800c934:	f000 ff04 	bl	800d740 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c938:	6878      	ldr	r0, [r7, #4]
 800c93a:	f000 fc49 	bl	800d1d0 <UART_SetConfig>
 800c93e:	4603      	mov	r3, r0
 800c940:	2b01      	cmp	r3, #1
 800c942:	d101      	bne.n	800c948 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800c944:	2301      	movs	r3, #1
 800c946:	e01b      	b.n	800c980 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	685a      	ldr	r2, [r3, #4]
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c956:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	689a      	ldr	r2, [r3, #8]
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c966:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	681a      	ldr	r2, [r3, #0]
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	f042 0201 	orr.w	r2, r2, #1
 800c976:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c978:	6878      	ldr	r0, [r7, #4]
 800c97a:	f000 ff83 	bl	800d884 <UART_CheckIdleState>
 800c97e:	4603      	mov	r3, r0
}
 800c980:	4618      	mov	r0, r3
 800c982:	3708      	adds	r7, #8
 800c984:	46bd      	mov	sp, r7
 800c986:	bd80      	pop	{r7, pc}

0800c988 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b082      	sub	sp, #8
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d101      	bne.n	800c99a <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800c996:	2301      	movs	r3, #1
 800c998:	e02f      	b.n	800c9fa <HAL_UART_DeInit+0x72>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	2224      	movs	r2, #36	@ 0x24
 800c99e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	681a      	ldr	r2, [r3, #0]
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	f022 0201 	bic.w	r2, r2, #1
 800c9ae:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	2200      	movs	r2, #0
 800c9be:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	2200      	movs	r2, #0
 800c9c6:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800c9c8:	6878      	ldr	r0, [r7, #4]
 800c9ca:	f7f8 fe51 	bl	8005670 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	2200      	movs	r2, #0
 800c9d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_RESET;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	2200      	movs	r2, #0
 800c9da:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_RESET;
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	2200      	movs	r2, #0
 800c9e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	2200      	movs	r2, #0
 800c9ee:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800c9f8:	2300      	movs	r3, #0
}
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	3708      	adds	r7, #8
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	bd80      	pop	{r7, pc}
	...

0800ca04 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b08a      	sub	sp, #40	@ 0x28
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	60f8      	str	r0, [r7, #12]
 800ca0c:	60b9      	str	r1, [r7, #8]
 800ca0e:	4613      	mov	r3, r2
 800ca10:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ca16:	2b20      	cmp	r3, #32
 800ca18:	d165      	bne.n	800cae6 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 800ca1a:	68bb      	ldr	r3, [r7, #8]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d002      	beq.n	800ca26 <HAL_UART_Transmit_DMA+0x22>
 800ca20:	88fb      	ldrh	r3, [r7, #6]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d101      	bne.n	800ca2a <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800ca26:	2301      	movs	r3, #1
 800ca28:	e05e      	b.n	800cae8 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	68ba      	ldr	r2, [r7, #8]
 800ca2e:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	88fa      	ldrh	r2, [r7, #6]
 800ca34:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	88fa      	ldrh	r2, [r7, #6]
 800ca3c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	2200      	movs	r2, #0
 800ca44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	2221      	movs	r2, #33	@ 0x21
 800ca4c:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d027      	beq.n	800caa6 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ca5a:	4a25      	ldr	r2, [pc, #148]	@ (800caf0 <HAL_UART_Transmit_DMA+0xec>)
 800ca5c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ca62:	4a24      	ldr	r2, [pc, #144]	@ (800caf4 <HAL_UART_Transmit_DMA+0xf0>)
 800ca64:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ca6a:	4a23      	ldr	r2, [pc, #140]	@ (800caf8 <HAL_UART_Transmit_DMA+0xf4>)
 800ca6c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ca72:	2200      	movs	r2, #0
 800ca74:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ca7e:	4619      	mov	r1, r3
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	3328      	adds	r3, #40	@ 0x28
 800ca86:	461a      	mov	r2, r3
 800ca88:	88fb      	ldrh	r3, [r7, #6]
 800ca8a:	f7fb f8a9 	bl	8007be0 <HAL_DMA_Start_IT>
 800ca8e:	4603      	mov	r3, r0
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d008      	beq.n	800caa6 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	2210      	movs	r2, #16
 800ca98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	2220      	movs	r2, #32
 800caa0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 800caa2:	2301      	movs	r3, #1
 800caa4:	e020      	b.n	800cae8 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	2240      	movs	r2, #64	@ 0x40
 800caac:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	3308      	adds	r3, #8
 800cab4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cab6:	697b      	ldr	r3, [r7, #20]
 800cab8:	e853 3f00 	ldrex	r3, [r3]
 800cabc:	613b      	str	r3, [r7, #16]
   return(result);
 800cabe:	693b      	ldr	r3, [r7, #16]
 800cac0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cac4:	627b      	str	r3, [r7, #36]	@ 0x24
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	3308      	adds	r3, #8
 800cacc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cace:	623a      	str	r2, [r7, #32]
 800cad0:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cad2:	69f9      	ldr	r1, [r7, #28]
 800cad4:	6a3a      	ldr	r2, [r7, #32]
 800cad6:	e841 2300 	strex	r3, r2, [r1]
 800cada:	61bb      	str	r3, [r7, #24]
   return(result);
 800cadc:	69bb      	ldr	r3, [r7, #24]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d1e5      	bne.n	800caae <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 800cae2:	2300      	movs	r3, #0
 800cae4:	e000      	b.n	800cae8 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800cae6:	2302      	movs	r3, #2
  }
}
 800cae8:	4618      	mov	r0, r3
 800caea:	3728      	adds	r7, #40	@ 0x28
 800caec:	46bd      	mov	sp, r7
 800caee:	bd80      	pop	{r7, pc}
 800caf0:	0800dcf9 	.word	0x0800dcf9
 800caf4:	0800dd93 	.word	0x0800dd93
 800caf8:	0800df19 	.word	0x0800df19

0800cafc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b08a      	sub	sp, #40	@ 0x28
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	60f8      	str	r0, [r7, #12]
 800cb04:	60b9      	str	r1, [r7, #8]
 800cb06:	4613      	mov	r3, r2
 800cb08:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb10:	2b20      	cmp	r3, #32
 800cb12:	d137      	bne.n	800cb84 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800cb14:	68bb      	ldr	r3, [r7, #8]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d002      	beq.n	800cb20 <HAL_UART_Receive_DMA+0x24>
 800cb1a:	88fb      	ldrh	r3, [r7, #6]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d101      	bne.n	800cb24 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800cb20:	2301      	movs	r3, #1
 800cb22:	e030      	b.n	800cb86 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	2200      	movs	r2, #0
 800cb28:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	4a18      	ldr	r2, [pc, #96]	@ (800cb90 <HAL_UART_Receive_DMA+0x94>)
 800cb30:	4293      	cmp	r3, r2
 800cb32:	d01f      	beq.n	800cb74 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	685b      	ldr	r3, [r3, #4]
 800cb3a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d018      	beq.n	800cb74 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb48:	697b      	ldr	r3, [r7, #20]
 800cb4a:	e853 3f00 	ldrex	r3, [r3]
 800cb4e:	613b      	str	r3, [r7, #16]
   return(result);
 800cb50:	693b      	ldr	r3, [r7, #16]
 800cb52:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800cb56:	627b      	str	r3, [r7, #36]	@ 0x24
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	461a      	mov	r2, r3
 800cb5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb60:	623b      	str	r3, [r7, #32]
 800cb62:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb64:	69f9      	ldr	r1, [r7, #28]
 800cb66:	6a3a      	ldr	r2, [r7, #32]
 800cb68:	e841 2300 	strex	r3, r2, [r1]
 800cb6c:	61bb      	str	r3, [r7, #24]
   return(result);
 800cb6e:	69bb      	ldr	r3, [r7, #24]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d1e6      	bne.n	800cb42 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800cb74:	88fb      	ldrh	r3, [r7, #6]
 800cb76:	461a      	mov	r2, r3
 800cb78:	68b9      	ldr	r1, [r7, #8]
 800cb7a:	68f8      	ldr	r0, [r7, #12]
 800cb7c:	f000 ff92 	bl	800daa4 <UART_Start_Receive_DMA>
 800cb80:	4603      	mov	r3, r0
 800cb82:	e000      	b.n	800cb86 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800cb84:	2302      	movs	r3, #2
  }
}
 800cb86:	4618      	mov	r0, r3
 800cb88:	3728      	adds	r7, #40	@ 0x28
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	bd80      	pop	{r7, pc}
 800cb8e:	bf00      	nop
 800cb90:	40008000 	.word	0x40008000

0800cb94 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b0ba      	sub	sp, #232	@ 0xe8
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	69db      	ldr	r3, [r3, #28]
 800cba2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	689b      	ldr	r3, [r3, #8]
 800cbb6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800cbba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800cbbe:	f640 030f 	movw	r3, #2063	@ 0x80f
 800cbc2:	4013      	ands	r3, r2
 800cbc4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800cbc8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d115      	bne.n	800cbfc <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800cbd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cbd4:	f003 0320 	and.w	r3, r3, #32
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d00f      	beq.n	800cbfc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800cbdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cbe0:	f003 0320 	and.w	r3, r3, #32
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d009      	beq.n	800cbfc <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	f000 82ae 	beq.w	800d14e <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cbf6:	6878      	ldr	r0, [r7, #4]
 800cbf8:	4798      	blx	r3
      }
      return;
 800cbfa:	e2a8      	b.n	800d14e <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800cbfc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	f000 8117 	beq.w	800ce34 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800cc06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cc0a:	f003 0301 	and.w	r3, r3, #1
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d106      	bne.n	800cc20 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800cc12:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800cc16:	4b85      	ldr	r3, [pc, #532]	@ (800ce2c <HAL_UART_IRQHandler+0x298>)
 800cc18:	4013      	ands	r3, r2
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	f000 810a 	beq.w	800ce34 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cc20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cc24:	f003 0301 	and.w	r3, r3, #1
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d011      	beq.n	800cc50 <HAL_UART_IRQHandler+0xbc>
 800cc2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cc30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d00b      	beq.n	800cc50 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	2201      	movs	r2, #1
 800cc3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cc46:	f043 0201 	orr.w	r2, r3, #1
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cc50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cc54:	f003 0302 	and.w	r3, r3, #2
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d011      	beq.n	800cc80 <HAL_UART_IRQHandler+0xec>
 800cc5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cc60:	f003 0301 	and.w	r3, r3, #1
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d00b      	beq.n	800cc80 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	2202      	movs	r2, #2
 800cc6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cc76:	f043 0204 	orr.w	r2, r3, #4
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cc80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cc84:	f003 0304 	and.w	r3, r3, #4
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d011      	beq.n	800ccb0 <HAL_UART_IRQHandler+0x11c>
 800cc8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cc90:	f003 0301 	and.w	r3, r3, #1
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d00b      	beq.n	800ccb0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	2204      	movs	r2, #4
 800cc9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cca6:	f043 0202 	orr.w	r2, r3, #2
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ccb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ccb4:	f003 0308 	and.w	r3, r3, #8
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d017      	beq.n	800ccec <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ccbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ccc0:	f003 0320 	and.w	r3, r3, #32
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d105      	bne.n	800ccd4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800ccc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cccc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d00b      	beq.n	800ccec <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	2208      	movs	r2, #8
 800ccda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cce2:	f043 0208 	orr.w	r2, r3, #8
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ccec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ccf0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d012      	beq.n	800cd1e <HAL_UART_IRQHandler+0x18a>
 800ccf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ccfc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d00c      	beq.n	800cd1e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cd0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cd14:	f043 0220 	orr.w	r2, r3, #32
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	f000 8214 	beq.w	800d152 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800cd2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cd2e:	f003 0320 	and.w	r3, r3, #32
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d00d      	beq.n	800cd52 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800cd36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cd3a:	f003 0320 	and.w	r3, r3, #32
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d007      	beq.n	800cd52 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d003      	beq.n	800cd52 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cd4e:	6878      	ldr	r0, [r7, #4]
 800cd50:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cd58:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	689b      	ldr	r3, [r3, #8]
 800cd62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd66:	2b40      	cmp	r3, #64	@ 0x40
 800cd68:	d005      	beq.n	800cd76 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800cd6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cd6e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d04f      	beq.n	800ce16 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cd76:	6878      	ldr	r0, [r7, #4]
 800cd78:	f000 ff5a 	bl	800dc30 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	689b      	ldr	r3, [r3, #8]
 800cd82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd86:	2b40      	cmp	r3, #64	@ 0x40
 800cd88:	d141      	bne.n	800ce0e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	3308      	adds	r3, #8
 800cd90:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd94:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800cd98:	e853 3f00 	ldrex	r3, [r3]
 800cd9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800cda0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cda4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cda8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	3308      	adds	r3, #8
 800cdb2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800cdb6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800cdba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdbe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800cdc2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800cdc6:	e841 2300 	strex	r3, r2, [r1]
 800cdca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800cdce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d1d9      	bne.n	800cd8a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d013      	beq.n	800ce06 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cde2:	4a13      	ldr	r2, [pc, #76]	@ (800ce30 <HAL_UART_IRQHandler+0x29c>)
 800cde4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cdea:	4618      	mov	r0, r3
 800cdec:	f7fa ff96 	bl	8007d1c <HAL_DMA_Abort_IT>
 800cdf0:	4603      	mov	r3, r0
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d017      	beq.n	800ce26 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cdfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cdfc:	687a      	ldr	r2, [r7, #4]
 800cdfe:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800ce00:	4610      	mov	r0, r2
 800ce02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce04:	e00f      	b.n	800ce26 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ce06:	6878      	ldr	r0, [r7, #4]
 800ce08:	f000 f9cc 	bl	800d1a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce0c:	e00b      	b.n	800ce26 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ce0e:	6878      	ldr	r0, [r7, #4]
 800ce10:	f000 f9c8 	bl	800d1a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce14:	e007      	b.n	800ce26 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ce16:	6878      	ldr	r0, [r7, #4]
 800ce18:	f000 f9c4 	bl	800d1a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	2200      	movs	r2, #0
 800ce20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800ce24:	e195      	b.n	800d152 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce26:	bf00      	nop
    return;
 800ce28:	e193      	b.n	800d152 <HAL_UART_IRQHandler+0x5be>
 800ce2a:	bf00      	nop
 800ce2c:	04000120 	.word	0x04000120
 800ce30:	0800df97 	.word	0x0800df97

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ce38:	2b01      	cmp	r3, #1
 800ce3a:	f040 814e 	bne.w	800d0da <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ce3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce42:	f003 0310 	and.w	r3, r3, #16
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	f000 8147 	beq.w	800d0da <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ce4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ce50:	f003 0310 	and.w	r3, r3, #16
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	f000 8140 	beq.w	800d0da <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	2210      	movs	r2, #16
 800ce60:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	689b      	ldr	r3, [r3, #8]
 800ce68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ce6c:	2b40      	cmp	r3, #64	@ 0x40
 800ce6e:	f040 80b8 	bne.w	800cfe2 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	685b      	ldr	r3, [r3, #4]
 800ce7a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ce7e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	f000 8167 	beq.w	800d156 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800ce8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ce92:	429a      	cmp	r2, r3
 800ce94:	f080 815f 	bcs.w	800d156 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ce9e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	f003 0320 	and.w	r3, r3, #32
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	f040 8086 	bne.w	800cfc0 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cebc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800cec0:	e853 3f00 	ldrex	r3, [r3]
 800cec4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800cec8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800cecc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ced0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	461a      	mov	r2, r3
 800ceda:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800cede:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800cee2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cee6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800ceea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ceee:	e841 2300 	strex	r3, r2, [r1]
 800cef2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800cef6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d1da      	bne.n	800ceb4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	3308      	adds	r3, #8
 800cf04:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf06:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cf08:	e853 3f00 	ldrex	r3, [r3]
 800cf0c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800cf0e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cf10:	f023 0301 	bic.w	r3, r3, #1
 800cf14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	3308      	adds	r3, #8
 800cf1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800cf22:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800cf26:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf28:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800cf2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800cf2e:	e841 2300 	strex	r3, r2, [r1]
 800cf32:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800cf34:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d1e1      	bne.n	800cefe <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	3308      	adds	r3, #8
 800cf40:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cf44:	e853 3f00 	ldrex	r3, [r3]
 800cf48:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800cf4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cf4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cf50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	3308      	adds	r3, #8
 800cf5a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800cf5e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800cf60:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf62:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800cf64:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800cf66:	e841 2300 	strex	r3, r2, [r1]
 800cf6a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800cf6c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d1e3      	bne.n	800cf3a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	2220      	movs	r2, #32
 800cf76:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	2200      	movs	r2, #0
 800cf7e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cf88:	e853 3f00 	ldrex	r3, [r3]
 800cf8c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800cf8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cf90:	f023 0310 	bic.w	r3, r3, #16
 800cf94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	461a      	mov	r2, r3
 800cf9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cfa2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cfa4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfa6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800cfa8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cfaa:	e841 2300 	strex	r3, r2, [r1]
 800cfae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800cfb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d1e4      	bne.n	800cf80 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cfba:	4618      	mov	r0, r3
 800cfbc:	f7fa fe70 	bl	8007ca0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	2202      	movs	r2, #2
 800cfc4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800cfd2:	b29b      	uxth	r3, r3
 800cfd4:	1ad3      	subs	r3, r2, r3
 800cfd6:	b29b      	uxth	r3, r3
 800cfd8:	4619      	mov	r1, r3
 800cfda:	6878      	ldr	r0, [r7, #4]
 800cfdc:	f000 f8ec 	bl	800d1b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cfe0:	e0b9      	b.n	800d156 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800cfee:	b29b      	uxth	r3, r3
 800cff0:	1ad3      	subs	r3, r2, r3
 800cff2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800cffc:	b29b      	uxth	r3, r3
 800cffe:	2b00      	cmp	r3, #0
 800d000:	f000 80ab 	beq.w	800d15a <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 800d004:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d008:	2b00      	cmp	r3, #0
 800d00a:	f000 80a6 	beq.w	800d15a <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d016:	e853 3f00 	ldrex	r3, [r3]
 800d01a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d01c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d01e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d022:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	461a      	mov	r2, r3
 800d02c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d030:	647b      	str	r3, [r7, #68]	@ 0x44
 800d032:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d034:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d036:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d038:	e841 2300 	strex	r3, r2, [r1]
 800d03c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d03e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d040:	2b00      	cmp	r3, #0
 800d042:	d1e4      	bne.n	800d00e <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	3308      	adds	r3, #8
 800d04a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d04c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d04e:	e853 3f00 	ldrex	r3, [r3]
 800d052:	623b      	str	r3, [r7, #32]
   return(result);
 800d054:	6a3b      	ldr	r3, [r7, #32]
 800d056:	f023 0301 	bic.w	r3, r3, #1
 800d05a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	3308      	adds	r3, #8
 800d064:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800d068:	633a      	str	r2, [r7, #48]	@ 0x30
 800d06a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d06c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d06e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d070:	e841 2300 	strex	r3, r2, [r1]
 800d074:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d1e3      	bne.n	800d044 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	2220      	movs	r2, #32
 800d080:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	2200      	movs	r2, #0
 800d088:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	2200      	movs	r2, #0
 800d08e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d096:	693b      	ldr	r3, [r7, #16]
 800d098:	e853 3f00 	ldrex	r3, [r3]
 800d09c:	60fb      	str	r3, [r7, #12]
   return(result);
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	f023 0310 	bic.w	r3, r3, #16
 800d0a4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	461a      	mov	r2, r3
 800d0ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800d0b2:	61fb      	str	r3, [r7, #28]
 800d0b4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0b6:	69b9      	ldr	r1, [r7, #24]
 800d0b8:	69fa      	ldr	r2, [r7, #28]
 800d0ba:	e841 2300 	strex	r3, r2, [r1]
 800d0be:	617b      	str	r3, [r7, #20]
   return(result);
 800d0c0:	697b      	ldr	r3, [r7, #20]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d1e4      	bne.n	800d090 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	2202      	movs	r2, #2
 800d0ca:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d0cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d0d0:	4619      	mov	r1, r3
 800d0d2:	6878      	ldr	r0, [r7, #4]
 800d0d4:	f000 f870 	bl	800d1b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d0d8:	e03f      	b.n	800d15a <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d0da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d0de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d00e      	beq.n	800d104 <HAL_UART_IRQHandler+0x570>
 800d0e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d0ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d008      	beq.n	800d104 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800d0fa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d0fc:	6878      	ldr	r0, [r7, #4]
 800d0fe:	f000 ff8a 	bl	800e016 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d102:	e02d      	b.n	800d160 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800d104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d108:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d00e      	beq.n	800d12e <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800d110:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d114:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d008      	beq.n	800d12e <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d120:	2b00      	cmp	r3, #0
 800d122:	d01c      	beq.n	800d15e <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d128:	6878      	ldr	r0, [r7, #4]
 800d12a:	4798      	blx	r3
    }
    return;
 800d12c:	e017      	b.n	800d15e <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d12e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d132:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d136:	2b00      	cmp	r3, #0
 800d138:	d012      	beq.n	800d160 <HAL_UART_IRQHandler+0x5cc>
 800d13a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d13e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d142:	2b00      	cmp	r3, #0
 800d144:	d00c      	beq.n	800d160 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800d146:	6878      	ldr	r0, [r7, #4]
 800d148:	f000 ff3b 	bl	800dfc2 <UART_EndTransmit_IT>
    return;
 800d14c:	e008      	b.n	800d160 <HAL_UART_IRQHandler+0x5cc>
      return;
 800d14e:	bf00      	nop
 800d150:	e006      	b.n	800d160 <HAL_UART_IRQHandler+0x5cc>
    return;
 800d152:	bf00      	nop
 800d154:	e004      	b.n	800d160 <HAL_UART_IRQHandler+0x5cc>
      return;
 800d156:	bf00      	nop
 800d158:	e002      	b.n	800d160 <HAL_UART_IRQHandler+0x5cc>
      return;
 800d15a:	bf00      	nop
 800d15c:	e000      	b.n	800d160 <HAL_UART_IRQHandler+0x5cc>
    return;
 800d15e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800d160:	37e8      	adds	r7, #232	@ 0xe8
 800d162:	46bd      	mov	sp, r7
 800d164:	bd80      	pop	{r7, pc}
 800d166:	bf00      	nop

0800d168 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d168:	b480      	push	{r7}
 800d16a:	b083      	sub	sp, #12
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d170:	bf00      	nop
 800d172:	370c      	adds	r7, #12
 800d174:	46bd      	mov	sp, r7
 800d176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d17a:	4770      	bx	lr

0800d17c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d17c:	b480      	push	{r7}
 800d17e:	b083      	sub	sp, #12
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800d184:	bf00      	nop
 800d186:	370c      	adds	r7, #12
 800d188:	46bd      	mov	sp, r7
 800d18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18e:	4770      	bx	lr

0800d190 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d190:	b480      	push	{r7}
 800d192:	b083      	sub	sp, #12
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800d198:	bf00      	nop
 800d19a:	370c      	adds	r7, #12
 800d19c:	46bd      	mov	sp, r7
 800d19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a2:	4770      	bx	lr

0800d1a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d1a4:	b480      	push	{r7}
 800d1a6:	b083      	sub	sp, #12
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d1ac:	bf00      	nop
 800d1ae:	370c      	adds	r7, #12
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b6:	4770      	bx	lr

0800d1b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d1b8:	b480      	push	{r7}
 800d1ba:	b083      	sub	sp, #12
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
 800d1c0:	460b      	mov	r3, r1
 800d1c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d1c4:	bf00      	nop
 800d1c6:	370c      	adds	r7, #12
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ce:	4770      	bx	lr

0800d1d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d1d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d1d4:	b08a      	sub	sp, #40	@ 0x28
 800d1d6:	af00      	add	r7, sp, #0
 800d1d8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d1da:	2300      	movs	r3, #0
 800d1dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	689a      	ldr	r2, [r3, #8]
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	691b      	ldr	r3, [r3, #16]
 800d1e8:	431a      	orrs	r2, r3
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	695b      	ldr	r3, [r3, #20]
 800d1ee:	431a      	orrs	r2, r3
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	69db      	ldr	r3, [r3, #28]
 800d1f4:	4313      	orrs	r3, r2
 800d1f6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	681a      	ldr	r2, [r3, #0]
 800d1fe:	4ba4      	ldr	r3, [pc, #656]	@ (800d490 <UART_SetConfig+0x2c0>)
 800d200:	4013      	ands	r3, r2
 800d202:	68fa      	ldr	r2, [r7, #12]
 800d204:	6812      	ldr	r2, [r2, #0]
 800d206:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d208:	430b      	orrs	r3, r1
 800d20a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	685b      	ldr	r3, [r3, #4]
 800d212:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	68da      	ldr	r2, [r3, #12]
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	430a      	orrs	r2, r1
 800d220:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	699b      	ldr	r3, [r3, #24]
 800d226:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	4a99      	ldr	r2, [pc, #612]	@ (800d494 <UART_SetConfig+0x2c4>)
 800d22e:	4293      	cmp	r3, r2
 800d230:	d004      	beq.n	800d23c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	6a1b      	ldr	r3, [r3, #32]
 800d236:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d238:	4313      	orrs	r3, r2
 800d23a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	689b      	ldr	r3, [r3, #8]
 800d242:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d24c:	430a      	orrs	r2, r1
 800d24e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	4a90      	ldr	r2, [pc, #576]	@ (800d498 <UART_SetConfig+0x2c8>)
 800d256:	4293      	cmp	r3, r2
 800d258:	d126      	bne.n	800d2a8 <UART_SetConfig+0xd8>
 800d25a:	4b90      	ldr	r3, [pc, #576]	@ (800d49c <UART_SetConfig+0x2cc>)
 800d25c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d260:	f003 0303 	and.w	r3, r3, #3
 800d264:	2b03      	cmp	r3, #3
 800d266:	d81b      	bhi.n	800d2a0 <UART_SetConfig+0xd0>
 800d268:	a201      	add	r2, pc, #4	@ (adr r2, 800d270 <UART_SetConfig+0xa0>)
 800d26a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d26e:	bf00      	nop
 800d270:	0800d281 	.word	0x0800d281
 800d274:	0800d291 	.word	0x0800d291
 800d278:	0800d289 	.word	0x0800d289
 800d27c:	0800d299 	.word	0x0800d299
 800d280:	2301      	movs	r3, #1
 800d282:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d286:	e116      	b.n	800d4b6 <UART_SetConfig+0x2e6>
 800d288:	2302      	movs	r3, #2
 800d28a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d28e:	e112      	b.n	800d4b6 <UART_SetConfig+0x2e6>
 800d290:	2304      	movs	r3, #4
 800d292:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d296:	e10e      	b.n	800d4b6 <UART_SetConfig+0x2e6>
 800d298:	2308      	movs	r3, #8
 800d29a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d29e:	e10a      	b.n	800d4b6 <UART_SetConfig+0x2e6>
 800d2a0:	2310      	movs	r3, #16
 800d2a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d2a6:	e106      	b.n	800d4b6 <UART_SetConfig+0x2e6>
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	4a7c      	ldr	r2, [pc, #496]	@ (800d4a0 <UART_SetConfig+0x2d0>)
 800d2ae:	4293      	cmp	r3, r2
 800d2b0:	d138      	bne.n	800d324 <UART_SetConfig+0x154>
 800d2b2:	4b7a      	ldr	r3, [pc, #488]	@ (800d49c <UART_SetConfig+0x2cc>)
 800d2b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d2b8:	f003 030c 	and.w	r3, r3, #12
 800d2bc:	2b0c      	cmp	r3, #12
 800d2be:	d82d      	bhi.n	800d31c <UART_SetConfig+0x14c>
 800d2c0:	a201      	add	r2, pc, #4	@ (adr r2, 800d2c8 <UART_SetConfig+0xf8>)
 800d2c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2c6:	bf00      	nop
 800d2c8:	0800d2fd 	.word	0x0800d2fd
 800d2cc:	0800d31d 	.word	0x0800d31d
 800d2d0:	0800d31d 	.word	0x0800d31d
 800d2d4:	0800d31d 	.word	0x0800d31d
 800d2d8:	0800d30d 	.word	0x0800d30d
 800d2dc:	0800d31d 	.word	0x0800d31d
 800d2e0:	0800d31d 	.word	0x0800d31d
 800d2e4:	0800d31d 	.word	0x0800d31d
 800d2e8:	0800d305 	.word	0x0800d305
 800d2ec:	0800d31d 	.word	0x0800d31d
 800d2f0:	0800d31d 	.word	0x0800d31d
 800d2f4:	0800d31d 	.word	0x0800d31d
 800d2f8:	0800d315 	.word	0x0800d315
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d302:	e0d8      	b.n	800d4b6 <UART_SetConfig+0x2e6>
 800d304:	2302      	movs	r3, #2
 800d306:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d30a:	e0d4      	b.n	800d4b6 <UART_SetConfig+0x2e6>
 800d30c:	2304      	movs	r3, #4
 800d30e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d312:	e0d0      	b.n	800d4b6 <UART_SetConfig+0x2e6>
 800d314:	2308      	movs	r3, #8
 800d316:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d31a:	e0cc      	b.n	800d4b6 <UART_SetConfig+0x2e6>
 800d31c:	2310      	movs	r3, #16
 800d31e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d322:	e0c8      	b.n	800d4b6 <UART_SetConfig+0x2e6>
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	4a5e      	ldr	r2, [pc, #376]	@ (800d4a4 <UART_SetConfig+0x2d4>)
 800d32a:	4293      	cmp	r3, r2
 800d32c:	d125      	bne.n	800d37a <UART_SetConfig+0x1aa>
 800d32e:	4b5b      	ldr	r3, [pc, #364]	@ (800d49c <UART_SetConfig+0x2cc>)
 800d330:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d334:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800d338:	2b30      	cmp	r3, #48	@ 0x30
 800d33a:	d016      	beq.n	800d36a <UART_SetConfig+0x19a>
 800d33c:	2b30      	cmp	r3, #48	@ 0x30
 800d33e:	d818      	bhi.n	800d372 <UART_SetConfig+0x1a2>
 800d340:	2b20      	cmp	r3, #32
 800d342:	d00a      	beq.n	800d35a <UART_SetConfig+0x18a>
 800d344:	2b20      	cmp	r3, #32
 800d346:	d814      	bhi.n	800d372 <UART_SetConfig+0x1a2>
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d002      	beq.n	800d352 <UART_SetConfig+0x182>
 800d34c:	2b10      	cmp	r3, #16
 800d34e:	d008      	beq.n	800d362 <UART_SetConfig+0x192>
 800d350:	e00f      	b.n	800d372 <UART_SetConfig+0x1a2>
 800d352:	2300      	movs	r3, #0
 800d354:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d358:	e0ad      	b.n	800d4b6 <UART_SetConfig+0x2e6>
 800d35a:	2302      	movs	r3, #2
 800d35c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d360:	e0a9      	b.n	800d4b6 <UART_SetConfig+0x2e6>
 800d362:	2304      	movs	r3, #4
 800d364:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d368:	e0a5      	b.n	800d4b6 <UART_SetConfig+0x2e6>
 800d36a:	2308      	movs	r3, #8
 800d36c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d370:	e0a1      	b.n	800d4b6 <UART_SetConfig+0x2e6>
 800d372:	2310      	movs	r3, #16
 800d374:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d378:	e09d      	b.n	800d4b6 <UART_SetConfig+0x2e6>
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	4a4a      	ldr	r2, [pc, #296]	@ (800d4a8 <UART_SetConfig+0x2d8>)
 800d380:	4293      	cmp	r3, r2
 800d382:	d125      	bne.n	800d3d0 <UART_SetConfig+0x200>
 800d384:	4b45      	ldr	r3, [pc, #276]	@ (800d49c <UART_SetConfig+0x2cc>)
 800d386:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d38a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800d38e:	2bc0      	cmp	r3, #192	@ 0xc0
 800d390:	d016      	beq.n	800d3c0 <UART_SetConfig+0x1f0>
 800d392:	2bc0      	cmp	r3, #192	@ 0xc0
 800d394:	d818      	bhi.n	800d3c8 <UART_SetConfig+0x1f8>
 800d396:	2b80      	cmp	r3, #128	@ 0x80
 800d398:	d00a      	beq.n	800d3b0 <UART_SetConfig+0x1e0>
 800d39a:	2b80      	cmp	r3, #128	@ 0x80
 800d39c:	d814      	bhi.n	800d3c8 <UART_SetConfig+0x1f8>
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d002      	beq.n	800d3a8 <UART_SetConfig+0x1d8>
 800d3a2:	2b40      	cmp	r3, #64	@ 0x40
 800d3a4:	d008      	beq.n	800d3b8 <UART_SetConfig+0x1e8>
 800d3a6:	e00f      	b.n	800d3c8 <UART_SetConfig+0x1f8>
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d3ae:	e082      	b.n	800d4b6 <UART_SetConfig+0x2e6>
 800d3b0:	2302      	movs	r3, #2
 800d3b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d3b6:	e07e      	b.n	800d4b6 <UART_SetConfig+0x2e6>
 800d3b8:	2304      	movs	r3, #4
 800d3ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d3be:	e07a      	b.n	800d4b6 <UART_SetConfig+0x2e6>
 800d3c0:	2308      	movs	r3, #8
 800d3c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d3c6:	e076      	b.n	800d4b6 <UART_SetConfig+0x2e6>
 800d3c8:	2310      	movs	r3, #16
 800d3ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d3ce:	e072      	b.n	800d4b6 <UART_SetConfig+0x2e6>
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	4a35      	ldr	r2, [pc, #212]	@ (800d4ac <UART_SetConfig+0x2dc>)
 800d3d6:	4293      	cmp	r3, r2
 800d3d8:	d12a      	bne.n	800d430 <UART_SetConfig+0x260>
 800d3da:	4b30      	ldr	r3, [pc, #192]	@ (800d49c <UART_SetConfig+0x2cc>)
 800d3dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d3e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d3e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d3e8:	d01a      	beq.n	800d420 <UART_SetConfig+0x250>
 800d3ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d3ee:	d81b      	bhi.n	800d428 <UART_SetConfig+0x258>
 800d3f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d3f4:	d00c      	beq.n	800d410 <UART_SetConfig+0x240>
 800d3f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d3fa:	d815      	bhi.n	800d428 <UART_SetConfig+0x258>
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d003      	beq.n	800d408 <UART_SetConfig+0x238>
 800d400:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d404:	d008      	beq.n	800d418 <UART_SetConfig+0x248>
 800d406:	e00f      	b.n	800d428 <UART_SetConfig+0x258>
 800d408:	2300      	movs	r3, #0
 800d40a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d40e:	e052      	b.n	800d4b6 <UART_SetConfig+0x2e6>
 800d410:	2302      	movs	r3, #2
 800d412:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d416:	e04e      	b.n	800d4b6 <UART_SetConfig+0x2e6>
 800d418:	2304      	movs	r3, #4
 800d41a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d41e:	e04a      	b.n	800d4b6 <UART_SetConfig+0x2e6>
 800d420:	2308      	movs	r3, #8
 800d422:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d426:	e046      	b.n	800d4b6 <UART_SetConfig+0x2e6>
 800d428:	2310      	movs	r3, #16
 800d42a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d42e:	e042      	b.n	800d4b6 <UART_SetConfig+0x2e6>
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	4a17      	ldr	r2, [pc, #92]	@ (800d494 <UART_SetConfig+0x2c4>)
 800d436:	4293      	cmp	r3, r2
 800d438:	d13a      	bne.n	800d4b0 <UART_SetConfig+0x2e0>
 800d43a:	4b18      	ldr	r3, [pc, #96]	@ (800d49c <UART_SetConfig+0x2cc>)
 800d43c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d440:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800d444:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d448:	d01a      	beq.n	800d480 <UART_SetConfig+0x2b0>
 800d44a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d44e:	d81b      	bhi.n	800d488 <UART_SetConfig+0x2b8>
 800d450:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d454:	d00c      	beq.n	800d470 <UART_SetConfig+0x2a0>
 800d456:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d45a:	d815      	bhi.n	800d488 <UART_SetConfig+0x2b8>
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d003      	beq.n	800d468 <UART_SetConfig+0x298>
 800d460:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d464:	d008      	beq.n	800d478 <UART_SetConfig+0x2a8>
 800d466:	e00f      	b.n	800d488 <UART_SetConfig+0x2b8>
 800d468:	2300      	movs	r3, #0
 800d46a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d46e:	e022      	b.n	800d4b6 <UART_SetConfig+0x2e6>
 800d470:	2302      	movs	r3, #2
 800d472:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d476:	e01e      	b.n	800d4b6 <UART_SetConfig+0x2e6>
 800d478:	2304      	movs	r3, #4
 800d47a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d47e:	e01a      	b.n	800d4b6 <UART_SetConfig+0x2e6>
 800d480:	2308      	movs	r3, #8
 800d482:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d486:	e016      	b.n	800d4b6 <UART_SetConfig+0x2e6>
 800d488:	2310      	movs	r3, #16
 800d48a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d48e:	e012      	b.n	800d4b6 <UART_SetConfig+0x2e6>
 800d490:	efff69f3 	.word	0xefff69f3
 800d494:	40008000 	.word	0x40008000
 800d498:	40013800 	.word	0x40013800
 800d49c:	40021000 	.word	0x40021000
 800d4a0:	40004400 	.word	0x40004400
 800d4a4:	40004800 	.word	0x40004800
 800d4a8:	40004c00 	.word	0x40004c00
 800d4ac:	40005000 	.word	0x40005000
 800d4b0:	2310      	movs	r3, #16
 800d4b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	4a9f      	ldr	r2, [pc, #636]	@ (800d738 <UART_SetConfig+0x568>)
 800d4bc:	4293      	cmp	r3, r2
 800d4be:	d17a      	bne.n	800d5b6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d4c0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800d4c4:	2b08      	cmp	r3, #8
 800d4c6:	d824      	bhi.n	800d512 <UART_SetConfig+0x342>
 800d4c8:	a201      	add	r2, pc, #4	@ (adr r2, 800d4d0 <UART_SetConfig+0x300>)
 800d4ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4ce:	bf00      	nop
 800d4d0:	0800d4f5 	.word	0x0800d4f5
 800d4d4:	0800d513 	.word	0x0800d513
 800d4d8:	0800d4fd 	.word	0x0800d4fd
 800d4dc:	0800d513 	.word	0x0800d513
 800d4e0:	0800d503 	.word	0x0800d503
 800d4e4:	0800d513 	.word	0x0800d513
 800d4e8:	0800d513 	.word	0x0800d513
 800d4ec:	0800d513 	.word	0x0800d513
 800d4f0:	0800d50b 	.word	0x0800d50b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d4f4:	f7fe f972 	bl	800b7dc <HAL_RCC_GetPCLK1Freq>
 800d4f8:	61f8      	str	r0, [r7, #28]
        break;
 800d4fa:	e010      	b.n	800d51e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d4fc:	4b8f      	ldr	r3, [pc, #572]	@ (800d73c <UART_SetConfig+0x56c>)
 800d4fe:	61fb      	str	r3, [r7, #28]
        break;
 800d500:	e00d      	b.n	800d51e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d502:	f7fe f8d3 	bl	800b6ac <HAL_RCC_GetSysClockFreq>
 800d506:	61f8      	str	r0, [r7, #28]
        break;
 800d508:	e009      	b.n	800d51e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d50a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d50e:	61fb      	str	r3, [r7, #28]
        break;
 800d510:	e005      	b.n	800d51e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800d512:	2300      	movs	r3, #0
 800d514:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800d516:	2301      	movs	r3, #1
 800d518:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800d51c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d51e:	69fb      	ldr	r3, [r7, #28]
 800d520:	2b00      	cmp	r3, #0
 800d522:	f000 80fb 	beq.w	800d71c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	685a      	ldr	r2, [r3, #4]
 800d52a:	4613      	mov	r3, r2
 800d52c:	005b      	lsls	r3, r3, #1
 800d52e:	4413      	add	r3, r2
 800d530:	69fa      	ldr	r2, [r7, #28]
 800d532:	429a      	cmp	r2, r3
 800d534:	d305      	bcc.n	800d542 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	685b      	ldr	r3, [r3, #4]
 800d53a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800d53c:	69fa      	ldr	r2, [r7, #28]
 800d53e:	429a      	cmp	r2, r3
 800d540:	d903      	bls.n	800d54a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800d542:	2301      	movs	r3, #1
 800d544:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800d548:	e0e8      	b.n	800d71c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800d54a:	69fb      	ldr	r3, [r7, #28]
 800d54c:	2200      	movs	r2, #0
 800d54e:	461c      	mov	r4, r3
 800d550:	4615      	mov	r5, r2
 800d552:	f04f 0200 	mov.w	r2, #0
 800d556:	f04f 0300 	mov.w	r3, #0
 800d55a:	022b      	lsls	r3, r5, #8
 800d55c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800d560:	0222      	lsls	r2, r4, #8
 800d562:	68f9      	ldr	r1, [r7, #12]
 800d564:	6849      	ldr	r1, [r1, #4]
 800d566:	0849      	lsrs	r1, r1, #1
 800d568:	2000      	movs	r0, #0
 800d56a:	4688      	mov	r8, r1
 800d56c:	4681      	mov	r9, r0
 800d56e:	eb12 0a08 	adds.w	sl, r2, r8
 800d572:	eb43 0b09 	adc.w	fp, r3, r9
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	685b      	ldr	r3, [r3, #4]
 800d57a:	2200      	movs	r2, #0
 800d57c:	603b      	str	r3, [r7, #0]
 800d57e:	607a      	str	r2, [r7, #4]
 800d580:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d584:	4650      	mov	r0, sl
 800d586:	4659      	mov	r1, fp
 800d588:	f7f2 fe30 	bl	80001ec <__aeabi_uldivmod>
 800d58c:	4602      	mov	r2, r0
 800d58e:	460b      	mov	r3, r1
 800d590:	4613      	mov	r3, r2
 800d592:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d594:	69bb      	ldr	r3, [r7, #24]
 800d596:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d59a:	d308      	bcc.n	800d5ae <UART_SetConfig+0x3de>
 800d59c:	69bb      	ldr	r3, [r7, #24]
 800d59e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d5a2:	d204      	bcs.n	800d5ae <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	69ba      	ldr	r2, [r7, #24]
 800d5aa:	60da      	str	r2, [r3, #12]
 800d5ac:	e0b6      	b.n	800d71c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800d5ae:	2301      	movs	r3, #1
 800d5b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800d5b4:	e0b2      	b.n	800d71c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	69db      	ldr	r3, [r3, #28]
 800d5ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d5be:	d15e      	bne.n	800d67e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800d5c0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800d5c4:	2b08      	cmp	r3, #8
 800d5c6:	d828      	bhi.n	800d61a <UART_SetConfig+0x44a>
 800d5c8:	a201      	add	r2, pc, #4	@ (adr r2, 800d5d0 <UART_SetConfig+0x400>)
 800d5ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5ce:	bf00      	nop
 800d5d0:	0800d5f5 	.word	0x0800d5f5
 800d5d4:	0800d5fd 	.word	0x0800d5fd
 800d5d8:	0800d605 	.word	0x0800d605
 800d5dc:	0800d61b 	.word	0x0800d61b
 800d5e0:	0800d60b 	.word	0x0800d60b
 800d5e4:	0800d61b 	.word	0x0800d61b
 800d5e8:	0800d61b 	.word	0x0800d61b
 800d5ec:	0800d61b 	.word	0x0800d61b
 800d5f0:	0800d613 	.word	0x0800d613
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d5f4:	f7fe f8f2 	bl	800b7dc <HAL_RCC_GetPCLK1Freq>
 800d5f8:	61f8      	str	r0, [r7, #28]
        break;
 800d5fa:	e014      	b.n	800d626 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d5fc:	f7fe f904 	bl	800b808 <HAL_RCC_GetPCLK2Freq>
 800d600:	61f8      	str	r0, [r7, #28]
        break;
 800d602:	e010      	b.n	800d626 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d604:	4b4d      	ldr	r3, [pc, #308]	@ (800d73c <UART_SetConfig+0x56c>)
 800d606:	61fb      	str	r3, [r7, #28]
        break;
 800d608:	e00d      	b.n	800d626 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d60a:	f7fe f84f 	bl	800b6ac <HAL_RCC_GetSysClockFreq>
 800d60e:	61f8      	str	r0, [r7, #28]
        break;
 800d610:	e009      	b.n	800d626 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d612:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d616:	61fb      	str	r3, [r7, #28]
        break;
 800d618:	e005      	b.n	800d626 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800d61a:	2300      	movs	r3, #0
 800d61c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800d61e:	2301      	movs	r3, #1
 800d620:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800d624:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d626:	69fb      	ldr	r3, [r7, #28]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d077      	beq.n	800d71c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800d62c:	69fb      	ldr	r3, [r7, #28]
 800d62e:	005a      	lsls	r2, r3, #1
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	685b      	ldr	r3, [r3, #4]
 800d634:	085b      	lsrs	r3, r3, #1
 800d636:	441a      	add	r2, r3
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	685b      	ldr	r3, [r3, #4]
 800d63c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d640:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d642:	69bb      	ldr	r3, [r7, #24]
 800d644:	2b0f      	cmp	r3, #15
 800d646:	d916      	bls.n	800d676 <UART_SetConfig+0x4a6>
 800d648:	69bb      	ldr	r3, [r7, #24]
 800d64a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d64e:	d212      	bcs.n	800d676 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d650:	69bb      	ldr	r3, [r7, #24]
 800d652:	b29b      	uxth	r3, r3
 800d654:	f023 030f 	bic.w	r3, r3, #15
 800d658:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d65a:	69bb      	ldr	r3, [r7, #24]
 800d65c:	085b      	lsrs	r3, r3, #1
 800d65e:	b29b      	uxth	r3, r3
 800d660:	f003 0307 	and.w	r3, r3, #7
 800d664:	b29a      	uxth	r2, r3
 800d666:	8afb      	ldrh	r3, [r7, #22]
 800d668:	4313      	orrs	r3, r2
 800d66a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	8afa      	ldrh	r2, [r7, #22]
 800d672:	60da      	str	r2, [r3, #12]
 800d674:	e052      	b.n	800d71c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800d676:	2301      	movs	r3, #1
 800d678:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800d67c:	e04e      	b.n	800d71c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d67e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800d682:	2b08      	cmp	r3, #8
 800d684:	d827      	bhi.n	800d6d6 <UART_SetConfig+0x506>
 800d686:	a201      	add	r2, pc, #4	@ (adr r2, 800d68c <UART_SetConfig+0x4bc>)
 800d688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d68c:	0800d6b1 	.word	0x0800d6b1
 800d690:	0800d6b9 	.word	0x0800d6b9
 800d694:	0800d6c1 	.word	0x0800d6c1
 800d698:	0800d6d7 	.word	0x0800d6d7
 800d69c:	0800d6c7 	.word	0x0800d6c7
 800d6a0:	0800d6d7 	.word	0x0800d6d7
 800d6a4:	0800d6d7 	.word	0x0800d6d7
 800d6a8:	0800d6d7 	.word	0x0800d6d7
 800d6ac:	0800d6cf 	.word	0x0800d6cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d6b0:	f7fe f894 	bl	800b7dc <HAL_RCC_GetPCLK1Freq>
 800d6b4:	61f8      	str	r0, [r7, #28]
        break;
 800d6b6:	e014      	b.n	800d6e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d6b8:	f7fe f8a6 	bl	800b808 <HAL_RCC_GetPCLK2Freq>
 800d6bc:	61f8      	str	r0, [r7, #28]
        break;
 800d6be:	e010      	b.n	800d6e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d6c0:	4b1e      	ldr	r3, [pc, #120]	@ (800d73c <UART_SetConfig+0x56c>)
 800d6c2:	61fb      	str	r3, [r7, #28]
        break;
 800d6c4:	e00d      	b.n	800d6e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d6c6:	f7fd fff1 	bl	800b6ac <HAL_RCC_GetSysClockFreq>
 800d6ca:	61f8      	str	r0, [r7, #28]
        break;
 800d6cc:	e009      	b.n	800d6e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d6ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d6d2:	61fb      	str	r3, [r7, #28]
        break;
 800d6d4:	e005      	b.n	800d6e2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800d6da:	2301      	movs	r3, #1
 800d6dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800d6e0:	bf00      	nop
    }

    if (pclk != 0U)
 800d6e2:	69fb      	ldr	r3, [r7, #28]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d019      	beq.n	800d71c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	685b      	ldr	r3, [r3, #4]
 800d6ec:	085a      	lsrs	r2, r3, #1
 800d6ee:	69fb      	ldr	r3, [r7, #28]
 800d6f0:	441a      	add	r2, r3
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	685b      	ldr	r3, [r3, #4]
 800d6f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d6fa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d6fc:	69bb      	ldr	r3, [r7, #24]
 800d6fe:	2b0f      	cmp	r3, #15
 800d700:	d909      	bls.n	800d716 <UART_SetConfig+0x546>
 800d702:	69bb      	ldr	r3, [r7, #24]
 800d704:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d708:	d205      	bcs.n	800d716 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d70a:	69bb      	ldr	r3, [r7, #24]
 800d70c:	b29a      	uxth	r2, r3
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	60da      	str	r2, [r3, #12]
 800d714:	e002      	b.n	800d71c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800d716:	2301      	movs	r3, #1
 800d718:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	2200      	movs	r2, #0
 800d720:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	2200      	movs	r2, #0
 800d726:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800d728:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800d72c:	4618      	mov	r0, r3
 800d72e:	3728      	adds	r7, #40	@ 0x28
 800d730:	46bd      	mov	sp, r7
 800d732:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d736:	bf00      	nop
 800d738:	40008000 	.word	0x40008000
 800d73c:	00f42400 	.word	0x00f42400

0800d740 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d740:	b480      	push	{r7}
 800d742:	b083      	sub	sp, #12
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d74c:	f003 0308 	and.w	r3, r3, #8
 800d750:	2b00      	cmp	r3, #0
 800d752:	d00a      	beq.n	800d76a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	685b      	ldr	r3, [r3, #4]
 800d75a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	430a      	orrs	r2, r1
 800d768:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d76e:	f003 0301 	and.w	r3, r3, #1
 800d772:	2b00      	cmp	r3, #0
 800d774:	d00a      	beq.n	800d78c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	685b      	ldr	r3, [r3, #4]
 800d77c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	430a      	orrs	r2, r1
 800d78a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d790:	f003 0302 	and.w	r3, r3, #2
 800d794:	2b00      	cmp	r3, #0
 800d796:	d00a      	beq.n	800d7ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	685b      	ldr	r3, [r3, #4]
 800d79e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	430a      	orrs	r2, r1
 800d7ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7b2:	f003 0304 	and.w	r3, r3, #4
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d00a      	beq.n	800d7d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	685b      	ldr	r3, [r3, #4]
 800d7c0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	430a      	orrs	r2, r1
 800d7ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7d4:	f003 0310 	and.w	r3, r3, #16
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d00a      	beq.n	800d7f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	689b      	ldr	r3, [r3, #8]
 800d7e2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	430a      	orrs	r2, r1
 800d7f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7f6:	f003 0320 	and.w	r3, r3, #32
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d00a      	beq.n	800d814 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	689b      	ldr	r3, [r3, #8]
 800d804:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	430a      	orrs	r2, r1
 800d812:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d818:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d01a      	beq.n	800d856 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	685b      	ldr	r3, [r3, #4]
 800d826:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	430a      	orrs	r2, r1
 800d834:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d83a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d83e:	d10a      	bne.n	800d856 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	685b      	ldr	r3, [r3, #4]
 800d846:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	430a      	orrs	r2, r1
 800d854:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d85a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d00a      	beq.n	800d878 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	685b      	ldr	r3, [r3, #4]
 800d868:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	430a      	orrs	r2, r1
 800d876:	605a      	str	r2, [r3, #4]
  }
}
 800d878:	bf00      	nop
 800d87a:	370c      	adds	r7, #12
 800d87c:	46bd      	mov	sp, r7
 800d87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d882:	4770      	bx	lr

0800d884 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d884:	b580      	push	{r7, lr}
 800d886:	b098      	sub	sp, #96	@ 0x60
 800d888:	af02      	add	r7, sp, #8
 800d88a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	2200      	movs	r2, #0
 800d890:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d894:	f7f8 fa6a 	bl	8005d6c <HAL_GetTick>
 800d898:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	f003 0308 	and.w	r3, r3, #8
 800d8a4:	2b08      	cmp	r3, #8
 800d8a6:	d12e      	bne.n	800d906 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d8a8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d8ac:	9300      	str	r3, [sp, #0]
 800d8ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d8b0:	2200      	movs	r2, #0
 800d8b2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d8b6:	6878      	ldr	r0, [r7, #4]
 800d8b8:	f000 f88c 	bl	800d9d4 <UART_WaitOnFlagUntilTimeout>
 800d8bc:	4603      	mov	r3, r0
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d021      	beq.n	800d906 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8ca:	e853 3f00 	ldrex	r3, [r3]
 800d8ce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d8d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d8d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d8d6:	653b      	str	r3, [r7, #80]	@ 0x50
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	461a      	mov	r2, r3
 800d8de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d8e0:	647b      	str	r3, [r7, #68]	@ 0x44
 800d8e2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8e4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d8e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d8e8:	e841 2300 	strex	r3, r2, [r1]
 800d8ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d8ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d1e6      	bne.n	800d8c2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	2220      	movs	r2, #32
 800d8f8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	2200      	movs	r2, #0
 800d8fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d902:	2303      	movs	r3, #3
 800d904:	e062      	b.n	800d9cc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	f003 0304 	and.w	r3, r3, #4
 800d910:	2b04      	cmp	r3, #4
 800d912:	d149      	bne.n	800d9a8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d914:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d918:	9300      	str	r3, [sp, #0]
 800d91a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d91c:	2200      	movs	r2, #0
 800d91e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d922:	6878      	ldr	r0, [r7, #4]
 800d924:	f000 f856 	bl	800d9d4 <UART_WaitOnFlagUntilTimeout>
 800d928:	4603      	mov	r3, r0
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d03c      	beq.n	800d9a8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d936:	e853 3f00 	ldrex	r3, [r3]
 800d93a:	623b      	str	r3, [r7, #32]
   return(result);
 800d93c:	6a3b      	ldr	r3, [r7, #32]
 800d93e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d942:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	461a      	mov	r2, r3
 800d94a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d94c:	633b      	str	r3, [r7, #48]	@ 0x30
 800d94e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d950:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d952:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d954:	e841 2300 	strex	r3, r2, [r1]
 800d958:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d95a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d1e6      	bne.n	800d92e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	3308      	adds	r3, #8
 800d966:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d968:	693b      	ldr	r3, [r7, #16]
 800d96a:	e853 3f00 	ldrex	r3, [r3]
 800d96e:	60fb      	str	r3, [r7, #12]
   return(result);
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	f023 0301 	bic.w	r3, r3, #1
 800d976:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	3308      	adds	r3, #8
 800d97e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d980:	61fa      	str	r2, [r7, #28]
 800d982:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d984:	69b9      	ldr	r1, [r7, #24]
 800d986:	69fa      	ldr	r2, [r7, #28]
 800d988:	e841 2300 	strex	r3, r2, [r1]
 800d98c:	617b      	str	r3, [r7, #20]
   return(result);
 800d98e:	697b      	ldr	r3, [r7, #20]
 800d990:	2b00      	cmp	r3, #0
 800d992:	d1e5      	bne.n	800d960 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	2220      	movs	r2, #32
 800d998:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	2200      	movs	r2, #0
 800d9a0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d9a4:	2303      	movs	r3, #3
 800d9a6:	e011      	b.n	800d9cc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	2220      	movs	r2, #32
 800d9ac:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	2220      	movs	r2, #32
 800d9b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	2200      	movs	r2, #0
 800d9ba:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	2200      	movs	r2, #0
 800d9c0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	2200      	movs	r2, #0
 800d9c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800d9ca:	2300      	movs	r3, #0
}
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	3758      	adds	r7, #88	@ 0x58
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	bd80      	pop	{r7, pc}

0800d9d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	b084      	sub	sp, #16
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	60f8      	str	r0, [r7, #12]
 800d9dc:	60b9      	str	r1, [r7, #8]
 800d9de:	603b      	str	r3, [r7, #0]
 800d9e0:	4613      	mov	r3, r2
 800d9e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d9e4:	e049      	b.n	800da7a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d9e6:	69bb      	ldr	r3, [r7, #24]
 800d9e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9ec:	d045      	beq.n	800da7a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d9ee:	f7f8 f9bd 	bl	8005d6c <HAL_GetTick>
 800d9f2:	4602      	mov	r2, r0
 800d9f4:	683b      	ldr	r3, [r7, #0]
 800d9f6:	1ad3      	subs	r3, r2, r3
 800d9f8:	69ba      	ldr	r2, [r7, #24]
 800d9fa:	429a      	cmp	r2, r3
 800d9fc:	d302      	bcc.n	800da04 <UART_WaitOnFlagUntilTimeout+0x30>
 800d9fe:	69bb      	ldr	r3, [r7, #24]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d101      	bne.n	800da08 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800da04:	2303      	movs	r3, #3
 800da06:	e048      	b.n	800da9a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	f003 0304 	and.w	r3, r3, #4
 800da12:	2b00      	cmp	r3, #0
 800da14:	d031      	beq.n	800da7a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	69db      	ldr	r3, [r3, #28]
 800da1c:	f003 0308 	and.w	r3, r3, #8
 800da20:	2b08      	cmp	r3, #8
 800da22:	d110      	bne.n	800da46 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	2208      	movs	r2, #8
 800da2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800da2c:	68f8      	ldr	r0, [r7, #12]
 800da2e:	f000 f8ff 	bl	800dc30 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	2208      	movs	r2, #8
 800da36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	2200      	movs	r2, #0
 800da3e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800da42:	2301      	movs	r3, #1
 800da44:	e029      	b.n	800da9a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	69db      	ldr	r3, [r3, #28]
 800da4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800da50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800da54:	d111      	bne.n	800da7a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800da5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800da60:	68f8      	ldr	r0, [r7, #12]
 800da62:	f000 f8e5 	bl	800dc30 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	2220      	movs	r2, #32
 800da6a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	2200      	movs	r2, #0
 800da72:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800da76:	2303      	movs	r3, #3
 800da78:	e00f      	b.n	800da9a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	69da      	ldr	r2, [r3, #28]
 800da80:	68bb      	ldr	r3, [r7, #8]
 800da82:	4013      	ands	r3, r2
 800da84:	68ba      	ldr	r2, [r7, #8]
 800da86:	429a      	cmp	r2, r3
 800da88:	bf0c      	ite	eq
 800da8a:	2301      	moveq	r3, #1
 800da8c:	2300      	movne	r3, #0
 800da8e:	b2db      	uxtb	r3, r3
 800da90:	461a      	mov	r2, r3
 800da92:	79fb      	ldrb	r3, [r7, #7]
 800da94:	429a      	cmp	r2, r3
 800da96:	d0a6      	beq.n	800d9e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800da98:	2300      	movs	r3, #0
}
 800da9a:	4618      	mov	r0, r3
 800da9c:	3710      	adds	r7, #16
 800da9e:	46bd      	mov	sp, r7
 800daa0:	bd80      	pop	{r7, pc}
	...

0800daa4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b096      	sub	sp, #88	@ 0x58
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	60f8      	str	r0, [r7, #12]
 800daac:	60b9      	str	r1, [r7, #8]
 800daae:	4613      	mov	r3, r2
 800dab0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	68ba      	ldr	r2, [r7, #8]
 800dab6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	88fa      	ldrh	r2, [r7, #6]
 800dabc:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	2200      	movs	r2, #0
 800dac4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	2222      	movs	r2, #34	@ 0x22
 800dacc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d028      	beq.n	800db2a <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dadc:	4a3e      	ldr	r2, [pc, #248]	@ (800dbd8 <UART_Start_Receive_DMA+0x134>)
 800dade:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dae4:	4a3d      	ldr	r2, [pc, #244]	@ (800dbdc <UART_Start_Receive_DMA+0x138>)
 800dae6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800daec:	4a3c      	ldr	r2, [pc, #240]	@ (800dbe0 <UART_Start_Receive_DMA+0x13c>)
 800daee:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800daf4:	2200      	movs	r2, #0
 800daf6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	3324      	adds	r3, #36	@ 0x24
 800db02:	4619      	mov	r1, r3
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800db08:	461a      	mov	r2, r3
 800db0a:	88fb      	ldrh	r3, [r7, #6]
 800db0c:	f7fa f868 	bl	8007be0 <HAL_DMA_Start_IT>
 800db10:	4603      	mov	r3, r0
 800db12:	2b00      	cmp	r3, #0
 800db14:	d009      	beq.n	800db2a <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	2210      	movs	r2, #16
 800db1a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	2220      	movs	r2, #32
 800db22:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800db26:	2301      	movs	r3, #1
 800db28:	e051      	b.n	800dbce <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	691b      	ldr	r3, [r3, #16]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d018      	beq.n	800db64 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db3a:	e853 3f00 	ldrex	r3, [r3]
 800db3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800db40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800db46:	657b      	str	r3, [r7, #84]	@ 0x54
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	461a      	mov	r2, r3
 800db4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db50:	64bb      	str	r3, [r7, #72]	@ 0x48
 800db52:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db54:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800db56:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800db58:	e841 2300 	strex	r3, r2, [r1]
 800db5c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800db5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800db60:	2b00      	cmp	r3, #0
 800db62:	d1e6      	bne.n	800db32 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	3308      	adds	r3, #8
 800db6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db6e:	e853 3f00 	ldrex	r3, [r3]
 800db72:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800db74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db76:	f043 0301 	orr.w	r3, r3, #1
 800db7a:	653b      	str	r3, [r7, #80]	@ 0x50
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	3308      	adds	r3, #8
 800db82:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800db84:	637a      	str	r2, [r7, #52]	@ 0x34
 800db86:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db88:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800db8a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800db8c:	e841 2300 	strex	r3, r2, [r1]
 800db90:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800db92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db94:	2b00      	cmp	r3, #0
 800db96:	d1e5      	bne.n	800db64 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	3308      	adds	r3, #8
 800db9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dba0:	697b      	ldr	r3, [r7, #20]
 800dba2:	e853 3f00 	ldrex	r3, [r3]
 800dba6:	613b      	str	r3, [r7, #16]
   return(result);
 800dba8:	693b      	ldr	r3, [r7, #16]
 800dbaa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dbae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	3308      	adds	r3, #8
 800dbb6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800dbb8:	623a      	str	r2, [r7, #32]
 800dbba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbbc:	69f9      	ldr	r1, [r7, #28]
 800dbbe:	6a3a      	ldr	r2, [r7, #32]
 800dbc0:	e841 2300 	strex	r3, r2, [r1]
 800dbc4:	61bb      	str	r3, [r7, #24]
   return(result);
 800dbc6:	69bb      	ldr	r3, [r7, #24]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d1e5      	bne.n	800db98 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800dbcc:	2300      	movs	r3, #0
}
 800dbce:	4618      	mov	r0, r3
 800dbd0:	3758      	adds	r7, #88	@ 0x58
 800dbd2:	46bd      	mov	sp, r7
 800dbd4:	bd80      	pop	{r7, pc}
 800dbd6:	bf00      	nop
 800dbd8:	0800ddaf 	.word	0x0800ddaf
 800dbdc:	0800dedb 	.word	0x0800dedb
 800dbe0:	0800df19 	.word	0x0800df19

0800dbe4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800dbe4:	b480      	push	{r7}
 800dbe6:	b089      	sub	sp, #36	@ 0x24
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	e853 3f00 	ldrex	r3, [r3]
 800dbf8:	60bb      	str	r3, [r7, #8]
   return(result);
 800dbfa:	68bb      	ldr	r3, [r7, #8]
 800dbfc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800dc00:	61fb      	str	r3, [r7, #28]
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	461a      	mov	r2, r3
 800dc08:	69fb      	ldr	r3, [r7, #28]
 800dc0a:	61bb      	str	r3, [r7, #24]
 800dc0c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc0e:	6979      	ldr	r1, [r7, #20]
 800dc10:	69ba      	ldr	r2, [r7, #24]
 800dc12:	e841 2300 	strex	r3, r2, [r1]
 800dc16:	613b      	str	r3, [r7, #16]
   return(result);
 800dc18:	693b      	ldr	r3, [r7, #16]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d1e6      	bne.n	800dbec <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	2220      	movs	r2, #32
 800dc22:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800dc24:	bf00      	nop
 800dc26:	3724      	adds	r7, #36	@ 0x24
 800dc28:	46bd      	mov	sp, r7
 800dc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc2e:	4770      	bx	lr

0800dc30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800dc30:	b480      	push	{r7}
 800dc32:	b095      	sub	sp, #84	@ 0x54
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc40:	e853 3f00 	ldrex	r3, [r3]
 800dc44:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800dc46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc48:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dc4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	461a      	mov	r2, r3
 800dc54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dc56:	643b      	str	r3, [r7, #64]	@ 0x40
 800dc58:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc5a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800dc5c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dc5e:	e841 2300 	strex	r3, r2, [r1]
 800dc62:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800dc64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d1e6      	bne.n	800dc38 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	3308      	adds	r3, #8
 800dc70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc72:	6a3b      	ldr	r3, [r7, #32]
 800dc74:	e853 3f00 	ldrex	r3, [r3]
 800dc78:	61fb      	str	r3, [r7, #28]
   return(result);
 800dc7a:	69fb      	ldr	r3, [r7, #28]
 800dc7c:	f023 0301 	bic.w	r3, r3, #1
 800dc80:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	3308      	adds	r3, #8
 800dc88:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dc8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800dc8c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc8e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dc90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dc92:	e841 2300 	strex	r3, r2, [r1]
 800dc96:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dc98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d1e5      	bne.n	800dc6a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dca2:	2b01      	cmp	r3, #1
 800dca4:	d118      	bne.n	800dcd8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	e853 3f00 	ldrex	r3, [r3]
 800dcb2:	60bb      	str	r3, [r7, #8]
   return(result);
 800dcb4:	68bb      	ldr	r3, [r7, #8]
 800dcb6:	f023 0310 	bic.w	r3, r3, #16
 800dcba:	647b      	str	r3, [r7, #68]	@ 0x44
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	461a      	mov	r2, r3
 800dcc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dcc4:	61bb      	str	r3, [r7, #24]
 800dcc6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcc8:	6979      	ldr	r1, [r7, #20]
 800dcca:	69ba      	ldr	r2, [r7, #24]
 800dccc:	e841 2300 	strex	r3, r2, [r1]
 800dcd0:	613b      	str	r3, [r7, #16]
   return(result);
 800dcd2:	693b      	ldr	r3, [r7, #16]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d1e6      	bne.n	800dca6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	2220      	movs	r2, #32
 800dcdc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	2200      	movs	r2, #0
 800dce4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	2200      	movs	r2, #0
 800dcea:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800dcec:	bf00      	nop
 800dcee:	3754      	adds	r7, #84	@ 0x54
 800dcf0:	46bd      	mov	sp, r7
 800dcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf6:	4770      	bx	lr

0800dcf8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b090      	sub	sp, #64	@ 0x40
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd04:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	f003 0320 	and.w	r3, r3, #32
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d137      	bne.n	800dd84 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800dd14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd16:	2200      	movs	r2, #0
 800dd18:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800dd1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	3308      	adds	r3, #8
 800dd22:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd26:	e853 3f00 	ldrex	r3, [r3]
 800dd2a:	623b      	str	r3, [r7, #32]
   return(result);
 800dd2c:	6a3b      	ldr	r3, [r7, #32]
 800dd2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dd32:	63bb      	str	r3, [r7, #56]	@ 0x38
 800dd34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	3308      	adds	r3, #8
 800dd3a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dd3c:	633a      	str	r2, [r7, #48]	@ 0x30
 800dd3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd40:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800dd42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dd44:	e841 2300 	strex	r3, r2, [r1]
 800dd48:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800dd4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d1e5      	bne.n	800dd1c <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dd50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd56:	693b      	ldr	r3, [r7, #16]
 800dd58:	e853 3f00 	ldrex	r3, [r3]
 800dd5c:	60fb      	str	r3, [r7, #12]
   return(result);
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dd64:	637b      	str	r3, [r7, #52]	@ 0x34
 800dd66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	461a      	mov	r2, r3
 800dd6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd6e:	61fb      	str	r3, [r7, #28]
 800dd70:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd72:	69b9      	ldr	r1, [r7, #24]
 800dd74:	69fa      	ldr	r2, [r7, #28]
 800dd76:	e841 2300 	strex	r3, r2, [r1]
 800dd7a:	617b      	str	r3, [r7, #20]
   return(result);
 800dd7c:	697b      	ldr	r3, [r7, #20]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d1e6      	bne.n	800dd50 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800dd82:	e002      	b.n	800dd8a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800dd84:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800dd86:	f7ff f9ef 	bl	800d168 <HAL_UART_TxCpltCallback>
}
 800dd8a:	bf00      	nop
 800dd8c:	3740      	adds	r7, #64	@ 0x40
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	bd80      	pop	{r7, pc}

0800dd92 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800dd92:	b580      	push	{r7, lr}
 800dd94:	b084      	sub	sp, #16
 800dd96:	af00      	add	r7, sp, #0
 800dd98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd9e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800dda0:	68f8      	ldr	r0, [r7, #12]
 800dda2:	f7ff f9eb 	bl	800d17c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dda6:	bf00      	nop
 800dda8:	3710      	adds	r7, #16
 800ddaa:	46bd      	mov	sp, r7
 800ddac:	bd80      	pop	{r7, pc}

0800ddae <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ddae:	b580      	push	{r7, lr}
 800ddb0:	b09c      	sub	sp, #112	@ 0x70
 800ddb2:	af00      	add	r7, sp, #0
 800ddb4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ddba:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	f003 0320 	and.w	r3, r3, #32
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d171      	bne.n	800deae <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800ddca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ddcc:	2200      	movs	r2, #0
 800ddce:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ddd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ddda:	e853 3f00 	ldrex	r3, [r3]
 800ddde:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800dde0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dde2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800dde6:	66bb      	str	r3, [r7, #104]	@ 0x68
 800dde8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	461a      	mov	r2, r3
 800ddee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ddf0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ddf2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddf4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ddf6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ddf8:	e841 2300 	strex	r3, r2, [r1]
 800ddfc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ddfe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800de00:	2b00      	cmp	r3, #0
 800de02:	d1e6      	bne.n	800ddd2 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800de04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	3308      	adds	r3, #8
 800de0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de0e:	e853 3f00 	ldrex	r3, [r3]
 800de12:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800de14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de16:	f023 0301 	bic.w	r3, r3, #1
 800de1a:	667b      	str	r3, [r7, #100]	@ 0x64
 800de1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	3308      	adds	r3, #8
 800de22:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800de24:	647a      	str	r2, [r7, #68]	@ 0x44
 800de26:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de28:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800de2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800de2c:	e841 2300 	strex	r3, r2, [r1]
 800de30:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800de32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de34:	2b00      	cmp	r3, #0
 800de36:	d1e5      	bne.n	800de04 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800de38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	3308      	adds	r3, #8
 800de3e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de42:	e853 3f00 	ldrex	r3, [r3]
 800de46:	623b      	str	r3, [r7, #32]
   return(result);
 800de48:	6a3b      	ldr	r3, [r7, #32]
 800de4a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800de4e:	663b      	str	r3, [r7, #96]	@ 0x60
 800de50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	3308      	adds	r3, #8
 800de56:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800de58:	633a      	str	r2, [r7, #48]	@ 0x30
 800de5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de5c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800de5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800de60:	e841 2300 	strex	r3, r2, [r1]
 800de64:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800de66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d1e5      	bne.n	800de38 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800de6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800de6e:	2220      	movs	r2, #32
 800de70:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800de74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800de76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800de78:	2b01      	cmp	r3, #1
 800de7a:	d118      	bne.n	800deae <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800de7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de82:	693b      	ldr	r3, [r7, #16]
 800de84:	e853 3f00 	ldrex	r3, [r3]
 800de88:	60fb      	str	r3, [r7, #12]
   return(result);
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	f023 0310 	bic.w	r3, r3, #16
 800de90:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800de92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	461a      	mov	r2, r3
 800de98:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800de9a:	61fb      	str	r3, [r7, #28]
 800de9c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de9e:	69b9      	ldr	r1, [r7, #24]
 800dea0:	69fa      	ldr	r2, [r7, #28]
 800dea2:	e841 2300 	strex	r3, r2, [r1]
 800dea6:	617b      	str	r3, [r7, #20]
   return(result);
 800dea8:	697b      	ldr	r3, [r7, #20]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d1e6      	bne.n	800de7c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800deae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800deb0:	2200      	movs	r2, #0
 800deb2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800deb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800deb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800deb8:	2b01      	cmp	r3, #1
 800deba:	d107      	bne.n	800decc <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800debc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800debe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800dec2:	4619      	mov	r1, r3
 800dec4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800dec6:	f7ff f977 	bl	800d1b8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800deca:	e002      	b.n	800ded2 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800decc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800dece:	f7f6 ffe3 	bl	8004e98 <HAL_UART_RxCpltCallback>
}
 800ded2:	bf00      	nop
 800ded4:	3770      	adds	r7, #112	@ 0x70
 800ded6:	46bd      	mov	sp, r7
 800ded8:	bd80      	pop	{r7, pc}

0800deda <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800deda:	b580      	push	{r7, lr}
 800dedc:	b084      	sub	sp, #16
 800dede:	af00      	add	r7, sp, #0
 800dee0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dee6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	2201      	movs	r2, #1
 800deec:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800def2:	2b01      	cmp	r3, #1
 800def4:	d109      	bne.n	800df0a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800defc:	085b      	lsrs	r3, r3, #1
 800defe:	b29b      	uxth	r3, r3
 800df00:	4619      	mov	r1, r3
 800df02:	68f8      	ldr	r0, [r7, #12]
 800df04:	f7ff f958 	bl	800d1b8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800df08:	e002      	b.n	800df10 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800df0a:	68f8      	ldr	r0, [r7, #12]
 800df0c:	f7ff f940 	bl	800d190 <HAL_UART_RxHalfCpltCallback>
}
 800df10:	bf00      	nop
 800df12:	3710      	adds	r7, #16
 800df14:	46bd      	mov	sp, r7
 800df16:	bd80      	pop	{r7, pc}

0800df18 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800df18:	b580      	push	{r7, lr}
 800df1a:	b086      	sub	sp, #24
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df24:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800df26:	697b      	ldr	r3, [r7, #20]
 800df28:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800df2a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800df2c:	697b      	ldr	r3, [r7, #20]
 800df2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800df32:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800df34:	697b      	ldr	r3, [r7, #20]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	689b      	ldr	r3, [r3, #8]
 800df3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800df3e:	2b80      	cmp	r3, #128	@ 0x80
 800df40:	d109      	bne.n	800df56 <UART_DMAError+0x3e>
 800df42:	693b      	ldr	r3, [r7, #16]
 800df44:	2b21      	cmp	r3, #33	@ 0x21
 800df46:	d106      	bne.n	800df56 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800df48:	697b      	ldr	r3, [r7, #20]
 800df4a:	2200      	movs	r2, #0
 800df4c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800df50:	6978      	ldr	r0, [r7, #20]
 800df52:	f7ff fe47 	bl	800dbe4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800df56:	697b      	ldr	r3, [r7, #20]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	689b      	ldr	r3, [r3, #8]
 800df5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800df60:	2b40      	cmp	r3, #64	@ 0x40
 800df62:	d109      	bne.n	800df78 <UART_DMAError+0x60>
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	2b22      	cmp	r3, #34	@ 0x22
 800df68:	d106      	bne.n	800df78 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800df6a:	697b      	ldr	r3, [r7, #20]
 800df6c:	2200      	movs	r2, #0
 800df6e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800df72:	6978      	ldr	r0, [r7, #20]
 800df74:	f7ff fe5c 	bl	800dc30 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800df78:	697b      	ldr	r3, [r7, #20]
 800df7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800df7e:	f043 0210 	orr.w	r2, r3, #16
 800df82:	697b      	ldr	r3, [r7, #20]
 800df84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800df88:	6978      	ldr	r0, [r7, #20]
 800df8a:	f7ff f90b 	bl	800d1a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800df8e:	bf00      	nop
 800df90:	3718      	adds	r7, #24
 800df92:	46bd      	mov	sp, r7
 800df94:	bd80      	pop	{r7, pc}

0800df96 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800df96:	b580      	push	{r7, lr}
 800df98:	b084      	sub	sp, #16
 800df9a:	af00      	add	r7, sp, #0
 800df9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dfa2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	2200      	movs	r2, #0
 800dfa8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	2200      	movs	r2, #0
 800dfb0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dfb4:	68f8      	ldr	r0, [r7, #12]
 800dfb6:	f7ff f8f5 	bl	800d1a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dfba:	bf00      	nop
 800dfbc:	3710      	adds	r7, #16
 800dfbe:	46bd      	mov	sp, r7
 800dfc0:	bd80      	pop	{r7, pc}

0800dfc2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800dfc2:	b580      	push	{r7, lr}
 800dfc4:	b088      	sub	sp, #32
 800dfc6:	af00      	add	r7, sp, #0
 800dfc8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	e853 3f00 	ldrex	r3, [r3]
 800dfd6:	60bb      	str	r3, [r7, #8]
   return(result);
 800dfd8:	68bb      	ldr	r3, [r7, #8]
 800dfda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dfde:	61fb      	str	r3, [r7, #28]
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	461a      	mov	r2, r3
 800dfe6:	69fb      	ldr	r3, [r7, #28]
 800dfe8:	61bb      	str	r3, [r7, #24]
 800dfea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfec:	6979      	ldr	r1, [r7, #20]
 800dfee:	69ba      	ldr	r2, [r7, #24]
 800dff0:	e841 2300 	strex	r3, r2, [r1]
 800dff4:	613b      	str	r3, [r7, #16]
   return(result);
 800dff6:	693b      	ldr	r3, [r7, #16]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d1e6      	bne.n	800dfca <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	2220      	movs	r2, #32
 800e000:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	2200      	movs	r2, #0
 800e006:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e008:	6878      	ldr	r0, [r7, #4]
 800e00a:	f7ff f8ad 	bl	800d168 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e00e:	bf00      	nop
 800e010:	3720      	adds	r7, #32
 800e012:	46bd      	mov	sp, r7
 800e014:	bd80      	pop	{r7, pc}

0800e016 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e016:	b480      	push	{r7}
 800e018:	b083      	sub	sp, #12
 800e01a:	af00      	add	r7, sp, #0
 800e01c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e01e:	bf00      	nop
 800e020:	370c      	adds	r7, #12
 800e022:	46bd      	mov	sp, r7
 800e024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e028:	4770      	bx	lr

0800e02a <memset>:
 800e02a:	4402      	add	r2, r0
 800e02c:	4603      	mov	r3, r0
 800e02e:	4293      	cmp	r3, r2
 800e030:	d100      	bne.n	800e034 <memset+0xa>
 800e032:	4770      	bx	lr
 800e034:	f803 1b01 	strb.w	r1, [r3], #1
 800e038:	e7f9      	b.n	800e02e <memset+0x4>
	...

0800e03c <__libc_init_array>:
 800e03c:	b570      	push	{r4, r5, r6, lr}
 800e03e:	4d0d      	ldr	r5, [pc, #52]	@ (800e074 <__libc_init_array+0x38>)
 800e040:	4c0d      	ldr	r4, [pc, #52]	@ (800e078 <__libc_init_array+0x3c>)
 800e042:	1b64      	subs	r4, r4, r5
 800e044:	10a4      	asrs	r4, r4, #2
 800e046:	2600      	movs	r6, #0
 800e048:	42a6      	cmp	r6, r4
 800e04a:	d109      	bne.n	800e060 <__libc_init_array+0x24>
 800e04c:	4d0b      	ldr	r5, [pc, #44]	@ (800e07c <__libc_init_array+0x40>)
 800e04e:	4c0c      	ldr	r4, [pc, #48]	@ (800e080 <__libc_init_array+0x44>)
 800e050:	f000 f818 	bl	800e084 <_init>
 800e054:	1b64      	subs	r4, r4, r5
 800e056:	10a4      	asrs	r4, r4, #2
 800e058:	2600      	movs	r6, #0
 800e05a:	42a6      	cmp	r6, r4
 800e05c:	d105      	bne.n	800e06a <__libc_init_array+0x2e>
 800e05e:	bd70      	pop	{r4, r5, r6, pc}
 800e060:	f855 3b04 	ldr.w	r3, [r5], #4
 800e064:	4798      	blx	r3
 800e066:	3601      	adds	r6, #1
 800e068:	e7ee      	b.n	800e048 <__libc_init_array+0xc>
 800e06a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e06e:	4798      	blx	r3
 800e070:	3601      	adds	r6, #1
 800e072:	e7f2      	b.n	800e05a <__libc_init_array+0x1e>
 800e074:	0800e0f4 	.word	0x0800e0f4
 800e078:	0800e0f4 	.word	0x0800e0f4
 800e07c:	0800e0f4 	.word	0x0800e0f4
 800e080:	0800e114 	.word	0x0800e114

0800e084 <_init>:
 800e084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e086:	bf00      	nop
 800e088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e08a:	bc08      	pop	{r3}
 800e08c:	469e      	mov	lr, r3
 800e08e:	4770      	bx	lr

0800e090 <_fini>:
 800e090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e092:	bf00      	nop
 800e094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e096:	bc08      	pop	{r3}
 800e098:	469e      	mov	lr, r3
 800e09a:	4770      	bx	lr
